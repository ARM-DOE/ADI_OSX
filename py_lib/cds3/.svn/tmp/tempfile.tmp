/* Generated by Cython 0.18 on Wed Dec  4 01:16:42 2013 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define __Pyx_PyIndex_Check(o) (PyNumber_Check(o) && !PyFloat_Check(o) && \
                                  !PyComplex_Check(o))
  #define PyIndex_Check __Pyx_PyIndex_Check
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
  #define __Pyx_PyIndex_Check PyIndex_Check
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#if PY_MAJOR_VERSION < 3 && PY_MINOR_VERSION < 6
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((k=k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__cds3__core
#define __PYX_HAVE_API__cds3__core
#include "string.h"
#include "stdio.h"
#include "stddef.h"
#include "stdarg.h"
#include "sys/types.h"
#include "sys/time.h"
#include "cds3.h"
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "core.pyx",
  "numpy.pxd",
  "type.pxd",
};

/* "numpy.pxd":723
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */

#line 723 "numpy.pxd"
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "numpy.pxd":724
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */

#line 724 "numpy.pxd"
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "numpy.pxd":725
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */

#line 725 "numpy.pxd"
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "numpy.pxd":726
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */

#line 726 "numpy.pxd"
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "numpy.pxd":730
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */

#line 730 "numpy.pxd"
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "numpy.pxd":731
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */

#line 731 "numpy.pxd"
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "numpy.pxd":732
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */

#line 732 "numpy.pxd"
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "numpy.pxd":733
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */

#line 733 "numpy.pxd"
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "numpy.pxd":737
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */

#line 737 "numpy.pxd"
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "numpy.pxd":738
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */

#line 738 "numpy.pxd"
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "numpy.pxd":747
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */

#line 747 "numpy.pxd"
typedef npy_long __pyx_t_5numpy_int_t;

/* "numpy.pxd":748
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */

#line 748 "numpy.pxd"
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "numpy.pxd":749
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */

#line 749 "numpy.pxd"
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "numpy.pxd":751
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */

#line 751 "numpy.pxd"
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "numpy.pxd":752
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */

#line 752 "numpy.pxd"
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "numpy.pxd":753
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */

#line 753 "numpy.pxd"
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "numpy.pxd":755
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */

#line 755 "numpy.pxd"
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "numpy.pxd":756
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */

#line 756 "numpy.pxd"
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "numpy.pxd":758
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */

#line 758 "numpy.pxd"
typedef npy_double __pyx_t_5numpy_float_t;

/* "numpy.pxd":759
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */

#line 759 "numpy.pxd"
typedef npy_double __pyx_t_5numpy_double_t;

/* "numpy.pxd":760
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */

#line 760 "numpy.pxd"
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif


/*--- Type declarations ---*/
struct __pyx_obj_4cds3_4core_Object;
struct __pyx_obj_4cds3_4core_Dim;
struct __pyx_obj_4cds3_4core_Var;
struct __pyx_obj_4cds3_4core_Att;
struct __pyx_obj_4cds3_4core_Group;
struct __pyx_obj_4cds3_4core_VarArray;
struct __pyx_obj_4cds3_4core_VarGroup;

/* "numpy.pxd":762
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */

#line 762 "numpy.pxd"
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "numpy.pxd":763
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */

#line 763 "numpy.pxd"
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "numpy.pxd":764
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */

#line 764 "numpy.pxd"
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "numpy.pxd":766
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */

#line 766 "numpy.pxd"
typedef npy_cdouble __pyx_t_5numpy_complex_t;

#line 766 "numpy.pxd"
struct __pyx_opt_args_4cds3_4core_3Var_get_datap;

/* "cds3/core.pxd":25
 *     cdef CDSVar *c_ob
 *     cdef set_var(self, CDSVar *obj)
 *     cpdef np.ndarray get_datap(self, size_t sample_start=*)             # <<<<<<<<<<<<<<
 * 
 * cdef class VarGroup(Object):
 */

#line 25 "cds3/core.pxd"
struct __pyx_opt_args_4cds3_4core_3Var_get_datap {

#line 25 "cds3/core.pxd"
  int __pyx_n;

#line 25 "cds3/core.pxd"
  size_t sample_start;

#line 25 "cds3/core.pxd"
};

/* "cds3/core.pxd":6
 * cimport numpy as np
 * 
 * cdef class Object:             # <<<<<<<<<<<<<<
 *     cdef CDSObject *cds_object
 *     cdef set_object(self, CDSObject *obj)
 */

#line 6 "cds3/core.pxd"
struct __pyx_obj_4cds3_4core_Object {

#line 6 "cds3/core.pxd"
  PyObject_HEAD

#line 6 "cds3/core.pxd"
  struct __pyx_vtabstruct_4cds3_4core_Object *__pyx_vtab;

#line 6 "cds3/core.pxd"
  struct CDSObject *cds_object;

#line 6 "cds3/core.pxd"
};

#line 6 "cds3/core.pxd"


/* "cds3/core.pxd":14
 *     cdef set_group(self, CDSGroup *obj)
 * 
 * cdef class Dim(Object):             # <<<<<<<<<<<<<<
 *     cdef CDSDim *c_ob
 *     cdef set_dim(self, CDSDim *obj)
 */

#line 14 "cds3/core.pxd"
struct __pyx_obj_4cds3_4core_Dim {

#line 14 "cds3/core.pxd"
  struct __pyx_obj_4cds3_4core_Object __pyx_base;

#line 14 "cds3/core.pxd"
  struct CDSDim *c_ob;

#line 14 "cds3/core.pxd"
};

#line 14 "cds3/core.pxd"


/* "cds3/core.pxd":22
 *     cdef set_att(self, CDSAtt *obj)
 * 
 * cdef class Var(Object):             # <<<<<<<<<<<<<<
 *     cdef CDSVar *c_ob
 *     cdef set_var(self, CDSVar *obj)
 */

#line 22 "cds3/core.pxd"
struct __pyx_obj_4cds3_4core_Var {

#line 22 "cds3/core.pxd"
  struct __pyx_obj_4cds3_4core_Object __pyx_base;

#line 22 "cds3/core.pxd"
  struct CDSVar *c_ob;

#line 22 "cds3/core.pxd"
};

#line 22 "cds3/core.pxd"


/* "cds3/core.pxd":18
 *     cdef set_dim(self, CDSDim *obj)
 * 
 * cdef class Att(Object):             # <<<<<<<<<<<<<<
 *     cdef CDSAtt *c_ob
 *     cdef set_att(self, CDSAtt *obj)
 */

#line 18 "cds3/core.pxd"
struct __pyx_obj_4cds3_4core_Att {

#line 18 "cds3/core.pxd"
  struct __pyx_obj_4cds3_4core_Object __pyx_base;

#line 18 "cds3/core.pxd"
  struct CDSAtt *c_ob;

#line 18 "cds3/core.pxd"
};

#line 18 "cds3/core.pxd"


/* "cds3/core.pxd":10
 *     cdef set_object(self, CDSObject *obj)
 * 
 * cdef class Group(Object):             # <<<<<<<<<<<<<<
 *     cdef CDSGroup *c_ob
 *     cdef set_group(self, CDSGroup *obj)
 */

#line 10 "cds3/core.pxd"
struct __pyx_obj_4cds3_4core_Group {

#line 10 "cds3/core.pxd"
  struct __pyx_obj_4cds3_4core_Object __pyx_base;

#line 10 "cds3/core.pxd"
  struct CDSGroup *c_ob;

#line 10 "cds3/core.pxd"
};

#line 10 "cds3/core.pxd"


/* "cds3/core.pxd":31
 *     cdef set_vargroup(self, CDSVarGroup *obj)
 * 
 * cdef class VarArray(Object):             # <<<<<<<<<<<<<<
 *     cdef CDSVarArray *c_ob
 *     cdef set_vararray(self, CDSVarArray *obj)
 */

#line 31 "cds3/core.pxd"
struct __pyx_obj_4cds3_4core_VarArray {

#line 31 "cds3/core.pxd"
  struct __pyx_obj_4cds3_4core_Object __pyx_base;

#line 31 "cds3/core.pxd"
  struct CDSVarArray *c_ob;

#line 31 "cds3/core.pxd"
};

#line 31 "cds3/core.pxd"


/* "cds3/core.pxd":27
 *     cpdef np.ndarray get_datap(self, size_t sample_start=*)
 * 
 * cdef class VarGroup(Object):             # <<<<<<<<<<<<<<
 *     cdef CDSVarGroup *c_ob
 *     cdef set_vargroup(self, CDSVarGroup *obj)
 */

#line 27 "cds3/core.pxd"
struct __pyx_obj_4cds3_4core_VarGroup {

#line 27 "cds3/core.pxd"
  struct __pyx_obj_4cds3_4core_Object __pyx_base;

#line 27 "cds3/core.pxd"
  struct CDSVarGroup *c_ob;

#line 27 "cds3/core.pxd"
};

#line 27 "cds3/core.pxd"


#line 27 "cds3/core.pxd"


/* "cds3/core.pyx":242
 * 
 * 
 * cdef class Object:             # <<<<<<<<<<<<<<
 *     """CDSObject"""
 * 
 */

#line 242 "cds3/core.pyx"


#line 242 "cds3/core.pyx"
struct __pyx_vtabstruct_4cds3_4core_Object {

#line 242 "cds3/core.pyx"
  PyObject *(*set_object)(struct __pyx_obj_4cds3_4core_Object *, struct CDSObject *);

#line 242 "cds3/core.pyx"
};

#line 242 "cds3/core.pyx"
static struct __pyx_vtabstruct_4cds3_4core_Object *__pyx_vtabptr_4cds3_4core_Object;

#line 242 "cds3/core.pyx"


/* "cds3/core.pyx":342
 * 
 * 
 * cdef class Group(Object):             # <<<<<<<<<<<<<<
 *     """CDSGroup"""
 * 
 */

#line 342 "cds3/core.pyx"


#line 342 "cds3/core.pyx"
struct __pyx_vtabstruct_4cds3_4core_Group {

#line 342 "cds3/core.pyx"
  struct __pyx_vtabstruct_4cds3_4core_Object __pyx_base;

#line 342 "cds3/core.pyx"
  PyObject *(*set_group)(struct __pyx_obj_4cds3_4core_Group *, struct CDSGroup *);

#line 342 "cds3/core.pyx"
};

#line 342 "cds3/core.pyx"
static struct __pyx_vtabstruct_4cds3_4core_Group *__pyx_vtabptr_4cds3_4core_Group;

#line 342 "cds3/core.pyx"


/* "cds3/core.pyx":1088
 * 
 * 
 * cdef class Var(Object):             # <<<<<<<<<<<<<<
 *     """CDSVar"""
 * 
 */

#line 1088 "cds3/core.pyx"


#line 1088 "cds3/core.pyx"
struct __pyx_vtabstruct_4cds3_4core_Var {

#line 1088 "cds3/core.pyx"
  struct __pyx_vtabstruct_4cds3_4core_Object __pyx_base;

#line 1088 "cds3/core.pyx"
  PyObject *(*set_var)(struct __pyx_obj_4cds3_4core_Var *, struct CDSVar *);

#line 1088 "cds3/core.pyx"
  PyArrayObject *(*get_datap)(struct __pyx_obj_4cds3_4core_Var *, int __pyx_skip_dispatch, struct __pyx_opt_args_4cds3_4core_3Var_get_datap *__pyx_optional_args);

#line 1088 "cds3/core.pyx"
};

#line 1088 "cds3/core.pyx"
static struct __pyx_vtabstruct_4cds3_4core_Var *__pyx_vtabptr_4cds3_4core_Var;

#line 1088 "cds3/core.pyx"


/* "cds3/core.pyx":879
 * 
 * 
 * cdef class Att(Object):             # <<<<<<<<<<<<<<
 *     """CDSAtt"""
 * 
 */

#line 879 "cds3/core.pyx"


#line 879 "cds3/core.pyx"
struct __pyx_vtabstruct_4cds3_4core_Att {

#line 879 "cds3/core.pyx"
  struct __pyx_vtabstruct_4cds3_4core_Object __pyx_base;

#line 879 "cds3/core.pyx"
  PyObject *(*set_att)(struct __pyx_obj_4cds3_4core_Att *, struct CDSAtt *);

#line 879 "cds3/core.pyx"
};

#line 879 "cds3/core.pyx"
static struct __pyx_vtabstruct_4cds3_4core_Att *__pyx_vtabptr_4cds3_4core_Att;

#line 879 "cds3/core.pyx"


/* "cds3/core.pyx":760
 * 
 * 
 * cdef class Dim(Object):             # <<<<<<<<<<<<<<
 *     """CDSDim"""
 * 
 */

#line 760 "cds3/core.pyx"


#line 760 "cds3/core.pyx"
struct __pyx_vtabstruct_4cds3_4core_Dim {

#line 760 "cds3/core.pyx"
  struct __pyx_vtabstruct_4cds3_4core_Object __pyx_base;

#line 760 "cds3/core.pyx"
  PyObject *(*set_dim)(struct __pyx_obj_4cds3_4core_Dim *, struct CDSDim *);

#line 760 "cds3/core.pyx"
};

#line 760 "cds3/core.pyx"
static struct __pyx_vtabstruct_4cds3_4core_Dim *__pyx_vtabptr_4cds3_4core_Dim;

#line 760 "cds3/core.pyx"


/* "cds3/core.pyx":1649
 * 
 * 
 * cdef class VarArray(Object):             # <<<<<<<<<<<<<<
 *     """CDSVarArray"""
 * 
 */

#line 1649 "cds3/core.pyx"


#line 1649 "cds3/core.pyx"
struct __pyx_vtabstruct_4cds3_4core_VarArray {

#line 1649 "cds3/core.pyx"
  struct __pyx_vtabstruct_4cds3_4core_Object __pyx_base;

#line 1649 "cds3/core.pyx"
  PyObject *(*set_vararray)(struct __pyx_obj_4cds3_4core_VarArray *, struct CDSVarArray *);

#line 1649 "cds3/core.pyx"
};

#line 1649 "cds3/core.pyx"
static struct __pyx_vtabstruct_4cds3_4core_VarArray *__pyx_vtabptr_4cds3_4core_VarArray;

#line 1649 "cds3/core.pyx"


/* "cds3/core.pyx":1632
 * 
 * 
 * cdef class VarGroup(Object):             # <<<<<<<<<<<<<<
 *     """CDSVarGroup"""
 * 
 */

#line 1632 "cds3/core.pyx"


#line 1632 "cds3/core.pyx"
struct __pyx_vtabstruct_4cds3_4core_VarGroup {

#line 1632 "cds3/core.pyx"
  struct __pyx_vtabstruct_4cds3_4core_Object __pyx_base;

#line 1632 "cds3/core.pyx"
  PyObject *(*set_vargroup)(struct __pyx_obj_4cds3_4core_VarGroup *, struct CDSVarGroup *);

#line 1632 "cds3/core.pyx"
};

#line 1632 "cds3/core.pyx"
static struct __pyx_vtabstruct_4cds3_4core_VarGroup *__pyx_vtabptr_4cds3_4core_VarGroup;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed); /*proto*/

static CYTHON_INLINE int __Pyx_PySequence_Contains(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
#define __Pyx_GetItemInt_List(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_List_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
        PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Tuple_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
        PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
#define __Pyx_GetItemInt(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (PyList_CheckExact(o)) {
        Py_ssize_t n = (likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if (likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = (likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if (likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {  /* inlined PySequence_GetItem() */
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (unlikely(l < 0)) return NULL;
                i += l;
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static CYTHON_INLINE int __Pyx_IterFinish(void); /*proto*/

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected); /*proto*/

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level); /*proto*/

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(_WIN32) && defined(__cplusplus) && CYTHON_CCOMPLEX
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename); /*proto*/

static int __Pyx_check_binary_version(void);

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);  /*proto*/

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'libc.stddef' */

/* Module declarations from 'cds3.ccds3_enums' */

/* Module declarations from 'cds3.ccds3' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.object' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'cds3.core' */
static PyTypeObject *__pyx_ptype_4cds3_4core_Object = 0;
static PyTypeObject *__pyx_ptype_4cds3_4core_Group = 0;
static PyTypeObject *__pyx_ptype_4cds3_4core_Dim = 0;
static PyTypeObject *__pyx_ptype_4cds3_4core_Att = 0;
static PyTypeObject *__pyx_ptype_4cds3_4core_Var = 0;
static PyTypeObject *__pyx_ptype_4cds3_4core_VarGroup = 0;
static PyTypeObject *__pyx_ptype_4cds3_4core_VarArray = 0;
static CYTHON_INLINE int __pyx_f_4cds3_4core_cds_type_to_dtype(CDSDataType); /*proto*/
static CYTHON_INLINE PyArray_Descr *__pyx_f_4cds3_4core_cds_type_to_dtype_obj(CDSDataType); /*proto*/
static void __pyx_f_4cds3_4core__free(void *); /*proto*/
static CYTHON_INLINE struct __pyx_obj_4cds3_4core_Att *__pyx_f_4cds3_4core__change_att(void *, int, char *, CDSDataType, PyObject *); /*proto*/
static CYTHON_INLINE struct __pyx_obj_4cds3_4core_Att *__pyx_f_4cds3_4core__define_att(void *, char *, CDSDataType, PyObject *); /*proto*/
static CYTHON_INLINE struct __pyx_obj_4cds3_4core_Att *__pyx_f_4cds3_4core__define_att_text(void *, char *, char *); /*proto*/
static CYTHON_INLINE struct __pyx_obj_4cds3_4core_Att *__pyx_f_4cds3_4core__get_att(void *, char *); /*proto*/
static CYTHON_INLINE struct __pyx_obj_4cds3_4core_Att *__pyx_f_4cds3_4core__set_att(void *, int, char *, CDSDataType, PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "cds3.core"
int __pyx_module_is_main_cds3__core = 0;

/* Implementation of 'cds3.core' */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_basestring;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_RuntimeError;
static int __pyx_pf_4cds3_4core_6Object___cinit__(struct __pyx_obj_4cds3_4core_Object *__pyx_v_self); /* proto */
static int __pyx_pf_4cds3_4core_6Object_2__init__(struct __pyx_obj_4cds3_4core_Object *__pyx_v_self); /* proto */
static void __pyx_pf_4cds3_4core_6Object_4__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_Object *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_6Object_6get_name(struct __pyx_obj_4cds3_4core_Object *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_6Object_8get_path(struct __pyx_obj_4cds3_4core_Object *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_6Object_10set_definition_lock(struct __pyx_obj_4cds3_4core_Object *__pyx_v_self, int __pyx_v_value); /* proto */
static PyObject *__pyx_pf_4cds3_4core_6Object_12delete_user_data(struct __pyx_obj_4cds3_4core_Object *__pyx_v_self, char *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_4cds3_4core_6Object_14get_user_data(struct __pyx_obj_4cds3_4core_Object *__pyx_v_self, char *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_4cds3_4core_6Object_16set_user_data(struct __pyx_obj_4cds3_4core_Object *__pyx_v_self, char *__pyx_v_key, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4cds3_4core_6Object_18get_user_data_dict(struct __pyx_obj_4cds3_4core_Object *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_6Object_20get_parent(struct __pyx_obj_4cds3_4core_Object *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_6Object_22get_obj_type(struct __pyx_obj_4cds3_4core_Object *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_6Object_24get_def_lock(struct __pyx_obj_4cds3_4core_Object *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_5Group_define(struct __pyx_obj_4cds3_4core_Group *__pyx_v_parent, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_4cds3_4core_5Group_2delete(struct __pyx_obj_4cds3_4core_Group *__pyx_v_group); /* proto */
static int __pyx_pf_4cds3_4core_5Group_4__cinit__(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self); /* proto */
static int __pyx_pf_4cds3_4core_5Group_6__init__(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_Group *__pyx_v_self); /* proto */
static void __pyx_pf_4cds3_4core_5Group_8__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_Group *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_5Group_10get_ndims(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_5Group_12get_dims(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_5Group_14get_natts(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_5Group_16get_atts(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_5Group_18get_nvars(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_5Group_20get_vars(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_5Group_22get_ngroups(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_5Group_24get_groups(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_5Group_26get_nvargroups(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_5Group_28get_vargroups(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_5Group_30rename(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_4cds3_4core_5Group_32define_dim(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self, char *__pyx_v_name, size_t __pyx_v_length, int __pyx_v_is_unlimited); /* proto */
static PyObject *__pyx_pf_4cds3_4core_5Group_34get_dim(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_4cds3_4core_5Group_36change_att(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self, int __pyx_v_overwrite, char *__pyx_v_name, CDSDataType __pyx_v_type, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4cds3_4core_5Group_38define_att(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self, char *__pyx_v_name, CDSDataType __pyx_v_type, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4cds3_4core_5Group_40define_att_text(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self, char *__pyx_v_name, char *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_4cds3_4core_5Group_42get_att(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_4cds3_4core_5Group_44set_att(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self, int __pyx_v_overwrite, char *__pyx_v_name, CDSDataType __pyx_v_type, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4cds3_4core_5Group_46define_var(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self, char *__pyx_v_name, CDSDataType __pyx_v_type, PyObject *__pyx_v_dim_names); /* proto */
static PyObject *__pyx_pf_4cds3_4core_5Group_48get_var(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_4cds3_4core_5Group_50get_group(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_4cds3_4core_5Group_52reset_sample_counts(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self, int __pyx_v_unlim_vars, int __pyx_v_static_vars); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Dim_delete(struct __pyx_obj_4cds3_4core_Dim *__pyx_v_dim); /* proto */
static int __pyx_pf_4cds3_4core_3Dim_2__cinit__(struct __pyx_obj_4cds3_4core_Dim *__pyx_v_self); /* proto */
static int __pyx_pf_4cds3_4core_3Dim_4__init__(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_Dim *__pyx_v_self); /* proto */
static void __pyx_pf_4cds3_4core_3Dim_6__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_Dim *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Dim_8get_length(struct __pyx_obj_4cds3_4core_Dim *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Dim_10is_unlimited(struct __pyx_obj_4cds3_4core_Dim *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Dim_12change_length(struct __pyx_obj_4cds3_4core_Dim *__pyx_v_self, size_t __pyx_v_length); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Dim_14get_var(struct __pyx_obj_4cds3_4core_Dim *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Dim_16rename(struct __pyx_obj_4cds3_4core_Dim *__pyx_v_self, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Att_delete(struct __pyx_obj_4cds3_4core_Att *__pyx_v_att); /* proto */
static int __pyx_pf_4cds3_4core_3Att_2__cinit__(struct __pyx_obj_4cds3_4core_Att *__pyx_v_self); /* proto */
static int __pyx_pf_4cds3_4core_3Att_4__init__(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_Att *__pyx_v_self); /* proto */
static void __pyx_pf_4cds3_4core_3Att_6__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_Att *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Att_8get_type(struct __pyx_obj_4cds3_4core_Att *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Att_10get_length(struct __pyx_obj_4cds3_4core_Att *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Att_12change_text(struct __pyx_obj_4cds3_4core_Att *__pyx_v_self, char *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Att_14change_value(struct __pyx_obj_4cds3_4core_Att *__pyx_v_self, CDSDataType __pyx_v_type, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Att_16get_text(struct __pyx_obj_4cds3_4core_Att *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Att_18get_value(struct __pyx_obj_4cds3_4core_Att *__pyx_v_self, CDSDataType __pyx_v_type); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Att_20rename(struct __pyx_obj_4cds3_4core_Att *__pyx_v_self, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Att_22set_text(struct __pyx_obj_4cds3_4core_Att *__pyx_v_self, PyObject *__pyx_v_text); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Att_24set_value(struct __pyx_obj_4cds3_4core_Att *__pyx_v_self, CDSDataType __pyx_v_type, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_delete(struct __pyx_obj_4cds3_4core_Var *__pyx_v_var); /* proto */
static int __pyx_pf_4cds3_4core_3Var_2__cinit__(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self); /* proto */
static int __pyx_pf_4cds3_4core_3Var_4__init__(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_Var *__pyx_v_self); /* proto */
static void __pyx_pf_4cds3_4core_3Var_6__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_Var *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_8get_type(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_10get_ndims(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_12get_dims(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_14get_natts(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_16get_atts(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_18get_sample_count(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_12sample_count___get__(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_20get_alloc_count(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_22get_default_fill(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_24get_coord_var(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, int __pyx_v_dim_index); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_26rename(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_28is_unlimited(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_30has_dim(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_32get_sample_size(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_34alloc_data(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, size_t __pyx_v_sample_start, size_t __pyx_v_sample_count); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_36alloc_data_index(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, size_t __pyx_v_sample_start, size_t __pyx_v_sample_count); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_38change_type(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, CDSDataType __pyx_v_type); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_40change_units(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, CDSDataType __pyx_v_type, char *__pyx_v_units); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_42create_data_index(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_44delete_data(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_46get_data(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, CDSDataType __pyx_v_type, size_t __pyx_v_sample_start); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_48get_datap(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, size_t __pyx_v_sample_start); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_50get_missing_values(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_Var *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_52get_units(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_54init_data(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, CYTHON_UNUSED size_t __pyx_v_sample_start, CYTHON_UNUSED size_t __pyx_v_sample_count, CYTHON_UNUSED int __pyx_v_use_missing); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_56init_data_index(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, size_t __pyx_v_sample_start, size_t __pyx_v_sample_count, int __pyx_v_use_missing); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_58set_default_fill_value(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_fill_value); /* proto */
static PyObject *__pyx_pf_4cds3_4core_3Var_60set_data(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, CYTHON_UNUSED CDSDataType __pyx_v_type, CYTHON_UNUSED size_t __pyx_v_sample_start, CYTHON_UNUSED size_t __pyx_v_sample_count, CYTHON_UNUSED PyObject *__pyx_v_missing_value, CYTHON_UNUSED PyObject *__pyx_v_data); /* proto */
static int __pyx_pf_4cds3_4core_8VarGroup___cinit__(struct __pyx_obj_4cds3_4core_VarGroup *__pyx_v_self); /* proto */
static int __pyx_pf_4cds3_4core_8VarGroup_2__init__(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_VarGroup *__pyx_v_self); /* proto */
static void __pyx_pf_4cds3_4core_8VarGroup_4__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_VarGroup *__pyx_v_self); /* proto */
static int __pyx_pf_4cds3_4core_8VarArray___cinit__(struct __pyx_obj_4cds3_4core_VarArray *__pyx_v_self); /* proto */
static int __pyx_pf_4cds3_4core_8VarArray_2__init__(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_VarArray *__pyx_v_self); /* proto */
static void __pyx_pf_4cds3_4core_8VarArray_4__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_VarArray *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4cds3_4core_print_all(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, struct __pyx_obj_4cds3_4core_Group *__pyx_v_group, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4cds3_4core_2print_att(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, char *__pyx_v_indent, int __pyx_v_min_width, struct __pyx_obj_4cds3_4core_Att *__pyx_v_att); /* proto */
static PyObject *__pyx_pf_4cds3_4core_4print_atts(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, char *__pyx_v_indent, struct __pyx_obj_4cds3_4core_Object *__pyx_v_parent); /* proto */
static PyObject *__pyx_pf_4cds3_4core_6print_dim(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, char *__pyx_v_indent, int __pyx_v_min_width, struct __pyx_obj_4cds3_4core_Dim *__pyx_v_dim); /* proto */
static PyObject *__pyx_pf_4cds3_4core_8print_dims(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, char *__pyx_v_indent, struct __pyx_obj_4cds3_4core_Group *__pyx_v_group); /* proto */
static PyObject *__pyx_pf_4cds3_4core_10print_var(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, char *__pyx_v_indent, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4cds3_4core_12print_vars(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, char *__pyx_v_indent, struct __pyx_obj_4cds3_4core_Group *__pyx_v_group, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4cds3_4core_14print_var_data(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, char *__pyx_v_label, char *__pyx_v_indent, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var); /* proto */
static PyObject *__pyx_pf_4cds3_4core_16print_data(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, char *__pyx_v_indent, struct __pyx_obj_4cds3_4core_Group *__pyx_v_group); /* proto */
static PyObject *__pyx_pf_4cds3_4core_18print_group(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, char *__pyx_v_indent, struct __pyx_obj_4cds3_4core_Group *__pyx_v_group, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4cds3_4core_20print_groups(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, char *__pyx_v_indent, struct __pyx_obj_4cds3_4core_Group *__pyx_v_group, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4cds3_4core_22print_vararray(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, char *__pyx_v_indent, struct __pyx_obj_4cds3_4core_VarArray *__pyx_v_vararray, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4cds3_4core_24print_vargroup(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, char *__pyx_v_indent, struct __pyx_obj_4cds3_4core_VarGroup *__pyx_v_vargroup, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_4cds3_4core_26print_vargroups(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, char *__pyx_v_indent, struct __pyx_obj_4cds3_4core_Group *__pyx_v_group, int __pyx_v_flags); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static char __pyx_k_1[] = "Unknown CDSDataType %s";
static char __pyx_k_2[] = "CDSObjectType not recognized";
static char __pyx_k_3[] = "Unknown CDSDataType";
static char __pyx_k_5[] = "ndarray is not C contiguous";
static char __pyx_k_7[] = "ndarray is not Fortran contiguous";
static char __pyx_k_9[] = "Non-native byte order not supported";
static char __pyx_k_11[] = "unknown dtype code in numpy.pxd (%d)";
static char __pyx_k_12[] = "Format string allocated too short, see comment in numpy.pxd";
static char __pyx_k_15[] = "Format string allocated too short.";
static char __pyx_k_19[] = "/home/gaustad/dev/dslib/src/py_lib/cds3/core.pyx";
static char __pyx_k_20[] = "cds3.core";
static char __pyx_k__B[] = "B";
static char __pyx_k__H[] = "H";
static char __pyx_k__I[] = "I";
static char __pyx_k__L[] = "L";
static char __pyx_k__O[] = "O";
static char __pyx_k__Q[] = "Q";
static char __pyx_k__b[] = "b";
static char __pyx_k__d[] = "d";
static char __pyx_k__f[] = "f";
static char __pyx_k__g[] = "g";
static char __pyx_k__h[] = "h";
static char __pyx_k__i[] = "i";
static char __pyx_k__l[] = "l";
static char __pyx_k__q[] = "q";
static char __pyx_k__w[] = "w";
static char __pyx_k__Zd[] = "Zd";
static char __pyx_k__Zf[] = "Zf";
static char __pyx_k__Zg[] = "Zg";
static char __pyx_k__fd[] = "fd";
static char __pyx_k__fp[] = "fp";
static char __pyx_k__np[] = "np";
static char __pyx_k__att[] = "att";
static char __pyx_k__dim[] = "dim";
static char __pyx_k__get[] = "get";
static char __pyx_k__key[] = "key";
static char __pyx_k__num[] = "num";
static char __pyx_k__str[] = "str";
static char __pyx_k__var[] = "var";
static char __pyx_k__TODO[] = "TODO";
static char __pyx_k__data[] = "data";
static char __pyx_k__int8[] = "int8";
static char __pyx_k__name[] = "name";
static char __pyx_k__text[] = "text";
static char __pyx_k__type[] = "type";
static char __pyx_k__flags[] = "flags";
static char __pyx_k__flush[] = "flush";
static char __pyx_k__group[] = "group";
static char __pyx_k__int16[] = "int16";
static char __pyx_k__int32[] = "int32";
static char __pyx_k__label[] = "label";
static char __pyx_k__numpy[] = "numpy";
static char __pyx_k__range[] = "range";
static char __pyx_k__units[] = "units";
static char __pyx_k__value[] = "value";
static char __pyx_k__define[] = "define";
static char __pyx_k__delete[] = "delete";
static char __pyx_k__fileno[] = "fileno";
static char __pyx_k__indent[] = "indent";
static char __pyx_k__length[] = "length";
static char __pyx_k__parent[] = "parent";
static char __pyx_k__retval[] = "retval";
static char __pyx_k__CDS_NAT[] = "CDS_NAT";
static char __pyx_k__asarray[] = "asarray";
static char __pyx_k__float32[] = "float32";
static char __pyx_k__float64[] = "float64";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__vararray[] = "vararray";
static char __pyx_k__vargroup[] = "vargroup";
static char __pyx_k__cds_group[] = "cds_group";
static char __pyx_k__dim_names[] = "dim_names";
static char __pyx_k__file_like[] = "file_like";
static char __pyx_k__get_datap[] = "get_datap";
static char __pyx_k__min_width[] = "min_width";
static char __pyx_k__overwrite[] = "overwrite";
static char __pyx_k__print_all[] = "print_all";
static char __pyx_k__print_att[] = "print_att";
static char __pyx_k__print_dim[] = "print_dim";
static char __pyx_k__print_var[] = "print_var";
static char __pyx_k__user_data[] = "user_data";
static char __pyx_k__ValueError[] = "ValueError";
static char __pyx_k__basestring[] = "basestring";
static char __pyx_k__print_atts[] = "print_atts";
static char __pyx_k__print_data[] = "print_data";
static char __pyx_k__print_dims[] = "print_dims";
static char __pyx_k__print_vars[] = "print_vars";
static char __pyx_k__unlim_vars[] = "unlim_vars";
static char __pyx_k__print_group[] = "print_group";
static char __pyx_k__static_vars[] = "static_vars";
static char __pyx_k__use_missing[] = "use_missing";
static char __pyx_k__RuntimeError[] = "RuntimeError";
static char __pyx_k__is_unlimited[] = "is_unlimited";
static char __pyx_k__print_groups[] = "print_groups";
static char __pyx_k__sample_count[] = "sample_count";
static char __pyx_k__sample_start[] = "sample_start";
static char __pyx_k__staticmethod[] = "staticmethod";
static char __pyx_k__missing_value[] = "missing_value";
static char __pyx_k__print_var_data[] = "print_var_data";
static char __pyx_k__print_vararray[] = "print_vararray";
static char __pyx_k__print_vargroup[] = "print_vargroup";
static char __pyx_k__print_vargroups[] = "print_vargroups";
static char __pyx_k__NotImplementedError[] = "NotImplementedError";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_u_11;
static PyObject *__pyx_kp_u_12;
static PyObject *__pyx_kp_u_15;
static PyObject *__pyx_kp_s_19;
static PyObject *__pyx_kp_s_2;
static PyObject *__pyx_n_s_20;
static PyObject *__pyx_kp_s_3;
static PyObject *__pyx_kp_u_5;
static PyObject *__pyx_kp_u_7;
static PyObject *__pyx_kp_u_9;
static PyObject *__pyx_n_s__CDS_NAT;
static PyObject *__pyx_n_s__NotImplementedError;
static PyObject *__pyx_n_s__RuntimeError;
static PyObject *__pyx_n_s__TODO;
static PyObject *__pyx_n_s__ValueError;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__asarray;
static PyObject *__pyx_n_s__att;
static PyObject *__pyx_n_s__basestring;
static PyObject *__pyx_n_s__cds_group;
static PyObject *__pyx_n_s__data;
static PyObject *__pyx_n_s__define;
static PyObject *__pyx_n_s__delete;
static PyObject *__pyx_n_s__dim;
static PyObject *__pyx_n_s__dim_names;
static PyObject *__pyx_n_s__fd;
static PyObject *__pyx_n_s__file_like;
static PyObject *__pyx_n_s__fileno;
static PyObject *__pyx_n_s__flags;
static PyObject *__pyx_n_s__float32;
static PyObject *__pyx_n_s__float64;
static PyObject *__pyx_n_s__flush;
static PyObject *__pyx_n_s__fp;
static PyObject *__pyx_n_s__get;
static PyObject *__pyx_n_s__get_datap;
static PyObject *__pyx_n_s__group;
static PyObject *__pyx_n_s__indent;
static PyObject *__pyx_n_s__int16;
static PyObject *__pyx_n_s__int32;
static PyObject *__pyx_n_s__int8;
static PyObject *__pyx_n_s__is_unlimited;
static PyObject *__pyx_n_s__key;
static PyObject *__pyx_n_s__label;
static PyObject *__pyx_n_s__length;
static PyObject *__pyx_n_s__min_width;
static PyObject *__pyx_n_s__missing_value;
static PyObject *__pyx_n_s__name;
static PyObject *__pyx_n_s__np;
static PyObject *__pyx_n_s__num;
static PyObject *__pyx_n_s__numpy;
static PyObject *__pyx_n_s__overwrite;
static PyObject *__pyx_n_s__parent;
static PyObject *__pyx_n_s__print_all;
static PyObject *__pyx_n_s__print_att;
static PyObject *__pyx_n_s__print_atts;
static PyObject *__pyx_n_s__print_data;
static PyObject *__pyx_n_s__print_dim;
static PyObject *__pyx_n_s__print_dims;
static PyObject *__pyx_n_s__print_group;
static PyObject *__pyx_n_s__print_groups;
static PyObject *__pyx_n_s__print_var;
static PyObject *__pyx_n_s__print_var_data;
static PyObject *__pyx_n_s__print_vararray;
static PyObject *__pyx_n_s__print_vargroup;
static PyObject *__pyx_n_s__print_vargroups;
static PyObject *__pyx_n_s__print_vars;
static PyObject *__pyx_n_s__range;
static PyObject *__pyx_n_s__retval;
static PyObject *__pyx_n_s__sample_count;
static PyObject *__pyx_n_s__sample_start;
static PyObject *__pyx_n_s__static_vars;
static PyObject *__pyx_n_s__staticmethod;
static PyObject *__pyx_n_s__str;
static PyObject *__pyx_n_s__text;
static PyObject *__pyx_n_s__type;
static PyObject *__pyx_n_s__units;
static PyObject *__pyx_n_s__unlim_vars;
static PyObject *__pyx_n_s__use_missing;
static PyObject *__pyx_n_s__user_data;
static PyObject *__pyx_n_s__value;
static PyObject *__pyx_n_s__var;
static PyObject *__pyx_n_s__vararray;
static PyObject *__pyx_n_s__vargroup;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_15;
static PyObject *__pyx_k_tuple_4;
static PyObject *__pyx_k_tuple_6;
static PyObject *__pyx_k_tuple_8;
static PyObject *__pyx_k_tuple_10;
static PyObject *__pyx_k_tuple_13;
static PyObject *__pyx_k_tuple_14;
static PyObject *__pyx_k_tuple_16;
static PyObject *__pyx_k_tuple_17;
static PyObject *__pyx_k_tuple_21;
static PyObject *__pyx_k_tuple_23;
static PyObject *__pyx_k_tuple_25;
static PyObject *__pyx_k_tuple_27;
static PyObject *__pyx_k_tuple_29;
static PyObject *__pyx_k_tuple_31;
static PyObject *__pyx_k_tuple_33;
static PyObject *__pyx_k_tuple_35;
static PyObject *__pyx_k_tuple_37;
static PyObject *__pyx_k_tuple_39;
static PyObject *__pyx_k_tuple_41;
static PyObject *__pyx_k_tuple_43;
static PyObject *__pyx_k_tuple_45;
static PyObject *__pyx_k_tuple_47;
static PyObject *__pyx_k_tuple_49;
static PyObject *__pyx_k_tuple_51;
static PyObject *__pyx_k_tuple_53;
static PyObject *__pyx_k_tuple_55;
static PyObject *__pyx_k_codeobj_18;
static PyObject *__pyx_k_codeobj_22;
static PyObject *__pyx_k_codeobj_24;
static PyObject *__pyx_k_codeobj_26;
static PyObject *__pyx_k_codeobj_28;
static PyObject *__pyx_k_codeobj_30;
static PyObject *__pyx_k_codeobj_32;
static PyObject *__pyx_k_codeobj_34;
static PyObject *__pyx_k_codeobj_36;
static PyObject *__pyx_k_codeobj_38;
static PyObject *__pyx_k_codeobj_40;
static PyObject *__pyx_k_codeobj_42;
static PyObject *__pyx_k_codeobj_44;
static PyObject *__pyx_k_codeobj_46;
static PyObject *__pyx_k_codeobj_48;
static PyObject *__pyx_k_codeobj_50;
static PyObject *__pyx_k_codeobj_52;
static PyObject *__pyx_k_codeobj_54;
static PyObject *__pyx_k_codeobj_56;

/* "cds3/core.pyx":25
 * np.import_array()
 * 
 * cdef inline int cds_type_to_dtype(CDSDataType type):             # <<<<<<<<<<<<<<
 *     if type == CDS_NAT:
 *         raise ValueError, "CDS_NAT"
 */

#line 25 "cds3/core.pyx"


#line 25 "cds3/core.pyx"
static CYTHON_INLINE int __pyx_f_4cds3_4core_cds_type_to_dtype(CDSDataType __pyx_v_type) {

#line 25 "cds3/core.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 25 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("cds_type_to_dtype", 0);

  /* "cds3/core.pyx":26
 * 
 * cdef inline int cds_type_to_dtype(CDSDataType type):
 *     if type == CDS_NAT:             # <<<<<<<<<<<<<<
 *         raise ValueError, "CDS_NAT"
 *     elif type == CDS_CHAR:
 */

#line 26 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_NAT);

#line 26 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":27
 * cdef inline int cds_type_to_dtype(CDSDataType type):
 *     if type == CDS_NAT:
 *         raise ValueError, "CDS_NAT"             # <<<<<<<<<<<<<<
 *     elif type == CDS_CHAR:
 *         return np.NPY_STRING
 */

#line 27 "cds3/core.pyx"
    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_n_s__CDS_NAT), 0, 0);

#line 27 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 27 "cds3/core.pyx"
    goto __pyx_L3;

#line 27 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":28
 *     if type == CDS_NAT:
 *         raise ValueError, "CDS_NAT"
 *     elif type == CDS_CHAR:             # <<<<<<<<<<<<<<
 *         return np.NPY_STRING
 *     elif type == CDS_BYTE:
 */

#line 28 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_CHAR);

#line 28 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":29
 *         raise ValueError, "CDS_NAT"
 *     elif type == CDS_CHAR:
 *         return np.NPY_STRING             # <<<<<<<<<<<<<<
 *     elif type == CDS_BYTE:
 *         return np.NPY_BYTE
 */

#line 29 "cds3/core.pyx"
    __pyx_r = NPY_STRING;

#line 29 "cds3/core.pyx"
    goto __pyx_L0;

#line 29 "cds3/core.pyx"
    goto __pyx_L3;

#line 29 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":30
 *     elif type == CDS_CHAR:
 *         return np.NPY_STRING
 *     elif type == CDS_BYTE:             # <<<<<<<<<<<<<<
 *         return np.NPY_BYTE
 *     elif type == CDS_SHORT:
 */

#line 30 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_BYTE);

#line 30 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":31
 *         return np.NPY_STRING
 *     elif type == CDS_BYTE:
 *         return np.NPY_BYTE             # <<<<<<<<<<<<<<
 *     elif type == CDS_SHORT:
 *         return np.NPY_SHORT
 */

#line 31 "cds3/core.pyx"
    __pyx_r = NPY_BYTE;

#line 31 "cds3/core.pyx"
    goto __pyx_L0;

#line 31 "cds3/core.pyx"
    goto __pyx_L3;

#line 31 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":32
 *     elif type == CDS_BYTE:
 *         return np.NPY_BYTE
 *     elif type == CDS_SHORT:             # <<<<<<<<<<<<<<
 *         return np.NPY_SHORT
 *     elif type == CDS_INT:
 */

#line 32 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_SHORT);

#line 32 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":33
 *         return np.NPY_BYTE
 *     elif type == CDS_SHORT:
 *         return np.NPY_SHORT             # <<<<<<<<<<<<<<
 *     elif type == CDS_INT:
 *         return np.NPY_INT
 */

#line 33 "cds3/core.pyx"
    __pyx_r = NPY_SHORT;

#line 33 "cds3/core.pyx"
    goto __pyx_L0;

#line 33 "cds3/core.pyx"
    goto __pyx_L3;

#line 33 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":34
 *     elif type == CDS_SHORT:
 *         return np.NPY_SHORT
 *     elif type == CDS_INT:             # <<<<<<<<<<<<<<
 *         return np.NPY_INT
 *     elif type == CDS_FLOAT:
 */

#line 34 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_INT);

#line 34 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":35
 *         return np.NPY_SHORT
 *     elif type == CDS_INT:
 *         return np.NPY_INT             # <<<<<<<<<<<<<<
 *     elif type == CDS_FLOAT:
 *         return np.NPY_FLOAT
 */

#line 35 "cds3/core.pyx"
    __pyx_r = NPY_INT;

#line 35 "cds3/core.pyx"
    goto __pyx_L0;

#line 35 "cds3/core.pyx"
    goto __pyx_L3;

#line 35 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":36
 *     elif type == CDS_INT:
 *         return np.NPY_INT
 *     elif type == CDS_FLOAT:             # <<<<<<<<<<<<<<
 *         return np.NPY_FLOAT
 *     elif type == CDS_DOUBLE:
 */

#line 36 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_FLOAT);

#line 36 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":37
 *         return np.NPY_INT
 *     elif type == CDS_FLOAT:
 *         return np.NPY_FLOAT             # <<<<<<<<<<<<<<
 *     elif type == CDS_DOUBLE:
 *         return np.NPY_DOUBLE
 */

#line 37 "cds3/core.pyx"
    __pyx_r = NPY_FLOAT;

#line 37 "cds3/core.pyx"
    goto __pyx_L0;

#line 37 "cds3/core.pyx"
    goto __pyx_L3;

#line 37 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":38
 *     elif type == CDS_FLOAT:
 *         return np.NPY_FLOAT
 *     elif type == CDS_DOUBLE:             # <<<<<<<<<<<<<<
 *         return np.NPY_DOUBLE
 *     else:
 */

#line 38 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_DOUBLE);

#line 38 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":39
 *         return np.NPY_FLOAT
 *     elif type == CDS_DOUBLE:
 *         return np.NPY_DOUBLE             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError, "Unknown CDSDataType %s" % type
 */

#line 39 "cds3/core.pyx"
    __pyx_r = NPY_DOUBLE;

#line 39 "cds3/core.pyx"
    goto __pyx_L0;

#line 39 "cds3/core.pyx"
    goto __pyx_L3;

#line 39 "cds3/core.pyx"
  }

#line 39 "cds3/core.pyx"
  /*else*/ {

    /* "cds3/core.pyx":41
 *         return np.NPY_DOUBLE
 *     else:
 *         raise ValueError, "Unknown CDSDataType %s" % type             # <<<<<<<<<<<<<<
 * 
 * cdef inline np.dtype cds_type_to_dtype_obj(CDSDataType type):
 */

#line 41 "cds3/core.pyx"
    __pyx_t_2 = PyInt_FromLong(__pyx_v_type); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 41 "cds3/core.pyx"
    __pyx_t_3 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_1), __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "cds3/core.pyx"
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));

#line 41 "cds3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 41 "cds3/core.pyx"
    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_3), 0, 0);

#line 41 "cds3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 41 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "cds3/core.pyx"
  }

#line 41 "cds3/core.pyx"
  __pyx_L3:;

#line 41 "cds3/core.pyx"


#line 41 "cds3/core.pyx"
  __pyx_r = 0;

#line 41 "cds3/core.pyx"
  goto __pyx_L0;

#line 41 "cds3/core.pyx"
  __pyx_L1_error:;

#line 41 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 41 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 41 "cds3/core.pyx"
  __Pyx_WriteUnraisable("cds3.core.cds_type_to_dtype", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 41 "cds3/core.pyx"
  __pyx_r = 0;

#line 41 "cds3/core.pyx"
  __pyx_L0:;

#line 41 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 41 "cds3/core.pyx"
  return __pyx_r;

#line 41 "cds3/core.pyx"
}

/* "cds3/core.pyx":43
 *         raise ValueError, "Unknown CDSDataType %s" % type
 * 
 * cdef inline np.dtype cds_type_to_dtype_obj(CDSDataType type):             # <<<<<<<<<<<<<<
 *     """Converts a CDSDataType to a dtype instance."""
 *     if type == CDS_NAT:
 */

#line 43 "cds3/core.pyx"


#line 43 "cds3/core.pyx"
static CYTHON_INLINE PyArray_Descr *__pyx_f_4cds3_4core_cds_type_to_dtype_obj(CDSDataType __pyx_v_type) {

#line 43 "cds3/core.pyx"
  PyArray_Descr *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 43 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("cds_type_to_dtype_obj", 0);

  /* "cds3/core.pyx":45
 * cdef inline np.dtype cds_type_to_dtype_obj(CDSDataType type):
 *     """Converts a CDSDataType to a dtype instance."""
 *     if type == CDS_NAT:             # <<<<<<<<<<<<<<
 *         raise ValueError, "CDS_NAT"
 *     elif type == CDS_CHAR:
 */

#line 45 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_NAT);

#line 45 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":46
 *     """Converts a CDSDataType to a dtype instance."""
 *     if type == CDS_NAT:
 *         raise ValueError, "CDS_NAT"             # <<<<<<<<<<<<<<
 *     elif type == CDS_CHAR:
 *         return np.dtype(np.str)
 */

#line 46 "cds3/core.pyx"
    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_n_s__CDS_NAT), 0, 0);

#line 46 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 46 "cds3/core.pyx"
    goto __pyx_L3;

#line 46 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":47
 *     if type == CDS_NAT:
 *         raise ValueError, "CDS_NAT"
 *     elif type == CDS_CHAR:             # <<<<<<<<<<<<<<
 *         return np.dtype(np.str)
 *     elif type == CDS_BYTE:
 */

#line 47 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_CHAR);

#line 47 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":48
 *         raise ValueError, "CDS_NAT"
 *     elif type == CDS_CHAR:
 *         return np.dtype(np.str)             # <<<<<<<<<<<<<<
 *     elif type == CDS_BYTE:
 *         return np.dtype(np.int8)
 */

#line 48 "cds3/core.pyx"
    __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 48 "cds3/core.pyx"
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 48 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 48 "cds3/core.pyx"
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__str); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 48 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 48 "cds3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 48 "cds3/core.pyx"
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 48 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 48 "cds3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);

#line 48 "cds3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_3);

#line 48 "cds3/core.pyx"
    __pyx_t_3 = 0;

#line 48 "cds3/core.pyx"
    __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 48 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 48 "cds3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 48 "cds3/core.pyx"
    __pyx_r = ((PyArray_Descr *)__pyx_t_3);

#line 48 "cds3/core.pyx"
    __pyx_t_3 = 0;

#line 48 "cds3/core.pyx"
    goto __pyx_L0;

#line 48 "cds3/core.pyx"
    goto __pyx_L3;

#line 48 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":49
 *     elif type == CDS_CHAR:
 *         return np.dtype(np.str)
 *     elif type == CDS_BYTE:             # <<<<<<<<<<<<<<
 *         return np.dtype(np.int8)
 *     elif type == CDS_SHORT:
 */

#line 49 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_BYTE);

#line 49 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":50
 *         return np.dtype(np.str)
 *     elif type == CDS_BYTE:
 *         return np.dtype(np.int8)             # <<<<<<<<<<<<<<
 *     elif type == CDS_SHORT:
 *         return np.dtype(np.int16)
 */

#line 50 "cds3/core.pyx"
    __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 50 "cds3/core.pyx"
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 50 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 50 "cds3/core.pyx"
    __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__int8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 50 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 50 "cds3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 50 "cds3/core.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 50 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 50 "cds3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 50 "cds3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_2);

#line 50 "cds3/core.pyx"
    __pyx_t_2 = 0;

#line 50 "cds3/core.pyx"
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 50 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 50 "cds3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 50 "cds3/core.pyx"
    __pyx_r = ((PyArray_Descr *)__pyx_t_2);

#line 50 "cds3/core.pyx"
    __pyx_t_2 = 0;

#line 50 "cds3/core.pyx"
    goto __pyx_L0;

#line 50 "cds3/core.pyx"
    goto __pyx_L3;

#line 50 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":51
 *     elif type == CDS_BYTE:
 *         return np.dtype(np.int8)
 *     elif type == CDS_SHORT:             # <<<<<<<<<<<<<<
 *         return np.dtype(np.int16)
 *     elif type == CDS_INT:
 */

#line 51 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_SHORT);

#line 51 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":52
 *         return np.dtype(np.int8)
 *     elif type == CDS_SHORT:
 *         return np.dtype(np.int16)             # <<<<<<<<<<<<<<
 *     elif type == CDS_INT:
 *         return np.dtype(np.int32)
 */

#line 52 "cds3/core.pyx"
    __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 52 "cds3/core.pyx"
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 52 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 52 "cds3/core.pyx"
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__int16); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 52 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 52 "cds3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 52 "cds3/core.pyx"
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 52 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 52 "cds3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);

#line 52 "cds3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_3);

#line 52 "cds3/core.pyx"
    __pyx_t_3 = 0;

#line 52 "cds3/core.pyx"
    __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 52 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 52 "cds3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 52 "cds3/core.pyx"
    __pyx_r = ((PyArray_Descr *)__pyx_t_3);

#line 52 "cds3/core.pyx"
    __pyx_t_3 = 0;

#line 52 "cds3/core.pyx"
    goto __pyx_L0;

#line 52 "cds3/core.pyx"
    goto __pyx_L3;

#line 52 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":53
 *     elif type == CDS_SHORT:
 *         return np.dtype(np.int16)
 *     elif type == CDS_INT:             # <<<<<<<<<<<<<<
 *         return np.dtype(np.int32)
 *     elif type == CDS_FLOAT:
 */

#line 53 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_INT);

#line 53 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":54
 *         return np.dtype(np.int16)
 *     elif type == CDS_INT:
 *         return np.dtype(np.int32)             # <<<<<<<<<<<<<<
 *     elif type == CDS_FLOAT:
 *         return np.dtype(np.float32)
 */

#line 54 "cds3/core.pyx"
    __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 54 "cds3/core.pyx"
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 54 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 54 "cds3/core.pyx"
    __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__int32); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 54 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 54 "cds3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 54 "cds3/core.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 54 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 54 "cds3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 54 "cds3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_2);

#line 54 "cds3/core.pyx"
    __pyx_t_2 = 0;

#line 54 "cds3/core.pyx"
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 54 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 54 "cds3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 54 "cds3/core.pyx"
    __pyx_r = ((PyArray_Descr *)__pyx_t_2);

#line 54 "cds3/core.pyx"
    __pyx_t_2 = 0;

#line 54 "cds3/core.pyx"
    goto __pyx_L0;

#line 54 "cds3/core.pyx"
    goto __pyx_L3;

#line 54 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":55
 *     elif type == CDS_INT:
 *         return np.dtype(np.int32)
 *     elif type == CDS_FLOAT:             # <<<<<<<<<<<<<<
 *         return np.dtype(np.float32)
 *     elif type == CDS_DOUBLE:
 */

#line 55 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_FLOAT);

#line 55 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":56
 *         return np.dtype(np.int32)
 *     elif type == CDS_FLOAT:
 *         return np.dtype(np.float32)             # <<<<<<<<<<<<<<
 *     elif type == CDS_DOUBLE:
 *         return np.dtype(np.float64)
 */

#line 56 "cds3/core.pyx"
    __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 56 "cds3/core.pyx"
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 56 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 56 "cds3/core.pyx"
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__float32); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 56 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 56 "cds3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 56 "cds3/core.pyx"
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 56 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 56 "cds3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);

#line 56 "cds3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_3);

#line 56 "cds3/core.pyx"
    __pyx_t_3 = 0;

#line 56 "cds3/core.pyx"
    __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 56 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 56 "cds3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 56 "cds3/core.pyx"
    __pyx_r = ((PyArray_Descr *)__pyx_t_3);

#line 56 "cds3/core.pyx"
    __pyx_t_3 = 0;

#line 56 "cds3/core.pyx"
    goto __pyx_L0;

#line 56 "cds3/core.pyx"
    goto __pyx_L3;

#line 56 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":57
 *     elif type == CDS_FLOAT:
 *         return np.dtype(np.float32)
 *     elif type == CDS_DOUBLE:             # <<<<<<<<<<<<<<
 *         return np.dtype(np.float64)
 *     else:
 */

#line 57 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_DOUBLE);

#line 57 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":58
 *         return np.dtype(np.float32)
 *     elif type == CDS_DOUBLE:
 *         return np.dtype(np.float64)             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError, "Unknown CDSDataType %s" % type
 */

#line 58 "cds3/core.pyx"
    __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 58 "cds3/core.pyx"
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 58 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 58 "cds3/core.pyx"
    __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__float64); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 58 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 58 "cds3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 58 "cds3/core.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 58 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 58 "cds3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 58 "cds3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_2);

#line 58 "cds3/core.pyx"
    __pyx_t_2 = 0;

#line 58 "cds3/core.pyx"
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 58 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 58 "cds3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 58 "cds3/core.pyx"
    __pyx_r = ((PyArray_Descr *)__pyx_t_2);

#line 58 "cds3/core.pyx"
    __pyx_t_2 = 0;

#line 58 "cds3/core.pyx"
    goto __pyx_L0;

#line 58 "cds3/core.pyx"
    goto __pyx_L3;

#line 58 "cds3/core.pyx"
  }

#line 58 "cds3/core.pyx"
  /*else*/ {

    /* "cds3/core.pyx":60
 *         return np.dtype(np.float64)
 *     else:
 *         raise ValueError, "Unknown CDSDataType %s" % type             # <<<<<<<<<<<<<<
 * 
 * cdef void _free(void *address):
 */

#line 60 "cds3/core.pyx"
    __pyx_t_2 = PyInt_FromLong(__pyx_v_type); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 60 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 60 "cds3/core.pyx"
    __pyx_t_3 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_1), __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 60 "cds3/core.pyx"
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));

#line 60 "cds3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 60 "cds3/core.pyx"
    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_3), 0, 0);

#line 60 "cds3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 60 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 60 "cds3/core.pyx"
  }

#line 60 "cds3/core.pyx"
  __pyx_L3:;

#line 60 "cds3/core.pyx"


#line 60 "cds3/core.pyx"
  __pyx_r = ((PyArray_Descr *)Py_None); __Pyx_INCREF(Py_None);

#line 60 "cds3/core.pyx"
  goto __pyx_L0;

#line 60 "cds3/core.pyx"
  __pyx_L1_error:;

#line 60 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 60 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 60 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.cds_type_to_dtype_obj", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 60 "cds3/core.pyx"
  __pyx_r = 0;

#line 60 "cds3/core.pyx"
  __pyx_L0:;

#line 60 "cds3/core.pyx"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 60 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 60 "cds3/core.pyx"
  return __pyx_r;

#line 60 "cds3/core.pyx"
}

/* "cds3/core.pyx":62
 *         raise ValueError, "Unknown CDSDataType %s" % type
 * 
 * cdef void _free(void *address):             # <<<<<<<<<<<<<<
 *     """Helper for freeing externally allocated memory 'owned' by ndarrays."""
 *     free(address)
 */

#line 62 "cds3/core.pyx"


#line 62 "cds3/core.pyx"
static void __pyx_f_4cds3_4core__free(void *__pyx_v_address) {
  __Pyx_RefNannyDeclarations

#line 62 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("_free", 0);

  /* "cds3/core.pyx":64
 * cdef void _free(void *address):
 *     """Helper for freeing externally allocated memory 'owned' by ndarrays."""
 *     free(address)             # <<<<<<<<<<<<<<
 * 
 * ##########################################################################
 */

#line 64 "cds3/core.pyx"
  free(__pyx_v_address);

#line 64 "cds3/core.pyx"


#line 64 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 64 "cds3/core.pyx"
}

/* "cds3/core.pyx":70
 * ##########################################################################
 * 
 * cdef inline Att _change_att(void *parent, int overwrite, char *name,             # <<<<<<<<<<<<<<
 *         CDSDataType type, object value):
 *     """Change an attribute of a CDS group or variable.
 */

#line 70 "cds3/core.pyx"


#line 70 "cds3/core.pyx"
static CYTHON_INLINE struct __pyx_obj_4cds3_4core_Att *__pyx_f_4cds3_4core__change_att(void *__pyx_v_parent, int __pyx_v_overwrite, char *__pyx_v_name, CDSDataType __pyx_v_type, PyObject *__pyx_v_value) {
  struct CDSAtt *__pyx_v_cds_att
#line 70 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Att *__pyx_v_att = 0
#line 70 "cds3/core.pyx"
;
  PyArrayObject *__pyx_v_value_nd = 0
#line 70 "cds3/core.pyx"
;

#line 70 "cds3/core.pyx"
  struct __pyx_obj_4cds3_4core_Att *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 70 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("_change_att", 0);

  /* "cds3/core.pyx":96
 *     cdef CDSAtt *cds_att
 *     cdef Att att
 *     cdef np.ndarray value_nd = np.asarray(value, cds_type_to_dtype_obj(type))             # <<<<<<<<<<<<<<
 *     if value_nd.ndim == 0:
 *         value_nd = value_nd[None] # add dummy dimension to a scalar value
 */

#line 96 "cds3/core.pyx"
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 96 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 96 "cds3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__asarray); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 96 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 96 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 96 "cds3/core.pyx"
  __pyx_t_1 = ((PyObject *)__pyx_f_4cds3_4core_cds_type_to_dtype_obj(__pyx_v_type)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 96 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 96 "cds3/core.pyx"
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 96 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 96 "cds3/core.pyx"
  __Pyx_INCREF(__pyx_v_value);

#line 96 "cds3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_value);

#line 96 "cds3/core.pyx"
  __Pyx_GIVEREF(__pyx_v_value);

#line 96 "cds3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);

#line 96 "cds3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 96 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 96 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 96 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 96 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 96 "cds3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 96 "cds3/core.pyx"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 96 "cds3/core.pyx"
  __pyx_v_value_nd = ((PyArrayObject *)__pyx_t_1);

#line 96 "cds3/core.pyx"
  __pyx_t_1 = 0;

  /* "cds3/core.pyx":97
 *     cdef Att att
 *     cdef np.ndarray value_nd = np.asarray(value, cds_type_to_dtype_obj(type))
 *     if value_nd.ndim == 0:             # <<<<<<<<<<<<<<
 *         value_nd = value_nd[None] # add dummy dimension to a scalar value
 *     assert value_nd.ndim == 1
 */

#line 97 "cds3/core.pyx"
  __pyx_t_4 = (__pyx_v_value_nd->nd == 0);

#line 97 "cds3/core.pyx"
  if (__pyx_t_4) {

    /* "cds3/core.pyx":98
 *     cdef np.ndarray value_nd = np.asarray(value, cds_type_to_dtype_obj(type))
 *     if value_nd.ndim == 0:
 *         value_nd = value_nd[None] # add dummy dimension to a scalar value             # <<<<<<<<<<<<<<
 *     assert value_nd.ndim == 1
 *     cds_att = cds_change_att(parent, overwrite, name, type,
 */

#line 98 "cds3/core.pyx"
    __pyx_t_1 = PyObject_GetItem(((PyObject *)__pyx_v_value_nd), Py_None); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 98 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 98 "cds3/core.pyx"
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 98 "cds3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_v_value_nd));

#line 98 "cds3/core.pyx"
    __pyx_v_value_nd = ((PyArrayObject *)__pyx_t_1);

#line 98 "cds3/core.pyx"
    __pyx_t_1 = 0;

#line 98 "cds3/core.pyx"
    goto __pyx_L3;

#line 98 "cds3/core.pyx"
  }

#line 98 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":99
 *     if value_nd.ndim == 0:
 *         value_nd = value_nd[None] # add dummy dimension to a scalar value
 *     assert value_nd.ndim == 1             # <<<<<<<<<<<<<<
 *     cds_att = cds_change_att(parent, overwrite, name, type,
 *             len(value_nd), value_nd.data)
 */

#line 99 "cds3/core.pyx"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 99 "cds3/core.pyx"
  if (unlikely(!(__pyx_v_value_nd->nd == 1))) {

#line 99 "cds3/core.pyx"
    PyErr_SetNone(PyExc_AssertionError);

#line 99 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 99 "cds3/core.pyx"
  }

#line 99 "cds3/core.pyx"
  #endif

  /* "cds3/core.pyx":101
 *     assert value_nd.ndim == 1
 *     cds_att = cds_change_att(parent, overwrite, name, type,
 *             len(value_nd), value_nd.data)             # <<<<<<<<<<<<<<
 *     if cds_att == NULL:
 *         return None
 */

#line 101 "cds3/core.pyx"
  __pyx_t_5 = PyObject_Length(((PyObject *)__pyx_v_value_nd)); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 101 "cds3/core.pyx"
  __pyx_v_cds_att = cds_change_att(__pyx_v_parent, __pyx_v_overwrite, __pyx_v_name, __pyx_v_type, __pyx_t_5, __pyx_v_value_nd->data);

  /* "cds3/core.pyx":102
 *     cds_att = cds_change_att(parent, overwrite, name, type,
 *             len(value_nd), value_nd.data)
 *     if cds_att == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     att = Att()
 */

#line 102 "cds3/core.pyx"
  __pyx_t_4 = (__pyx_v_cds_att == NULL);

#line 102 "cds3/core.pyx"
  if (__pyx_t_4) {

    /* "cds3/core.pyx":103
 *             len(value_nd), value_nd.data)
 *     if cds_att == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     att = Att()
 *     att.set_att(cds_att)
 */

#line 103 "cds3/core.pyx"
    __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 103 "cds3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 103 "cds3/core.pyx"
    __pyx_r = ((struct __pyx_obj_4cds3_4core_Att *)Py_None);

#line 103 "cds3/core.pyx"
    goto __pyx_L0;

#line 103 "cds3/core.pyx"
    goto __pyx_L4;

#line 103 "cds3/core.pyx"
  }

#line 103 "cds3/core.pyx"
  __pyx_L4:;

  /* "cds3/core.pyx":104
 *     if cds_att == NULL:
 *         return None
 *     att = Att()             # <<<<<<<<<<<<<<
 *     att.set_att(cds_att)
 *     return att
 */

#line 104 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Att)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 104 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 104 "cds3/core.pyx"
  __pyx_v_att = ((struct __pyx_obj_4cds3_4core_Att *)__pyx_t_1);

#line 104 "cds3/core.pyx"
  __pyx_t_1 = 0;

  /* "cds3/core.pyx":105
 *         return None
 *     att = Att()
 *     att.set_att(cds_att)             # <<<<<<<<<<<<<<
 *     return att
 * 
 */

#line 105 "cds3/core.pyx"
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cds3_4core_Att *)__pyx_v_att->__pyx_base.__pyx_vtab)->set_att(__pyx_v_att, __pyx_v_cds_att); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 105 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 105 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cds3/core.pyx":106
 *     att = Att()
 *     att.set_att(cds_att)
 *     return att             # <<<<<<<<<<<<<<
 * 
 * cdef inline Att _define_att(void *parent, char *name, CDSDataType type,
 */

#line 106 "cds3/core.pyx"
  __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 106 "cds3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_att));

#line 106 "cds3/core.pyx"
  __pyx_r = __pyx_v_att;

#line 106 "cds3/core.pyx"
  goto __pyx_L0;

#line 106 "cds3/core.pyx"


#line 106 "cds3/core.pyx"
  __pyx_r = ((struct __pyx_obj_4cds3_4core_Att *)Py_None); __Pyx_INCREF(Py_None);

#line 106 "cds3/core.pyx"
  goto __pyx_L0;

#line 106 "cds3/core.pyx"
  __pyx_L1_error:;

#line 106 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 106 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 106 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 106 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core._change_att", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 106 "cds3/core.pyx"
  __pyx_r = 0;

#line 106 "cds3/core.pyx"
  __pyx_L0:;

#line 106 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_att);

#line 106 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_value_nd);

#line 106 "cds3/core.pyx"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 106 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 106 "cds3/core.pyx"
  return __pyx_r;

#line 106 "cds3/core.pyx"
}

/* "cds3/core.pyx":108
 *     return att
 * 
 * cdef inline Att _define_att(void *parent, char *name, CDSDataType type,             # <<<<<<<<<<<<<<
 *         object value):
 *     """Define a CDS Attribute on a group or variable.
 */

#line 108 "cds3/core.pyx"


#line 108 "cds3/core.pyx"
static CYTHON_INLINE struct __pyx_obj_4cds3_4core_Att *__pyx_f_4cds3_4core__define_att(void *__pyx_v_parent, char *__pyx_v_name, CDSDataType __pyx_v_type, PyObject *__pyx_v_value) {
  struct CDSAtt *__pyx_v_cds_att
#line 108 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Att *__pyx_v_att = 0
#line 108 "cds3/core.pyx"
;
  PyArrayObject *__pyx_v_value_nd = 0
#line 108 "cds3/core.pyx"
;

#line 108 "cds3/core.pyx"
  struct __pyx_obj_4cds3_4core_Att *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 108 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("_define_att", 0);

  /* "cds3/core.pyx":134
 *     cdef CDSAtt *cds_att
 *     cdef Att att
 *     cdef np.ndarray value_nd = np.asarray(value, cds_type_to_dtype_obj(type))             # <<<<<<<<<<<<<<
 *     if value_nd.ndim == 0:
 *         value_nd = value_nd[None] # add dummy dimension to a scalar value
 */

#line 134 "cds3/core.pyx"
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 134 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 134 "cds3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__asarray); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 134 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 134 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 134 "cds3/core.pyx"
  __pyx_t_1 = ((PyObject *)__pyx_f_4cds3_4core_cds_type_to_dtype_obj(__pyx_v_type)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 134 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 134 "cds3/core.pyx"
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 134 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 134 "cds3/core.pyx"
  __Pyx_INCREF(__pyx_v_value);

#line 134 "cds3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_value);

#line 134 "cds3/core.pyx"
  __Pyx_GIVEREF(__pyx_v_value);

#line 134 "cds3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);

#line 134 "cds3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 134 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 134 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 134 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 134 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 134 "cds3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 134 "cds3/core.pyx"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 134 "cds3/core.pyx"
  __pyx_v_value_nd = ((PyArrayObject *)__pyx_t_1);

#line 134 "cds3/core.pyx"
  __pyx_t_1 = 0;

  /* "cds3/core.pyx":135
 *     cdef Att att
 *     cdef np.ndarray value_nd = np.asarray(value, cds_type_to_dtype_obj(type))
 *     if value_nd.ndim == 0:             # <<<<<<<<<<<<<<
 *         value_nd = value_nd[None] # add dummy dimension to a scalar value
 *     assert value_nd.ndim == 1
 */

#line 135 "cds3/core.pyx"
  __pyx_t_4 = (__pyx_v_value_nd->nd == 0);

#line 135 "cds3/core.pyx"
  if (__pyx_t_4) {

    /* "cds3/core.pyx":136
 *     cdef np.ndarray value_nd = np.asarray(value, cds_type_to_dtype_obj(type))
 *     if value_nd.ndim == 0:
 *         value_nd = value_nd[None] # add dummy dimension to a scalar value             # <<<<<<<<<<<<<<
 *     assert value_nd.ndim == 1
 *     cds_att = cds_define_att(parent, name, type, len(value_nd), value_nd.data)
 */

#line 136 "cds3/core.pyx"
    __pyx_t_1 = PyObject_GetItem(((PyObject *)__pyx_v_value_nd), Py_None); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 136 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 136 "cds3/core.pyx"
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 136 "cds3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_v_value_nd));

#line 136 "cds3/core.pyx"
    __pyx_v_value_nd = ((PyArrayObject *)__pyx_t_1);

#line 136 "cds3/core.pyx"
    __pyx_t_1 = 0;

#line 136 "cds3/core.pyx"
    goto __pyx_L3;

#line 136 "cds3/core.pyx"
  }

#line 136 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":137
 *     if value_nd.ndim == 0:
 *         value_nd = value_nd[None] # add dummy dimension to a scalar value
 *     assert value_nd.ndim == 1             # <<<<<<<<<<<<<<
 *     cds_att = cds_define_att(parent, name, type, len(value_nd), value_nd.data)
 *     if cds_att == NULL:
 */

#line 137 "cds3/core.pyx"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 137 "cds3/core.pyx"
  if (unlikely(!(__pyx_v_value_nd->nd == 1))) {

#line 137 "cds3/core.pyx"
    PyErr_SetNone(PyExc_AssertionError);

#line 137 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 137 "cds3/core.pyx"
  }

#line 137 "cds3/core.pyx"
  #endif

  /* "cds3/core.pyx":138
 *         value_nd = value_nd[None] # add dummy dimension to a scalar value
 *     assert value_nd.ndim == 1
 *     cds_att = cds_define_att(parent, name, type, len(value_nd), value_nd.data)             # <<<<<<<<<<<<<<
 *     if cds_att == NULL:
 *         return None
 */

#line 138 "cds3/core.pyx"
  __pyx_t_5 = PyObject_Length(((PyObject *)__pyx_v_value_nd)); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 138 "cds3/core.pyx"
  __pyx_v_cds_att = cds_define_att(__pyx_v_parent, __pyx_v_name, __pyx_v_type, __pyx_t_5, __pyx_v_value_nd->data);

  /* "cds3/core.pyx":139
 *     assert value_nd.ndim == 1
 *     cds_att = cds_define_att(parent, name, type, len(value_nd), value_nd.data)
 *     if cds_att == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     att = Att()
 */

#line 139 "cds3/core.pyx"
  __pyx_t_4 = (__pyx_v_cds_att == NULL);

#line 139 "cds3/core.pyx"
  if (__pyx_t_4) {

    /* "cds3/core.pyx":140
 *     cds_att = cds_define_att(parent, name, type, len(value_nd), value_nd.data)
 *     if cds_att == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     att = Att()
 *     att.set_att(cds_att)
 */

#line 140 "cds3/core.pyx"
    __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 140 "cds3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 140 "cds3/core.pyx"
    __pyx_r = ((struct __pyx_obj_4cds3_4core_Att *)Py_None);

#line 140 "cds3/core.pyx"
    goto __pyx_L0;

#line 140 "cds3/core.pyx"
    goto __pyx_L4;

#line 140 "cds3/core.pyx"
  }

#line 140 "cds3/core.pyx"
  __pyx_L4:;

  /* "cds3/core.pyx":141
 *     if cds_att == NULL:
 *         return None
 *     att = Att()             # <<<<<<<<<<<<<<
 *     att.set_att(cds_att)
 *     return att
 */

#line 141 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Att)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 141 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 141 "cds3/core.pyx"
  __pyx_v_att = ((struct __pyx_obj_4cds3_4core_Att *)__pyx_t_1);

#line 141 "cds3/core.pyx"
  __pyx_t_1 = 0;

  /* "cds3/core.pyx":142
 *         return None
 *     att = Att()
 *     att.set_att(cds_att)             # <<<<<<<<<<<<<<
 *     return att
 * 
 */

#line 142 "cds3/core.pyx"
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cds3_4core_Att *)__pyx_v_att->__pyx_base.__pyx_vtab)->set_att(__pyx_v_att, __pyx_v_cds_att); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 142 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 142 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cds3/core.pyx":143
 *     att = Att()
 *     att.set_att(cds_att)
 *     return att             # <<<<<<<<<<<<<<
 * 
 * cdef inline Att _define_att_text(void *parent, char *name, char *format):
 */

#line 143 "cds3/core.pyx"
  __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 143 "cds3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_att));

#line 143 "cds3/core.pyx"
  __pyx_r = __pyx_v_att;

#line 143 "cds3/core.pyx"
  goto __pyx_L0;

#line 143 "cds3/core.pyx"


#line 143 "cds3/core.pyx"
  __pyx_r = ((struct __pyx_obj_4cds3_4core_Att *)Py_None); __Pyx_INCREF(Py_None);

#line 143 "cds3/core.pyx"
  goto __pyx_L0;

#line 143 "cds3/core.pyx"
  __pyx_L1_error:;

#line 143 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 143 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 143 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 143 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core._define_att", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 143 "cds3/core.pyx"
  __pyx_r = 0;

#line 143 "cds3/core.pyx"
  __pyx_L0:;

#line 143 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_att);

#line 143 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_value_nd);

#line 143 "cds3/core.pyx"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 143 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 143 "cds3/core.pyx"
  return __pyx_r;

#line 143 "cds3/core.pyx"
}

/* "cds3/core.pyx":145
 *     return att
 * 
 * cdef inline Att _define_att_text(void *parent, char *name, char *format):             # <<<<<<<<<<<<<<
 *     """Define a CDS Text Attribute for a group or variable.
 * 
 */

#line 145 "cds3/core.pyx"


#line 145 "cds3/core.pyx"
static CYTHON_INLINE struct __pyx_obj_4cds3_4core_Att *__pyx_f_4cds3_4core__define_att_text(void *__pyx_v_parent, char *__pyx_v_name, char *__pyx_v_format) {
  struct CDSAtt *__pyx_v_cds_att
#line 145 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Att *__pyx_v_att = 0
#line 145 "cds3/core.pyx"
;

#line 145 "cds3/core.pyx"
  struct __pyx_obj_4cds3_4core_Att *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 145 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("_define_att_text", 0);

  /* "cds3/core.pyx":167
 *     cdef CDSAtt *cds_att
 *     cdef Att att
 *     cds_att = cds_define_att_text(parent, name, format)             # <<<<<<<<<<<<<<
 *     if cds_att == NULL:
 *         return None
 */

#line 167 "cds3/core.pyx"
  __pyx_v_cds_att = cds_define_att_text(__pyx_v_parent, __pyx_v_name, __pyx_v_format);

  /* "cds3/core.pyx":168
 *     cdef Att att
 *     cds_att = cds_define_att_text(parent, name, format)
 *     if cds_att == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     att = Att()
 */

#line 168 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_cds_att == NULL);

#line 168 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":169
 *     cds_att = cds_define_att_text(parent, name, format)
 *     if cds_att == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     att = Att()
 *     att.set_att(cds_att)
 */

#line 169 "cds3/core.pyx"
    __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 169 "cds3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 169 "cds3/core.pyx"
    __pyx_r = ((struct __pyx_obj_4cds3_4core_Att *)Py_None);

#line 169 "cds3/core.pyx"
    goto __pyx_L0;

#line 169 "cds3/core.pyx"
    goto __pyx_L3;

#line 169 "cds3/core.pyx"
  }

#line 169 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":170
 *     if cds_att == NULL:
 *         return None
 *     att = Att()             # <<<<<<<<<<<<<<
 *     att.set_att(cds_att)
 *     return att
 */

#line 170 "cds3/core.pyx"
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Att)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 170 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 170 "cds3/core.pyx"
  __pyx_v_att = ((struct __pyx_obj_4cds3_4core_Att *)__pyx_t_2);

#line 170 "cds3/core.pyx"
  __pyx_t_2 = 0;

  /* "cds3/core.pyx":171
 *         return None
 *     att = Att()
 *     att.set_att(cds_att)             # <<<<<<<<<<<<<<
 *     return att
 * 
 */

#line 171 "cds3/core.pyx"
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Att *)__pyx_v_att->__pyx_base.__pyx_vtab)->set_att(__pyx_v_att, __pyx_v_cds_att); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 171 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 171 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cds3/core.pyx":172
 *     att = Att()
 *     att.set_att(cds_att)
 *     return att             # <<<<<<<<<<<<<<
 * 
 * cdef inline Att _get_att(void *parent, char *name):
 */

#line 172 "cds3/core.pyx"
  __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 172 "cds3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_att));

#line 172 "cds3/core.pyx"
  __pyx_r = __pyx_v_att;

#line 172 "cds3/core.pyx"
  goto __pyx_L0;

#line 172 "cds3/core.pyx"


#line 172 "cds3/core.pyx"
  __pyx_r = ((struct __pyx_obj_4cds3_4core_Att *)Py_None); __Pyx_INCREF(Py_None);

#line 172 "cds3/core.pyx"
  goto __pyx_L0;

#line 172 "cds3/core.pyx"
  __pyx_L1_error:;

#line 172 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 172 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core._define_att_text", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 172 "cds3/core.pyx"
  __pyx_r = 0;

#line 172 "cds3/core.pyx"
  __pyx_L0:;

#line 172 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_att);

#line 172 "cds3/core.pyx"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 172 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 172 "cds3/core.pyx"
  return __pyx_r;

#line 172 "cds3/core.pyx"
}

/* "cds3/core.pyx":174
 *     return att
 * 
 * cdef inline Att _get_att(void *parent, char *name):             # <<<<<<<<<<<<<<
 *     """Get a CDS Attribute from a group or variable.
 * 
 */

#line 174 "cds3/core.pyx"


#line 174 "cds3/core.pyx"
static CYTHON_INLINE struct __pyx_obj_4cds3_4core_Att *__pyx_f_4cds3_4core__get_att(void *__pyx_v_parent, char *__pyx_v_name) {
  struct CDSAtt *__pyx_v_cds_att
#line 174 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Att *__pyx_v_att = 0
#line 174 "cds3/core.pyx"
;

#line 174 "cds3/core.pyx"
  struct __pyx_obj_4cds3_4core_Att *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 174 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("_get_att", 0);

  /* "cds3/core.pyx":189
 *     cdef CDSAtt *cds_att
 *     cdef Att att
 *     cds_att = cds_get_att(parent, name)             # <<<<<<<<<<<<<<
 *     if cds_att == NULL:
 *         return None
 */

#line 189 "cds3/core.pyx"
  __pyx_v_cds_att = cds_get_att(__pyx_v_parent, __pyx_v_name);

  /* "cds3/core.pyx":190
 *     cdef Att att
 *     cds_att = cds_get_att(parent, name)
 *     if cds_att == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     att = Att()
 */

#line 190 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_cds_att == NULL);

#line 190 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":191
 *     cds_att = cds_get_att(parent, name)
 *     if cds_att == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     att = Att()
 *     att.set_att(cds_att)
 */

#line 191 "cds3/core.pyx"
    __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 191 "cds3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 191 "cds3/core.pyx"
    __pyx_r = ((struct __pyx_obj_4cds3_4core_Att *)Py_None);

#line 191 "cds3/core.pyx"
    goto __pyx_L0;

#line 191 "cds3/core.pyx"
    goto __pyx_L3;

#line 191 "cds3/core.pyx"
  }

#line 191 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":192
 *     if cds_att == NULL:
 *         return None
 *     att = Att()             # <<<<<<<<<<<<<<
 *     att.set_att(cds_att)
 *     return att
 */

#line 192 "cds3/core.pyx"
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Att)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 192 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 192 "cds3/core.pyx"
  __pyx_v_att = ((struct __pyx_obj_4cds3_4core_Att *)__pyx_t_2);

#line 192 "cds3/core.pyx"
  __pyx_t_2 = 0;

  /* "cds3/core.pyx":193
 *         return None
 *     att = Att()
 *     att.set_att(cds_att)             # <<<<<<<<<<<<<<
 *     return att
 * 
 */

#line 193 "cds3/core.pyx"
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Att *)__pyx_v_att->__pyx_base.__pyx_vtab)->set_att(__pyx_v_att, __pyx_v_cds_att); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 193 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 193 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cds3/core.pyx":194
 *     att = Att()
 *     att.set_att(cds_att)
 *     return att             # <<<<<<<<<<<<<<
 * 
 * cdef inline Att _set_att(void *parent, int overwrite, char *name,
 */

#line 194 "cds3/core.pyx"
  __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 194 "cds3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_att));

#line 194 "cds3/core.pyx"
  __pyx_r = __pyx_v_att;

#line 194 "cds3/core.pyx"
  goto __pyx_L0;

#line 194 "cds3/core.pyx"


#line 194 "cds3/core.pyx"
  __pyx_r = ((struct __pyx_obj_4cds3_4core_Att *)Py_None); __Pyx_INCREF(Py_None);

#line 194 "cds3/core.pyx"
  goto __pyx_L0;

#line 194 "cds3/core.pyx"
  __pyx_L1_error:;

#line 194 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 194 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core._get_att", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 194 "cds3/core.pyx"
  __pyx_r = 0;

#line 194 "cds3/core.pyx"
  __pyx_L0:;

#line 194 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_att);

#line 194 "cds3/core.pyx"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 194 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 194 "cds3/core.pyx"
  return __pyx_r;

#line 194 "cds3/core.pyx"
}

/* "cds3/core.pyx":196
 *     return att
 * 
 * cdef inline Att _set_att(void *parent, int overwrite, char *name,             # <<<<<<<<<<<<<<
 *         CDSDataType type, object value):
 *     """Set an attribute of a CDS group or variable.
 */

#line 196 "cds3/core.pyx"


#line 196 "cds3/core.pyx"
static CYTHON_INLINE struct __pyx_obj_4cds3_4core_Att *__pyx_f_4cds3_4core__set_att(void *__pyx_v_parent, int __pyx_v_overwrite, char *__pyx_v_name, CDSDataType __pyx_v_type, PyObject *__pyx_v_value) {
  struct CDSAtt *__pyx_v_cds_att
#line 196 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Att *__pyx_v_att = 0
#line 196 "cds3/core.pyx"
;
  PyArrayObject *__pyx_v_value_nd = 0
#line 196 "cds3/core.pyx"
;

#line 196 "cds3/core.pyx"
  struct __pyx_obj_4cds3_4core_Att *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 196 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("_set_att", 0);

  /* "cds3/core.pyx":224
 *     cdef CDSAtt *cds_att
 *     cdef Att att
 *     cdef np.ndarray value_nd = np.asarray(value, cds_type_to_dtype_obj(type))             # <<<<<<<<<<<<<<
 *     if value_nd.ndim == 0:
 *         value_nd = value_nd[None] # add dummy dimension to a scalar value
 */

#line 224 "cds3/core.pyx"
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 224 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 224 "cds3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__asarray); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 224 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 224 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 224 "cds3/core.pyx"
  __pyx_t_1 = ((PyObject *)__pyx_f_4cds3_4core_cds_type_to_dtype_obj(__pyx_v_type)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 224 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 224 "cds3/core.pyx"
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 224 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 224 "cds3/core.pyx"
  __Pyx_INCREF(__pyx_v_value);

#line 224 "cds3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_value);

#line 224 "cds3/core.pyx"
  __Pyx_GIVEREF(__pyx_v_value);

#line 224 "cds3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);

#line 224 "cds3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 224 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 224 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 224 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 224 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 224 "cds3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 224 "cds3/core.pyx"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 224 "cds3/core.pyx"
  __pyx_v_value_nd = ((PyArrayObject *)__pyx_t_1);

#line 224 "cds3/core.pyx"
  __pyx_t_1 = 0;

  /* "cds3/core.pyx":225
 *     cdef Att att
 *     cdef np.ndarray value_nd = np.asarray(value, cds_type_to_dtype_obj(type))
 *     if value_nd.ndim == 0:             # <<<<<<<<<<<<<<
 *         value_nd = value_nd[None] # add dummy dimension to a scalar value
 *     assert value_nd.ndim == 1
 */

#line 225 "cds3/core.pyx"
  __pyx_t_4 = (__pyx_v_value_nd->nd == 0);

#line 225 "cds3/core.pyx"
  if (__pyx_t_4) {

    /* "cds3/core.pyx":226
 *     cdef np.ndarray value_nd = np.asarray(value, cds_type_to_dtype_obj(type))
 *     if value_nd.ndim == 0:
 *         value_nd = value_nd[None] # add dummy dimension to a scalar value             # <<<<<<<<<<<<<<
 *     assert value_nd.ndim == 1
 *     cds_att = cds_set_att(parent, overwrite, name, type,
 */

#line 226 "cds3/core.pyx"
    __pyx_t_1 = PyObject_GetItem(((PyObject *)__pyx_v_value_nd), Py_None); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 226 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 226 "cds3/core.pyx"
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 226 "cds3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_v_value_nd));

#line 226 "cds3/core.pyx"
    __pyx_v_value_nd = ((PyArrayObject *)__pyx_t_1);

#line 226 "cds3/core.pyx"
    __pyx_t_1 = 0;

#line 226 "cds3/core.pyx"
    goto __pyx_L3;

#line 226 "cds3/core.pyx"
  }

#line 226 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":227
 *     if value_nd.ndim == 0:
 *         value_nd = value_nd[None] # add dummy dimension to a scalar value
 *     assert value_nd.ndim == 1             # <<<<<<<<<<<<<<
 *     cds_att = cds_set_att(parent, overwrite, name, type,
 *             len(value_nd), value_nd.data)
 */

#line 227 "cds3/core.pyx"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 227 "cds3/core.pyx"
  if (unlikely(!(__pyx_v_value_nd->nd == 1))) {

#line 227 "cds3/core.pyx"
    PyErr_SetNone(PyExc_AssertionError);

#line 227 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 227 "cds3/core.pyx"
  }

#line 227 "cds3/core.pyx"
  #endif

  /* "cds3/core.pyx":229
 *     assert value_nd.ndim == 1
 *     cds_att = cds_set_att(parent, overwrite, name, type,
 *             len(value_nd), value_nd.data)             # <<<<<<<<<<<<<<
 *     if cds_att == NULL:
 *         return None
 */

#line 229 "cds3/core.pyx"
  __pyx_t_5 = PyObject_Length(((PyObject *)__pyx_v_value_nd)); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 229 "cds3/core.pyx"
  __pyx_v_cds_att = cds_set_att(__pyx_v_parent, __pyx_v_overwrite, __pyx_v_name, __pyx_v_type, __pyx_t_5, __pyx_v_value_nd->data);

  /* "cds3/core.pyx":230
 *     cds_att = cds_set_att(parent, overwrite, name, type,
 *             len(value_nd), value_nd.data)
 *     if cds_att == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     att = Att()
 */

#line 230 "cds3/core.pyx"
  __pyx_t_4 = (__pyx_v_cds_att == NULL);

#line 230 "cds3/core.pyx"
  if (__pyx_t_4) {

    /* "cds3/core.pyx":231
 *             len(value_nd), value_nd.data)
 *     if cds_att == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     att = Att()
 *     att.set_att(cds_att)
 */

#line 231 "cds3/core.pyx"
    __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 231 "cds3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 231 "cds3/core.pyx"
    __pyx_r = ((struct __pyx_obj_4cds3_4core_Att *)Py_None);

#line 231 "cds3/core.pyx"
    goto __pyx_L0;

#line 231 "cds3/core.pyx"
    goto __pyx_L4;

#line 231 "cds3/core.pyx"
  }

#line 231 "cds3/core.pyx"
  __pyx_L4:;

  /* "cds3/core.pyx":232
 *     if cds_att == NULL:
 *         return None
 *     att = Att()             # <<<<<<<<<<<<<<
 *     att.set_att(cds_att)
 *     return att
 */

#line 232 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Att)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 232 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 232 "cds3/core.pyx"
  __pyx_v_att = ((struct __pyx_obj_4cds3_4core_Att *)__pyx_t_1);

#line 232 "cds3/core.pyx"
  __pyx_t_1 = 0;

  /* "cds3/core.pyx":233
 *         return None
 *     att = Att()
 *     att.set_att(cds_att)             # <<<<<<<<<<<<<<
 *     return att
 * 
 */

#line 233 "cds3/core.pyx"
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cds3_4core_Att *)__pyx_v_att->__pyx_base.__pyx_vtab)->set_att(__pyx_v_att, __pyx_v_cds_att); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 233 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 233 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cds3/core.pyx":234
 *     att = Att()
 *     att.set_att(cds_att)
 *     return att             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 234 "cds3/core.pyx"
  __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 234 "cds3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_att));

#line 234 "cds3/core.pyx"
  __pyx_r = __pyx_v_att;

#line 234 "cds3/core.pyx"
  goto __pyx_L0;

#line 234 "cds3/core.pyx"


#line 234 "cds3/core.pyx"
  __pyx_r = ((struct __pyx_obj_4cds3_4core_Att *)Py_None); __Pyx_INCREF(Py_None);

#line 234 "cds3/core.pyx"
  goto __pyx_L0;

#line 234 "cds3/core.pyx"
  __pyx_L1_error:;

#line 234 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 234 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 234 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 234 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core._set_att", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 234 "cds3/core.pyx"
  __pyx_r = 0;

#line 234 "cds3/core.pyx"
  __pyx_L0:;

#line 234 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_att);

#line 234 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_value_nd);

#line 234 "cds3/core.pyx"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 234 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 234 "cds3/core.pyx"
  return __pyx_r;

#line 234 "cds3/core.pyx"
}

#line 234 "cds3/core.pyx"


#line 234 "cds3/core.pyx"
/* Python wrapper */

#line 234 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_6Object_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 234 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_6Object_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

#line 234 "cds3/core.pyx"
  int __pyx_r;

#line 234 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 234 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 234 "cds3/core.pyx"
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;
#line 234 "cds3/core.pyx"
}

#line 234 "cds3/core.pyx"
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = 
#line 234 "cds3/core.pyx"
__pyx_pf_4cds3_4core_6Object___cinit__(((struct __pyx_obj_4cds3_4core_Object *)__pyx_v_self));

#line 234 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 234 "cds3/core.pyx"
  return __pyx_r;

#line 234 "cds3/core.pyx"
}

/* "cds3/core.pyx":245
 *     """CDSObject"""
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         """TODO"""
 *         self.cds_object = NULL
 */

#line 245 "cds3/core.pyx"


#line 245 "cds3/core.pyx"
static int __pyx_pf_4cds3_4core_6Object___cinit__(struct __pyx_obj_4cds3_4core_Object *__pyx_v_self) {

#line 245 "cds3/core.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations

#line 245 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cds3/core.pyx":247
 *     def __cinit__(self):
 *         """TODO"""
 *         self.cds_object = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */

#line 247 "cds3/core.pyx"
  __pyx_v_self->cds_object = NULL;

#line 247 "cds3/core.pyx"


#line 247 "cds3/core.pyx"
  __pyx_r = 0;

#line 247 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 247 "cds3/core.pyx"
  return __pyx_r;

#line 247 "cds3/core.pyx"
}

#line 247 "cds3/core.pyx"


#line 247 "cds3/core.pyx"
/* Python wrapper */

#line 247 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_6Object_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 247 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_6Object_2__init__[] = "TODO";

#line 247 "cds3/core.pyx"
#if CYTHON_COMPILING_IN_CPYTHON

#line 247 "cds3/core.pyx"
struct wrapperbase __pyx_wrapperbase_4cds3_4core_6Object_2__init__;

#line 247 "cds3/core.pyx"
#endif

#line 247 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_6Object_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

#line 247 "cds3/core.pyx"
  int __pyx_r;

#line 247 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 247 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);

#line 247 "cds3/core.pyx"
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;
#line 247 "cds3/core.pyx"
}

#line 247 "cds3/core.pyx"
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = 
#line 247 "cds3/core.pyx"
__pyx_pf_4cds3_4core_6Object_2__init__(((struct __pyx_obj_4cds3_4core_Object *)__pyx_v_self));

#line 247 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 247 "cds3/core.pyx"
  return __pyx_r;

#line 247 "cds3/core.pyx"
}

/* "cds3/core.pyx":249
 *         self.cds_object = NULL
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """TODO"""
 *         self.user_data = {}
 */

#line 249 "cds3/core.pyx"


#line 249 "cds3/core.pyx"
static int __pyx_pf_4cds3_4core_6Object_2__init__(struct __pyx_obj_4cds3_4core_Object *__pyx_v_self) {

#line 249 "cds3/core.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 249 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "cds3/core.pyx":251
 *     def __init__(self):
 *         """TODO"""
 *         self.user_data = {}             # <<<<<<<<<<<<<<
 * 
 *     cdef set_object(self, CDSObject *obj):
 */

#line 251 "cds3/core.pyx"
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 251 "cds3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 251 "cds3/core.pyx"
  if (PyObject_SetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__user_data, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 251 "cds3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

#line 251 "cds3/core.pyx"


#line 251 "cds3/core.pyx"
  __pyx_r = 0;

#line 251 "cds3/core.pyx"
  goto __pyx_L0;

#line 251 "cds3/core.pyx"
  __pyx_L1_error:;

#line 251 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 251 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Object.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 251 "cds3/core.pyx"
  __pyx_r = -1;

#line 251 "cds3/core.pyx"
  __pyx_L0:;

#line 251 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 251 "cds3/core.pyx"
  return __pyx_r;

#line 251 "cds3/core.pyx"
}

/* "cds3/core.pyx":253
 *         self.user_data = {}
 * 
 *     cdef set_object(self, CDSObject *obj):             # <<<<<<<<<<<<<<
 *         """TODO"""
 *         self.cds_object = obj
 */

#line 253 "cds3/core.pyx"


#line 253 "cds3/core.pyx"
static PyObject *__pyx_f_4cds3_4core_6Object_set_object(struct __pyx_obj_4cds3_4core_Object *__pyx_v_self, struct CDSObject *__pyx_v_obj) {

#line 253 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations

#line 253 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("set_object", 0);

  /* "cds3/core.pyx":255
 *     cdef set_object(self, CDSObject *obj):
 *         """TODO"""
 *         self.cds_object = obj             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */

#line 255 "cds3/core.pyx"
  __pyx_v_self->cds_object = __pyx_v_obj;

#line 255 "cds3/core.pyx"


#line 255 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 255 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 255 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 255 "cds3/core.pyx"
  return __pyx_r;

#line 255 "cds3/core.pyx"
}

#line 255 "cds3/core.pyx"


#line 255 "cds3/core.pyx"
/* Python wrapper */

#line 255 "cds3/core.pyx"
static void __pyx_pw_4cds3_4core_6Object_5__dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 255 "cds3/core.pyx"
static void __pyx_pw_4cds3_4core_6Object_5__dealloc__(PyObject *__pyx_v_self) {

#line 255 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 255 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 255 "cds3/core.pyx"
  __pyx_pf_4cds3_4core_6Object_4__dealloc__(((struct __pyx_obj_4cds3_4core_Object *)__pyx_v_self));

#line 255 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 255 "cds3/core.pyx"
}

/* "cds3/core.pyx":257
 *         self.cds_object = obj
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """TODO"""
 *         pass
 */

#line 257 "cds3/core.pyx"


#line 257 "cds3/core.pyx"
static void __pyx_pf_4cds3_4core_6Object_4__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_Object *__pyx_v_self) {
  __Pyx_RefNannyDeclarations

#line 257 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

#line 257 "cds3/core.pyx"


#line 257 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 257 "cds3/core.pyx"
}

#line 257 "cds3/core.pyx"


#line 257 "cds3/core.pyx"
/* Python wrapper */

#line 257 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_6Object_7get_name(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 257 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_6Object_6get_name[] = "Object.get_name(self)\nReturns the object name.";

#line 257 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_6Object_7get_name(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 257 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 257 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 257 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_name (wrapper)", 0);
  __pyx_r = 
#line 257 "cds3/core.pyx"
__pyx_pf_4cds3_4core_6Object_6get_name(((struct __pyx_obj_4cds3_4core_Object *)__pyx_v_self));

#line 257 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 257 "cds3/core.pyx"
  return __pyx_r;

#line 257 "cds3/core.pyx"
}

/* "cds3/core.pyx":261
 *         pass
 * 
 *     def get_name(self):             # <<<<<<<<<<<<<<
 *         """Returns the object name."""
 *         return self.cds_object.name
 */

#line 261 "cds3/core.pyx"


#line 261 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_6Object_6get_name(struct __pyx_obj_4cds3_4core_Object *__pyx_v_self) {

#line 261 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 261 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_name", 0);

  /* "cds3/core.pyx":263
 *     def get_name(self):
 *         """Returns the object name."""
 *         return self.cds_object.name             # <<<<<<<<<<<<<<
 * 
 *     def get_path(self):
 */

#line 263 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 263 "cds3/core.pyx"
  __pyx_t_1 = PyBytes_FromString(__pyx_v_self->cds_object->name); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 263 "cds3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 263 "cds3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_t_1);

#line 263 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 263 "cds3/core.pyx"
  goto __pyx_L0;

#line 263 "cds3/core.pyx"


#line 263 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 263 "cds3/core.pyx"
  goto __pyx_L0;

#line 263 "cds3/core.pyx"
  __pyx_L1_error:;

#line 263 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 263 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Object.get_name", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 263 "cds3/core.pyx"
  __pyx_r = NULL;

#line 263 "cds3/core.pyx"
  __pyx_L0:;

#line 263 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 263 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 263 "cds3/core.pyx"
  return __pyx_r;

#line 263 "cds3/core.pyx"
}

#line 263 "cds3/core.pyx"


#line 263 "cds3/core.pyx"
/* Python wrapper */

#line 263 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_6Object_9get_path(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 263 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_6Object_8get_path[] = "Object.get_path(self)\nReturns the object path.";

#line 263 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_6Object_9get_path(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 263 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 263 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 263 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_path (wrapper)", 0);
  __pyx_r = 
#line 263 "cds3/core.pyx"
__pyx_pf_4cds3_4core_6Object_8get_path(((struct __pyx_obj_4cds3_4core_Object *)__pyx_v_self));

#line 263 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 263 "cds3/core.pyx"
  return __pyx_r;

#line 263 "cds3/core.pyx"
}

/* "cds3/core.pyx":265
 *         return self.cds_object.name
 * 
 *     def get_path(self):             # <<<<<<<<<<<<<<
 *         """Returns the object path."""
 *         return cds_get_object_path(self.cds_object)
 */

#line 265 "cds3/core.pyx"


#line 265 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_6Object_8get_path(struct __pyx_obj_4cds3_4core_Object *__pyx_v_self) {

#line 265 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 265 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_path", 0);

  /* "cds3/core.pyx":267
 *     def get_path(self):
 *         """Returns the object path."""
 *         return cds_get_object_path(self.cds_object)             # <<<<<<<<<<<<<<
 * 
 *     def set_definition_lock(self, int value):
 */

#line 267 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 267 "cds3/core.pyx"
  __pyx_t_1 = PyBytes_FromString(cds_get_object_path(__pyx_v_self->cds_object)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 267 "cds3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 267 "cds3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_t_1);

#line 267 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 267 "cds3/core.pyx"
  goto __pyx_L0;

#line 267 "cds3/core.pyx"


#line 267 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 267 "cds3/core.pyx"
  goto __pyx_L0;

#line 267 "cds3/core.pyx"
  __pyx_L1_error:;

#line 267 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 267 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Object.get_path", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 267 "cds3/core.pyx"
  __pyx_r = NULL;

#line 267 "cds3/core.pyx"
  __pyx_L0:;

#line 267 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 267 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 267 "cds3/core.pyx"
  return __pyx_r;

#line 267 "cds3/core.pyx"
}

#line 267 "cds3/core.pyx"


#line 267 "cds3/core.pyx"
/* Python wrapper */

#line 267 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_6Object_11set_definition_lock(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/

#line 267 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_6Object_10set_definition_lock[] = "Object.set_definition_lock(self, int value)\nSets the definition lock.";

#line 267 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_6Object_11set_definition_lock(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  int __pyx_v_value
#line 267 "cds3/core.pyx"
;

#line 267 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 267 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 267 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("set_definition_lock (wrapper)", 0);

#line 267 "cds3/core.pyx"
  assert(__pyx_arg_value); {

#line 267 "cds3/core.pyx"
    __pyx_v_value = __Pyx_PyInt_AsInt(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 267 "cds3/core.pyx"
  }

#line 267 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 267 "cds3/core.pyx"
  __pyx_L3_error:;

#line 267 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Object.set_definition_lock", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 267 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 267 "cds3/core.pyx"
  return NULL;

#line 267 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 267 "cds3/core.pyx"
__pyx_pf_4cds3_4core_6Object_10set_definition_lock(((struct __pyx_obj_4cds3_4core_Object *)__pyx_v_self), ((int)__pyx_v_value));

#line 267 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 267 "cds3/core.pyx"
  return __pyx_r;

#line 267 "cds3/core.pyx"
}

/* "cds3/core.pyx":269
 *         return cds_get_object_path(self.cds_object)
 * 
 *     def set_definition_lock(self, int value):             # <<<<<<<<<<<<<<
 *         """Sets the definition lock."""
 *         cds_set_definition_lock(self.cds_object, value)
 */

#line 269 "cds3/core.pyx"


#line 269 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_6Object_10set_definition_lock(struct __pyx_obj_4cds3_4core_Object *__pyx_v_self, int __pyx_v_value) {

#line 269 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations

#line 269 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("set_definition_lock", 0);

  /* "cds3/core.pyx":271
 *     def set_definition_lock(self, int value):
 *         """Sets the definition lock."""
 *         cds_set_definition_lock(self.cds_object, value)             # <<<<<<<<<<<<<<
 * 
 *     def delete_user_data(self, char *key):
 */

#line 271 "cds3/core.pyx"
  cds_set_definition_lock(__pyx_v_self->cds_object, __pyx_v_value);

#line 271 "cds3/core.pyx"


#line 271 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 271 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 271 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 271 "cds3/core.pyx"
  return __pyx_r;

#line 271 "cds3/core.pyx"
}

#line 271 "cds3/core.pyx"


#line 271 "cds3/core.pyx"
/* Python wrapper */

#line 271 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_6Object_13delete_user_data(PyObject *__pyx_v_self, PyObject *__pyx_arg_key); /*proto*/

#line 271 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_6Object_12delete_user_data[] = "Object.delete_user_data(self, char *key)\nDeletes the user data with the specified key.";

#line 271 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_6Object_13delete_user_data(PyObject *__pyx_v_self, PyObject *__pyx_arg_key) {
  char *__pyx_v_key
#line 271 "cds3/core.pyx"
;

#line 271 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 271 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 271 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("delete_user_data (wrapper)", 0);

#line 271 "cds3/core.pyx"
  assert(__pyx_arg_key); {

#line 271 "cds3/core.pyx"
    __pyx_v_key = PyBytes_AsString(__pyx_arg_key); if (unlikely((!__pyx_v_key) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 271 "cds3/core.pyx"
  }

#line 271 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 271 "cds3/core.pyx"
  __pyx_L3_error:;

#line 271 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Object.delete_user_data", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 271 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 271 "cds3/core.pyx"
  return NULL;

#line 271 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 271 "cds3/core.pyx"
__pyx_pf_4cds3_4core_6Object_12delete_user_data(((struct __pyx_obj_4cds3_4core_Object *)__pyx_v_self), ((char *)__pyx_v_key));

#line 271 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 271 "cds3/core.pyx"
  return __pyx_r;

#line 271 "cds3/core.pyx"
}

/* "cds3/core.pyx":273
 *         cds_set_definition_lock(self.cds_object, value)
 * 
 *     def delete_user_data(self, char *key):             # <<<<<<<<<<<<<<
 *         """Deletes the user data with the specified key."""
 *         if key in self.user_data:
 */

#line 273 "cds3/core.pyx"


#line 273 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_6Object_12delete_user_data(struct __pyx_obj_4cds3_4core_Object *__pyx_v_self, char *__pyx_v_key) {

#line 273 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 273 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("delete_user_data", 0);

  /* "cds3/core.pyx":275
 *     def delete_user_data(self, char *key):
 *         """Deletes the user data with the specified key."""
 *         if key in self.user_data:             # <<<<<<<<<<<<<<
 *             del self.user_data[key]
 * 
 */

#line 275 "cds3/core.pyx"
  __pyx_t_1 = PyBytes_FromString(__pyx_v_key); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 275 "cds3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 275 "cds3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__user_data); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 275 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 275 "cds3/core.pyx"
  __pyx_t_3 = (__Pyx_PySequence_Contains(((PyObject *)__pyx_t_1), __pyx_t_2, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 275 "cds3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

#line 275 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 275 "cds3/core.pyx"
  if (__pyx_t_3) {

    /* "cds3/core.pyx":276
 *         """Deletes the user data with the specified key."""
 *         if key in self.user_data:
 *             del self.user_data[key]             # <<<<<<<<<<<<<<
 * 
 *     def get_user_data(self, char *key):
 */

#line 276 "cds3/core.pyx"
    __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__user_data); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 276 "cds3/core.pyx"
    __pyx_t_1 = PyBytes_FromString(__pyx_v_key); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "cds3/core.pyx"
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 276 "cds3/core.pyx"
    if (PyObject_DelItem(__pyx_t_2, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "cds3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 276 "cds3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

#line 276 "cds3/core.pyx"
    goto __pyx_L3;

#line 276 "cds3/core.pyx"
  }

#line 276 "cds3/core.pyx"
  __pyx_L3:;

#line 276 "cds3/core.pyx"


#line 276 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 276 "cds3/core.pyx"
  goto __pyx_L0;

#line 276 "cds3/core.pyx"
  __pyx_L1_error:;

#line 276 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 276 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 276 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Object.delete_user_data", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 276 "cds3/core.pyx"
  __pyx_r = NULL;

#line 276 "cds3/core.pyx"
  __pyx_L0:;

#line 276 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 276 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 276 "cds3/core.pyx"
  return __pyx_r;

#line 276 "cds3/core.pyx"
}

#line 276 "cds3/core.pyx"


#line 276 "cds3/core.pyx"
/* Python wrapper */

#line 276 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_6Object_15get_user_data(PyObject *__pyx_v_self, PyObject *__pyx_arg_key); /*proto*/

#line 276 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_6Object_14get_user_data[] = "Object.get_user_data(self, char *key)\nReturns the user data with the specified key, or None if invalid.";

#line 276 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_6Object_15get_user_data(PyObject *__pyx_v_self, PyObject *__pyx_arg_key) {
  char *__pyx_v_key
#line 276 "cds3/core.pyx"
;

#line 276 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 276 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 276 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_user_data (wrapper)", 0);

#line 276 "cds3/core.pyx"
  assert(__pyx_arg_key); {

#line 276 "cds3/core.pyx"
    __pyx_v_key = PyBytes_AsString(__pyx_arg_key); if (unlikely((!__pyx_v_key) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 276 "cds3/core.pyx"
  }

#line 276 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 276 "cds3/core.pyx"
  __pyx_L3_error:;

#line 276 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Object.get_user_data", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 276 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 276 "cds3/core.pyx"
  return NULL;

#line 276 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 276 "cds3/core.pyx"
__pyx_pf_4cds3_4core_6Object_14get_user_data(((struct __pyx_obj_4cds3_4core_Object *)__pyx_v_self), ((char *)__pyx_v_key));

#line 276 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 276 "cds3/core.pyx"
  return __pyx_r;

#line 276 "cds3/core.pyx"
}

/* "cds3/core.pyx":278
 *             del self.user_data[key]
 * 
 *     def get_user_data(self, char *key):             # <<<<<<<<<<<<<<
 *         """Returns the user data with the specified key, or None if invalid."""
 *         return self.user_data.get(key)
 */

#line 278 "cds3/core.pyx"


#line 278 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_6Object_14get_user_data(struct __pyx_obj_4cds3_4core_Object *__pyx_v_self, char *__pyx_v_key) {

#line 278 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 278 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_user_data", 0);

  /* "cds3/core.pyx":280
 *     def get_user_data(self, char *key):
 *         """Returns the user data with the specified key, or None if invalid."""
 *         return self.user_data.get(key)             # <<<<<<<<<<<<<<
 * 
 *     def set_user_data(self, char *key, value):
 */

#line 280 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 280 "cds3/core.pyx"
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__user_data); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 280 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 280 "cds3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__get); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 280 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 280 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 280 "cds3/core.pyx"
  __pyx_t_1 = PyBytes_FromString(__pyx_v_key); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 280 "cds3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 280 "cds3/core.pyx"
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 280 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 280 "cds3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_1));

#line 280 "cds3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));

#line 280 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 280 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 280 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 280 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 280 "cds3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 280 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 280 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 280 "cds3/core.pyx"
  goto __pyx_L0;

#line 280 "cds3/core.pyx"


#line 280 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 280 "cds3/core.pyx"
  goto __pyx_L0;

#line 280 "cds3/core.pyx"
  __pyx_L1_error:;

#line 280 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 280 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 280 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 280 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Object.get_user_data", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 280 "cds3/core.pyx"
  __pyx_r = NULL;

#line 280 "cds3/core.pyx"
  __pyx_L0:;

#line 280 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 280 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 280 "cds3/core.pyx"
  return __pyx_r;

#line 280 "cds3/core.pyx"
}

#line 280 "cds3/core.pyx"


#line 280 "cds3/core.pyx"
/* Python wrapper */

#line 280 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_6Object_17set_user_data(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 280 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_6Object_16set_user_data[] = "Object.set_user_data(self, char *key, value)\nSets the user data with the given key to the given value.";

#line 280 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_6Object_17set_user_data(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_key
#line 280 "cds3/core.pyx"
;
  PyObject *__pyx_v_value = 0
#line 280 "cds3/core.pyx"
;

#line 280 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 280 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 280 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("set_user_data (wrapper)", 0);

#line 280 "cds3/core.pyx"
  {

#line 280 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__key,&__pyx_n_s__value,0};

#line 280 "cds3/core.pyx"
    PyObject* values[2] = {0,0};

#line 280 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 280 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 280 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 280 "cds3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 280 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 280 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 280 "cds3/core.pyx"
        case  0: break;
        default: 
#line 280 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 280 "cds3/core.pyx"
      }

#line 280 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 280 "cds3/core.pyx"
      switch (pos_args) {

#line 280 "cds3/core.pyx"
        case  0:

#line 280 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__key)) != 0)) kw_args--;
        else 
#line 280 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 280 "cds3/core.pyx"
        case  1:

#line 280 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value)) != 0)) kw_args--;

#line 280 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_user_data", 1, 2, 2, 1); 
#line 280 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 280 "cds3/core.pyx"
        }

#line 280 "cds3/core.pyx"
      }

#line 280 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 280 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_user_data") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 280 "cds3/core.pyx"
      }

#line 280 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 280 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 280 "cds3/core.pyx"
    } else {

#line 280 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 280 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 280 "cds3/core.pyx"
    }

#line 280 "cds3/core.pyx"
    __pyx_v_key = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_key) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 280 "cds3/core.pyx"
    __pyx_v_value = values[1];

#line 280 "cds3/core.pyx"
  }

#line 280 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 280 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_user_data", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 280 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 280 "cds3/core.pyx"
  __pyx_L3_error:;

#line 280 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Object.set_user_data", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 280 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 280 "cds3/core.pyx"
  return NULL;

#line 280 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 280 "cds3/core.pyx"
__pyx_pf_4cds3_4core_6Object_16set_user_data(((struct __pyx_obj_4cds3_4core_Object *)__pyx_v_self), __pyx_v_key, __pyx_v_value);

#line 280 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 280 "cds3/core.pyx"
  return __pyx_r;

#line 280 "cds3/core.pyx"
}

/* "cds3/core.pyx":282
 *         return self.user_data.get(key)
 * 
 *     def set_user_data(self, char *key, value):             # <<<<<<<<<<<<<<
 *         """Sets the user data with the given key to the given value."""
 *         self.user_data[key] = value
 */

#line 282 "cds3/core.pyx"


#line 282 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_6Object_16set_user_data(struct __pyx_obj_4cds3_4core_Object *__pyx_v_self, char *__pyx_v_key, PyObject *__pyx_v_value) {

#line 282 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 282 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("set_user_data", 0);

  /* "cds3/core.pyx":284
 *     def set_user_data(self, char *key, value):
 *         """Sets the user data with the given key to the given value."""
 *         self.user_data[key] = value             # <<<<<<<<<<<<<<
 *         return 1
 * 
 */

#line 284 "cds3/core.pyx"
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__user_data); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 284 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 284 "cds3/core.pyx"
  __pyx_t_2 = PyBytes_FromString(__pyx_v_key); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 284 "cds3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));

#line 284 "cds3/core.pyx"
  if (PyObject_SetItem(__pyx_t_1, ((PyObject *)__pyx_t_2), __pyx_v_value) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 284 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 284 "cds3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

  /* "cds3/core.pyx":285
 *         """Sets the user data with the given key to the given value."""
 *         self.user_data[key] = value
 *         return 1             # <<<<<<<<<<<<<<
 * 
 *     def get_user_data_dict(self):
 */

#line 285 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 285 "cds3/core.pyx"
  __Pyx_INCREF(__pyx_int_1);

#line 285 "cds3/core.pyx"
  __pyx_r = __pyx_int_1;

#line 285 "cds3/core.pyx"
  goto __pyx_L0;

#line 285 "cds3/core.pyx"


#line 285 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 285 "cds3/core.pyx"
  goto __pyx_L0;

#line 285 "cds3/core.pyx"
  __pyx_L1_error:;

#line 285 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 285 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 285 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Object.set_user_data", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 285 "cds3/core.pyx"
  __pyx_r = NULL;

#line 285 "cds3/core.pyx"
  __pyx_L0:;

#line 285 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 285 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 285 "cds3/core.pyx"
  return __pyx_r;

#line 285 "cds3/core.pyx"
}

#line 285 "cds3/core.pyx"


#line 285 "cds3/core.pyx"
/* Python wrapper */

#line 285 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_6Object_19get_user_data_dict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 285 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_6Object_18get_user_data_dict[] = "Object.get_user_data_dict(self)\nReturn all user data key/value entries as a dictionary.";

#line 285 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_6Object_19get_user_data_dict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 285 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 285 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 285 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_user_data_dict (wrapper)", 0);
  __pyx_r = 
#line 285 "cds3/core.pyx"
__pyx_pf_4cds3_4core_6Object_18get_user_data_dict(((struct __pyx_obj_4cds3_4core_Object *)__pyx_v_self));

#line 285 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 285 "cds3/core.pyx"
  return __pyx_r;

#line 285 "cds3/core.pyx"
}

/* "cds3/core.pyx":287
 *         return 1
 * 
 *     def get_user_data_dict(self):             # <<<<<<<<<<<<<<
 *         """Return all user data key/value entries as a dictionary."""
 *         return self.user_data
 */

#line 287 "cds3/core.pyx"


#line 287 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_6Object_18get_user_data_dict(struct __pyx_obj_4cds3_4core_Object *__pyx_v_self) {

#line 287 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 287 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_user_data_dict", 0);

  /* "cds3/core.pyx":289
 *     def get_user_data_dict(self):
 *         """Return all user data key/value entries as a dictionary."""
 *         return self.user_data             # <<<<<<<<<<<<<<
 * 
 *     def get_parent(self):
 */

#line 289 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 289 "cds3/core.pyx"
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__user_data); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 289 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 289 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 289 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 289 "cds3/core.pyx"
  goto __pyx_L0;

#line 289 "cds3/core.pyx"


#line 289 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 289 "cds3/core.pyx"
  goto __pyx_L0;

#line 289 "cds3/core.pyx"
  __pyx_L1_error:;

#line 289 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 289 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Object.get_user_data_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 289 "cds3/core.pyx"
  __pyx_r = NULL;

#line 289 "cds3/core.pyx"
  __pyx_L0:;

#line 289 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 289 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 289 "cds3/core.pyx"
  return __pyx_r;

#line 289 "cds3/core.pyx"
}

#line 289 "cds3/core.pyx"


#line 289 "cds3/core.pyx"
/* Python wrapper */

#line 289 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_6Object_21get_parent(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 289 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_6Object_20get_parent[] = "Object.get_parent(self)\nGet the parent of this object, or None if there is no parent.";

#line 289 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_6Object_21get_parent(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 289 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 289 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 289 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_parent (wrapper)", 0);
  __pyx_r = 
#line 289 "cds3/core.pyx"
__pyx_pf_4cds3_4core_6Object_20get_parent(((struct __pyx_obj_4cds3_4core_Object *)__pyx_v_self));

#line 289 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 289 "cds3/core.pyx"
  return __pyx_r;

#line 289 "cds3/core.pyx"
}

/* "cds3/core.pyx":291
 *         return self.user_data
 * 
 *     def get_parent(self):             # <<<<<<<<<<<<<<
 *         """Get the parent of this object, or None if there is no parent."""
 *         cdef CDSObject *parent = NULL
 */

#line 291 "cds3/core.pyx"


#line 291 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_6Object_20get_parent(struct __pyx_obj_4cds3_4core_Object *__pyx_v_self) {
  struct CDSObject *__pyx_v_parent
#line 291 "cds3/core.pyx"
;
  CDSObjectType __pyx_v_type
#line 291 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Group *__pyx_v_group = 0
#line 291 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Dim *__pyx_v_dim = 0
#line 291 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Att *__pyx_v_att = 0
#line 291 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = 0
#line 291 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_VarGroup *__pyx_v_vargroup = 0
#line 291 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_VarArray *__pyx_v_vararray = 0
#line 291 "cds3/core.pyx"
;

#line 291 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  struct CDSObject *__pyx_t_1;
  int __pyx_t_2;
  CDSObjectType __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 291 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_parent", 0);

  /* "cds3/core.pyx":293
 *     def get_parent(self):
 *         """Get the parent of this object, or None if there is no parent."""
 *         cdef CDSObject *parent = NULL             # <<<<<<<<<<<<<<
 *         cdef CDSObjectType type
 *         cdef Group group
 */

#line 293 "cds3/core.pyx"
  __pyx_v_parent = NULL;

  /* "cds3/core.pyx":301
 *         cdef VarGroup vargroup
 *         cdef VarArray vararray
 *         parent = self.cds_object.parent             # <<<<<<<<<<<<<<
 *         if not parent:
 *             return None
 */

#line 301 "cds3/core.pyx"
  __pyx_t_1 = __pyx_v_self->cds_object->parent;

#line 301 "cds3/core.pyx"
  __pyx_v_parent = __pyx_t_1;

  /* "cds3/core.pyx":302
 *         cdef VarArray vararray
 *         parent = self.cds_object.parent
 *         if not parent:             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */

#line 302 "cds3/core.pyx"
  __pyx_t_2 = (!(__pyx_v_parent != 0));

#line 302 "cds3/core.pyx"
  if (__pyx_t_2) {

    /* "cds3/core.pyx":303
 *         parent = self.cds_object.parent
 *         if not parent:
 *             return None             # <<<<<<<<<<<<<<
 *         else:
 *             type = parent.obj_type
 */

#line 303 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 303 "cds3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 303 "cds3/core.pyx"
    __pyx_r = Py_None;

#line 303 "cds3/core.pyx"
    goto __pyx_L0;

#line 303 "cds3/core.pyx"
    goto __pyx_L3;

#line 303 "cds3/core.pyx"
  }

#line 303 "cds3/core.pyx"
  /*else*/ {

    /* "cds3/core.pyx":305
 *             return None
 *         else:
 *             type = parent.obj_type             # <<<<<<<<<<<<<<
 *         if type == ccds3_enums.CDS_GROUP:
 *             group = Group()
 */

#line 305 "cds3/core.pyx"
    __pyx_t_3 = __pyx_v_parent->obj_type;

#line 305 "cds3/core.pyx"
    __pyx_v_type = __pyx_t_3;

#line 305 "cds3/core.pyx"
  }

#line 305 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":306
 *         else:
 *             type = parent.obj_type
 *         if type == ccds3_enums.CDS_GROUP:             # <<<<<<<<<<<<<<
 *             group = Group()
 *             group.set_group(<CDSGroup*>parent)
 */

#line 306 "cds3/core.pyx"
  __pyx_t_2 = (__pyx_v_type == CDS_GROUP);

#line 306 "cds3/core.pyx"
  if (__pyx_t_2) {

    /* "cds3/core.pyx":307
 *             type = parent.obj_type
 *         if type == ccds3_enums.CDS_GROUP:
 *             group = Group()             # <<<<<<<<<<<<<<
 *             group.set_group(<CDSGroup*>parent)
 *             return group
 */

#line 307 "cds3/core.pyx"
    __pyx_t_4 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Group)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 307 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 307 "cds3/core.pyx"
    __pyx_v_group = ((struct __pyx_obj_4cds3_4core_Group *)__pyx_t_4);

#line 307 "cds3/core.pyx"
    __pyx_t_4 = 0;

    /* "cds3/core.pyx":308
 *         if type == ccds3_enums.CDS_GROUP:
 *             group = Group()
 *             group.set_group(<CDSGroup*>parent)             # <<<<<<<<<<<<<<
 *             return group
 *         elif type == ccds3_enums.CDS_DIM:
 */

#line 308 "cds3/core.pyx"
    __pyx_t_4 = ((struct __pyx_vtabstruct_4cds3_4core_Group *)__pyx_v_group->__pyx_base.__pyx_vtab)->set_group(__pyx_v_group, ((struct CDSGroup *)__pyx_v_parent)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 308 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 308 "cds3/core.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "cds3/core.pyx":309
 *             group = Group()
 *             group.set_group(<CDSGroup*>parent)
 *             return group             # <<<<<<<<<<<<<<
 *         elif type == ccds3_enums.CDS_DIM:
 *             dim = Dim()
 */

#line 309 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 309 "cds3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_group));

#line 309 "cds3/core.pyx"
    __pyx_r = ((PyObject *)__pyx_v_group);

#line 309 "cds3/core.pyx"
    goto __pyx_L0;

#line 309 "cds3/core.pyx"
    goto __pyx_L4;

#line 309 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":310
 *             group.set_group(<CDSGroup*>parent)
 *             return group
 *         elif type == ccds3_enums.CDS_DIM:             # <<<<<<<<<<<<<<
 *             dim = Dim()
 *             dim.set_dim(<CDSDim*>parent)
 */

#line 310 "cds3/core.pyx"
  __pyx_t_2 = (__pyx_v_type == CDS_DIM);

#line 310 "cds3/core.pyx"
  if (__pyx_t_2) {

    /* "cds3/core.pyx":311
 *             return group
 *         elif type == ccds3_enums.CDS_DIM:
 *             dim = Dim()             # <<<<<<<<<<<<<<
 *             dim.set_dim(<CDSDim*>parent)
 *             return dim
 */

#line 311 "cds3/core.pyx"
    __pyx_t_4 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Dim)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 311 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 311 "cds3/core.pyx"
    __pyx_v_dim = ((struct __pyx_obj_4cds3_4core_Dim *)__pyx_t_4);

#line 311 "cds3/core.pyx"
    __pyx_t_4 = 0;

    /* "cds3/core.pyx":312
 *         elif type == ccds3_enums.CDS_DIM:
 *             dim = Dim()
 *             dim.set_dim(<CDSDim*>parent)             # <<<<<<<<<<<<<<
 *             return dim
 *         elif type == ccds3_enums.CDS_ATT:
 */

#line 312 "cds3/core.pyx"
    __pyx_t_4 = ((struct __pyx_vtabstruct_4cds3_4core_Dim *)__pyx_v_dim->__pyx_base.__pyx_vtab)->set_dim(__pyx_v_dim, ((struct CDSDim *)__pyx_v_parent)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 312 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 312 "cds3/core.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "cds3/core.pyx":313
 *             dim = Dim()
 *             dim.set_dim(<CDSDim*>parent)
 *             return dim             # <<<<<<<<<<<<<<
 *         elif type == ccds3_enums.CDS_ATT:
 *             att = Att()
 */

#line 313 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 313 "cds3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_dim));

#line 313 "cds3/core.pyx"
    __pyx_r = ((PyObject *)__pyx_v_dim);

#line 313 "cds3/core.pyx"
    goto __pyx_L0;

#line 313 "cds3/core.pyx"
    goto __pyx_L4;

#line 313 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":314
 *             dim.set_dim(<CDSDim*>parent)
 *             return dim
 *         elif type == ccds3_enums.CDS_ATT:             # <<<<<<<<<<<<<<
 *             att = Att()
 *             att.set_att(<CDSAtt*>parent)
 */

#line 314 "cds3/core.pyx"
  __pyx_t_2 = (__pyx_v_type == CDS_ATT);

#line 314 "cds3/core.pyx"
  if (__pyx_t_2) {

    /* "cds3/core.pyx":315
 *             return dim
 *         elif type == ccds3_enums.CDS_ATT:
 *             att = Att()             # <<<<<<<<<<<<<<
 *             att.set_att(<CDSAtt*>parent)
 *             return att
 */

#line 315 "cds3/core.pyx"
    __pyx_t_4 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Att)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 315 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 315 "cds3/core.pyx"
    __pyx_v_att = ((struct __pyx_obj_4cds3_4core_Att *)__pyx_t_4);

#line 315 "cds3/core.pyx"
    __pyx_t_4 = 0;

    /* "cds3/core.pyx":316
 *         elif type == ccds3_enums.CDS_ATT:
 *             att = Att()
 *             att.set_att(<CDSAtt*>parent)             # <<<<<<<<<<<<<<
 *             return att
 *         elif type == ccds3_enums.CDS_VAR:
 */

#line 316 "cds3/core.pyx"
    __pyx_t_4 = ((struct __pyx_vtabstruct_4cds3_4core_Att *)__pyx_v_att->__pyx_base.__pyx_vtab)->set_att(__pyx_v_att, ((struct CDSAtt *)__pyx_v_parent)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 316 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 316 "cds3/core.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "cds3/core.pyx":317
 *             att = Att()
 *             att.set_att(<CDSAtt*>parent)
 *             return att             # <<<<<<<<<<<<<<
 *         elif type == ccds3_enums.CDS_VAR:
 *             var = Var()
 */

#line 317 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 317 "cds3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_att));

#line 317 "cds3/core.pyx"
    __pyx_r = ((PyObject *)__pyx_v_att);

#line 317 "cds3/core.pyx"
    goto __pyx_L0;

#line 317 "cds3/core.pyx"
    goto __pyx_L4;

#line 317 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":318
 *             att.set_att(<CDSAtt*>parent)
 *             return att
 *         elif type == ccds3_enums.CDS_VAR:             # <<<<<<<<<<<<<<
 *             var = Var()
 *             var.set_var(<CDSVar*>parent)
 */

#line 318 "cds3/core.pyx"
  __pyx_t_2 = (__pyx_v_type == CDS_VAR);

#line 318 "cds3/core.pyx"
  if (__pyx_t_2) {

    /* "cds3/core.pyx":319
 *             return att
 *         elif type == ccds3_enums.CDS_VAR:
 *             var = Var()             # <<<<<<<<<<<<<<
 *             var.set_var(<CDSVar*>parent)
 *             return var
 */

#line 319 "cds3/core.pyx"
    __pyx_t_4 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Var)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 319 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 319 "cds3/core.pyx"
    __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)__pyx_t_4);

#line 319 "cds3/core.pyx"
    __pyx_t_4 = 0;

    /* "cds3/core.pyx":320
 *         elif type == ccds3_enums.CDS_VAR:
 *             var = Var()
 *             var.set_var(<CDSVar*>parent)             # <<<<<<<<<<<<<<
 *             return var
 *         elif type == ccds3_enums.CDS_VARGROUP:
 */

#line 320 "cds3/core.pyx"
    __pyx_t_4 = ((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_var->__pyx_base.__pyx_vtab)->set_var(__pyx_v_var, ((struct CDSVar *)__pyx_v_parent)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 320 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 320 "cds3/core.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "cds3/core.pyx":321
 *             var = Var()
 *             var.set_var(<CDSVar*>parent)
 *             return var             # <<<<<<<<<<<<<<
 *         elif type == ccds3_enums.CDS_VARGROUP:
 *             vargroup = VarGroup()
 */

#line 321 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 321 "cds3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_var));

#line 321 "cds3/core.pyx"
    __pyx_r = ((PyObject *)__pyx_v_var);

#line 321 "cds3/core.pyx"
    goto __pyx_L0;

#line 321 "cds3/core.pyx"
    goto __pyx_L4;

#line 321 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":322
 *             var.set_var(<CDSVar*>parent)
 *             return var
 *         elif type == ccds3_enums.CDS_VARGROUP:             # <<<<<<<<<<<<<<
 *             vargroup = VarGroup()
 *             vargroup.set_vargroup(<CDSVarGroup*>parent)
 */

#line 322 "cds3/core.pyx"
  __pyx_t_2 = (__pyx_v_type == CDS_VARGROUP);

#line 322 "cds3/core.pyx"
  if (__pyx_t_2) {

    /* "cds3/core.pyx":323
 *             return var
 *         elif type == ccds3_enums.CDS_VARGROUP:
 *             vargroup = VarGroup()             # <<<<<<<<<<<<<<
 *             vargroup.set_vargroup(<CDSVarGroup*>parent)
 *             return vargroup
 */

#line 323 "cds3/core.pyx"
    __pyx_t_4 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_VarGroup)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 323 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 323 "cds3/core.pyx"
    __pyx_v_vargroup = ((struct __pyx_obj_4cds3_4core_VarGroup *)__pyx_t_4);

#line 323 "cds3/core.pyx"
    __pyx_t_4 = 0;

    /* "cds3/core.pyx":324
 *         elif type == ccds3_enums.CDS_VARGROUP:
 *             vargroup = VarGroup()
 *             vargroup.set_vargroup(<CDSVarGroup*>parent)             # <<<<<<<<<<<<<<
 *             return vargroup
 *         elif type == ccds3_enums.CDS_VARARRAY:
 */

#line 324 "cds3/core.pyx"
    __pyx_t_4 = ((struct __pyx_vtabstruct_4cds3_4core_VarGroup *)__pyx_v_vargroup->__pyx_base.__pyx_vtab)->set_vargroup(__pyx_v_vargroup, ((struct CDSVarGroup *)__pyx_v_parent)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 324 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 324 "cds3/core.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "cds3/core.pyx":325
 *             vargroup = VarGroup()
 *             vargroup.set_vargroup(<CDSVarGroup*>parent)
 *             return vargroup             # <<<<<<<<<<<<<<
 *         elif type == ccds3_enums.CDS_VARARRAY:
 *             vararray = VarArray()
 */

#line 325 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 325 "cds3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_vargroup));

#line 325 "cds3/core.pyx"
    __pyx_r = ((PyObject *)__pyx_v_vargroup);

#line 325 "cds3/core.pyx"
    goto __pyx_L0;

#line 325 "cds3/core.pyx"
    goto __pyx_L4;

#line 325 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":326
 *             vargroup.set_vargroup(<CDSVarGroup*>parent)
 *             return vargroup
 *         elif type == ccds3_enums.CDS_VARARRAY:             # <<<<<<<<<<<<<<
 *             vararray = VarArray()
 *             vararray.set_vararray(<CDSVarArray*>parent)
 */

#line 326 "cds3/core.pyx"
  __pyx_t_2 = (__pyx_v_type == CDS_VARARRAY);

#line 326 "cds3/core.pyx"
  if (__pyx_t_2) {

    /* "cds3/core.pyx":327
 *             return vargroup
 *         elif type == ccds3_enums.CDS_VARARRAY:
 *             vararray = VarArray()             # <<<<<<<<<<<<<<
 *             vararray.set_vararray(<CDSVarArray*>parent)
 *             return vararray
 */

#line 327 "cds3/core.pyx"
    __pyx_t_4 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_VarArray)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 327 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 327 "cds3/core.pyx"
    __pyx_v_vararray = ((struct __pyx_obj_4cds3_4core_VarArray *)__pyx_t_4);

#line 327 "cds3/core.pyx"
    __pyx_t_4 = 0;

    /* "cds3/core.pyx":328
 *         elif type == ccds3_enums.CDS_VARARRAY:
 *             vararray = VarArray()
 *             vararray.set_vararray(<CDSVarArray*>parent)             # <<<<<<<<<<<<<<
 *             return vararray
 *         else:
 */

#line 328 "cds3/core.pyx"
    __pyx_t_4 = ((struct __pyx_vtabstruct_4cds3_4core_VarArray *)__pyx_v_vararray->__pyx_base.__pyx_vtab)->set_vararray(__pyx_v_vararray, ((struct CDSVarArray *)__pyx_v_parent)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 328 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 328 "cds3/core.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "cds3/core.pyx":329
 *             vararray = VarArray()
 *             vararray.set_vararray(<CDSVarArray*>parent)
 *             return vararray             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError, "CDSObjectType not recognized"
 */

#line 329 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 329 "cds3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_vararray));

#line 329 "cds3/core.pyx"
    __pyx_r = ((PyObject *)__pyx_v_vararray);

#line 329 "cds3/core.pyx"
    goto __pyx_L0;

#line 329 "cds3/core.pyx"
    goto __pyx_L4;

#line 329 "cds3/core.pyx"
  }

#line 329 "cds3/core.pyx"
  /*else*/ {

    /* "cds3/core.pyx":331
 *             return vararray
 *         else:
 *             raise ValueError, "CDSObjectType not recognized"             # <<<<<<<<<<<<<<
 * 
 *     def get_obj_type(self):
 */

#line 331 "cds3/core.pyx"
    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_kp_s_2), 0, 0);

#line 331 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 331 "cds3/core.pyx"
  }

#line 331 "cds3/core.pyx"
  __pyx_L4:;

#line 331 "cds3/core.pyx"


#line 331 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 331 "cds3/core.pyx"
  goto __pyx_L0;

#line 331 "cds3/core.pyx"
  __pyx_L1_error:;

#line 331 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 331 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Object.get_parent", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 331 "cds3/core.pyx"
  __pyx_r = NULL;

#line 331 "cds3/core.pyx"
  __pyx_L0:;

#line 331 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_group);

#line 331 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_dim);

#line 331 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_att);

#line 331 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_var);

#line 331 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_vargroup);

#line 331 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_vararray);

#line 331 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 331 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 331 "cds3/core.pyx"
  return __pyx_r;

#line 331 "cds3/core.pyx"
}

#line 331 "cds3/core.pyx"


#line 331 "cds3/core.pyx"
/* Python wrapper */

#line 331 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_6Object_23get_obj_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 331 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_6Object_22get_obj_type[] = "Object.get_obj_type(self)\nReturns the object type.";

#line 331 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_6Object_23get_obj_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 331 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 331 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 331 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_obj_type (wrapper)", 0);
  __pyx_r = 
#line 331 "cds3/core.pyx"
__pyx_pf_4cds3_4core_6Object_22get_obj_type(((struct __pyx_obj_4cds3_4core_Object *)__pyx_v_self));

#line 331 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 331 "cds3/core.pyx"
  return __pyx_r;

#line 331 "cds3/core.pyx"
}

/* "cds3/core.pyx":333
 *             raise ValueError, "CDSObjectType not recognized"
 * 
 *     def get_obj_type(self):             # <<<<<<<<<<<<<<
 *         """Returns the object type."""
 *         return self.cds_object.obj_type
 */

#line 333 "cds3/core.pyx"


#line 333 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_6Object_22get_obj_type(struct __pyx_obj_4cds3_4core_Object *__pyx_v_self) {

#line 333 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 333 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_obj_type", 0);

  /* "cds3/core.pyx":335
 *     def get_obj_type(self):
 *         """Returns the object type."""
 *         return self.cds_object.obj_type             # <<<<<<<<<<<<<<
 * 
 *     def get_def_lock(self):
 */

#line 335 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 335 "cds3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->cds_object->obj_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 335 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 335 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 335 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 335 "cds3/core.pyx"
  goto __pyx_L0;

#line 335 "cds3/core.pyx"


#line 335 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 335 "cds3/core.pyx"
  goto __pyx_L0;

#line 335 "cds3/core.pyx"
  __pyx_L1_error:;

#line 335 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 335 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Object.get_obj_type", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 335 "cds3/core.pyx"
  __pyx_r = NULL;

#line 335 "cds3/core.pyx"
  __pyx_L0:;

#line 335 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 335 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 335 "cds3/core.pyx"
  return __pyx_r;

#line 335 "cds3/core.pyx"
}

#line 335 "cds3/core.pyx"


#line 335 "cds3/core.pyx"
/* Python wrapper */

#line 335 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_6Object_25get_def_lock(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 335 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_6Object_24get_def_lock[] = "Object.get_def_lock(self)\nReturns the definition lock.";

#line 335 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_6Object_25get_def_lock(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 335 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 335 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 335 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_def_lock (wrapper)", 0);
  __pyx_r = 
#line 335 "cds3/core.pyx"
__pyx_pf_4cds3_4core_6Object_24get_def_lock(((struct __pyx_obj_4cds3_4core_Object *)__pyx_v_self));

#line 335 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 335 "cds3/core.pyx"
  return __pyx_r;

#line 335 "cds3/core.pyx"
}

/* "cds3/core.pyx":337
 *         return self.cds_object.obj_type
 * 
 *     def get_def_lock(self):             # <<<<<<<<<<<<<<
 *         """Returns the definition lock."""
 *         return self.cds_object.def_lock
 */

#line 337 "cds3/core.pyx"


#line 337 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_6Object_24get_def_lock(struct __pyx_obj_4cds3_4core_Object *__pyx_v_self) {

#line 337 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 337 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_def_lock", 0);

  /* "cds3/core.pyx":339
 *     def get_def_lock(self):
 *         """Returns the definition lock."""
 *         return self.cds_object.def_lock             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 339 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 339 "cds3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->cds_object->def_lock); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 339 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 339 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 339 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 339 "cds3/core.pyx"
  goto __pyx_L0;

#line 339 "cds3/core.pyx"


#line 339 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 339 "cds3/core.pyx"
  goto __pyx_L0;

#line 339 "cds3/core.pyx"
  __pyx_L1_error:;

#line 339 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 339 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Object.get_def_lock", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 339 "cds3/core.pyx"
  __pyx_r = NULL;

#line 339 "cds3/core.pyx"
  __pyx_L0:;

#line 339 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 339 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 339 "cds3/core.pyx"
  return __pyx_r;

#line 339 "cds3/core.pyx"
}

#line 339 "cds3/core.pyx"


#line 339 "cds3/core.pyx"
/* Python wrapper */

#line 339 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_1define(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 339 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_5Group_define[] = "Group.define(Group parent, char *name)\nDefine a CDS Group.\n        \n        This function will first check if a group with the same name\n        already exists in the parent group. If it does, the existing\n        group will be returned.\n        \n        Error messages from this function are sent to the message\n        handler (see msngr_init_log() and msngr_init_mail()).\n        \n        @param parent - pointer to the parent group, or\n                None to create the root group\n        @param name - group name\n        \n        @return the Group instance\n        @retval None if the parent group is locked\n        @retval None if a memory allocation error occurred\n        \n        ";
static PyMethodDef __pyx_mdef_4cds3_4core_5Group_1define = 
#line 339 "cds3/core.pyx"
{__Pyx_NAMESTR("define"), (PyCFunction)__pyx_pw_4cds3_4core_5Group_1define, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_5Group_define)};

#line 339 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_1define(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Group *__pyx_v_parent = 0
#line 339 "cds3/core.pyx"
;
  char *__pyx_v_name
#line 339 "cds3/core.pyx"
;

#line 339 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 339 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 339 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("define (wrapper)", 0);

#line 339 "cds3/core.pyx"
  {

#line 339 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__parent,&__pyx_n_s__name,0};

#line 339 "cds3/core.pyx"
    PyObject* values[2] = {0,0};

#line 339 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 339 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 339 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 339 "cds3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 339 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 339 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 339 "cds3/core.pyx"
        case  0: break;
        default: 
#line 339 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 339 "cds3/core.pyx"
      }

#line 339 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 339 "cds3/core.pyx"
      switch (pos_args) {

#line 339 "cds3/core.pyx"
        case  0:

#line 339 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__parent)) != 0)) kw_args--;
        else 
#line 339 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 339 "cds3/core.pyx"
        case  1:

#line 339 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name)) != 0)) kw_args--;

#line 339 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("define", 1, 2, 2, 1); 
#line 339 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 339 "cds3/core.pyx"
        }

#line 339 "cds3/core.pyx"
      }

#line 339 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 339 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "define") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 339 "cds3/core.pyx"
      }

#line 339 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 339 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 339 "cds3/core.pyx"
    } else {

#line 339 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 339 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 339 "cds3/core.pyx"
    }

#line 339 "cds3/core.pyx"
    __pyx_v_parent = ((struct __pyx_obj_4cds3_4core_Group *)values[0]);

#line 339 "cds3/core.pyx"
    __pyx_v_name = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 339 "cds3/core.pyx"
  }

#line 339 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 339 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("define", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 339 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 339 "cds3/core.pyx"
  __pyx_L3_error:;

#line 339 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.define", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 339 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 339 "cds3/core.pyx"
  return NULL;

#line 339 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 339 "cds3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_4cds3_4core_Group, 1, "parent", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 339 "cds3/core.pyx"
__pyx_pf_4cds3_4core_5Group_define(__pyx_v_parent, __pyx_v_name);

#line 339 "cds3/core.pyx"
  goto __pyx_L0;

#line 339 "cds3/core.pyx"
  __pyx_L1_error:;

#line 339 "cds3/core.pyx"
  __pyx_r = NULL;

#line 339 "cds3/core.pyx"
  __pyx_L0:;

#line 339 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 339 "cds3/core.pyx"
  return __pyx_r;

#line 339 "cds3/core.pyx"
}

/* "cds3/core.pyx":350
 * 
 *     @staticmethod
 *     def define(Group parent, char *name):             # <<<<<<<<<<<<<<
 *         """Define a CDS Group.
 * 
 */

#line 350 "cds3/core.pyx"


#line 350 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_5Group_define(struct __pyx_obj_4cds3_4core_Group *__pyx_v_parent, char *__pyx_v_name) {
  struct CDSGroup *__pyx_v_cds_group
#line 350 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Group *__pyx_v_group = 0
#line 350 "cds3/core.pyx"
;

#line 350 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 350 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("define", 0);

  /* "cds3/core.pyx":371
 *         cdef CDSGroup *cds_group
 *         cdef Group group
 *         if parent is None:             # <<<<<<<<<<<<<<
 *             cds_group = cds_define_group(NULL, name)
 *         else:
 */

#line 371 "cds3/core.pyx"
  __pyx_t_1 = (((PyObject *)__pyx_v_parent) == Py_None);

#line 371 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":372
 *         cdef Group group
 *         if parent is None:
 *             cds_group = cds_define_group(NULL, name)             # <<<<<<<<<<<<<<
 *         else:
 *             cds_group = cds_define_group(parent.c_ob, name)
 */

#line 372 "cds3/core.pyx"
    __pyx_v_cds_group = cds_define_group(NULL, __pyx_v_name);

#line 372 "cds3/core.pyx"
    goto __pyx_L3;

#line 372 "cds3/core.pyx"
  }

#line 372 "cds3/core.pyx"
  /*else*/ {

    /* "cds3/core.pyx":374
 *             cds_group = cds_define_group(NULL, name)
 *         else:
 *             cds_group = cds_define_group(parent.c_ob, name)             # <<<<<<<<<<<<<<
 *         if cds_group == NULL:
 *             return None
 */

#line 374 "cds3/core.pyx"
    __pyx_v_cds_group = cds_define_group(__pyx_v_parent->c_ob, __pyx_v_name);

#line 374 "cds3/core.pyx"
  }

#line 374 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":375
 *         else:
 *             cds_group = cds_define_group(parent.c_ob, name)
 *         if cds_group == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         group = Group()
 */

#line 375 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_cds_group == NULL);

#line 375 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":376
 *             cds_group = cds_define_group(parent.c_ob, name)
 *         if cds_group == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         group = Group()
 *         group.set_group(cds_group)
 */

#line 376 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 376 "cds3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 376 "cds3/core.pyx"
    __pyx_r = Py_None;

#line 376 "cds3/core.pyx"
    goto __pyx_L0;

#line 376 "cds3/core.pyx"
    goto __pyx_L4;

#line 376 "cds3/core.pyx"
  }

#line 376 "cds3/core.pyx"
  __pyx_L4:;

  /* "cds3/core.pyx":377
 *         if cds_group == NULL:
 *             return None
 *         group = Group()             # <<<<<<<<<<<<<<
 *         group.set_group(cds_group)
 *         return group
 */

#line 377 "cds3/core.pyx"
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Group)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 377 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 377 "cds3/core.pyx"
  __pyx_v_group = ((struct __pyx_obj_4cds3_4core_Group *)__pyx_t_2);

#line 377 "cds3/core.pyx"
  __pyx_t_2 = 0;

  /* "cds3/core.pyx":378
 *             return None
 *         group = Group()
 *         group.set_group(cds_group)             # <<<<<<<<<<<<<<
 *         return group
 * 
 */

#line 378 "cds3/core.pyx"
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Group *)__pyx_v_group->__pyx_base.__pyx_vtab)->set_group(__pyx_v_group, __pyx_v_cds_group); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 378 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 378 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cds3/core.pyx":379
 *         group = Group()
 *         group.set_group(cds_group)
 *         return group             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */

#line 379 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 379 "cds3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_group));

#line 379 "cds3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_group);

#line 379 "cds3/core.pyx"
  goto __pyx_L0;

#line 379 "cds3/core.pyx"


#line 379 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 379 "cds3/core.pyx"
  goto __pyx_L0;

#line 379 "cds3/core.pyx"
  __pyx_L1_error:;

#line 379 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 379 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.define", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 379 "cds3/core.pyx"
  __pyx_r = NULL;

#line 379 "cds3/core.pyx"
  __pyx_L0:;

#line 379 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_group);

#line 379 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 379 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 379 "cds3/core.pyx"
  return __pyx_r;

#line 379 "cds3/core.pyx"
}

#line 379 "cds3/core.pyx"


#line 379 "cds3/core.pyx"
/* Python wrapper */

#line 379 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_3delete(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 379 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_5Group_2delete[] = "Group.delete(Group group)\nDelete a CDS Group.\n        \n        Error messages from this function are sent to the message\n        handler (see msngr_init_log() and msngr_init_mail()).\n        \n        @param group - the Group instance\n        \n        @retval 1 if the group was deleted\n        @retval 0 if the group is locked\n        @retval 0 if the parent group is locked\n\n        ";
static PyMethodDef __pyx_mdef_4cds3_4core_5Group_3delete = 
#line 379 "cds3/core.pyx"
{__Pyx_NAMESTR("delete"), (PyCFunction)__pyx_pw_4cds3_4core_5Group_3delete, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_5Group_2delete)};

#line 379 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_3delete(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Group *__pyx_v_group = 0
#line 379 "cds3/core.pyx"
;

#line 379 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 379 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 379 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("delete (wrapper)", 0);

#line 379 "cds3/core.pyx"
  {

#line 379 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__group,0};

#line 379 "cds3/core.pyx"
    PyObject* values[1] = {0};

#line 379 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 379 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 379 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 379 "cds3/core.pyx"
      switch (pos_args) {
        case  1: 
#line 379 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 379 "cds3/core.pyx"
        case  0: break;
        default: 
#line 379 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 379 "cds3/core.pyx"
      }

#line 379 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 379 "cds3/core.pyx"
      switch (pos_args) {

#line 379 "cds3/core.pyx"
        case  0:

#line 379 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__group)) != 0)) kw_args--;
        else 
#line 379 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 379 "cds3/core.pyx"
      }

#line 379 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 379 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "delete") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 379 "cds3/core.pyx"
      }

#line 379 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {

#line 379 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 379 "cds3/core.pyx"
    } else {

#line 379 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 379 "cds3/core.pyx"
    }

#line 379 "cds3/core.pyx"
    __pyx_v_group = ((struct __pyx_obj_4cds3_4core_Group *)values[0]);

#line 379 "cds3/core.pyx"
  }

#line 379 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 379 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("delete", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); 
#line 379 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 379 "cds3/core.pyx"
  __pyx_L3_error:;

#line 379 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 379 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 379 "cds3/core.pyx"
  return NULL;

#line 379 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 379 "cds3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_group), __pyx_ptype_4cds3_4core_Group, 1, "group", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 379 "cds3/core.pyx"
__pyx_pf_4cds3_4core_5Group_2delete(__pyx_v_group);

#line 379 "cds3/core.pyx"
  goto __pyx_L0;

#line 379 "cds3/core.pyx"
  __pyx_L1_error:;

#line 379 "cds3/core.pyx"
  __pyx_r = NULL;

#line 379 "cds3/core.pyx"
  __pyx_L0:;

#line 379 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 379 "cds3/core.pyx"
  return __pyx_r;

#line 379 "cds3/core.pyx"
}

/* "cds3/core.pyx":382
 * 
 *     @staticmethod
 *     def delete(Group group):             # <<<<<<<<<<<<<<
 *         """Delete a CDS Group.
 * 
 */

#line 382 "cds3/core.pyx"


#line 382 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_5Group_2delete(struct __pyx_obj_4cds3_4core_Group *__pyx_v_group) {
  int __pyx_v_retval
#line 382 "cds3/core.pyx"
;

#line 382 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 382 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("delete", 0);

#line 382 "cds3/core.pyx"
  __Pyx_INCREF((PyObject *)__pyx_v_group);

  /* "cds3/core.pyx":395
 * 
 *         """
 *         cdef int retval = cds_delete_group(group.c_ob)             # <<<<<<<<<<<<<<
 *         if retval == 1:
 *             group.set_group(NULL)
 */

#line 395 "cds3/core.pyx"
  __pyx_v_retval = cds_delete_group(__pyx_v_group->c_ob);

  /* "cds3/core.pyx":396
 *         """
 *         cdef int retval = cds_delete_group(group.c_ob)
 *         if retval == 1:             # <<<<<<<<<<<<<<
 *             group.set_group(NULL)
 *             del group
 */

#line 396 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_retval == 1);

#line 396 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":397
 *         cdef int retval = cds_delete_group(group.c_ob)
 *         if retval == 1:
 *             group.set_group(NULL)             # <<<<<<<<<<<<<<
 *             del group
 *         return retval
 */

#line 397 "cds3/core.pyx"
    __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Group *)__pyx_v_group->__pyx_base.__pyx_vtab)->set_group(__pyx_v_group, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 397 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 397 "cds3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cds3/core.pyx":398
 *         if retval == 1:
 *             group.set_group(NULL)
 *             del group             # <<<<<<<<<<<<<<
 *         return retval
 * 
 */

#line 398 "cds3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_v_group));

#line 398 "cds3/core.pyx"
    __pyx_v_group = NULL;

#line 398 "cds3/core.pyx"
    goto __pyx_L3;

#line 398 "cds3/core.pyx"
  }

#line 398 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":399
 *             group.set_group(NULL)
 *             del group
 *         return retval             # <<<<<<<<<<<<<<
 * 
 *     ###################################################################
 */

#line 399 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 399 "cds3/core.pyx"
  __pyx_t_2 = PyInt_FromLong(__pyx_v_retval); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 399 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 399 "cds3/core.pyx"
  __pyx_r = __pyx_t_2;

#line 399 "cds3/core.pyx"
  __pyx_t_2 = 0;

#line 399 "cds3/core.pyx"
  goto __pyx_L0;

#line 399 "cds3/core.pyx"


#line 399 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 399 "cds3/core.pyx"
  goto __pyx_L0;

#line 399 "cds3/core.pyx"
  __pyx_L1_error:;

#line 399 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 399 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 399 "cds3/core.pyx"
  __pyx_r = NULL;

#line 399 "cds3/core.pyx"
  __pyx_L0:;

#line 399 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_group);

#line 399 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 399 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 399 "cds3/core.pyx"
  return __pyx_r;

#line 399 "cds3/core.pyx"
}

#line 399 "cds3/core.pyx"


#line 399 "cds3/core.pyx"
/* Python wrapper */

#line 399 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_5Group_5__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 399 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_5Group_5__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

#line 399 "cds3/core.pyx"
  int __pyx_r;

#line 399 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 399 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 399 "cds3/core.pyx"
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;
#line 399 "cds3/core.pyx"
}

#line 399 "cds3/core.pyx"
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = 
#line 399 "cds3/core.pyx"
__pyx_pf_4cds3_4core_5Group_4__cinit__(((struct __pyx_obj_4cds3_4core_Group *)__pyx_v_self));

#line 399 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 399 "cds3/core.pyx"
  return __pyx_r;

#line 399 "cds3/core.pyx"
}

/* "cds3/core.pyx":405
 *     ###################################################################
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         """TODO"""
 *         self.c_ob = NULL
 */

#line 405 "cds3/core.pyx"


#line 405 "cds3/core.pyx"
static int __pyx_pf_4cds3_4core_5Group_4__cinit__(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self) {

#line 405 "cds3/core.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations

#line 405 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cds3/core.pyx":407
 *     def __cinit__(self):
 *         """TODO"""
 *         self.c_ob = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */

#line 407 "cds3/core.pyx"
  __pyx_v_self->c_ob = NULL;

#line 407 "cds3/core.pyx"


#line 407 "cds3/core.pyx"
  __pyx_r = 0;

#line 407 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 407 "cds3/core.pyx"
  return __pyx_r;

#line 407 "cds3/core.pyx"
}

#line 407 "cds3/core.pyx"


#line 407 "cds3/core.pyx"
/* Python wrapper */

#line 407 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_5Group_7__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 407 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_5Group_6__init__[] = "TODO";

#line 407 "cds3/core.pyx"
#if CYTHON_COMPILING_IN_CPYTHON

#line 407 "cds3/core.pyx"
struct wrapperbase __pyx_wrapperbase_4cds3_4core_5Group_6__init__;

#line 407 "cds3/core.pyx"
#endif

#line 407 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_5Group_7__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

#line 407 "cds3/core.pyx"
  int __pyx_r;

#line 407 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 407 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);

#line 407 "cds3/core.pyx"
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;
#line 407 "cds3/core.pyx"
}

#line 407 "cds3/core.pyx"
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = 
#line 407 "cds3/core.pyx"
__pyx_pf_4cds3_4core_5Group_6__init__(((struct __pyx_obj_4cds3_4core_Group *)__pyx_v_self));

#line 407 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 407 "cds3/core.pyx"
  return __pyx_r;

#line 407 "cds3/core.pyx"
}

/* "cds3/core.pyx":409
 *         self.c_ob = NULL
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """TODO"""
 *         pass
 */

#line 409 "cds3/core.pyx"


#line 409 "cds3/core.pyx"
static int __pyx_pf_4cds3_4core_5Group_6__init__(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_Group *__pyx_v_self) {

#line 409 "cds3/core.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations

#line 409 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__init__", 0);

#line 409 "cds3/core.pyx"


#line 409 "cds3/core.pyx"
  __pyx_r = 0;

#line 409 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 409 "cds3/core.pyx"
  return __pyx_r;

#line 409 "cds3/core.pyx"
}

/* "cds3/core.pyx":413
 *         pass
 * 
 *     cdef set_group(self, CDSGroup *group):             # <<<<<<<<<<<<<<
 *         """TODO"""
 *         self.cds_object = <CDSObject*>group
 */

#line 413 "cds3/core.pyx"


#line 413 "cds3/core.pyx"
static PyObject *__pyx_f_4cds3_4core_5Group_set_group(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self, struct CDSGroup *__pyx_v_group) {

#line 413 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations

#line 413 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("set_group", 0);

  /* "cds3/core.pyx":415
 *     cdef set_group(self, CDSGroup *group):
 *         """TODO"""
 *         self.cds_object = <CDSObject*>group             # <<<<<<<<<<<<<<
 *         self.c_ob = group
 * 
 */

#line 415 "cds3/core.pyx"
  __pyx_v_self->__pyx_base.cds_object = ((struct CDSObject *)__pyx_v_group);

  /* "cds3/core.pyx":416
 *         """TODO"""
 *         self.cds_object = <CDSObject*>group
 *         self.c_ob = group             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */

#line 416 "cds3/core.pyx"
  __pyx_v_self->c_ob = __pyx_v_group;

#line 416 "cds3/core.pyx"


#line 416 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 416 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 416 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 416 "cds3/core.pyx"
  return __pyx_r;

#line 416 "cds3/core.pyx"
}

#line 416 "cds3/core.pyx"


#line 416 "cds3/core.pyx"
/* Python wrapper */

#line 416 "cds3/core.pyx"
static void __pyx_pw_4cds3_4core_5Group_9__dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 416 "cds3/core.pyx"
static void __pyx_pw_4cds3_4core_5Group_9__dealloc__(PyObject *__pyx_v_self) {

#line 416 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 416 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 416 "cds3/core.pyx"
  __pyx_pf_4cds3_4core_5Group_8__dealloc__(((struct __pyx_obj_4cds3_4core_Group *)__pyx_v_self));

#line 416 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 416 "cds3/core.pyx"
}

/* "cds3/core.pyx":418
 *         self.c_ob = group
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """TODO"""
 *         pass
 */

#line 418 "cds3/core.pyx"


#line 418 "cds3/core.pyx"
static void __pyx_pf_4cds3_4core_5Group_8__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_Group *__pyx_v_self) {
  __Pyx_RefNannyDeclarations

#line 418 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

#line 418 "cds3/core.pyx"


#line 418 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 418 "cds3/core.pyx"
}

#line 418 "cds3/core.pyx"


#line 418 "cds3/core.pyx"
/* Python wrapper */

#line 418 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_11get_ndims(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 418 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_5Group_10get_ndims[] = "Group.get_ndims(self)\nReturns the number of dimensions for this Group.";

#line 418 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_11get_ndims(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 418 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 418 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 418 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_ndims (wrapper)", 0);
  __pyx_r = 
#line 418 "cds3/core.pyx"
__pyx_pf_4cds3_4core_5Group_10get_ndims(((struct __pyx_obj_4cds3_4core_Group *)__pyx_v_self));

#line 418 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 418 "cds3/core.pyx"
  return __pyx_r;

#line 418 "cds3/core.pyx"
}

/* "cds3/core.pyx":426
 *     ###################################################################
 * 
 *     def get_ndims(self):             # <<<<<<<<<<<<<<
 *         """Returns the number of dimensions for this Group."""
 *         return self.c_ob.ndims
 */

#line 426 "cds3/core.pyx"


#line 426 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_5Group_10get_ndims(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self) {

#line 426 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 426 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_ndims", 0);

  /* "cds3/core.pyx":428
 *     def get_ndims(self):
 *         """Returns the number of dimensions for this Group."""
 *         return self.c_ob.ndims             # <<<<<<<<<<<<<<
 * 
 *     def get_dims(self):
 */

#line 428 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 428 "cds3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->c_ob->ndims); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 428 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 428 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 428 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 428 "cds3/core.pyx"
  goto __pyx_L0;

#line 428 "cds3/core.pyx"


#line 428 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 428 "cds3/core.pyx"
  goto __pyx_L0;

#line 428 "cds3/core.pyx"
  __pyx_L1_error:;

#line 428 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 428 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.get_ndims", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 428 "cds3/core.pyx"
  __pyx_r = NULL;

#line 428 "cds3/core.pyx"
  __pyx_L0:;

#line 428 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 428 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 428 "cds3/core.pyx"
  return __pyx_r;

#line 428 "cds3/core.pyx"
}

#line 428 "cds3/core.pyx"


#line 428 "cds3/core.pyx"
/* Python wrapper */

#line 428 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_13get_dims(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 428 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_5Group_12get_dims[] = "Group.get_dims(self)\nReturns all Dim instances for this Group.";

#line 428 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_13get_dims(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 428 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 428 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 428 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_dims (wrapper)", 0);
  __pyx_r = 
#line 428 "cds3/core.pyx"
__pyx_pf_4cds3_4core_5Group_12get_dims(((struct __pyx_obj_4cds3_4core_Group *)__pyx_v_self));

#line 428 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 428 "cds3/core.pyx"
  return __pyx_r;

#line 428 "cds3/core.pyx"
}

/* "cds3/core.pyx":430
 *         return self.c_ob.ndims
 * 
 *     def get_dims(self):             # <<<<<<<<<<<<<<
 *         """Returns all Dim instances for this Group."""
 *         cdef int ndims = self.c_ob.ndims
 */

#line 430 "cds3/core.pyx"


#line 430 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_5Group_12get_dims(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self) {
  int __pyx_v_ndims
#line 430 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Dim *__pyx_v_dim = 0
#line 430 "cds3/core.pyx"
;
  PyObject *__pyx_v_dims = NULL
#line 430 "cds3/core.pyx"
;
  int __pyx_v_i
#line 430 "cds3/core.pyx"
;

#line 430 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 430 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_dims", 0);

  /* "cds3/core.pyx":432
 *     def get_dims(self):
 *         """Returns all Dim instances for this Group."""
 *         cdef int ndims = self.c_ob.ndims             # <<<<<<<<<<<<<<
 *         cdef Dim dim
 *         dims = []
 */

#line 432 "cds3/core.pyx"
  __pyx_t_1 = __pyx_v_self->c_ob->ndims;

#line 432 "cds3/core.pyx"
  __pyx_v_ndims = __pyx_t_1;

  /* "cds3/core.pyx":434
 *         cdef int ndims = self.c_ob.ndims
 *         cdef Dim dim
 *         dims = []             # <<<<<<<<<<<<<<
 *         for i in range(ndims):
 *             dim = Dim()
 */

#line 434 "cds3/core.pyx"
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 434 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 434 "cds3/core.pyx"
  __pyx_v_dims = ((PyObject*)__pyx_t_2);

#line 434 "cds3/core.pyx"
  __pyx_t_2 = 0;

  /* "cds3/core.pyx":435
 *         cdef Dim dim
 *         dims = []
 *         for i in range(ndims):             # <<<<<<<<<<<<<<
 *             dim = Dim()
 *             dim.set_dim(self.c_ob.dims[i])
 */

#line 435 "cds3/core.pyx"
  __pyx_t_1 = __pyx_v_ndims;

#line 435 "cds3/core.pyx"
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_1; __pyx_t_3+=1) {

#line 435 "cds3/core.pyx"
    __pyx_v_i = __pyx_t_3;

    /* "cds3/core.pyx":436
 *         dims = []
 *         for i in range(ndims):
 *             dim = Dim()             # <<<<<<<<<<<<<<
 *             dim.set_dim(self.c_ob.dims[i])
 *             dims.append(dim)
 */

#line 436 "cds3/core.pyx"
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Dim)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 436 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 436 "cds3/core.pyx"
    __Pyx_XDECREF(((PyObject *)__pyx_v_dim));

#line 436 "cds3/core.pyx"
    __pyx_v_dim = ((struct __pyx_obj_4cds3_4core_Dim *)__pyx_t_2);

#line 436 "cds3/core.pyx"
    __pyx_t_2 = 0;

    /* "cds3/core.pyx":437
 *         for i in range(ndims):
 *             dim = Dim()
 *             dim.set_dim(self.c_ob.dims[i])             # <<<<<<<<<<<<<<
 *             dims.append(dim)
 *         return dims
 */

#line 437 "cds3/core.pyx"
    __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Dim *)__pyx_v_dim->__pyx_base.__pyx_vtab)->set_dim(__pyx_v_dim, (__pyx_v_self->c_ob->dims[__pyx_v_i])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 437 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 437 "cds3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cds3/core.pyx":438
 *             dim = Dim()
 *             dim.set_dim(self.c_ob.dims[i])
 *             dims.append(dim)             # <<<<<<<<<<<<<<
 *         return dims
 * 
 */

#line 438 "cds3/core.pyx"
    __pyx_t_4 = PyList_Append(__pyx_v_dims, ((PyObject *)__pyx_v_dim)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 438 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":439
 *             dim.set_dim(self.c_ob.dims[i])
 *             dims.append(dim)
 *         return dims             # <<<<<<<<<<<<<<
 * 
 *     def get_natts(self):
 */

#line 439 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 439 "cds3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_dims));

#line 439 "cds3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_dims);

#line 439 "cds3/core.pyx"
  goto __pyx_L0;

#line 439 "cds3/core.pyx"


#line 439 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 439 "cds3/core.pyx"
  goto __pyx_L0;

#line 439 "cds3/core.pyx"
  __pyx_L1_error:;

#line 439 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 439 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.get_dims", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 439 "cds3/core.pyx"
  __pyx_r = NULL;

#line 439 "cds3/core.pyx"
  __pyx_L0:;

#line 439 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_dim);

#line 439 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_v_dims);

#line 439 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 439 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 439 "cds3/core.pyx"
  return __pyx_r;

#line 439 "cds3/core.pyx"
}

#line 439 "cds3/core.pyx"


#line 439 "cds3/core.pyx"
/* Python wrapper */

#line 439 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_15get_natts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 439 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_5Group_14get_natts[] = "Group.get_natts(self)";

#line 439 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_15get_natts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 439 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 439 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 439 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_natts (wrapper)", 0);
  __pyx_r = 
#line 439 "cds3/core.pyx"
__pyx_pf_4cds3_4core_5Group_14get_natts(((struct __pyx_obj_4cds3_4core_Group *)__pyx_v_self));

#line 439 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 439 "cds3/core.pyx"
  return __pyx_r;

#line 439 "cds3/core.pyx"
}

/* "cds3/core.pyx":441
 *         return dims
 * 
 *     def get_natts(self):             # <<<<<<<<<<<<<<
 *         return self.c_ob.natts
 * 
 */

#line 441 "cds3/core.pyx"


#line 441 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_5Group_14get_natts(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self) {

#line 441 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 441 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_natts", 0);

  /* "cds3/core.pyx":442
 * 
 *     def get_natts(self):
 *         return self.c_ob.natts             # <<<<<<<<<<<<<<
 * 
 *     def get_atts(self):
 */

#line 442 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 442 "cds3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->c_ob->natts); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 442 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 442 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 442 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 442 "cds3/core.pyx"
  goto __pyx_L0;

#line 442 "cds3/core.pyx"


#line 442 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 442 "cds3/core.pyx"
  goto __pyx_L0;

#line 442 "cds3/core.pyx"
  __pyx_L1_error:;

#line 442 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 442 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.get_natts", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 442 "cds3/core.pyx"
  __pyx_r = NULL;

#line 442 "cds3/core.pyx"
  __pyx_L0:;

#line 442 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 442 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 442 "cds3/core.pyx"
  return __pyx_r;

#line 442 "cds3/core.pyx"
}

#line 442 "cds3/core.pyx"


#line 442 "cds3/core.pyx"
/* Python wrapper */

#line 442 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_17get_atts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 442 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_5Group_16get_atts[] = "Group.get_atts(self)";

#line 442 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_17get_atts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 442 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 442 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 442 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_atts (wrapper)", 0);
  __pyx_r = 
#line 442 "cds3/core.pyx"
__pyx_pf_4cds3_4core_5Group_16get_atts(((struct __pyx_obj_4cds3_4core_Group *)__pyx_v_self));

#line 442 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 442 "cds3/core.pyx"
  return __pyx_r;

#line 442 "cds3/core.pyx"
}

/* "cds3/core.pyx":444
 *         return self.c_ob.natts
 * 
 *     def get_atts(self):             # <<<<<<<<<<<<<<
 *         cdef int natts = self.c_ob.natts
 *         cdef Att att
 */

#line 444 "cds3/core.pyx"


#line 444 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_5Group_16get_atts(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self) {
  int __pyx_v_natts
#line 444 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Att *__pyx_v_att = 0
#line 444 "cds3/core.pyx"
;
  PyObject *__pyx_v_atts = NULL
#line 444 "cds3/core.pyx"
;
  int __pyx_v_i
#line 444 "cds3/core.pyx"
;

#line 444 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 444 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_atts", 0);

  /* "cds3/core.pyx":445
 * 
 *     def get_atts(self):
 *         cdef int natts = self.c_ob.natts             # <<<<<<<<<<<<<<
 *         cdef Att att
 *         atts = []
 */

#line 445 "cds3/core.pyx"
  __pyx_t_1 = __pyx_v_self->c_ob->natts;

#line 445 "cds3/core.pyx"
  __pyx_v_natts = __pyx_t_1;

  /* "cds3/core.pyx":447
 *         cdef int natts = self.c_ob.natts
 *         cdef Att att
 *         atts = []             # <<<<<<<<<<<<<<
 *         for i in range(natts):
 *             att = Att()
 */

#line 447 "cds3/core.pyx"
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 447 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 447 "cds3/core.pyx"
  __pyx_v_atts = ((PyObject*)__pyx_t_2);

#line 447 "cds3/core.pyx"
  __pyx_t_2 = 0;

  /* "cds3/core.pyx":448
 *         cdef Att att
 *         atts = []
 *         for i in range(natts):             # <<<<<<<<<<<<<<
 *             att = Att()
 *             att.set_att(self.c_ob.atts[i])
 */

#line 448 "cds3/core.pyx"
  __pyx_t_1 = __pyx_v_natts;

#line 448 "cds3/core.pyx"
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_1; __pyx_t_3+=1) {

#line 448 "cds3/core.pyx"
    __pyx_v_i = __pyx_t_3;

    /* "cds3/core.pyx":449
 *         atts = []
 *         for i in range(natts):
 *             att = Att()             # <<<<<<<<<<<<<<
 *             att.set_att(self.c_ob.atts[i])
 *             atts.append(att)
 */

#line 449 "cds3/core.pyx"
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Att)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 449 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 449 "cds3/core.pyx"
    __Pyx_XDECREF(((PyObject *)__pyx_v_att));

#line 449 "cds3/core.pyx"
    __pyx_v_att = ((struct __pyx_obj_4cds3_4core_Att *)__pyx_t_2);

#line 449 "cds3/core.pyx"
    __pyx_t_2 = 0;

    /* "cds3/core.pyx":450
 *         for i in range(natts):
 *             att = Att()
 *             att.set_att(self.c_ob.atts[i])             # <<<<<<<<<<<<<<
 *             atts.append(att)
 *         return atts
 */

#line 450 "cds3/core.pyx"
    __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Att *)__pyx_v_att->__pyx_base.__pyx_vtab)->set_att(__pyx_v_att, (__pyx_v_self->c_ob->atts[__pyx_v_i])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 450 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 450 "cds3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cds3/core.pyx":451
 *             att = Att()
 *             att.set_att(self.c_ob.atts[i])
 *             atts.append(att)             # <<<<<<<<<<<<<<
 *         return atts
 * 
 */

#line 451 "cds3/core.pyx"
    __pyx_t_4 = PyList_Append(__pyx_v_atts, ((PyObject *)__pyx_v_att)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 451 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":452
 *             att.set_att(self.c_ob.atts[i])
 *             atts.append(att)
 *         return atts             # <<<<<<<<<<<<<<
 * 
 *     def get_nvars(self):
 */

#line 452 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 452 "cds3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_atts));

#line 452 "cds3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_atts);

#line 452 "cds3/core.pyx"
  goto __pyx_L0;

#line 452 "cds3/core.pyx"


#line 452 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 452 "cds3/core.pyx"
  goto __pyx_L0;

#line 452 "cds3/core.pyx"
  __pyx_L1_error:;

#line 452 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 452 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.get_atts", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 452 "cds3/core.pyx"
  __pyx_r = NULL;

#line 452 "cds3/core.pyx"
  __pyx_L0:;

#line 452 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_att);

#line 452 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_v_atts);

#line 452 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 452 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 452 "cds3/core.pyx"
  return __pyx_r;

#line 452 "cds3/core.pyx"
}

#line 452 "cds3/core.pyx"


#line 452 "cds3/core.pyx"
/* Python wrapper */

#line 452 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_19get_nvars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 452 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_5Group_18get_nvars[] = "Group.get_nvars(self)";

#line 452 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_19get_nvars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 452 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 452 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 452 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_nvars (wrapper)", 0);
  __pyx_r = 
#line 452 "cds3/core.pyx"
__pyx_pf_4cds3_4core_5Group_18get_nvars(((struct __pyx_obj_4cds3_4core_Group *)__pyx_v_self));

#line 452 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 452 "cds3/core.pyx"
  return __pyx_r;

#line 452 "cds3/core.pyx"
}

/* "cds3/core.pyx":454
 *         return atts
 * 
 *     def get_nvars(self):             # <<<<<<<<<<<<<<
 *         return self.c_ob.nvars
 * 
 */

#line 454 "cds3/core.pyx"


#line 454 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_5Group_18get_nvars(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self) {

#line 454 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 454 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_nvars", 0);

  /* "cds3/core.pyx":455
 * 
 *     def get_nvars(self):
 *         return self.c_ob.nvars             # <<<<<<<<<<<<<<
 * 
 *     def get_vars(self):
 */

#line 455 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 455 "cds3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->c_ob->nvars); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 455 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 455 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 455 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 455 "cds3/core.pyx"
  goto __pyx_L0;

#line 455 "cds3/core.pyx"


#line 455 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 455 "cds3/core.pyx"
  goto __pyx_L0;

#line 455 "cds3/core.pyx"
  __pyx_L1_error:;

#line 455 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 455 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.get_nvars", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 455 "cds3/core.pyx"
  __pyx_r = NULL;

#line 455 "cds3/core.pyx"
  __pyx_L0:;

#line 455 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 455 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 455 "cds3/core.pyx"
  return __pyx_r;

#line 455 "cds3/core.pyx"
}

#line 455 "cds3/core.pyx"


#line 455 "cds3/core.pyx"
/* Python wrapper */

#line 455 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_21get_vars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 455 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_5Group_20get_vars[] = "Group.get_vars(self)";

#line 455 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_21get_vars(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 455 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 455 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 455 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_vars (wrapper)", 0);
  __pyx_r = 
#line 455 "cds3/core.pyx"
__pyx_pf_4cds3_4core_5Group_20get_vars(((struct __pyx_obj_4cds3_4core_Group *)__pyx_v_self));

#line 455 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 455 "cds3/core.pyx"
  return __pyx_r;

#line 455 "cds3/core.pyx"
}

/* "cds3/core.pyx":457
 *         return self.c_ob.nvars
 * 
 *     def get_vars(self):             # <<<<<<<<<<<<<<
 *         cdef int nvars = self.c_ob.nvars
 *         cdef Var var
 */

#line 457 "cds3/core.pyx"


#line 457 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_5Group_20get_vars(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self) {
  int __pyx_v_nvars
#line 457 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = 0
#line 457 "cds3/core.pyx"
;
  PyObject *__pyx_v_vars = NULL
#line 457 "cds3/core.pyx"
;
  int __pyx_v_i
#line 457 "cds3/core.pyx"
;

#line 457 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 457 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_vars", 0);

  /* "cds3/core.pyx":458
 * 
 *     def get_vars(self):
 *         cdef int nvars = self.c_ob.nvars             # <<<<<<<<<<<<<<
 *         cdef Var var
 *         vars = []
 */

#line 458 "cds3/core.pyx"
  __pyx_t_1 = __pyx_v_self->c_ob->nvars;

#line 458 "cds3/core.pyx"
  __pyx_v_nvars = __pyx_t_1;

  /* "cds3/core.pyx":460
 *         cdef int nvars = self.c_ob.nvars
 *         cdef Var var
 *         vars = []             # <<<<<<<<<<<<<<
 *         for i in range(nvars):
 *             var = Var()
 */

#line 460 "cds3/core.pyx"
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 460 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 460 "cds3/core.pyx"
  __pyx_v_vars = ((PyObject*)__pyx_t_2);

#line 460 "cds3/core.pyx"
  __pyx_t_2 = 0;

  /* "cds3/core.pyx":461
 *         cdef Var var
 *         vars = []
 *         for i in range(nvars):             # <<<<<<<<<<<<<<
 *             var = Var()
 *             var.set_var(self.c_ob.vars[i])
 */

#line 461 "cds3/core.pyx"
  __pyx_t_1 = __pyx_v_nvars;

#line 461 "cds3/core.pyx"
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_1; __pyx_t_3+=1) {

#line 461 "cds3/core.pyx"
    __pyx_v_i = __pyx_t_3;

    /* "cds3/core.pyx":462
 *         vars = []
 *         for i in range(nvars):
 *             var = Var()             # <<<<<<<<<<<<<<
 *             var.set_var(self.c_ob.vars[i])
 *             vars.append(var)
 */

#line 462 "cds3/core.pyx"
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Var)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 462 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 462 "cds3/core.pyx"
    __Pyx_XDECREF(((PyObject *)__pyx_v_var));

#line 462 "cds3/core.pyx"
    __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)__pyx_t_2);

#line 462 "cds3/core.pyx"
    __pyx_t_2 = 0;

    /* "cds3/core.pyx":463
 *         for i in range(nvars):
 *             var = Var()
 *             var.set_var(self.c_ob.vars[i])             # <<<<<<<<<<<<<<
 *             vars.append(var)
 *         return vars
 */

#line 463 "cds3/core.pyx"
    __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_var->__pyx_base.__pyx_vtab)->set_var(__pyx_v_var, (__pyx_v_self->c_ob->vars[__pyx_v_i])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 463 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 463 "cds3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cds3/core.pyx":464
 *             var = Var()
 *             var.set_var(self.c_ob.vars[i])
 *             vars.append(var)             # <<<<<<<<<<<<<<
 *         return vars
 * 
 */

#line 464 "cds3/core.pyx"
    __pyx_t_4 = PyList_Append(__pyx_v_vars, ((PyObject *)__pyx_v_var)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 464 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":465
 *             var.set_var(self.c_ob.vars[i])
 *             vars.append(var)
 *         return vars             # <<<<<<<<<<<<<<
 * 
 *     def get_ngroups(self):
 */

#line 465 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 465 "cds3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_vars));

#line 465 "cds3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_vars);

#line 465 "cds3/core.pyx"
  goto __pyx_L0;

#line 465 "cds3/core.pyx"


#line 465 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 465 "cds3/core.pyx"
  goto __pyx_L0;

#line 465 "cds3/core.pyx"
  __pyx_L1_error:;

#line 465 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 465 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.get_vars", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 465 "cds3/core.pyx"
  __pyx_r = NULL;

#line 465 "cds3/core.pyx"
  __pyx_L0:;

#line 465 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_var);

#line 465 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_v_vars);

#line 465 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 465 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 465 "cds3/core.pyx"
  return __pyx_r;

#line 465 "cds3/core.pyx"
}

#line 465 "cds3/core.pyx"


#line 465 "cds3/core.pyx"
/* Python wrapper */

#line 465 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_23get_ngroups(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 465 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_5Group_22get_ngroups[] = "Group.get_ngroups(self)";

#line 465 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_23get_ngroups(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 465 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 465 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 465 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_ngroups (wrapper)", 0);
  __pyx_r = 
#line 465 "cds3/core.pyx"
__pyx_pf_4cds3_4core_5Group_22get_ngroups(((struct __pyx_obj_4cds3_4core_Group *)__pyx_v_self));

#line 465 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 465 "cds3/core.pyx"
  return __pyx_r;

#line 465 "cds3/core.pyx"
}

/* "cds3/core.pyx":467
 *         return vars
 * 
 *     def get_ngroups(self):             # <<<<<<<<<<<<<<
 *         return self.c_ob.ngroups
 * 
 */

#line 467 "cds3/core.pyx"


#line 467 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_5Group_22get_ngroups(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self) {

#line 467 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 467 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_ngroups", 0);

  /* "cds3/core.pyx":468
 * 
 *     def get_ngroups(self):
 *         return self.c_ob.ngroups             # <<<<<<<<<<<<<<
 * 
 *     def get_groups(self):
 */

#line 468 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 468 "cds3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->c_ob->ngroups); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 468 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 468 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 468 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 468 "cds3/core.pyx"
  goto __pyx_L0;

#line 468 "cds3/core.pyx"


#line 468 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 468 "cds3/core.pyx"
  goto __pyx_L0;

#line 468 "cds3/core.pyx"
  __pyx_L1_error:;

#line 468 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 468 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.get_ngroups", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 468 "cds3/core.pyx"
  __pyx_r = NULL;

#line 468 "cds3/core.pyx"
  __pyx_L0:;

#line 468 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 468 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 468 "cds3/core.pyx"
  return __pyx_r;

#line 468 "cds3/core.pyx"
}

#line 468 "cds3/core.pyx"


#line 468 "cds3/core.pyx"
/* Python wrapper */

#line 468 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_25get_groups(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 468 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_5Group_24get_groups[] = "Group.get_groups(self)";

#line 468 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_25get_groups(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 468 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 468 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 468 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_groups (wrapper)", 0);
  __pyx_r = 
#line 468 "cds3/core.pyx"
__pyx_pf_4cds3_4core_5Group_24get_groups(((struct __pyx_obj_4cds3_4core_Group *)__pyx_v_self));

#line 468 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 468 "cds3/core.pyx"
  return __pyx_r;

#line 468 "cds3/core.pyx"
}

/* "cds3/core.pyx":470
 *         return self.c_ob.ngroups
 * 
 *     def get_groups(self):             # <<<<<<<<<<<<<<
 *         cdef int ngroups = self.c_ob.ngroups
 *         cdef Group group
 */

#line 470 "cds3/core.pyx"


#line 470 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_5Group_24get_groups(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self) {
  int __pyx_v_ngroups
#line 470 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Group *__pyx_v_group = 0
#line 470 "cds3/core.pyx"
;
  PyObject *__pyx_v_groups = NULL
#line 470 "cds3/core.pyx"
;
  int __pyx_v_i
#line 470 "cds3/core.pyx"
;

#line 470 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 470 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_groups", 0);

  /* "cds3/core.pyx":471
 * 
 *     def get_groups(self):
 *         cdef int ngroups = self.c_ob.ngroups             # <<<<<<<<<<<<<<
 *         cdef Group group
 *         groups = []
 */

#line 471 "cds3/core.pyx"
  __pyx_t_1 = __pyx_v_self->c_ob->ngroups;

#line 471 "cds3/core.pyx"
  __pyx_v_ngroups = __pyx_t_1;

  /* "cds3/core.pyx":473
 *         cdef int ngroups = self.c_ob.ngroups
 *         cdef Group group
 *         groups = []             # <<<<<<<<<<<<<<
 *         for i in range(ngroups):
 *             group = Group()
 */

#line 473 "cds3/core.pyx"
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 473 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 473 "cds3/core.pyx"
  __pyx_v_groups = ((PyObject*)__pyx_t_2);

#line 473 "cds3/core.pyx"
  __pyx_t_2 = 0;

  /* "cds3/core.pyx":474
 *         cdef Group group
 *         groups = []
 *         for i in range(ngroups):             # <<<<<<<<<<<<<<
 *             group = Group()
 *             group.set_group(self.c_ob.groups[i])
 */

#line 474 "cds3/core.pyx"
  __pyx_t_1 = __pyx_v_ngroups;

#line 474 "cds3/core.pyx"
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_1; __pyx_t_3+=1) {

#line 474 "cds3/core.pyx"
    __pyx_v_i = __pyx_t_3;

    /* "cds3/core.pyx":475
 *         groups = []
 *         for i in range(ngroups):
 *             group = Group()             # <<<<<<<<<<<<<<
 *             group.set_group(self.c_ob.groups[i])
 *             groups.append(group)
 */

#line 475 "cds3/core.pyx"
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Group)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 475 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 475 "cds3/core.pyx"
    __Pyx_XDECREF(((PyObject *)__pyx_v_group));

#line 475 "cds3/core.pyx"
    __pyx_v_group = ((struct __pyx_obj_4cds3_4core_Group *)__pyx_t_2);

#line 475 "cds3/core.pyx"
    __pyx_t_2 = 0;

    /* "cds3/core.pyx":476
 *         for i in range(ngroups):
 *             group = Group()
 *             group.set_group(self.c_ob.groups[i])             # <<<<<<<<<<<<<<
 *             groups.append(group)
 *         return groups
 */

#line 476 "cds3/core.pyx"
    __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Group *)__pyx_v_group->__pyx_base.__pyx_vtab)->set_group(__pyx_v_group, (__pyx_v_self->c_ob->groups[__pyx_v_i])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 476 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 476 "cds3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cds3/core.pyx":477
 *             group = Group()
 *             group.set_group(self.c_ob.groups[i])
 *             groups.append(group)             # <<<<<<<<<<<<<<
 *         return groups
 * 
 */

#line 477 "cds3/core.pyx"
    __pyx_t_4 = PyList_Append(__pyx_v_groups, ((PyObject *)__pyx_v_group)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 477 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":478
 *             group.set_group(self.c_ob.groups[i])
 *             groups.append(group)
 *         return groups             # <<<<<<<<<<<<<<
 * 
 *     def get_nvargroups(self):
 */

#line 478 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 478 "cds3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_groups));

#line 478 "cds3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_groups);

#line 478 "cds3/core.pyx"
  goto __pyx_L0;

#line 478 "cds3/core.pyx"


#line 478 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 478 "cds3/core.pyx"
  goto __pyx_L0;

#line 478 "cds3/core.pyx"
  __pyx_L1_error:;

#line 478 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 478 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.get_groups", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 478 "cds3/core.pyx"
  __pyx_r = NULL;

#line 478 "cds3/core.pyx"
  __pyx_L0:;

#line 478 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_group);

#line 478 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_v_groups);

#line 478 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 478 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 478 "cds3/core.pyx"
  return __pyx_r;

#line 478 "cds3/core.pyx"
}

#line 478 "cds3/core.pyx"


#line 478 "cds3/core.pyx"
/* Python wrapper */

#line 478 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_27get_nvargroups(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 478 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_5Group_26get_nvargroups[] = "Group.get_nvargroups(self)";

#line 478 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_27get_nvargroups(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 478 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 478 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 478 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_nvargroups (wrapper)", 0);
  __pyx_r = 
#line 478 "cds3/core.pyx"
__pyx_pf_4cds3_4core_5Group_26get_nvargroups(((struct __pyx_obj_4cds3_4core_Group *)__pyx_v_self));

#line 478 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 478 "cds3/core.pyx"
  return __pyx_r;

#line 478 "cds3/core.pyx"
}

/* "cds3/core.pyx":480
 *         return groups
 * 
 *     def get_nvargroups(self):             # <<<<<<<<<<<<<<
 *         return self.c_ob.nvargroups
 * 
 */

#line 480 "cds3/core.pyx"


#line 480 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_5Group_26get_nvargroups(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self) {

#line 480 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 480 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_nvargroups", 0);

  /* "cds3/core.pyx":481
 * 
 *     def get_nvargroups(self):
 *         return self.c_ob.nvargroups             # <<<<<<<<<<<<<<
 * 
 *     def get_vargroups(self):
 */

#line 481 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 481 "cds3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->c_ob->nvargroups); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 481 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 481 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 481 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 481 "cds3/core.pyx"
  goto __pyx_L0;

#line 481 "cds3/core.pyx"


#line 481 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 481 "cds3/core.pyx"
  goto __pyx_L0;

#line 481 "cds3/core.pyx"
  __pyx_L1_error:;

#line 481 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 481 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.get_nvargroups", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 481 "cds3/core.pyx"
  __pyx_r = NULL;

#line 481 "cds3/core.pyx"
  __pyx_L0:;

#line 481 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 481 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 481 "cds3/core.pyx"
  return __pyx_r;

#line 481 "cds3/core.pyx"
}

#line 481 "cds3/core.pyx"


#line 481 "cds3/core.pyx"
/* Python wrapper */

#line 481 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_29get_vargroups(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 481 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_5Group_28get_vargroups[] = "Group.get_vargroups(self)";

#line 481 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_29get_vargroups(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 481 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 481 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 481 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_vargroups (wrapper)", 0);
  __pyx_r = 
#line 481 "cds3/core.pyx"
__pyx_pf_4cds3_4core_5Group_28get_vargroups(((struct __pyx_obj_4cds3_4core_Group *)__pyx_v_self));

#line 481 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 481 "cds3/core.pyx"
  return __pyx_r;

#line 481 "cds3/core.pyx"
}

/* "cds3/core.pyx":483
 *         return self.c_ob.nvargroups
 * 
 *     def get_vargroups(self):             # <<<<<<<<<<<<<<
 *         cdef int nvargroups = self.c_ob.nvargroups
 *         cdef VarGroup vargroup
 */

#line 483 "cds3/core.pyx"


#line 483 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_5Group_28get_vargroups(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self) {
  int __pyx_v_nvargroups
#line 483 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_VarGroup *__pyx_v_vargroup = 0
#line 483 "cds3/core.pyx"
;
  PyObject *__pyx_v_vargroups = NULL
#line 483 "cds3/core.pyx"
;
  int __pyx_v_i
#line 483 "cds3/core.pyx"
;

#line 483 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 483 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_vargroups", 0);

  /* "cds3/core.pyx":484
 * 
 *     def get_vargroups(self):
 *         cdef int nvargroups = self.c_ob.nvargroups             # <<<<<<<<<<<<<<
 *         cdef VarGroup vargroup
 *         vargroups = []
 */

#line 484 "cds3/core.pyx"
  __pyx_t_1 = __pyx_v_self->c_ob->nvargroups;

#line 484 "cds3/core.pyx"
  __pyx_v_nvargroups = __pyx_t_1;

  /* "cds3/core.pyx":486
 *         cdef int nvargroups = self.c_ob.nvargroups
 *         cdef VarGroup vargroup
 *         vargroups = []             # <<<<<<<<<<<<<<
 *         for i in range(nvargroups):
 *             vargroup = vargroup()
 */

#line 486 "cds3/core.pyx"
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 486 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 486 "cds3/core.pyx"
  __pyx_v_vargroups = ((PyObject*)__pyx_t_2);

#line 486 "cds3/core.pyx"
  __pyx_t_2 = 0;

  /* "cds3/core.pyx":487
 *         cdef VarGroup vargroup
 *         vargroups = []
 *         for i in range(nvargroups):             # <<<<<<<<<<<<<<
 *             vargroup = vargroup()
 *             vargroup.set_vargroup(self.c_ob.vargroups[i])
 */

#line 487 "cds3/core.pyx"
  __pyx_t_1 = __pyx_v_nvargroups;

#line 487 "cds3/core.pyx"
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_1; __pyx_t_3+=1) {

#line 487 "cds3/core.pyx"
    __pyx_v_i = __pyx_t_3;

    /* "cds3/core.pyx":488
 *         vargroups = []
 *         for i in range(nvargroups):
 *             vargroup = vargroup()             # <<<<<<<<<<<<<<
 *             vargroup.set_vargroup(self.c_ob.vargroups[i])
 *             vargroups.append(vargroup)
 */

#line 488 "cds3/core.pyx"
    if (unlikely(!__pyx_v_vargroup)) { __Pyx_RaiseUnboundLocalError("vargroup"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }

#line 488 "cds3/core.pyx"
    __pyx_t_2 = PyObject_Call(((PyObject *)__pyx_v_vargroup), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 488 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 488 "cds3/core.pyx"
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_4cds3_4core_VarGroup))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 488 "cds3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_v_vargroup));

#line 488 "cds3/core.pyx"
    __pyx_v_vargroup = ((struct __pyx_obj_4cds3_4core_VarGroup *)__pyx_t_2);

#line 488 "cds3/core.pyx"
    __pyx_t_2 = 0;

    /* "cds3/core.pyx":489
 *         for i in range(nvargroups):
 *             vargroup = vargroup()
 *             vargroup.set_vargroup(self.c_ob.vargroups[i])             # <<<<<<<<<<<<<<
 *             vargroups.append(vargroup)
 *         return vargroups
 */

#line 489 "cds3/core.pyx"
    __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_VarGroup *)__pyx_v_vargroup->__pyx_base.__pyx_vtab)->set_vargroup(__pyx_v_vargroup, (__pyx_v_self->c_ob->vargroups[__pyx_v_i])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 489 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 489 "cds3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cds3/core.pyx":490
 *             vargroup = vargroup()
 *             vargroup.set_vargroup(self.c_ob.vargroups[i])
 *             vargroups.append(vargroup)             # <<<<<<<<<<<<<<
 *         return vargroups
 * 
 */

#line 490 "cds3/core.pyx"
    __pyx_t_4 = PyList_Append(__pyx_v_vargroups, ((PyObject *)__pyx_v_vargroup)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 490 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":491
 *             vargroup.set_vargroup(self.c_ob.vargroups[i])
 *             vargroups.append(vargroup)
 *         return vargroups             # <<<<<<<<<<<<<<
 * 
 *     ###################################################################
 */

#line 491 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 491 "cds3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_vargroups));

#line 491 "cds3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_vargroups);

#line 491 "cds3/core.pyx"
  goto __pyx_L0;

#line 491 "cds3/core.pyx"


#line 491 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 491 "cds3/core.pyx"
  goto __pyx_L0;

#line 491 "cds3/core.pyx"
  __pyx_L1_error:;

#line 491 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 491 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.get_vargroups", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 491 "cds3/core.pyx"
  __pyx_r = NULL;

#line 491 "cds3/core.pyx"
  __pyx_L0:;

#line 491 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_vargroup);

#line 491 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_v_vargroups);

#line 491 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 491 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 491 "cds3/core.pyx"
  return __pyx_r;

#line 491 "cds3/core.pyx"
}

#line 491 "cds3/core.pyx"


#line 491 "cds3/core.pyx"
/* Python wrapper */

#line 491 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_31rename(PyObject *__pyx_v_self, PyObject *__pyx_arg_name); /*proto*/

#line 491 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_5Group_30rename[] = "Group.rename(self, char *name)\nRename a CDS Group.\n        \n        Error messages from this function are sent to the message\n        handler (see msngr_init_log() and msngr_init_mail()).\n        \n        @param name - pointer to the new group name\n        \n        @retval 1 if the group was renamed\n        @retval 0 if a group with the new name already exists\n        @retval 0 if the group is locked\n        @retval 0 if the parent group is locked\n        @retval 0 if a memory allocation error occured\n        \n        ";

#line 491 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_31rename(PyObject *__pyx_v_self, PyObject *__pyx_arg_name) {
  char *__pyx_v_name
#line 491 "cds3/core.pyx"
;

#line 491 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 491 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 491 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("rename (wrapper)", 0);

#line 491 "cds3/core.pyx"
  assert(__pyx_arg_name); {

#line 491 "cds3/core.pyx"
    __pyx_v_name = PyBytes_AsString(__pyx_arg_name); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 497; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 491 "cds3/core.pyx"
  }

#line 491 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 491 "cds3/core.pyx"
  __pyx_L3_error:;

#line 491 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.rename", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 491 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 491 "cds3/core.pyx"
  return NULL;

#line 491 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 491 "cds3/core.pyx"
__pyx_pf_4cds3_4core_5Group_30rename(((struct __pyx_obj_4cds3_4core_Group *)__pyx_v_self), ((char *)__pyx_v_name));

#line 491 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 491 "cds3/core.pyx"
  return __pyx_r;

#line 491 "cds3/core.pyx"
}

/* "cds3/core.pyx":497
 *     ###################################################################
 * 
 *     def rename(self, char *name):             # <<<<<<<<<<<<<<
 *         """Rename a CDS Group.
 * 
 */

#line 497 "cds3/core.pyx"


#line 497 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_5Group_30rename(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self, char *__pyx_v_name) {

#line 497 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 497 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("rename", 0);

  /* "cds3/core.pyx":512
 * 
 *         """
 *         return cds_rename_group(self.c_ob, name)             # <<<<<<<<<<<<<<
 * 
 *     def define_dim(self, char *name, size_t length, int is_unlimited):
 */

#line 512 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 512 "cds3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(cds_rename_group(__pyx_v_self->c_ob, __pyx_v_name)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 512 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 512 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 512 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 512 "cds3/core.pyx"
  goto __pyx_L0;

#line 512 "cds3/core.pyx"


#line 512 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 512 "cds3/core.pyx"
  goto __pyx_L0;

#line 512 "cds3/core.pyx"
  __pyx_L1_error:;

#line 512 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 512 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.rename", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 512 "cds3/core.pyx"
  __pyx_r = NULL;

#line 512 "cds3/core.pyx"
  __pyx_L0:;

#line 512 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 512 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 512 "cds3/core.pyx"
  return __pyx_r;

#line 512 "cds3/core.pyx"
}

#line 512 "cds3/core.pyx"


#line 512 "cds3/core.pyx"
/* Python wrapper */

#line 512 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_33define_dim(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 512 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_5Group_32define_dim[] = "Group.define_dim(self, char *name, size_t length, int is_unlimited)\nDefine a CDS Dimension.\n        \n        This function will first check if a dimension with the same definition\n        already exists in the specified group. If it does, the existing\n        dimension will be returned.\n        \n        Error messages from this function are sent to the message handler (see\n        msngr_init_log() and msngr_init_mail()).\n        \n        @param name - dimension name\n        @param length - dimension length\n        @param is_unlimited - is dimension unlimited (0 = FALSE, 1 = TRUE)\n        \n        @retval the Dim instance\n        @retval None if a static dimension with the same name but different\n                length has already been defined for the specified group.\n        @retval None if the group is locked\n        @retval None if a memory allocation error occurred\n        \n        ";

#line 512 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_33define_dim(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_name
#line 512 "cds3/core.pyx"
;
  size_t __pyx_v_length
#line 512 "cds3/core.pyx"
;
  int __pyx_v_is_unlimited
#line 512 "cds3/core.pyx"
;

#line 512 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 512 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 512 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("define_dim (wrapper)", 0);

#line 512 "cds3/core.pyx"
  {

#line 512 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__name,&__pyx_n_s__length,&__pyx_n_s__is_unlimited,0};

#line 512 "cds3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 512 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 512 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 512 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 512 "cds3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 512 "cds3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 512 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 512 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 512 "cds3/core.pyx"
        case  0: break;
        default: 
#line 512 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 512 "cds3/core.pyx"
      }

#line 512 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 512 "cds3/core.pyx"
      switch (pos_args) {

#line 512 "cds3/core.pyx"
        case  0:

#line 512 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name)) != 0)) kw_args--;
        else 
#line 512 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 512 "cds3/core.pyx"
        case  1:

#line 512 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__length)) != 0)) kw_args--;

#line 512 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("define_dim", 1, 3, 3, 1); 
#line 512 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 512 "cds3/core.pyx"
        }

#line 512 "cds3/core.pyx"
        case  2:

#line 512 "cds3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__is_unlimited)) != 0)) kw_args--;

#line 512 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("define_dim", 1, 3, 3, 2); 
#line 512 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 512 "cds3/core.pyx"
        }

#line 512 "cds3/core.pyx"
      }

#line 512 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 512 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "define_dim") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 512 "cds3/core.pyx"
      }

#line 512 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 512 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 512 "cds3/core.pyx"
    } else {

#line 512 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 512 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 512 "cds3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 512 "cds3/core.pyx"
    }

#line 512 "cds3/core.pyx"
    __pyx_v_name = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 512 "cds3/core.pyx"
    __pyx_v_length = __Pyx_PyInt_AsSize_t(values[1]); if (unlikely((__pyx_v_length == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 512 "cds3/core.pyx"
    __pyx_v_is_unlimited = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_is_unlimited == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 512 "cds3/core.pyx"
  }

#line 512 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 512 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("define_dim", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 512 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 512 "cds3/core.pyx"
  __pyx_L3_error:;

#line 512 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.define_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 512 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 512 "cds3/core.pyx"
  return NULL;

#line 512 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 512 "cds3/core.pyx"
__pyx_pf_4cds3_4core_5Group_32define_dim(((struct __pyx_obj_4cds3_4core_Group *)__pyx_v_self), __pyx_v_name, __pyx_v_length, __pyx_v_is_unlimited);

#line 512 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 512 "cds3/core.pyx"
  return __pyx_r;

#line 512 "cds3/core.pyx"
}

/* "cds3/core.pyx":514
 *         return cds_rename_group(self.c_ob, name)
 * 
 *     def define_dim(self, char *name, size_t length, int is_unlimited):             # <<<<<<<<<<<<<<
 *         """Define a CDS Dimension.
 * 
 */

#line 514 "cds3/core.pyx"


#line 514 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_5Group_32define_dim(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self, char *__pyx_v_name, size_t __pyx_v_length, int __pyx_v_is_unlimited) {
  struct CDSDim *__pyx_v_c_dim
#line 514 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Dim *__pyx_v_dim = NULL
#line 514 "cds3/core.pyx"
;

#line 514 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 514 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("define_dim", 0);

  /* "cds3/core.pyx":536
 *         """
 *         cdef CDSDim *c_dim = cds_define_dim(
 *                 self.c_ob, name, length, is_unlimited)             # <<<<<<<<<<<<<<
 *         if c_dim == NULL:
 *             return None
 */

#line 536 "cds3/core.pyx"
  __pyx_v_c_dim = cds_define_dim(__pyx_v_self->c_ob, __pyx_v_name, __pyx_v_length, __pyx_v_is_unlimited);

  /* "cds3/core.pyx":537
 *         cdef CDSDim *c_dim = cds_define_dim(
 *                 self.c_ob, name, length, is_unlimited)
 *         if c_dim == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         dim = Dim()
 */

#line 537 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_c_dim == NULL);

#line 537 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":538
 *                 self.c_ob, name, length, is_unlimited)
 *         if c_dim == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         dim = Dim()
 *         dim.set_dim(c_dim)
 */

#line 538 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 538 "cds3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 538 "cds3/core.pyx"
    __pyx_r = Py_None;

#line 538 "cds3/core.pyx"
    goto __pyx_L0;

#line 538 "cds3/core.pyx"
    goto __pyx_L3;

#line 538 "cds3/core.pyx"
  }

#line 538 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":539
 *         if c_dim == NULL:
 *             return None
 *         dim = Dim()             # <<<<<<<<<<<<<<
 *         dim.set_dim(c_dim)
 *         return dim
 */

#line 539 "cds3/core.pyx"
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Dim)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 539 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 539 "cds3/core.pyx"
  __pyx_v_dim = ((struct __pyx_obj_4cds3_4core_Dim *)__pyx_t_2);

#line 539 "cds3/core.pyx"
  __pyx_t_2 = 0;

  /* "cds3/core.pyx":540
 *             return None
 *         dim = Dim()
 *         dim.set_dim(c_dim)             # <<<<<<<<<<<<<<
 *         return dim
 * 
 */

#line 540 "cds3/core.pyx"
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Dim *)__pyx_v_dim->__pyx_base.__pyx_vtab)->set_dim(__pyx_v_dim, __pyx_v_c_dim); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 540 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 540 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cds3/core.pyx":541
 *         dim = Dim()
 *         dim.set_dim(c_dim)
 *         return dim             # <<<<<<<<<<<<<<
 * 
 *     def get_dim(self, char *name):
 */

#line 541 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 541 "cds3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_dim));

#line 541 "cds3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_dim);

#line 541 "cds3/core.pyx"
  goto __pyx_L0;

#line 541 "cds3/core.pyx"


#line 541 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 541 "cds3/core.pyx"
  goto __pyx_L0;

#line 541 "cds3/core.pyx"
  __pyx_L1_error:;

#line 541 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 541 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.define_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 541 "cds3/core.pyx"
  __pyx_r = NULL;

#line 541 "cds3/core.pyx"
  __pyx_L0:;

#line 541 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_dim);

#line 541 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 541 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 541 "cds3/core.pyx"
  return __pyx_r;

#line 541 "cds3/core.pyx"
}

#line 541 "cds3/core.pyx"


#line 541 "cds3/core.pyx"
/* Python wrapper */

#line 541 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_35get_dim(PyObject *__pyx_v_self, PyObject *__pyx_arg_name); /*proto*/

#line 541 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_5Group_34get_dim[] = "Group.get_dim(self, char *name)\nGet a CDS Dimension.\n        \n        This function will search the specified group then and all ancestor\n        groups for a dimension with the specified name.  The first dimension\n        found will be returned.\n        \n        @param name - name of the dimension\n        \n        @retval the Dim\n        @retval None if not found\n        \n        ";

#line 541 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_35get_dim(PyObject *__pyx_v_self, PyObject *__pyx_arg_name) {
  char *__pyx_v_name
#line 541 "cds3/core.pyx"
;

#line 541 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 541 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 541 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_dim (wrapper)", 0);

#line 541 "cds3/core.pyx"
  assert(__pyx_arg_name); {

#line 541 "cds3/core.pyx"
    __pyx_v_name = PyBytes_AsString(__pyx_arg_name); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 543; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 541 "cds3/core.pyx"
  }

#line 541 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 541 "cds3/core.pyx"
  __pyx_L3_error:;

#line 541 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.get_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 541 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 541 "cds3/core.pyx"
  return NULL;

#line 541 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 541 "cds3/core.pyx"
__pyx_pf_4cds3_4core_5Group_34get_dim(((struct __pyx_obj_4cds3_4core_Group *)__pyx_v_self), ((char *)__pyx_v_name));

#line 541 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 541 "cds3/core.pyx"
  return __pyx_r;

#line 541 "cds3/core.pyx"
}

/* "cds3/core.pyx":543
 *         return dim
 * 
 *     def get_dim(self, char *name):             # <<<<<<<<<<<<<<
 *         """Get a CDS Dimension.
 * 
 */

#line 543 "cds3/core.pyx"


#line 543 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_5Group_34get_dim(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self, char *__pyx_v_name) {
  struct CDSDim *__pyx_v_c_dim
#line 543 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Dim *__pyx_v_dim = NULL
#line 543 "cds3/core.pyx"
;

#line 543 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 543 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_dim", 0);

  /* "cds3/core.pyx":556
 * 
 *         """
 *         cdef CDSDim *c_dim = cds_get_dim(self.c_ob, name)             # <<<<<<<<<<<<<<
 *         if c_dim == NULL:
 *             return None
 */

#line 556 "cds3/core.pyx"
  __pyx_v_c_dim = cds_get_dim(__pyx_v_self->c_ob, __pyx_v_name);

  /* "cds3/core.pyx":557
 *         """
 *         cdef CDSDim *c_dim = cds_get_dim(self.c_ob, name)
 *         if c_dim == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         dim = Dim()
 */

#line 557 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_c_dim == NULL);

#line 557 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":558
 *         cdef CDSDim *c_dim = cds_get_dim(self.c_ob, name)
 *         if c_dim == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         dim = Dim()
 *         dim.set_dim(c_dim)
 */

#line 558 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 558 "cds3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 558 "cds3/core.pyx"
    __pyx_r = Py_None;

#line 558 "cds3/core.pyx"
    goto __pyx_L0;

#line 558 "cds3/core.pyx"
    goto __pyx_L3;

#line 558 "cds3/core.pyx"
  }

#line 558 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":559
 *         if c_dim == NULL:
 *             return None
 *         dim = Dim()             # <<<<<<<<<<<<<<
 *         dim.set_dim(c_dim)
 *         return dim
 */

#line 559 "cds3/core.pyx"
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Dim)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 559 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 559 "cds3/core.pyx"
  __pyx_v_dim = ((struct __pyx_obj_4cds3_4core_Dim *)__pyx_t_2);

#line 559 "cds3/core.pyx"
  __pyx_t_2 = 0;

  /* "cds3/core.pyx":560
 *             return None
 *         dim = Dim()
 *         dim.set_dim(c_dim)             # <<<<<<<<<<<<<<
 *         return dim
 * 
 */

#line 560 "cds3/core.pyx"
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Dim *)__pyx_v_dim->__pyx_base.__pyx_vtab)->set_dim(__pyx_v_dim, __pyx_v_c_dim); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 560 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 560 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cds3/core.pyx":561
 *         dim = Dim()
 *         dim.set_dim(c_dim)
 *         return dim             # <<<<<<<<<<<<<<
 * 
 *     def change_att(self, int overwrite, char *name, CDSDataType type,
 */

#line 561 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 561 "cds3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_dim));

#line 561 "cds3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_dim);

#line 561 "cds3/core.pyx"
  goto __pyx_L0;

#line 561 "cds3/core.pyx"


#line 561 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 561 "cds3/core.pyx"
  goto __pyx_L0;

#line 561 "cds3/core.pyx"
  __pyx_L1_error:;

#line 561 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 561 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.get_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 561 "cds3/core.pyx"
  __pyx_r = NULL;

#line 561 "cds3/core.pyx"
  __pyx_L0:;

#line 561 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_dim);

#line 561 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 561 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 561 "cds3/core.pyx"
  return __pyx_r;

#line 561 "cds3/core.pyx"
}

#line 561 "cds3/core.pyx"


#line 561 "cds3/core.pyx"
/* Python wrapper */

#line 561 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_37change_att(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 561 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_5Group_36change_att[] = "Group.change_att(self, int overwrite, char *name, CDSDataType type, value)\nChange an attribute of a CDS group or variable.\n        \n        This function will define the specified attribute if it does not exist.\n        If the attribute does exist and the overwrite flag is set, the data\n        type and value will be changed.\n        \n        Error messages from this function are sent to the message handler\n        (see msngr_init_log() and msngr_init_mail()).\n        \n        @param overwrite - overwrite flag (1 = TRUE, 0 = FALSE)\n        @param name - attribute name\n        @param type - attribute data type\n        @param value - Python value(s), internally converted to numpy.ndarray\n        \n        @retval the Att instance\n        @retval None if the parent object is not a group or variable\n        @retval None if the parent group or variable is locked, or the\n                attribute is locked\n        @retval None if a memory allocation error occurred\n\n        ";

#line 561 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_37change_att(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_overwrite
#line 561 "cds3/core.pyx"
;
  char *__pyx_v_name
#line 561 "cds3/core.pyx"
;
  CDSDataType __pyx_v_type
#line 561 "cds3/core.pyx"
;
  PyObject *__pyx_v_value = 0
#line 561 "cds3/core.pyx"
;

#line 561 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 561 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 561 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("change_att (wrapper)", 0);

#line 561 "cds3/core.pyx"
  {

#line 561 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__overwrite,&__pyx_n_s__name,&__pyx_n_s__type,&__pyx_n_s__value,0};

#line 561 "cds3/core.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 561 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 561 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 561 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 561 "cds3/core.pyx"
      switch (pos_args) {
        case  4: 
#line 561 "cds3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 561 "cds3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 561 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 561 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 561 "cds3/core.pyx"
        case  0: break;
        default: 
#line 561 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 561 "cds3/core.pyx"
      }

#line 561 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 561 "cds3/core.pyx"
      switch (pos_args) {

#line 561 "cds3/core.pyx"
        case  0:

#line 561 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__overwrite)) != 0)) kw_args--;
        else 
#line 561 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 561 "cds3/core.pyx"
        case  1:

#line 561 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name)) != 0)) kw_args--;

#line 561 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("change_att", 1, 4, 4, 1); 
#line 561 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 561 "cds3/core.pyx"
        }

#line 561 "cds3/core.pyx"
        case  2:

#line 561 "cds3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__type)) != 0)) kw_args--;

#line 561 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("change_att", 1, 4, 4, 2); 
#line 561 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 561 "cds3/core.pyx"
        }

#line 561 "cds3/core.pyx"
        case  3:

#line 561 "cds3/core.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value)) != 0)) kw_args--;

#line 561 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("change_att", 1, 4, 4, 3); 
#line 561 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 561 "cds3/core.pyx"
        }

#line 561 "cds3/core.pyx"
      }

#line 561 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 561 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "change_att") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 561 "cds3/core.pyx"
      }

#line 561 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {

#line 561 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 561 "cds3/core.pyx"
    } else {

#line 561 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 561 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 561 "cds3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 561 "cds3/core.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 561 "cds3/core.pyx"
    }

#line 561 "cds3/core.pyx"
    __pyx_v_overwrite = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_overwrite == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 561 "cds3/core.pyx"
    __pyx_v_name = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 561 "cds3/core.pyx"
    __pyx_v_type = ((CDSDataType)PyInt_AsLong(values[2])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 561 "cds3/core.pyx"
    __pyx_v_value = values[3];

#line 561 "cds3/core.pyx"
  }

#line 561 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 561 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("change_att", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 561 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 561 "cds3/core.pyx"
  __pyx_L3_error:;

#line 561 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.change_att", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 561 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 561 "cds3/core.pyx"
  return NULL;

#line 561 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 561 "cds3/core.pyx"
__pyx_pf_4cds3_4core_5Group_36change_att(((struct __pyx_obj_4cds3_4core_Group *)__pyx_v_self), __pyx_v_overwrite, __pyx_v_name, __pyx_v_type, __pyx_v_value);

#line 561 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 561 "cds3/core.pyx"
  return __pyx_r;

#line 561 "cds3/core.pyx"
}

/* "cds3/core.pyx":563
 *         return dim
 * 
 *     def change_att(self, int overwrite, char *name, CDSDataType type,             # <<<<<<<<<<<<<<
 *             object value):
 *         """Change an attribute of a CDS group or variable.
 */

#line 563 "cds3/core.pyx"


#line 563 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_5Group_36change_att(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self, int __pyx_v_overwrite, char *__pyx_v_name, CDSDataType __pyx_v_type, PyObject *__pyx_v_value) {

#line 563 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 563 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("change_att", 0);

  /* "cds3/core.pyx":586
 * 
 *         """
 *         return _change_att(self.c_ob, overwrite, name, type, value)             # <<<<<<<<<<<<<<
 * 
 *     def define_att(self, char *name, CDSDataType type, object value):
 */

#line 586 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 586 "cds3/core.pyx"
  __pyx_t_1 = ((PyObject *)__pyx_f_4cds3_4core__change_att(__pyx_v_self->c_ob, __pyx_v_overwrite, __pyx_v_name, __pyx_v_type, __pyx_v_value)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 586 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 586 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 586 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 586 "cds3/core.pyx"
  goto __pyx_L0;

#line 586 "cds3/core.pyx"


#line 586 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 586 "cds3/core.pyx"
  goto __pyx_L0;

#line 586 "cds3/core.pyx"
  __pyx_L1_error:;

#line 586 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 586 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.change_att", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 586 "cds3/core.pyx"
  __pyx_r = NULL;

#line 586 "cds3/core.pyx"
  __pyx_L0:;

#line 586 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 586 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 586 "cds3/core.pyx"
  return __pyx_r;

#line 586 "cds3/core.pyx"
}

#line 586 "cds3/core.pyx"


#line 586 "cds3/core.pyx"
/* Python wrapper */

#line 586 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_39define_att(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 586 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_5Group_38define_att[] = "Group.define_att(self, char *name, CDSDataType type, value)\nDefine a CDS Attribute.\n\n        This function will first check if an attribute with the same definition\n        already exists in the specified group or variable.  If it does, the\n        existing attribute will be returned.\n        \n        Error messages from this function are sent to the message\n        handler (see msngr_init_log() and msngr_init_mail()).\n        \n        @param name - attribute name\n        @param type - attribute data type\n        @param length - attribute length\n        @param value - Python value(s), internally converted to numpy.ndarray\n        \n        @retval the Att instance\n        @retval None if the parent object is not a group or variable\n        @retval None if the parent group or variable is locked\n        @retval None if a memory allocation error occurred\n        @retval None if an attribute with the same name but different\n                definition has already been defined\n\n        ";

#line 586 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_39define_att(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_name
#line 586 "cds3/core.pyx"
;
  CDSDataType __pyx_v_type
#line 586 "cds3/core.pyx"
;
  PyObject *__pyx_v_value = 0
#line 586 "cds3/core.pyx"
;

#line 586 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 586 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 586 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("define_att (wrapper)", 0);

#line 586 "cds3/core.pyx"
  {

#line 586 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__name,&__pyx_n_s__type,&__pyx_n_s__value,0};

#line 586 "cds3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 586 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 586 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 586 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 586 "cds3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 586 "cds3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 586 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 586 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 586 "cds3/core.pyx"
        case  0: break;
        default: 
#line 586 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 586 "cds3/core.pyx"
      }

#line 586 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 586 "cds3/core.pyx"
      switch (pos_args) {

#line 586 "cds3/core.pyx"
        case  0:

#line 586 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name)) != 0)) kw_args--;
        else 
#line 586 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 586 "cds3/core.pyx"
        case  1:

#line 586 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__type)) != 0)) kw_args--;

#line 586 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("define_att", 1, 3, 3, 1); 
#line 586 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 588; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 586 "cds3/core.pyx"
        }

#line 586 "cds3/core.pyx"
        case  2:

#line 586 "cds3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value)) != 0)) kw_args--;

#line 586 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("define_att", 1, 3, 3, 2); 
#line 586 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 588; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 586 "cds3/core.pyx"
        }

#line 586 "cds3/core.pyx"
      }

#line 586 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 586 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "define_att") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 588; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 586 "cds3/core.pyx"
      }

#line 586 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 586 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 586 "cds3/core.pyx"
    } else {

#line 586 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 586 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 586 "cds3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 586 "cds3/core.pyx"
    }

#line 586 "cds3/core.pyx"
    __pyx_v_name = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 588; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 586 "cds3/core.pyx"
    __pyx_v_type = ((CDSDataType)PyInt_AsLong(values[1])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 588; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 586 "cds3/core.pyx"
    __pyx_v_value = values[2];

#line 586 "cds3/core.pyx"
  }

#line 586 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 586 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("define_att", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 586 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 588; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 586 "cds3/core.pyx"
  __pyx_L3_error:;

#line 586 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.define_att", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 586 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 586 "cds3/core.pyx"
  return NULL;

#line 586 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 586 "cds3/core.pyx"
__pyx_pf_4cds3_4core_5Group_38define_att(((struct __pyx_obj_4cds3_4core_Group *)__pyx_v_self), __pyx_v_name, __pyx_v_type, __pyx_v_value);

#line 586 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 586 "cds3/core.pyx"
  return __pyx_r;

#line 586 "cds3/core.pyx"
}

/* "cds3/core.pyx":588
 *         return _change_att(self.c_ob, overwrite, name, type, value)
 * 
 *     def define_att(self, char *name, CDSDataType type, object value):             # <<<<<<<<<<<<<<
 *         """Define a CDS Attribute.
 * 
 */

#line 588 "cds3/core.pyx"


#line 588 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_5Group_38define_att(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self, char *__pyx_v_name, CDSDataType __pyx_v_type, PyObject *__pyx_v_value) {

#line 588 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 588 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("define_att", 0);

  /* "cds3/core.pyx":611
 * 
 *         """
 *         return _define_att(self.c_ob, name, type, value)             # <<<<<<<<<<<<<<
 * 
 *     def define_att_text(self, char *name, char *text):
 */

#line 611 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 611 "cds3/core.pyx"
  __pyx_t_1 = ((PyObject *)__pyx_f_4cds3_4core__define_att(__pyx_v_self->c_ob, __pyx_v_name, __pyx_v_type, __pyx_v_value)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 611; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 611 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 611 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 611 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 611 "cds3/core.pyx"
  goto __pyx_L0;

#line 611 "cds3/core.pyx"


#line 611 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 611 "cds3/core.pyx"
  goto __pyx_L0;

#line 611 "cds3/core.pyx"
  __pyx_L1_error:;

#line 611 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 611 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.define_att", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 611 "cds3/core.pyx"
  __pyx_r = NULL;

#line 611 "cds3/core.pyx"
  __pyx_L0:;

#line 611 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 611 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 611 "cds3/core.pyx"
  return __pyx_r;

#line 611 "cds3/core.pyx"
}

#line 611 "cds3/core.pyx"


#line 611 "cds3/core.pyx"
/* Python wrapper */

#line 611 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_41define_att_text(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 611 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_5Group_40define_att_text[] = "Group.define_att_text(self, char *name, char *text)\nDefine a CDS Text Attribute.\n        \n        See cds_define_att() for details.\n        \n        Error messages from this function are sent to the message\n        handler (see msngr_init_log() and msngr_init_mail()).\n        \n        @param name - attribute name\n        @param format - string value\n        \n        @retval the new Att\n        @retval None if the parent object is not a group or variable\n        @retval None if the parent group or variable is locked\n        @retval None if a memory allocation error occurred\n        @retval None if an attribute with the same name but a differnt value\n                has already been defined\n        \n        ";

#line 611 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_41define_att_text(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_name
#line 611 "cds3/core.pyx"
;
  char *__pyx_v_text
#line 611 "cds3/core.pyx"
;

#line 611 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 611 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 611 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("define_att_text (wrapper)", 0);

#line 611 "cds3/core.pyx"
  {

#line 611 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__name,&__pyx_n_s__text,0};

#line 611 "cds3/core.pyx"
    PyObject* values[2] = {0,0};

#line 611 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 611 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 611 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 611 "cds3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 611 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 611 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 611 "cds3/core.pyx"
        case  0: break;
        default: 
#line 611 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 611 "cds3/core.pyx"
      }

#line 611 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 611 "cds3/core.pyx"
      switch (pos_args) {

#line 611 "cds3/core.pyx"
        case  0:

#line 611 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name)) != 0)) kw_args--;
        else 
#line 611 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 611 "cds3/core.pyx"
        case  1:

#line 611 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__text)) != 0)) kw_args--;

#line 611 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("define_att_text", 1, 2, 2, 1); 
#line 611 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 611 "cds3/core.pyx"
        }

#line 611 "cds3/core.pyx"
      }

#line 611 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 611 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "define_att_text") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 611 "cds3/core.pyx"
      }

#line 611 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 611 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 611 "cds3/core.pyx"
    } else {

#line 611 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 611 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 611 "cds3/core.pyx"
    }

#line 611 "cds3/core.pyx"
    __pyx_v_name = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 611 "cds3/core.pyx"
    __pyx_v_text = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_text) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 611 "cds3/core.pyx"
  }

#line 611 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 611 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("define_att_text", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 611 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 611 "cds3/core.pyx"
  __pyx_L3_error:;

#line 611 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.define_att_text", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 611 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 611 "cds3/core.pyx"
  return NULL;

#line 611 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 611 "cds3/core.pyx"
__pyx_pf_4cds3_4core_5Group_40define_att_text(((struct __pyx_obj_4cds3_4core_Group *)__pyx_v_self), __pyx_v_name, __pyx_v_text);

#line 611 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 611 "cds3/core.pyx"
  return __pyx_r;

#line 611 "cds3/core.pyx"
}

/* "cds3/core.pyx":613
 *         return _define_att(self.c_ob, name, type, value)
 * 
 *     def define_att_text(self, char *name, char *text):             # <<<<<<<<<<<<<<
 *         """Define a CDS Text Attribute.
 * 
 */

#line 613 "cds3/core.pyx"


#line 613 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_5Group_40define_att_text(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self, char *__pyx_v_name, char *__pyx_v_text) {

#line 613 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 613 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("define_att_text", 0);

  /* "cds3/core.pyx":632
 * 
 *         """
 *         return _define_att_text(self.c_ob, name, text)             # <<<<<<<<<<<<<<
 * 
 *     def get_att(self, char *name):
 */

#line 632 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 632 "cds3/core.pyx"
  __pyx_t_1 = ((PyObject *)__pyx_f_4cds3_4core__define_att_text(__pyx_v_self->c_ob, __pyx_v_name, __pyx_v_text)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 632 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 632 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 632 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 632 "cds3/core.pyx"
  goto __pyx_L0;

#line 632 "cds3/core.pyx"


#line 632 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 632 "cds3/core.pyx"
  goto __pyx_L0;

#line 632 "cds3/core.pyx"
  __pyx_L1_error:;

#line 632 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 632 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.define_att_text", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 632 "cds3/core.pyx"
  __pyx_r = NULL;

#line 632 "cds3/core.pyx"
  __pyx_L0:;

#line 632 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 632 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 632 "cds3/core.pyx"
  return __pyx_r;

#line 632 "cds3/core.pyx"
}

#line 632 "cds3/core.pyx"


#line 632 "cds3/core.pyx"
/* Python wrapper */

#line 632 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_43get_att(PyObject *__pyx_v_self, PyObject *__pyx_arg_name); /*proto*/

#line 632 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_5Group_42get_att[] = "Group.get_att(self, char *name)\nGet a CDS Attribute.\n\n        This function will search the specified parent group or variable for an\n        attribute with the specified name.\n        \n        @param name - name of the attribute\n        \n        @retval the Att\n        @retval None if not found\n\n        ";

#line 632 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_43get_att(PyObject *__pyx_v_self, PyObject *__pyx_arg_name) {
  char *__pyx_v_name
#line 632 "cds3/core.pyx"
;

#line 632 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 632 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 632 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_att (wrapper)", 0);

#line 632 "cds3/core.pyx"
  assert(__pyx_arg_name); {

#line 632 "cds3/core.pyx"
    __pyx_v_name = PyBytes_AsString(__pyx_arg_name); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 634; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 632 "cds3/core.pyx"
  }

#line 632 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 632 "cds3/core.pyx"
  __pyx_L3_error:;

#line 632 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.get_att", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 632 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 632 "cds3/core.pyx"
  return NULL;

#line 632 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 632 "cds3/core.pyx"
__pyx_pf_4cds3_4core_5Group_42get_att(((struct __pyx_obj_4cds3_4core_Group *)__pyx_v_self), ((char *)__pyx_v_name));

#line 632 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 632 "cds3/core.pyx"
  return __pyx_r;

#line 632 "cds3/core.pyx"
}

/* "cds3/core.pyx":634
 *         return _define_att_text(self.c_ob, name, text)
 * 
 *     def get_att(self, char *name):             # <<<<<<<<<<<<<<
 *         """Get a CDS Attribute.
 * 
 */

#line 634 "cds3/core.pyx"


#line 634 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_5Group_42get_att(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self, char *__pyx_v_name) {

#line 634 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 634 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_att", 0);

  /* "cds3/core.pyx":646
 * 
 *         """
 *         return _get_att(self.c_ob, name)             # <<<<<<<<<<<<<<
 * 
 *     def set_att(self, int overwrite, char *name, CDSDataType type,
 */

#line 646 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 646 "cds3/core.pyx"
  __pyx_t_1 = ((PyObject *)__pyx_f_4cds3_4core__get_att(__pyx_v_self->c_ob, __pyx_v_name)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 646 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 646 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 646 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 646 "cds3/core.pyx"
  goto __pyx_L0;

#line 646 "cds3/core.pyx"


#line 646 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 646 "cds3/core.pyx"
  goto __pyx_L0;

#line 646 "cds3/core.pyx"
  __pyx_L1_error:;

#line 646 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 646 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.get_att", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 646 "cds3/core.pyx"
  __pyx_r = NULL;

#line 646 "cds3/core.pyx"
  __pyx_L0:;

#line 646 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 646 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 646 "cds3/core.pyx"
  return __pyx_r;

#line 646 "cds3/core.pyx"
}

#line 646 "cds3/core.pyx"


#line 646 "cds3/core.pyx"
/* Python wrapper */

#line 646 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_45set_att(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 646 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_5Group_44set_att[] = "Group.set_att(self, int overwrite, char *name, CDSDataType type, value)\nSet an attribute of a CDS group or variable.\n        \n        This function will define the specified attribute if it does not exist.\n        If the attribute does exist and the overwrite flag is set, the value\n        will be set by casting the specified value into the data type of the\n        attribute.  The functions cds_string_to_array() and\n        cds_array_to_string() are used to convert between text (CDS_CHAR) and\n        numeric data types.\n        \n        Error messages from this function are sent to the message handler\n        (see msngr_init_log() and msngr_init_mail()).\n        \n        @param overwrite - overwrite flag (1 = TRUE, 0 = FALSE)\n        @param name - attribute name\n        @param type - attribute data type\n        @param value - Python value(s), internally converted to numpy.ndarray\n        \n        @retval the Att instance\n        @retval None if the parent object is not a group or variable\n        @retval None if the parent group or variable is locked, or the\n                attribute is locked\n        @retval None if a memory allocation error occurred\n        \n        ";

#line 646 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_45set_att(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_overwrite
#line 646 "cds3/core.pyx"
;
  char *__pyx_v_name
#line 646 "cds3/core.pyx"
;
  CDSDataType __pyx_v_type
#line 646 "cds3/core.pyx"
;
  PyObject *__pyx_v_value = 0
#line 646 "cds3/core.pyx"
;

#line 646 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 646 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 646 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("set_att (wrapper)", 0);

#line 646 "cds3/core.pyx"
  {

#line 646 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__overwrite,&__pyx_n_s__name,&__pyx_n_s__type,&__pyx_n_s__value,0};

#line 646 "cds3/core.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 646 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 646 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 646 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 646 "cds3/core.pyx"
      switch (pos_args) {
        case  4: 
#line 646 "cds3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 646 "cds3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 646 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 646 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 646 "cds3/core.pyx"
        case  0: break;
        default: 
#line 646 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 646 "cds3/core.pyx"
      }

#line 646 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 646 "cds3/core.pyx"
      switch (pos_args) {

#line 646 "cds3/core.pyx"
        case  0:

#line 646 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__overwrite)) != 0)) kw_args--;
        else 
#line 646 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 646 "cds3/core.pyx"
        case  1:

#line 646 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name)) != 0)) kw_args--;

#line 646 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_att", 1, 4, 4, 1); 
#line 646 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 648; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 646 "cds3/core.pyx"
        }

#line 646 "cds3/core.pyx"
        case  2:

#line 646 "cds3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__type)) != 0)) kw_args--;

#line 646 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_att", 1, 4, 4, 2); 
#line 646 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 648; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 646 "cds3/core.pyx"
        }

#line 646 "cds3/core.pyx"
        case  3:

#line 646 "cds3/core.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value)) != 0)) kw_args--;

#line 646 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_att", 1, 4, 4, 3); 
#line 646 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 648; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 646 "cds3/core.pyx"
        }

#line 646 "cds3/core.pyx"
      }

#line 646 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 646 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_att") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 648; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 646 "cds3/core.pyx"
      }

#line 646 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {

#line 646 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 646 "cds3/core.pyx"
    } else {

#line 646 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 646 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 646 "cds3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 646 "cds3/core.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 646 "cds3/core.pyx"
    }

#line 646 "cds3/core.pyx"
    __pyx_v_overwrite = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_overwrite == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 648; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 646 "cds3/core.pyx"
    __pyx_v_name = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 648; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 646 "cds3/core.pyx"
    __pyx_v_type = ((CDSDataType)PyInt_AsLong(values[2])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 648; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 646 "cds3/core.pyx"
    __pyx_v_value = values[3];

#line 646 "cds3/core.pyx"
  }

#line 646 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 646 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_att", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 646 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 648; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 646 "cds3/core.pyx"
  __pyx_L3_error:;

#line 646 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.set_att", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 646 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 646 "cds3/core.pyx"
  return NULL;

#line 646 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 646 "cds3/core.pyx"
__pyx_pf_4cds3_4core_5Group_44set_att(((struct __pyx_obj_4cds3_4core_Group *)__pyx_v_self), __pyx_v_overwrite, __pyx_v_name, __pyx_v_type, __pyx_v_value);

#line 646 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 646 "cds3/core.pyx"
  return __pyx_r;

#line 646 "cds3/core.pyx"
}

/* "cds3/core.pyx":648
 *         return _get_att(self.c_ob, name)
 * 
 *     def set_att(self, int overwrite, char *name, CDSDataType type,             # <<<<<<<<<<<<<<
 *             object value):
 *         """Set an attribute of a CDS group or variable.
 */

#line 648 "cds3/core.pyx"


#line 648 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_5Group_44set_att(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self, int __pyx_v_overwrite, char *__pyx_v_name, CDSDataType __pyx_v_type, PyObject *__pyx_v_value) {

#line 648 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 648 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("set_att", 0);

  /* "cds3/core.pyx":674
 * 
 *         """
 *         return _set_att(self.c_ob, overwrite, name, type, value)             # <<<<<<<<<<<<<<
 * 
 *     def define_var(self, char *name, CDSDataType type, object dim_names):
 */

#line 674 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 674 "cds3/core.pyx"
  __pyx_t_1 = ((PyObject *)__pyx_f_4cds3_4core__set_att(__pyx_v_self->c_ob, __pyx_v_overwrite, __pyx_v_name, __pyx_v_type, __pyx_v_value)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 674 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 674 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 674 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 674 "cds3/core.pyx"
  goto __pyx_L0;

#line 674 "cds3/core.pyx"


#line 674 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 674 "cds3/core.pyx"
  goto __pyx_L0;

#line 674 "cds3/core.pyx"
  __pyx_L1_error:;

#line 674 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 674 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.set_att", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 674 "cds3/core.pyx"
  __pyx_r = NULL;

#line 674 "cds3/core.pyx"
  __pyx_L0:;

#line 674 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 674 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 674 "cds3/core.pyx"
  return __pyx_r;

#line 674 "cds3/core.pyx"
}

#line 674 "cds3/core.pyx"


#line 674 "cds3/core.pyx"
/* Python wrapper */

#line 674 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_47define_var(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 674 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_5Group_46define_var[] = "Group.define_var(self, char *name, CDSDataType type, dim_names)\nDefine a CDS Variable.\n        \n        This function will first check if a variable with the same definition\n        already exists in the specified group. If it does, the existing\n        variable will be returned.\n        \n        Error messages from this function are sent to the message\n        handler (see msngr_init_log() and msngr_init_mail()).\n        \n        @param name - variable name\n        @param type - variable data type\n        @param dim_names - iterable of strings or a single string\n        \n        @retval the Var instance\n        @retval None if the group is locked\n        @retval None if a dimension has not been defined\n        @retval None if the unlimited dimension is not first\n        @retval None if a memory allocation error occurred\n        @retval None if a variable with the same name but different definition\n                has already been defined\n        \n        ";

#line 674 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_47define_var(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_name
#line 674 "cds3/core.pyx"
;
  CDSDataType __pyx_v_type
#line 674 "cds3/core.pyx"
;
  PyObject *__pyx_v_dim_names = 0
#line 674 "cds3/core.pyx"
;

#line 674 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 674 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 674 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("define_var (wrapper)", 0);

#line 674 "cds3/core.pyx"
  {

#line 674 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__name,&__pyx_n_s__type,&__pyx_n_s__dim_names,0};

#line 674 "cds3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 674 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 674 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 674 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 674 "cds3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 674 "cds3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 674 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 674 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 674 "cds3/core.pyx"
        case  0: break;
        default: 
#line 674 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 674 "cds3/core.pyx"
      }

#line 674 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 674 "cds3/core.pyx"
      switch (pos_args) {

#line 674 "cds3/core.pyx"
        case  0:

#line 674 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name)) != 0)) kw_args--;
        else 
#line 674 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 674 "cds3/core.pyx"
        case  1:

#line 674 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__type)) != 0)) kw_args--;

#line 674 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("define_var", 1, 3, 3, 1); 
#line 674 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 674 "cds3/core.pyx"
        }

#line 674 "cds3/core.pyx"
        case  2:

#line 674 "cds3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dim_names)) != 0)) kw_args--;

#line 674 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("define_var", 1, 3, 3, 2); 
#line 674 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 674 "cds3/core.pyx"
        }

#line 674 "cds3/core.pyx"
      }

#line 674 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 674 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "define_var") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 674 "cds3/core.pyx"
      }

#line 674 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 674 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 674 "cds3/core.pyx"
    } else {

#line 674 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 674 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 674 "cds3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 674 "cds3/core.pyx"
    }

#line 674 "cds3/core.pyx"
    __pyx_v_name = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 674 "cds3/core.pyx"
    __pyx_v_type = ((CDSDataType)PyInt_AsLong(values[1])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 674 "cds3/core.pyx"
    __pyx_v_dim_names = values[2];

#line 674 "cds3/core.pyx"
  }

#line 674 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 674 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("define_var", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 674 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 674 "cds3/core.pyx"
  __pyx_L3_error:;

#line 674 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.define_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 674 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 674 "cds3/core.pyx"
  return NULL;

#line 674 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 674 "cds3/core.pyx"
__pyx_pf_4cds3_4core_5Group_46define_var(((struct __pyx_obj_4cds3_4core_Group *)__pyx_v_self), __pyx_v_name, __pyx_v_type, __pyx_v_dim_names);

#line 674 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 674 "cds3/core.pyx"
  return __pyx_r;

#line 674 "cds3/core.pyx"
}

/* "cds3/core.pyx":676
 *         return _set_att(self.c_ob, overwrite, name, type, value)
 * 
 *     def define_var(self, char *name, CDSDataType type, object dim_names):             # <<<<<<<<<<<<<<
 *         """Define a CDS Variable.
 * 
 */

#line 676 "cds3/core.pyx"


#line 676 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_5Group_46define_var(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self, char *__pyx_v_name, CDSDataType __pyx_v_type, PyObject *__pyx_v_dim_names) {
  struct CDSVar *__pyx_v_c_var
#line 676 "cds3/core.pyx"
;
  size_t __pyx_v_ndims
#line 676 "cds3/core.pyx"
;
  char **__pyx_v_c_dim_names
#line 676 "cds3/core.pyx"
;
  size_t __pyx_v_idx
#line 676 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = NULL
#line 676 "cds3/core.pyx"
;

#line 676 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  char *__pyx_t_2;
  Py_ssize_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 676 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("define_var", 0);

  /* "cds3/core.pyx":699
 * 
 *         """
 *         cdef CDSVar *c_var = NULL             # <<<<<<<<<<<<<<
 *         cdef size_t ndims = 0
 *         cdef char **c_dim_names = NULL
 */

#line 699 "cds3/core.pyx"
  __pyx_v_c_var = NULL;

  /* "cds3/core.pyx":700
 *         """
 *         cdef CDSVar *c_var = NULL
 *         cdef size_t ndims = 0             # <<<<<<<<<<<<<<
 *         cdef char **c_dim_names = NULL
 *         if isinstance(dim_names, basestring):
 */

#line 700 "cds3/core.pyx"
  __pyx_v_ndims = 0;

  /* "cds3/core.pyx":701
 *         cdef CDSVar *c_var = NULL
 *         cdef size_t ndims = 0
 *         cdef char **c_dim_names = NULL             # <<<<<<<<<<<<<<
 *         if isinstance(dim_names, basestring):
 *             ndims = 1
 */

#line 701 "cds3/core.pyx"
  __pyx_v_c_dim_names = NULL;

  /* "cds3/core.pyx":702
 *         cdef size_t ndims = 0
 *         cdef char **c_dim_names = NULL
 *         if isinstance(dim_names, basestring):             # <<<<<<<<<<<<<<
 *             ndims = 1
 *             c_dim_names = <char**>malloc(ndims * sizeof(char*))
 */

#line 702 "cds3/core.pyx"
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_dim_names, __pyx_builtin_basestring); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 702 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":703
 *         cdef char **c_dim_names = NULL
 *         if isinstance(dim_names, basestring):
 *             ndims = 1             # <<<<<<<<<<<<<<
 *             c_dim_names = <char**>malloc(ndims * sizeof(char*))
 *             c_dim_names[0] = dim_names
 */

#line 703 "cds3/core.pyx"
    __pyx_v_ndims = 1;

    /* "cds3/core.pyx":704
 *         if isinstance(dim_names, basestring):
 *             ndims = 1
 *             c_dim_names = <char**>malloc(ndims * sizeof(char*))             # <<<<<<<<<<<<<<
 *             c_dim_names[0] = dim_names
 *         else:
 */

#line 704 "cds3/core.pyx"
    __pyx_v_c_dim_names = ((char **)malloc((__pyx_v_ndims * (sizeof(char *)))));

    /* "cds3/core.pyx":705
 *             ndims = 1
 *             c_dim_names = <char**>malloc(ndims * sizeof(char*))
 *             c_dim_names[0] = dim_names             # <<<<<<<<<<<<<<
 *         else:
 *             ndims = len(dim_names)
 */

#line 705 "cds3/core.pyx"
    __pyx_t_2 = PyBytes_AsString(__pyx_v_dim_names); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 705 "cds3/core.pyx"
    (__pyx_v_c_dim_names[0]) = __pyx_t_2;

#line 705 "cds3/core.pyx"
    goto __pyx_L3;

#line 705 "cds3/core.pyx"
  }

#line 705 "cds3/core.pyx"
  /*else*/ {

    /* "cds3/core.pyx":707
 *             c_dim_names[0] = dim_names
 *         else:
 *             ndims = len(dim_names)             # <<<<<<<<<<<<<<
 *             c_dim_names = <char**>malloc(ndims * sizeof(char*))
 *             for idx in range(ndims):
 */

#line 707 "cds3/core.pyx"
    __pyx_t_3 = PyObject_Length(__pyx_v_dim_names); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 707 "cds3/core.pyx"
    __pyx_v_ndims = __pyx_t_3;

    /* "cds3/core.pyx":708
 *         else:
 *             ndims = len(dim_names)
 *             c_dim_names = <char**>malloc(ndims * sizeof(char*))             # <<<<<<<<<<<<<<
 *             for idx in range(ndims):
 *                 c_dim_names[idx] = dim_names[idx]
 */

#line 708 "cds3/core.pyx"
    __pyx_v_c_dim_names = ((char **)malloc((__pyx_v_ndims * (sizeof(char *)))));

    /* "cds3/core.pyx":709
 *             ndims = len(dim_names)
 *             c_dim_names = <char**>malloc(ndims * sizeof(char*))
 *             for idx in range(ndims):             # <<<<<<<<<<<<<<
 *                 c_dim_names[idx] = dim_names[idx]
 *         c_var = cds_define_var(self.c_ob, name, type, ndims, c_dim_names)
 */

#line 709 "cds3/core.pyx"
    __pyx_t_4 = __pyx_v_ndims;

#line 709 "cds3/core.pyx"
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {

#line 709 "cds3/core.pyx"
      __pyx_v_idx = __pyx_t_5;

      /* "cds3/core.pyx":710
 *             c_dim_names = <char**>malloc(ndims * sizeof(char*))
 *             for idx in range(ndims):
 *                 c_dim_names[idx] = dim_names[idx]             # <<<<<<<<<<<<<<
 *         c_var = cds_define_var(self.c_ob, name, type, ndims, c_dim_names)
 *         free(c_dim_names)
 */

#line 710 "cds3/core.pyx"
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_dim_names, __pyx_v_idx, sizeof(size_t)+1, __Pyx_PyInt_FromSize_t); if (!__pyx_t_6) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 710 "cds3/core.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 710 "cds3/core.pyx"
      __pyx_t_2 = PyBytes_AsString(__pyx_t_6); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 710 "cds3/core.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 710 "cds3/core.pyx"
      (__pyx_v_c_dim_names[__pyx_v_idx]) = __pyx_t_2;

#line 710 "cds3/core.pyx"
    }

#line 710 "cds3/core.pyx"
  }

#line 710 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":711
 *             for idx in range(ndims):
 *                 c_dim_names[idx] = dim_names[idx]
 *         c_var = cds_define_var(self.c_ob, name, type, ndims, c_dim_names)             # <<<<<<<<<<<<<<
 *         free(c_dim_names)
 *         if c_var == NULL:
 */

#line 711 "cds3/core.pyx"
  __pyx_v_c_var = cds_define_var(__pyx_v_self->c_ob, __pyx_v_name, __pyx_v_type, __pyx_v_ndims, __pyx_v_c_dim_names);

  /* "cds3/core.pyx":712
 *                 c_dim_names[idx] = dim_names[idx]
 *         c_var = cds_define_var(self.c_ob, name, type, ndims, c_dim_names)
 *         free(c_dim_names)             # <<<<<<<<<<<<<<
 *         if c_var == NULL:
 *             return None
 */

#line 712 "cds3/core.pyx"
  free(__pyx_v_c_dim_names);

  /* "cds3/core.pyx":713
 *         c_var = cds_define_var(self.c_ob, name, type, ndims, c_dim_names)
 *         free(c_dim_names)
 *         if c_var == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         var = Var()
 */

#line 713 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_c_var == NULL);

#line 713 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":714
 *         free(c_dim_names)
 *         if c_var == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         var = Var()
 *         var.set_var(c_var)
 */

#line 714 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 714 "cds3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 714 "cds3/core.pyx"
    __pyx_r = Py_None;

#line 714 "cds3/core.pyx"
    goto __pyx_L0;

#line 714 "cds3/core.pyx"
    goto __pyx_L6;

#line 714 "cds3/core.pyx"
  }

#line 714 "cds3/core.pyx"
  __pyx_L6:;

  /* "cds3/core.pyx":715
 *         if c_var == NULL:
 *             return None
 *         var = Var()             # <<<<<<<<<<<<<<
 *         var.set_var(c_var)
 *         return var
 */

#line 715 "cds3/core.pyx"
  __pyx_t_6 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Var)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 715 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 715 "cds3/core.pyx"
  __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)__pyx_t_6);

#line 715 "cds3/core.pyx"
  __pyx_t_6 = 0;

  /* "cds3/core.pyx":716
 *             return None
 *         var = Var()
 *         var.set_var(c_var)             # <<<<<<<<<<<<<<
 *         return var
 * 
 */

#line 716 "cds3/core.pyx"
  __pyx_t_6 = ((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_var->__pyx_base.__pyx_vtab)->set_var(__pyx_v_var, __pyx_v_c_var); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 716 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 716 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "cds3/core.pyx":717
 *         var = Var()
 *         var.set_var(c_var)
 *         return var             # <<<<<<<<<<<<<<
 * 
 *     def get_var(self, char *name):
 */

#line 717 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 717 "cds3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_var));

#line 717 "cds3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_var);

#line 717 "cds3/core.pyx"
  goto __pyx_L0;

#line 717 "cds3/core.pyx"


#line 717 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 717 "cds3/core.pyx"
  goto __pyx_L0;

#line 717 "cds3/core.pyx"
  __pyx_L1_error:;

#line 717 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 717 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.define_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 717 "cds3/core.pyx"
  __pyx_r = NULL;

#line 717 "cds3/core.pyx"
  __pyx_L0:;

#line 717 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_var);

#line 717 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 717 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 717 "cds3/core.pyx"
  return __pyx_r;

#line 717 "cds3/core.pyx"
}

#line 717 "cds3/core.pyx"


#line 717 "cds3/core.pyx"
/* Python wrapper */

#line 717 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_49get_var(PyObject *__pyx_v_self, PyObject *__pyx_arg_name); /*proto*/

#line 717 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_5Group_48get_var[] = "Group.get_var(self, char *name)\nGet a CDS Variable.\n        \n        This function will search the specified group for a variable with the\n        specified name.\n        \n        @param name - name of the variable\n        \n        @retval the Var instance\n        @retval None if not found\n        \n        ";

#line 717 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_49get_var(PyObject *__pyx_v_self, PyObject *__pyx_arg_name) {
  char *__pyx_v_name
#line 717 "cds3/core.pyx"
;

#line 717 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 717 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 717 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_var (wrapper)", 0);

#line 717 "cds3/core.pyx"
  assert(__pyx_arg_name); {

#line 717 "cds3/core.pyx"
    __pyx_v_name = PyBytes_AsString(__pyx_arg_name); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 719; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 717 "cds3/core.pyx"
  }

#line 717 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 717 "cds3/core.pyx"
  __pyx_L3_error:;

#line 717 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.get_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 717 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 717 "cds3/core.pyx"
  return NULL;

#line 717 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 717 "cds3/core.pyx"
__pyx_pf_4cds3_4core_5Group_48get_var(((struct __pyx_obj_4cds3_4core_Group *)__pyx_v_self), ((char *)__pyx_v_name));

#line 717 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 717 "cds3/core.pyx"
  return __pyx_r;

#line 717 "cds3/core.pyx"
}

/* "cds3/core.pyx":719
 *         return var
 * 
 *     def get_var(self, char *name):             # <<<<<<<<<<<<<<
 *         """Get a CDS Variable.
 * 
 */

#line 719 "cds3/core.pyx"


#line 719 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_5Group_48get_var(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self, char *__pyx_v_name) {
  struct CDSVar *__pyx_v_c_var
#line 719 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = NULL
#line 719 "cds3/core.pyx"
;

#line 719 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 719 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_var", 0);

  /* "cds3/core.pyx":731
 * 
 *         """
 *         cdef CDSVar *c_var = cds_get_var(self.c_ob, name)             # <<<<<<<<<<<<<<
 *         if c_var == NULL:
 *             return None
 */

#line 731 "cds3/core.pyx"
  __pyx_v_c_var = cds_get_var(__pyx_v_self->c_ob, __pyx_v_name);

  /* "cds3/core.pyx":732
 *         """
 *         cdef CDSVar *c_var = cds_get_var(self.c_ob, name)
 *         if c_var == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         var = Var()
 */

#line 732 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_c_var == NULL);

#line 732 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":733
 *         cdef CDSVar *c_var = cds_get_var(self.c_ob, name)
 *         if c_var == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         var = Var()
 *         var.set_var(c_var)
 */

#line 733 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 733 "cds3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 733 "cds3/core.pyx"
    __pyx_r = Py_None;

#line 733 "cds3/core.pyx"
    goto __pyx_L0;

#line 733 "cds3/core.pyx"
    goto __pyx_L3;

#line 733 "cds3/core.pyx"
  }

#line 733 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":734
 *         if c_var == NULL:
 *             return None
 *         var = Var()             # <<<<<<<<<<<<<<
 *         var.set_var(c_var)
 *         return var
 */

#line 734 "cds3/core.pyx"
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Var)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 734; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 734 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 734 "cds3/core.pyx"
  __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)__pyx_t_2);

#line 734 "cds3/core.pyx"
  __pyx_t_2 = 0;

  /* "cds3/core.pyx":735
 *             return None
 *         var = Var()
 *         var.set_var(c_var)             # <<<<<<<<<<<<<<
 *         return var
 * 
 */

#line 735 "cds3/core.pyx"
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_var->__pyx_base.__pyx_vtab)->set_var(__pyx_v_var, __pyx_v_c_var); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 735 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 735 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cds3/core.pyx":736
 *         var = Var()
 *         var.set_var(c_var)
 *         return var             # <<<<<<<<<<<<<<
 * 
 *     def get_group(self, char *name):
 */

#line 736 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 736 "cds3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_var));

#line 736 "cds3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_var);

#line 736 "cds3/core.pyx"
  goto __pyx_L0;

#line 736 "cds3/core.pyx"


#line 736 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 736 "cds3/core.pyx"
  goto __pyx_L0;

#line 736 "cds3/core.pyx"
  __pyx_L1_error:;

#line 736 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 736 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.get_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 736 "cds3/core.pyx"
  __pyx_r = NULL;

#line 736 "cds3/core.pyx"
  __pyx_L0:;

#line 736 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_var);

#line 736 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 736 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 736 "cds3/core.pyx"
  return __pyx_r;

#line 736 "cds3/core.pyx"
}

#line 736 "cds3/core.pyx"


#line 736 "cds3/core.pyx"
/* Python wrapper */

#line 736 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_51get_group(PyObject *__pyx_v_self, PyObject *__pyx_arg_name); /*proto*/

#line 736 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_5Group_50get_group[] = "Group.get_group(self, char *name)\nSearch for a group with the specificed name within this group.\n        \n        @param name - name of the child group\n        \n        @retval the child Group instance\n        @retval None if not found\n        \n        ";

#line 736 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_51get_group(PyObject *__pyx_v_self, PyObject *__pyx_arg_name) {
  char *__pyx_v_name
#line 736 "cds3/core.pyx"
;

#line 736 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 736 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 736 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_group (wrapper)", 0);

#line 736 "cds3/core.pyx"
  assert(__pyx_arg_name); {

#line 736 "cds3/core.pyx"
    __pyx_v_name = PyBytes_AsString(__pyx_arg_name); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 738; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 736 "cds3/core.pyx"
  }

#line 736 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 736 "cds3/core.pyx"
  __pyx_L3_error:;

#line 736 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.get_group", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 736 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 736 "cds3/core.pyx"
  return NULL;

#line 736 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 736 "cds3/core.pyx"
__pyx_pf_4cds3_4core_5Group_50get_group(((struct __pyx_obj_4cds3_4core_Group *)__pyx_v_self), ((char *)__pyx_v_name));

#line 736 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 736 "cds3/core.pyx"
  return __pyx_r;

#line 736 "cds3/core.pyx"
}

/* "cds3/core.pyx":738
 *         return var
 * 
 *     def get_group(self, char *name):             # <<<<<<<<<<<<<<
 *         """Search for a group with the specificed name within this group.
 * 
 */

#line 738 "cds3/core.pyx"


#line 738 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_5Group_50get_group(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self, char *__pyx_v_name) {
  struct CDSGroup *__pyx_v_cds_group
#line 738 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Group *__pyx_v_group = 0
#line 738 "cds3/core.pyx"
;

#line 738 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 738 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_group", 0);

  /* "cds3/core.pyx":749
 *         cdef CDSGroup *cds_group
 *         cdef Group group
 *         cds_group = cds_get_group(self.c_ob, name)             # <<<<<<<<<<<<<<
 *         if cds_group == NULL:
 *             return None
 */

#line 749 "cds3/core.pyx"
  __pyx_v_cds_group = cds_get_group(__pyx_v_self->c_ob, __pyx_v_name);

  /* "cds3/core.pyx":750
 *         cdef Group group
 *         cds_group = cds_get_group(self.c_ob, name)
 *         if cds_group == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         group = Group()
 */

#line 750 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_cds_group == NULL);

#line 750 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":751
 *         cds_group = cds_get_group(self.c_ob, name)
 *         if cds_group == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         group = Group()
 *         group.set_group(cds_group)
 */

#line 751 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 751 "cds3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 751 "cds3/core.pyx"
    __pyx_r = Py_None;

#line 751 "cds3/core.pyx"
    goto __pyx_L0;

#line 751 "cds3/core.pyx"
    goto __pyx_L3;

#line 751 "cds3/core.pyx"
  }

#line 751 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":752
 *         if cds_group == NULL:
 *             return None
 *         group = Group()             # <<<<<<<<<<<<<<
 *         group.set_group(cds_group)
 *         return group
 */

#line 752 "cds3/core.pyx"
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Group)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 752 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 752 "cds3/core.pyx"
  __pyx_v_group = ((struct __pyx_obj_4cds3_4core_Group *)__pyx_t_2);

#line 752 "cds3/core.pyx"
  __pyx_t_2 = 0;

  /* "cds3/core.pyx":753
 *             return None
 *         group = Group()
 *         group.set_group(cds_group)             # <<<<<<<<<<<<<<
 *         return group
 * 
 */

#line 753 "cds3/core.pyx"
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Group *)__pyx_v_group->__pyx_base.__pyx_vtab)->set_group(__pyx_v_group, __pyx_v_cds_group); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 753 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 753 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cds3/core.pyx":754
 *         group = Group()
 *         group.set_group(cds_group)
 *         return group             # <<<<<<<<<<<<<<
 * 
 *     def reset_sample_counts(self, int unlim_vars, int static_vars):
 */

#line 754 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 754 "cds3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_group));

#line 754 "cds3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_group);

#line 754 "cds3/core.pyx"
  goto __pyx_L0;

#line 754 "cds3/core.pyx"


#line 754 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 754 "cds3/core.pyx"
  goto __pyx_L0;

#line 754 "cds3/core.pyx"
  __pyx_L1_error:;

#line 754 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 754 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.get_group", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 754 "cds3/core.pyx"
  __pyx_r = NULL;

#line 754 "cds3/core.pyx"
  __pyx_L0:;

#line 754 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_group);

#line 754 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 754 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 754 "cds3/core.pyx"
  return __pyx_r;

#line 754 "cds3/core.pyx"
}

#line 754 "cds3/core.pyx"


#line 754 "cds3/core.pyx"
/* Python wrapper */

#line 754 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_53reset_sample_counts(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 754 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_5Group_52reset_sample_counts[] = "Group.reset_sample_counts(self, int unlim_vars, int static_vars)";

#line 754 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5Group_53reset_sample_counts(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_unlim_vars
#line 754 "cds3/core.pyx"
;
  int __pyx_v_static_vars
#line 754 "cds3/core.pyx"
;

#line 754 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 754 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 754 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("reset_sample_counts (wrapper)", 0);

#line 754 "cds3/core.pyx"
  {

#line 754 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__unlim_vars,&__pyx_n_s__static_vars,0};

#line 754 "cds3/core.pyx"
    PyObject* values[2] = {0,0};

#line 754 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 754 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 754 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 754 "cds3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 754 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 754 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 754 "cds3/core.pyx"
        case  0: break;
        default: 
#line 754 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 754 "cds3/core.pyx"
      }

#line 754 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 754 "cds3/core.pyx"
      switch (pos_args) {

#line 754 "cds3/core.pyx"
        case  0:

#line 754 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__unlim_vars)) != 0)) kw_args--;
        else 
#line 754 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 754 "cds3/core.pyx"
        case  1:

#line 754 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__static_vars)) != 0)) kw_args--;

#line 754 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("reset_sample_counts", 1, 2, 2, 1); 
#line 754 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 756; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 754 "cds3/core.pyx"
        }

#line 754 "cds3/core.pyx"
      }

#line 754 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 754 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "reset_sample_counts") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 756; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 754 "cds3/core.pyx"
      }

#line 754 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 754 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 754 "cds3/core.pyx"
    } else {

#line 754 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 754 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 754 "cds3/core.pyx"
    }

#line 754 "cds3/core.pyx"
    __pyx_v_unlim_vars = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_unlim_vars == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 756; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 754 "cds3/core.pyx"
    __pyx_v_static_vars = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_static_vars == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 756; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 754 "cds3/core.pyx"
  }

#line 754 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 754 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reset_sample_counts", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 754 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 756; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 754 "cds3/core.pyx"
  __pyx_L3_error:;

#line 754 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Group.reset_sample_counts", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 754 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 754 "cds3/core.pyx"
  return NULL;

#line 754 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 754 "cds3/core.pyx"
__pyx_pf_4cds3_4core_5Group_52reset_sample_counts(((struct __pyx_obj_4cds3_4core_Group *)__pyx_v_self), __pyx_v_unlim_vars, __pyx_v_static_vars);

#line 754 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 754 "cds3/core.pyx"
  return __pyx_r;

#line 754 "cds3/core.pyx"
}

/* "cds3/core.pyx":756
 *         return group
 * 
 *     def reset_sample_counts(self, int unlim_vars, int static_vars):             # <<<<<<<<<<<<<<
 *         cds_reset_sample_counts(self.c_ob, unlim_vars, static_vars)
 * 
 */

#line 756 "cds3/core.pyx"


#line 756 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_5Group_52reset_sample_counts(struct __pyx_obj_4cds3_4core_Group *__pyx_v_self, int __pyx_v_unlim_vars, int __pyx_v_static_vars) {

#line 756 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations

#line 756 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("reset_sample_counts", 0);

  /* "cds3/core.pyx":757
 * 
 *     def reset_sample_counts(self, int unlim_vars, int static_vars):
 *         cds_reset_sample_counts(self.c_ob, unlim_vars, static_vars)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 757 "cds3/core.pyx"
  cds_reset_sample_counts(__pyx_v_self->c_ob, __pyx_v_unlim_vars, __pyx_v_static_vars);

#line 757 "cds3/core.pyx"


#line 757 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 757 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 757 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 757 "cds3/core.pyx"
  return __pyx_r;

#line 757 "cds3/core.pyx"
}

#line 757 "cds3/core.pyx"


#line 757 "cds3/core.pyx"
/* Python wrapper */

#line 757 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Dim_1delete(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 757 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Dim_delete[] = "Dim.delete(Dim dim)\nDelete a CDS Dimension.\n        \n        This function will also delete all variables that use the specified\n        dimension.\n        \n        Error messages from this function are sent to the message handler\n        (see msngr_init_log() and msngr_init_mail()).\n        \n        @param dim - the Dim instance\n        \n        @retval 1 if the dimension was deleted\n        @retval 0 if the dimension is locked\n        @retval 0 if the group is locked\n        \n        ";
static PyMethodDef __pyx_mdef_4cds3_4core_3Dim_1delete = 
#line 757 "cds3/core.pyx"
{__Pyx_NAMESTR("delete"), (PyCFunction)__pyx_pw_4cds3_4core_3Dim_1delete, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Dim_delete)};

#line 757 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Dim_1delete(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Dim *__pyx_v_dim = 0
#line 757 "cds3/core.pyx"
;

#line 757 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 757 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 757 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("delete (wrapper)", 0);

#line 757 "cds3/core.pyx"
  {

#line 757 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__dim,0};

#line 757 "cds3/core.pyx"
    PyObject* values[1] = {0};

#line 757 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 757 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 757 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 757 "cds3/core.pyx"
      switch (pos_args) {
        case  1: 
#line 757 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 757 "cds3/core.pyx"
        case  0: break;
        default: 
#line 757 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 757 "cds3/core.pyx"
      }

#line 757 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 757 "cds3/core.pyx"
      switch (pos_args) {

#line 757 "cds3/core.pyx"
        case  0:

#line 757 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dim)) != 0)) kw_args--;
        else 
#line 757 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 757 "cds3/core.pyx"
      }

#line 757 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 757 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "delete") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 757 "cds3/core.pyx"
      }

#line 757 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {

#line 757 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 757 "cds3/core.pyx"
    } else {

#line 757 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 757 "cds3/core.pyx"
    }

#line 757 "cds3/core.pyx"
    __pyx_v_dim = ((struct __pyx_obj_4cds3_4core_Dim *)values[0]);

#line 757 "cds3/core.pyx"
  }

#line 757 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 757 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("delete", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); 
#line 757 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 757 "cds3/core.pyx"
  __pyx_L3_error:;

#line 757 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Dim.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 757 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 757 "cds3/core.pyx"
  return NULL;

#line 757 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 757 "cds3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dim), __pyx_ptype_4cds3_4core_Dim, 1, "dim", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 757 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Dim_delete(__pyx_v_dim);

#line 757 "cds3/core.pyx"
  goto __pyx_L0;

#line 757 "cds3/core.pyx"
  __pyx_L1_error:;

#line 757 "cds3/core.pyx"
  __pyx_r = NULL;

#line 757 "cds3/core.pyx"
  __pyx_L0:;

#line 757 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 757 "cds3/core.pyx"
  return __pyx_r;

#line 757 "cds3/core.pyx"
}

/* "cds3/core.pyx":764
 * 
 *     @staticmethod
 *     def delete(Dim dim):             # <<<<<<<<<<<<<<
 *         """Delete a CDS Dimension.
 * 
 */

#line 764 "cds3/core.pyx"


#line 764 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Dim_delete(struct __pyx_obj_4cds3_4core_Dim *__pyx_v_dim) {
  int __pyx_v_retval
#line 764 "cds3/core.pyx"
;

#line 764 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 764 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("delete", 0);

#line 764 "cds3/core.pyx"
  __Pyx_INCREF((PyObject *)__pyx_v_dim);

  /* "cds3/core.pyx":780
 * 
 *         """
 *         cdef int retval = cds_delete_dim(dim.c_ob)             # <<<<<<<<<<<<<<
 *         if retval == 1:
 *             dim.set_dim(NULL)
 */

#line 780 "cds3/core.pyx"
  __pyx_v_retval = cds_delete_dim(__pyx_v_dim->c_ob);

  /* "cds3/core.pyx":781
 *         """
 *         cdef int retval = cds_delete_dim(dim.c_ob)
 *         if retval == 1:             # <<<<<<<<<<<<<<
 *             dim.set_dim(NULL)
 *             del dim
 */

#line 781 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_retval == 1);

#line 781 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":782
 *         cdef int retval = cds_delete_dim(dim.c_ob)
 *         if retval == 1:
 *             dim.set_dim(NULL)             # <<<<<<<<<<<<<<
 *             del dim
 *         return retval
 */

#line 782 "cds3/core.pyx"
    __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Dim *)__pyx_v_dim->__pyx_base.__pyx_vtab)->set_dim(__pyx_v_dim, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 782; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 782 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 782 "cds3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cds3/core.pyx":783
 *         if retval == 1:
 *             dim.set_dim(NULL)
 *             del dim             # <<<<<<<<<<<<<<
 *         return retval
 * 
 */

#line 783 "cds3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_v_dim));

#line 783 "cds3/core.pyx"
    __pyx_v_dim = NULL;

#line 783 "cds3/core.pyx"
    goto __pyx_L3;

#line 783 "cds3/core.pyx"
  }

#line 783 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":784
 *             dim.set_dim(NULL)
 *             del dim
 *         return retval             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */

#line 784 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 784 "cds3/core.pyx"
  __pyx_t_2 = PyInt_FromLong(__pyx_v_retval); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 784; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 784 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 784 "cds3/core.pyx"
  __pyx_r = __pyx_t_2;

#line 784 "cds3/core.pyx"
  __pyx_t_2 = 0;

#line 784 "cds3/core.pyx"
  goto __pyx_L0;

#line 784 "cds3/core.pyx"


#line 784 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 784 "cds3/core.pyx"
  goto __pyx_L0;

#line 784 "cds3/core.pyx"
  __pyx_L1_error:;

#line 784 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 784 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Dim.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 784 "cds3/core.pyx"
  __pyx_r = NULL;

#line 784 "cds3/core.pyx"
  __pyx_L0:;

#line 784 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_dim);

#line 784 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 784 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 784 "cds3/core.pyx"
  return __pyx_r;

#line 784 "cds3/core.pyx"
}

#line 784 "cds3/core.pyx"


#line 784 "cds3/core.pyx"
/* Python wrapper */

#line 784 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_3Dim_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 784 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_3Dim_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

#line 784 "cds3/core.pyx"
  int __pyx_r;

#line 784 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 784 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 784 "cds3/core.pyx"
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;
#line 784 "cds3/core.pyx"
}

#line 784 "cds3/core.pyx"
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = 
#line 784 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Dim_2__cinit__(((struct __pyx_obj_4cds3_4core_Dim *)__pyx_v_self));

#line 784 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 784 "cds3/core.pyx"
  return __pyx_r;

#line 784 "cds3/core.pyx"
}

/* "cds3/core.pyx":786
 *         return retval
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         """TODO"""
 *         self.c_ob = NULL
 */

#line 786 "cds3/core.pyx"


#line 786 "cds3/core.pyx"
static int __pyx_pf_4cds3_4core_3Dim_2__cinit__(struct __pyx_obj_4cds3_4core_Dim *__pyx_v_self) {

#line 786 "cds3/core.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations

#line 786 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cds3/core.pyx":788
 *     def __cinit__(self):
 *         """TODO"""
 *         self.c_ob = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */

#line 788 "cds3/core.pyx"
  __pyx_v_self->c_ob = NULL;

#line 788 "cds3/core.pyx"


#line 788 "cds3/core.pyx"
  __pyx_r = 0;

#line 788 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 788 "cds3/core.pyx"
  return __pyx_r;

#line 788 "cds3/core.pyx"
}

#line 788 "cds3/core.pyx"


#line 788 "cds3/core.pyx"
/* Python wrapper */

#line 788 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_3Dim_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 788 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Dim_4__init__[] = "TODO";

#line 788 "cds3/core.pyx"
#if CYTHON_COMPILING_IN_CPYTHON

#line 788 "cds3/core.pyx"
struct wrapperbase __pyx_wrapperbase_4cds3_4core_3Dim_4__init__;

#line 788 "cds3/core.pyx"
#endif

#line 788 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_3Dim_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

#line 788 "cds3/core.pyx"
  int __pyx_r;

#line 788 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 788 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);

#line 788 "cds3/core.pyx"
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;
#line 788 "cds3/core.pyx"
}

#line 788 "cds3/core.pyx"
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = 
#line 788 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Dim_4__init__(((struct __pyx_obj_4cds3_4core_Dim *)__pyx_v_self));

#line 788 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 788 "cds3/core.pyx"
  return __pyx_r;

#line 788 "cds3/core.pyx"
}

/* "cds3/core.pyx":790
 *         self.c_ob = NULL
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """TODO"""
 *         pass
 */

#line 790 "cds3/core.pyx"


#line 790 "cds3/core.pyx"
static int __pyx_pf_4cds3_4core_3Dim_4__init__(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_Dim *__pyx_v_self) {

#line 790 "cds3/core.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations

#line 790 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__init__", 0);

#line 790 "cds3/core.pyx"


#line 790 "cds3/core.pyx"
  __pyx_r = 0;

#line 790 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 790 "cds3/core.pyx"
  return __pyx_r;

#line 790 "cds3/core.pyx"
}

/* "cds3/core.pyx":794
 *         pass
 * 
 *     cdef set_dim(self, CDSDim *dim):             # <<<<<<<<<<<<<<
 *         """TODO"""
 *         self.cds_object = <CDSObject*>dim
 */

#line 794 "cds3/core.pyx"


#line 794 "cds3/core.pyx"
static PyObject *__pyx_f_4cds3_4core_3Dim_set_dim(struct __pyx_obj_4cds3_4core_Dim *__pyx_v_self, struct CDSDim *__pyx_v_dim) {

#line 794 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations

#line 794 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("set_dim", 0);

  /* "cds3/core.pyx":796
 *     cdef set_dim(self, CDSDim *dim):
 *         """TODO"""
 *         self.cds_object = <CDSObject*>dim             # <<<<<<<<<<<<<<
 *         self.c_ob = dim
 * 
 */

#line 796 "cds3/core.pyx"
  __pyx_v_self->__pyx_base.cds_object = ((struct CDSObject *)__pyx_v_dim);

  /* "cds3/core.pyx":797
 *         """TODO"""
 *         self.cds_object = <CDSObject*>dim
 *         self.c_ob = dim             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */

#line 797 "cds3/core.pyx"
  __pyx_v_self->c_ob = __pyx_v_dim;

#line 797 "cds3/core.pyx"


#line 797 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 797 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 797 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 797 "cds3/core.pyx"
  return __pyx_r;

#line 797 "cds3/core.pyx"
}

#line 797 "cds3/core.pyx"


#line 797 "cds3/core.pyx"
/* Python wrapper */

#line 797 "cds3/core.pyx"
static void __pyx_pw_4cds3_4core_3Dim_7__dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 797 "cds3/core.pyx"
static void __pyx_pw_4cds3_4core_3Dim_7__dealloc__(PyObject *__pyx_v_self) {

#line 797 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 797 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 797 "cds3/core.pyx"
  __pyx_pf_4cds3_4core_3Dim_6__dealloc__(((struct __pyx_obj_4cds3_4core_Dim *)__pyx_v_self));

#line 797 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 797 "cds3/core.pyx"
}

/* "cds3/core.pyx":799
 *         self.c_ob = dim
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """TODO"""
 *         pass
 */

#line 799 "cds3/core.pyx"


#line 799 "cds3/core.pyx"
static void __pyx_pf_4cds3_4core_3Dim_6__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_Dim *__pyx_v_self) {
  __Pyx_RefNannyDeclarations

#line 799 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

#line 799 "cds3/core.pyx"


#line 799 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 799 "cds3/core.pyx"
}

#line 799 "cds3/core.pyx"


#line 799 "cds3/core.pyx"
/* Python wrapper */

#line 799 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Dim_9get_length(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 799 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Dim_8get_length[] = "Dim.get_length(self)\nGet the length of a CDS Dimension.\n        \n        @retval the length\n        \n        ";

#line 799 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Dim_9get_length(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 799 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 799 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 799 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_length (wrapper)", 0);
  __pyx_r = 
#line 799 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Dim_8get_length(((struct __pyx_obj_4cds3_4core_Dim *)__pyx_v_self));

#line 799 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 799 "cds3/core.pyx"
  return __pyx_r;

#line 799 "cds3/core.pyx"
}

/* "cds3/core.pyx":803
 *         pass
 * 
 *     def get_length(self):             # <<<<<<<<<<<<<<
 *         """Get the length of a CDS Dimension.
 * 
 */

#line 803 "cds3/core.pyx"


#line 803 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Dim_8get_length(struct __pyx_obj_4cds3_4core_Dim *__pyx_v_self) {

#line 803 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 803 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_length", 0);

  /* "cds3/core.pyx":809
 * 
 *         """
 *         return self.c_ob.length             # <<<<<<<<<<<<<<
 * 
 *     def is_unlimited(self):
 */

#line 809 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 809 "cds3/core.pyx"
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->c_ob->length); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 809 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 809 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 809 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 809 "cds3/core.pyx"
  goto __pyx_L0;

#line 809 "cds3/core.pyx"


#line 809 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 809 "cds3/core.pyx"
  goto __pyx_L0;

#line 809 "cds3/core.pyx"
  __pyx_L1_error:;

#line 809 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 809 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Dim.get_length", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 809 "cds3/core.pyx"
  __pyx_r = NULL;

#line 809 "cds3/core.pyx"
  __pyx_L0:;

#line 809 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 809 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 809 "cds3/core.pyx"
  return __pyx_r;

#line 809 "cds3/core.pyx"
}

#line 809 "cds3/core.pyx"


#line 809 "cds3/core.pyx"
/* Python wrapper */

#line 809 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Dim_11is_unlimited(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 809 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Dim_10is_unlimited[] = "Dim.is_unlimited(self)\nIndicates whether a CDS Dimension is unlimited.\n        \n        @retval True if unlimited\n        @retval False otherwise\n        \n        ";

#line 809 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Dim_11is_unlimited(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 809 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 809 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 809 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("is_unlimited (wrapper)", 0);
  __pyx_r = 
#line 809 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Dim_10is_unlimited(((struct __pyx_obj_4cds3_4core_Dim *)__pyx_v_self));

#line 809 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 809 "cds3/core.pyx"
  return __pyx_r;

#line 809 "cds3/core.pyx"
}

/* "cds3/core.pyx":811
 *         return self.c_ob.length
 * 
 *     def is_unlimited(self):             # <<<<<<<<<<<<<<
 *         """Indicates whether a CDS Dimension is unlimited.
 * 
 */

#line 811 "cds3/core.pyx"


#line 811 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Dim_10is_unlimited(struct __pyx_obj_4cds3_4core_Dim *__pyx_v_self) {

#line 811 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 811 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("is_unlimited", 0);

  /* "cds3/core.pyx":818
 * 
 *         """
 *         if self.c_ob.is_unlimited == 0:             # <<<<<<<<<<<<<<
 *             return False
 *         return True
 */

#line 818 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_self->c_ob->is_unlimited == 0);

#line 818 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":819
 *         """
 *         if self.c_ob.is_unlimited == 0:
 *             return False             # <<<<<<<<<<<<<<
 *         return True
 * 
 */

#line 819 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 819 "cds3/core.pyx"
    __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 819; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 819 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 819 "cds3/core.pyx"
    __pyx_r = __pyx_t_2;

#line 819 "cds3/core.pyx"
    __pyx_t_2 = 0;

#line 819 "cds3/core.pyx"
    goto __pyx_L0;

#line 819 "cds3/core.pyx"
    goto __pyx_L3;

#line 819 "cds3/core.pyx"
  }

#line 819 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":820
 *         if self.c_ob.is_unlimited == 0:
 *             return False
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     def change_length(self, size_t length):
 */

#line 820 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 820 "cds3/core.pyx"
  __pyx_t_2 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 820; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 820 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 820 "cds3/core.pyx"
  __pyx_r = __pyx_t_2;

#line 820 "cds3/core.pyx"
  __pyx_t_2 = 0;

#line 820 "cds3/core.pyx"
  goto __pyx_L0;

#line 820 "cds3/core.pyx"


#line 820 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 820 "cds3/core.pyx"
  goto __pyx_L0;

#line 820 "cds3/core.pyx"
  __pyx_L1_error:;

#line 820 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 820 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Dim.is_unlimited", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 820 "cds3/core.pyx"
  __pyx_r = NULL;

#line 820 "cds3/core.pyx"
  __pyx_L0:;

#line 820 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 820 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 820 "cds3/core.pyx"
  return __pyx_r;

#line 820 "cds3/core.pyx"
}

#line 820 "cds3/core.pyx"


#line 820 "cds3/core.pyx"
/* Python wrapper */

#line 820 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Dim_13change_length(PyObject *__pyx_v_self, PyObject *__pyx_arg_length); /*proto*/

#line 820 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Dim_12change_length[] = "Dim.change_length(self, size_t length)\nChange the length of a CDS Dimension.\n        \n        Error messages from this function are sent to the message handler\n        (see msngr_init_log() and msngr_init_mail()).\n        \n        @param length - new dimension length\n        \n        @retval 1 if the dimension length was changed\n        @retval 1 if the new length was equal to the old length\n        @retval 1 if this is an unlimited dimension\n        @retval 0 if the dimension is locked\n        @retval 0 if data has already been added to a variable using this\n                dimension\n        \n        ";

#line 820 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Dim_13change_length(PyObject *__pyx_v_self, PyObject *__pyx_arg_length) {
  size_t __pyx_v_length
#line 820 "cds3/core.pyx"
;

#line 820 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 820 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 820 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("change_length (wrapper)", 0);

#line 820 "cds3/core.pyx"
  assert(__pyx_arg_length); {

#line 820 "cds3/core.pyx"
    __pyx_v_length = __Pyx_PyInt_AsSize_t(__pyx_arg_length); if (unlikely((__pyx_v_length == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 822; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 820 "cds3/core.pyx"
  }

#line 820 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 820 "cds3/core.pyx"
  __pyx_L3_error:;

#line 820 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Dim.change_length", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 820 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 820 "cds3/core.pyx"
  return NULL;

#line 820 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 820 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Dim_12change_length(((struct __pyx_obj_4cds3_4core_Dim *)__pyx_v_self), ((size_t)__pyx_v_length));

#line 820 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 820 "cds3/core.pyx"
  return __pyx_r;

#line 820 "cds3/core.pyx"
}

/* "cds3/core.pyx":822
 *         return True
 * 
 *     def change_length(self, size_t length):             # <<<<<<<<<<<<<<
 *         """Change the length of a CDS Dimension.
 * 
 */

#line 822 "cds3/core.pyx"


#line 822 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Dim_12change_length(struct __pyx_obj_4cds3_4core_Dim *__pyx_v_self, size_t __pyx_v_length) {

#line 822 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 822 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("change_length", 0);

  /* "cds3/core.pyx":838
 * 
 *         """
 *         return cds_change_dim_length(self.c_ob, length)             # <<<<<<<<<<<<<<
 * 
 *     def get_var(self):
 */

#line 838 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 838 "cds3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(cds_change_dim_length(__pyx_v_self->c_ob, __pyx_v_length)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 838 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 838 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 838 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 838 "cds3/core.pyx"
  goto __pyx_L0;

#line 838 "cds3/core.pyx"


#line 838 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 838 "cds3/core.pyx"
  goto __pyx_L0;

#line 838 "cds3/core.pyx"
  __pyx_L1_error:;

#line 838 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 838 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Dim.change_length", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 838 "cds3/core.pyx"
  __pyx_r = NULL;

#line 838 "cds3/core.pyx"
  __pyx_L0:;

#line 838 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 838 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 838 "cds3/core.pyx"
  return __pyx_r;

#line 838 "cds3/core.pyx"
}

#line 838 "cds3/core.pyx"


#line 838 "cds3/core.pyx"
/* Python wrapper */

#line 838 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Dim_15get_var(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 838 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Dim_14get_var[] = "Dim.get_var(self)\nGet the coordinate variable for a CDS Dimension.\n        \n        @retval the coordinate Var instance\n        @retval None if not found\n        \n        ";

#line 838 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Dim_15get_var(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 838 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 838 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 838 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_var (wrapper)", 0);
  __pyx_r = 
#line 838 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Dim_14get_var(((struct __pyx_obj_4cds3_4core_Dim *)__pyx_v_self));

#line 838 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 838 "cds3/core.pyx"
  return __pyx_r;

#line 838 "cds3/core.pyx"
}

/* "cds3/core.pyx":840
 *         return cds_change_dim_length(self.c_ob, length)
 * 
 *     def get_var(self):             # <<<<<<<<<<<<<<
 *         """Get the coordinate variable for a CDS Dimension.
 * 
 */

#line 840 "cds3/core.pyx"


#line 840 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Dim_14get_var(struct __pyx_obj_4cds3_4core_Dim *__pyx_v_self) {
  struct CDSVar *__pyx_v_cds_var
#line 840 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = 0
#line 840 "cds3/core.pyx"
;

#line 840 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 840 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_var", 0);

  /* "cds3/core.pyx":849
 *         cdef CDSVar *cds_var
 *         cdef Var var
 *         cds_var = cds_get_dim_var(self.c_ob)             # <<<<<<<<<<<<<<
 *         if cds_var == NULL:
 *             return None
 */

#line 849 "cds3/core.pyx"
  __pyx_v_cds_var = cds_get_dim_var(__pyx_v_self->c_ob);

  /* "cds3/core.pyx":850
 *         cdef Var var
 *         cds_var = cds_get_dim_var(self.c_ob)
 *         if cds_var == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         var = Var()
 */

#line 850 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_cds_var == NULL);

#line 850 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":851
 *         cds_var = cds_get_dim_var(self.c_ob)
 *         if cds_var == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         var = Var()
 *         var.set_var(cds_var)
 */

#line 851 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 851 "cds3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 851 "cds3/core.pyx"
    __pyx_r = Py_None;

#line 851 "cds3/core.pyx"
    goto __pyx_L0;

#line 851 "cds3/core.pyx"
    goto __pyx_L3;

#line 851 "cds3/core.pyx"
  }

#line 851 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":852
 *         if cds_var == NULL:
 *             return None
 *         var = Var()             # <<<<<<<<<<<<<<
 *         var.set_var(cds_var)
 *         return var
 */

#line 852 "cds3/core.pyx"
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Var)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 852; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 852 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 852 "cds3/core.pyx"
  __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)__pyx_t_2);

#line 852 "cds3/core.pyx"
  __pyx_t_2 = 0;

  /* "cds3/core.pyx":853
 *             return None
 *         var = Var()
 *         var.set_var(cds_var)             # <<<<<<<<<<<<<<
 *         return var
 * 
 */

#line 853 "cds3/core.pyx"
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_var->__pyx_base.__pyx_vtab)->set_var(__pyx_v_var, __pyx_v_cds_var); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 853 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 853 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cds3/core.pyx":854
 *         var = Var()
 *         var.set_var(cds_var)
 *         return var             # <<<<<<<<<<<<<<
 * 
 *     def rename(self, char *name):
 */

#line 854 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 854 "cds3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_var));

#line 854 "cds3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_var);

#line 854 "cds3/core.pyx"
  goto __pyx_L0;

#line 854 "cds3/core.pyx"


#line 854 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 854 "cds3/core.pyx"
  goto __pyx_L0;

#line 854 "cds3/core.pyx"
  __pyx_L1_error:;

#line 854 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 854 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Dim.get_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 854 "cds3/core.pyx"
  __pyx_r = NULL;

#line 854 "cds3/core.pyx"
  __pyx_L0:;

#line 854 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_var);

#line 854 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 854 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 854 "cds3/core.pyx"
  return __pyx_r;

#line 854 "cds3/core.pyx"
}

#line 854 "cds3/core.pyx"


#line 854 "cds3/core.pyx"
/* Python wrapper */

#line 854 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Dim_17rename(PyObject *__pyx_v_self, PyObject *__pyx_arg_name); /*proto*/

#line 854 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Dim_16rename[] = "Dim.rename(self, char *name)\nRename a CDS Dimension.\n        \n        This function will also rename the coordinate variable for the\n        dimension if one exists.\n        \n        Error messages from this function are sent to the message handler\n        (see msngr_init_log() and msngr_init_mail()).\n        \n        @param name - pointer to the new dimension name\n        \n        @retval 1 if the dimension was deleted\n        @retval 0 if a dimension with the new name already exists\n        @retval 0 if the dimension is locked\n        @retval 0 if the group is locked\n        @retval 0 if the coordinate variable could not be renamed (see\n                cds_rename_var())\n        @retval 0 if a memory allocation error occured\n        \n        ";

#line 854 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Dim_17rename(PyObject *__pyx_v_self, PyObject *__pyx_arg_name) {
  char *__pyx_v_name
#line 854 "cds3/core.pyx"
;

#line 854 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 854 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 854 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("rename (wrapper)", 0);

#line 854 "cds3/core.pyx"
  assert(__pyx_arg_name); {

#line 854 "cds3/core.pyx"
    __pyx_v_name = PyBytes_AsString(__pyx_arg_name); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 856; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 854 "cds3/core.pyx"
  }

#line 854 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 854 "cds3/core.pyx"
  __pyx_L3_error:;

#line 854 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Dim.rename", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 854 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 854 "cds3/core.pyx"
  return NULL;

#line 854 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 854 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Dim_16rename(((struct __pyx_obj_4cds3_4core_Dim *)__pyx_v_self), ((char *)__pyx_v_name));

#line 854 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 854 "cds3/core.pyx"
  return __pyx_r;

#line 854 "cds3/core.pyx"
}

/* "cds3/core.pyx":856
 *         return var
 * 
 *     def rename(self, char *name):             # <<<<<<<<<<<<<<
 *         """Rename a CDS Dimension.
 * 
 */

#line 856 "cds3/core.pyx"


#line 856 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Dim_16rename(struct __pyx_obj_4cds3_4core_Dim *__pyx_v_self, char *__pyx_v_name) {

#line 856 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 856 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("rename", 0);

  /* "cds3/core.pyx":876
 * 
 *         """
 *         return cds_rename_dim(self.c_ob, name)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 876 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 876 "cds3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(cds_rename_dim(__pyx_v_self->c_ob, __pyx_v_name)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 876; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 876 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 876 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 876 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 876 "cds3/core.pyx"
  goto __pyx_L0;

#line 876 "cds3/core.pyx"


#line 876 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 876 "cds3/core.pyx"
  goto __pyx_L0;

#line 876 "cds3/core.pyx"
  __pyx_L1_error:;

#line 876 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 876 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Dim.rename", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 876 "cds3/core.pyx"
  __pyx_r = NULL;

#line 876 "cds3/core.pyx"
  __pyx_L0:;

#line 876 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 876 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 876 "cds3/core.pyx"
  return __pyx_r;

#line 876 "cds3/core.pyx"
}

#line 876 "cds3/core.pyx"


#line 876 "cds3/core.pyx"
/* Python wrapper */

#line 876 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Att_1delete(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 876 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Att_delete[] = "Att.delete(Att att)\nDelete a CDS Attribute.\n        \n        Error messages from this function are sent to the message\n        handler (see msngr_init_log() and msngr_init_mail()).\n        \n        @param att - pointer to the attribute\n        \n        @retval 1 if the attribute was deleted\n        @retval 0 if the attribute is locked\n        @retval 0 if the parent group or variable is locked\n        \n        ";
static PyMethodDef __pyx_mdef_4cds3_4core_3Att_1delete = 
#line 876 "cds3/core.pyx"
{__Pyx_NAMESTR("delete"), (PyCFunction)__pyx_pw_4cds3_4core_3Att_1delete, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Att_delete)};

#line 876 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Att_1delete(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Att *__pyx_v_att = 0
#line 876 "cds3/core.pyx"
;

#line 876 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 876 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 876 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("delete (wrapper)", 0);

#line 876 "cds3/core.pyx"
  {

#line 876 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__att,0};

#line 876 "cds3/core.pyx"
    PyObject* values[1] = {0};

#line 876 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 876 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 876 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 876 "cds3/core.pyx"
      switch (pos_args) {
        case  1: 
#line 876 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 876 "cds3/core.pyx"
        case  0: break;
        default: 
#line 876 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 876 "cds3/core.pyx"
      }

#line 876 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 876 "cds3/core.pyx"
      switch (pos_args) {

#line 876 "cds3/core.pyx"
        case  0:

#line 876 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__att)) != 0)) kw_args--;
        else 
#line 876 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 876 "cds3/core.pyx"
      }

#line 876 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 876 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "delete") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 883; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 876 "cds3/core.pyx"
      }

#line 876 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {

#line 876 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 876 "cds3/core.pyx"
    } else {

#line 876 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 876 "cds3/core.pyx"
    }

#line 876 "cds3/core.pyx"
    __pyx_v_att = ((struct __pyx_obj_4cds3_4core_Att *)values[0]);

#line 876 "cds3/core.pyx"
  }

#line 876 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 876 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("delete", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); 
#line 876 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 883; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 876 "cds3/core.pyx"
  __pyx_L3_error:;

#line 876 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Att.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 876 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 876 "cds3/core.pyx"
  return NULL;

#line 876 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 876 "cds3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_att), __pyx_ptype_4cds3_4core_Att, 1, "att", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 876 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Att_delete(__pyx_v_att);

#line 876 "cds3/core.pyx"
  goto __pyx_L0;

#line 876 "cds3/core.pyx"
  __pyx_L1_error:;

#line 876 "cds3/core.pyx"
  __pyx_r = NULL;

#line 876 "cds3/core.pyx"
  __pyx_L0:;

#line 876 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 876 "cds3/core.pyx"
  return __pyx_r;

#line 876 "cds3/core.pyx"
}

/* "cds3/core.pyx":883
 * 
 *     @staticmethod
 *     def delete(Att att):             # <<<<<<<<<<<<<<
 *         """Delete a CDS Attribute.
 * 
 */

#line 883 "cds3/core.pyx"


#line 883 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Att_delete(struct __pyx_obj_4cds3_4core_Att *__pyx_v_att) {
  int __pyx_v_retval
#line 883 "cds3/core.pyx"
;

#line 883 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 883 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("delete", 0);

#line 883 "cds3/core.pyx"
  __Pyx_INCREF((PyObject *)__pyx_v_att);

  /* "cds3/core.pyx":896
 * 
 *         """
 *         cdef int retval = cds_delete_att(att.c_ob)             # <<<<<<<<<<<<<<
 *         if retval == 1:
 *             att.set_att(NULL)
 */

#line 896 "cds3/core.pyx"
  __pyx_v_retval = cds_delete_att(__pyx_v_att->c_ob);

  /* "cds3/core.pyx":897
 *         """
 *         cdef int retval = cds_delete_att(att.c_ob)
 *         if retval == 1:             # <<<<<<<<<<<<<<
 *             att.set_att(NULL)
 *             del att
 */

#line 897 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_retval == 1);

#line 897 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":898
 *         cdef int retval = cds_delete_att(att.c_ob)
 *         if retval == 1:
 *             att.set_att(NULL)             # <<<<<<<<<<<<<<
 *             del att
 *         return retval
 */

#line 898 "cds3/core.pyx"
    __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Att *)__pyx_v_att->__pyx_base.__pyx_vtab)->set_att(__pyx_v_att, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 898 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 898 "cds3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cds3/core.pyx":899
 *         if retval == 1:
 *             att.set_att(NULL)
 *             del att             # <<<<<<<<<<<<<<
 *         return retval
 * 
 */

#line 899 "cds3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_v_att));

#line 899 "cds3/core.pyx"
    __pyx_v_att = NULL;

#line 899 "cds3/core.pyx"
    goto __pyx_L3;

#line 899 "cds3/core.pyx"
  }

#line 899 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":900
 *             att.set_att(NULL)
 *             del att
 *         return retval             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */

#line 900 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 900 "cds3/core.pyx"
  __pyx_t_2 = PyInt_FromLong(__pyx_v_retval); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 900 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 900 "cds3/core.pyx"
  __pyx_r = __pyx_t_2;

#line 900 "cds3/core.pyx"
  __pyx_t_2 = 0;

#line 900 "cds3/core.pyx"
  goto __pyx_L0;

#line 900 "cds3/core.pyx"


#line 900 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 900 "cds3/core.pyx"
  goto __pyx_L0;

#line 900 "cds3/core.pyx"
  __pyx_L1_error:;

#line 900 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 900 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Att.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 900 "cds3/core.pyx"
  __pyx_r = NULL;

#line 900 "cds3/core.pyx"
  __pyx_L0:;

#line 900 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_att);

#line 900 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 900 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 900 "cds3/core.pyx"
  return __pyx_r;

#line 900 "cds3/core.pyx"
}

#line 900 "cds3/core.pyx"


#line 900 "cds3/core.pyx"
/* Python wrapper */

#line 900 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_3Att_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 900 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_3Att_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

#line 900 "cds3/core.pyx"
  int __pyx_r;

#line 900 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 900 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 900 "cds3/core.pyx"
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;
#line 900 "cds3/core.pyx"
}

#line 900 "cds3/core.pyx"
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = 
#line 900 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Att_2__cinit__(((struct __pyx_obj_4cds3_4core_Att *)__pyx_v_self));

#line 900 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 900 "cds3/core.pyx"
  return __pyx_r;

#line 900 "cds3/core.pyx"
}

/* "cds3/core.pyx":902
 *         return retval
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         """TODO"""
 *         self.c_ob = NULL
 */

#line 902 "cds3/core.pyx"


#line 902 "cds3/core.pyx"
static int __pyx_pf_4cds3_4core_3Att_2__cinit__(struct __pyx_obj_4cds3_4core_Att *__pyx_v_self) {

#line 902 "cds3/core.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations

#line 902 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cds3/core.pyx":904
 *     def __cinit__(self):
 *         """TODO"""
 *         self.c_ob = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */

#line 904 "cds3/core.pyx"
  __pyx_v_self->c_ob = NULL;

#line 904 "cds3/core.pyx"


#line 904 "cds3/core.pyx"
  __pyx_r = 0;

#line 904 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 904 "cds3/core.pyx"
  return __pyx_r;

#line 904 "cds3/core.pyx"
}

#line 904 "cds3/core.pyx"


#line 904 "cds3/core.pyx"
/* Python wrapper */

#line 904 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_3Att_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 904 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Att_4__init__[] = "TODO";

#line 904 "cds3/core.pyx"
#if CYTHON_COMPILING_IN_CPYTHON

#line 904 "cds3/core.pyx"
struct wrapperbase __pyx_wrapperbase_4cds3_4core_3Att_4__init__;

#line 904 "cds3/core.pyx"
#endif

#line 904 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_3Att_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

#line 904 "cds3/core.pyx"
  int __pyx_r;

#line 904 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 904 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);

#line 904 "cds3/core.pyx"
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;
#line 904 "cds3/core.pyx"
}

#line 904 "cds3/core.pyx"
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = 
#line 904 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Att_4__init__(((struct __pyx_obj_4cds3_4core_Att *)__pyx_v_self));

#line 904 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 904 "cds3/core.pyx"
  return __pyx_r;

#line 904 "cds3/core.pyx"
}

/* "cds3/core.pyx":906
 *         self.c_ob = NULL
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """TODO"""
 *         pass
 */

#line 906 "cds3/core.pyx"


#line 906 "cds3/core.pyx"
static int __pyx_pf_4cds3_4core_3Att_4__init__(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_Att *__pyx_v_self) {

#line 906 "cds3/core.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations

#line 906 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__init__", 0);

#line 906 "cds3/core.pyx"


#line 906 "cds3/core.pyx"
  __pyx_r = 0;

#line 906 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 906 "cds3/core.pyx"
  return __pyx_r;

#line 906 "cds3/core.pyx"
}

/* "cds3/core.pyx":910
 *         pass
 * 
 *     cdef set_att(self, CDSAtt *att):             # <<<<<<<<<<<<<<
 *         """TODO"""
 *         self.cds_object = <CDSObject*>att
 */

#line 910 "cds3/core.pyx"


#line 910 "cds3/core.pyx"
static PyObject *__pyx_f_4cds3_4core_3Att_set_att(struct __pyx_obj_4cds3_4core_Att *__pyx_v_self, struct CDSAtt *__pyx_v_att) {

#line 910 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations

#line 910 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("set_att", 0);

  /* "cds3/core.pyx":912
 *     cdef set_att(self, CDSAtt *att):
 *         """TODO"""
 *         self.cds_object = <CDSObject*>att             # <<<<<<<<<<<<<<
 *         self.c_ob = att
 * 
 */

#line 912 "cds3/core.pyx"
  __pyx_v_self->__pyx_base.cds_object = ((struct CDSObject *)__pyx_v_att);

  /* "cds3/core.pyx":913
 *         """TODO"""
 *         self.cds_object = <CDSObject*>att
 *         self.c_ob = att             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */

#line 913 "cds3/core.pyx"
  __pyx_v_self->c_ob = __pyx_v_att;

#line 913 "cds3/core.pyx"


#line 913 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 913 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 913 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 913 "cds3/core.pyx"
  return __pyx_r;

#line 913 "cds3/core.pyx"
}

#line 913 "cds3/core.pyx"


#line 913 "cds3/core.pyx"
/* Python wrapper */

#line 913 "cds3/core.pyx"
static void __pyx_pw_4cds3_4core_3Att_7__dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 913 "cds3/core.pyx"
static void __pyx_pw_4cds3_4core_3Att_7__dealloc__(PyObject *__pyx_v_self) {

#line 913 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 913 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 913 "cds3/core.pyx"
  __pyx_pf_4cds3_4core_3Att_6__dealloc__(((struct __pyx_obj_4cds3_4core_Att *)__pyx_v_self));

#line 913 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 913 "cds3/core.pyx"
}

/* "cds3/core.pyx":915
 *         self.c_ob = att
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """TODO"""
 *         pass
 */

#line 915 "cds3/core.pyx"


#line 915 "cds3/core.pyx"
static void __pyx_pf_4cds3_4core_3Att_6__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_Att *__pyx_v_self) {
  __Pyx_RefNannyDeclarations

#line 915 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

#line 915 "cds3/core.pyx"


#line 915 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 915 "cds3/core.pyx"
}

#line 915 "cds3/core.pyx"


#line 915 "cds3/core.pyx"
/* Python wrapper */

#line 915 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Att_9get_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 915 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Att_8get_type[] = "Att.get_type(self)";

#line 915 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Att_9get_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 915 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 915 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 915 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_type (wrapper)", 0);
  __pyx_r = 
#line 915 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Att_8get_type(((struct __pyx_obj_4cds3_4core_Att *)__pyx_v_self));

#line 915 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 915 "cds3/core.pyx"
  return __pyx_r;

#line 915 "cds3/core.pyx"
}

/* "cds3/core.pyx":919
 *         pass
 * 
 *     def get_type(self):             # <<<<<<<<<<<<<<
 *         return self.c_ob.type
 * 
 */

#line 919 "cds3/core.pyx"


#line 919 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Att_8get_type(struct __pyx_obj_4cds3_4core_Att *__pyx_v_self) {

#line 919 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 919 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_type", 0);

  /* "cds3/core.pyx":920
 * 
 *     def get_type(self):
 *         return self.c_ob.type             # <<<<<<<<<<<<<<
 * 
 *     def get_length(self):
 */

#line 920 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 920 "cds3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->c_ob->type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 920; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 920 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 920 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 920 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 920 "cds3/core.pyx"
  goto __pyx_L0;

#line 920 "cds3/core.pyx"


#line 920 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 920 "cds3/core.pyx"
  goto __pyx_L0;

#line 920 "cds3/core.pyx"
  __pyx_L1_error:;

#line 920 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 920 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Att.get_type", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 920 "cds3/core.pyx"
  __pyx_r = NULL;

#line 920 "cds3/core.pyx"
  __pyx_L0:;

#line 920 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 920 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 920 "cds3/core.pyx"
  return __pyx_r;

#line 920 "cds3/core.pyx"
}

#line 920 "cds3/core.pyx"


#line 920 "cds3/core.pyx"
/* Python wrapper */

#line 920 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Att_11get_length(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 920 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Att_10get_length[] = "Att.get_length(self)";

#line 920 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Att_11get_length(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 920 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 920 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 920 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_length (wrapper)", 0);
  __pyx_r = 
#line 920 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Att_10get_length(((struct __pyx_obj_4cds3_4core_Att *)__pyx_v_self));

#line 920 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 920 "cds3/core.pyx"
  return __pyx_r;

#line 920 "cds3/core.pyx"
}

/* "cds3/core.pyx":922
 *         return self.c_ob.type
 * 
 *     def get_length(self):             # <<<<<<<<<<<<<<
 *         return self.c_ob.length
 * 
 */

#line 922 "cds3/core.pyx"


#line 922 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Att_10get_length(struct __pyx_obj_4cds3_4core_Att *__pyx_v_self) {

#line 922 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 922 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_length", 0);

  /* "cds3/core.pyx":923
 * 
 *     def get_length(self):
 *         return self.c_ob.length             # <<<<<<<<<<<<<<
 * 
 *     def change_text(self, char *text):
 */

#line 923 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 923 "cds3/core.pyx"
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->c_ob->length); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 923 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 923 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 923 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 923 "cds3/core.pyx"
  goto __pyx_L0;

#line 923 "cds3/core.pyx"


#line 923 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 923 "cds3/core.pyx"
  goto __pyx_L0;

#line 923 "cds3/core.pyx"
  __pyx_L1_error:;

#line 923 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 923 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Att.get_length", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 923 "cds3/core.pyx"
  __pyx_r = NULL;

#line 923 "cds3/core.pyx"
  __pyx_L0:;

#line 923 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 923 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 923 "cds3/core.pyx"
  return __pyx_r;

#line 923 "cds3/core.pyx"
}

#line 923 "cds3/core.pyx"


#line 923 "cds3/core.pyx"
/* Python wrapper */

#line 923 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Att_13change_text(PyObject *__pyx_v_self, PyObject *__pyx_arg_text); /*proto*/

#line 923 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Att_12change_text[] = "Att.change_text(self, char *text)\nChange the type and value of a CDS Attribute.\n        \n        This function will change the data type of an attribute to CDS_CHAR and\n        set the new value.\n        \n        Error messages from this function are sent to the message\n        handler (see msngr_init_log() and msngr_init_mail()).\n        \n        @param text - the new value\n        \n        @retval 1 if the attribute value was changed\n        @retval 0 if the attribute is locked\n        @retval 0 if a memory allocation error occurred\n        \n        ";

#line 923 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Att_13change_text(PyObject *__pyx_v_self, PyObject *__pyx_arg_text) {
  char *__pyx_v_text
#line 923 "cds3/core.pyx"
;

#line 923 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 923 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 923 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("change_text (wrapper)", 0);

#line 923 "cds3/core.pyx"
  assert(__pyx_arg_text); {

#line 923 "cds3/core.pyx"
    __pyx_v_text = PyBytes_AsString(__pyx_arg_text); if (unlikely((!__pyx_v_text) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 925; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 923 "cds3/core.pyx"
  }

#line 923 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 923 "cds3/core.pyx"
  __pyx_L3_error:;

#line 923 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Att.change_text", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 923 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 923 "cds3/core.pyx"
  return NULL;

#line 923 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 923 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Att_12change_text(((struct __pyx_obj_4cds3_4core_Att *)__pyx_v_self), ((char *)__pyx_v_text));

#line 923 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 923 "cds3/core.pyx"
  return __pyx_r;

#line 923 "cds3/core.pyx"
}

/* "cds3/core.pyx":925
 *         return self.c_ob.length
 * 
 *     def change_text(self, char *text):             # <<<<<<<<<<<<<<
 *         """Change the type and value of a CDS Attribute.
 * 
 */

#line 925 "cds3/core.pyx"


#line 925 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Att_12change_text(struct __pyx_obj_4cds3_4core_Att *__pyx_v_self, char *__pyx_v_text) {

#line 925 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 925 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("change_text", 0);

  /* "cds3/core.pyx":941
 * 
 *         """
 *         return cds_change_att_text(self.c_ob, text)             # <<<<<<<<<<<<<<
 * 
 *     def change_value(self, CDSDataType type, object value):
 */

#line 941 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 941 "cds3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(cds_change_att_text(__pyx_v_self->c_ob, __pyx_v_text)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 941 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 941 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 941 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 941 "cds3/core.pyx"
  goto __pyx_L0;

#line 941 "cds3/core.pyx"


#line 941 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 941 "cds3/core.pyx"
  goto __pyx_L0;

#line 941 "cds3/core.pyx"
  __pyx_L1_error:;

#line 941 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 941 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Att.change_text", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 941 "cds3/core.pyx"
  __pyx_r = NULL;

#line 941 "cds3/core.pyx"
  __pyx_L0:;

#line 941 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 941 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 941 "cds3/core.pyx"
  return __pyx_r;

#line 941 "cds3/core.pyx"
}

#line 941 "cds3/core.pyx"


#line 941 "cds3/core.pyx"
/* Python wrapper */

#line 941 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Att_15change_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 941 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Att_14change_value[] = "Att.change_value(self, CDSDataType type, value)\nChange the type and value of a CDS Attribute.\n        \n        Error messages from this function are sent to the message\n        handler (see msngr_init_log() and msngr_init_mail()).\n        \n        @param type - new attribute data type\n        @param value - Python value(s), internally converted to numpy.ndarray\n        \n        @retval 1 if successful\n        @retval 0 if the attribute is locked\n        @retval 0 if a memory allocation error occurred\n        \n        ";

#line 941 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Att_15change_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CDSDataType __pyx_v_type
#line 941 "cds3/core.pyx"
;
  PyObject *__pyx_v_value = 0
#line 941 "cds3/core.pyx"
;

#line 941 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 941 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 941 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("change_value (wrapper)", 0);

#line 941 "cds3/core.pyx"
  {

#line 941 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__type,&__pyx_n_s__value,0};

#line 941 "cds3/core.pyx"
    PyObject* values[2] = {0,0};

#line 941 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 941 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 941 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 941 "cds3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 941 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 941 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 941 "cds3/core.pyx"
        case  0: break;
        default: 
#line 941 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 941 "cds3/core.pyx"
      }

#line 941 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 941 "cds3/core.pyx"
      switch (pos_args) {

#line 941 "cds3/core.pyx"
        case  0:

#line 941 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__type)) != 0)) kw_args--;
        else 
#line 941 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 941 "cds3/core.pyx"
        case  1:

#line 941 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value)) != 0)) kw_args--;

#line 941 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("change_value", 1, 2, 2, 1); 
#line 941 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 943; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 941 "cds3/core.pyx"
        }

#line 941 "cds3/core.pyx"
      }

#line 941 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 941 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "change_value") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 943; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 941 "cds3/core.pyx"
      }

#line 941 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 941 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 941 "cds3/core.pyx"
    } else {

#line 941 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 941 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 941 "cds3/core.pyx"
    }

#line 941 "cds3/core.pyx"
    __pyx_v_type = ((CDSDataType)PyInt_AsLong(values[0])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 943; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 941 "cds3/core.pyx"
    __pyx_v_value = values[1];

#line 941 "cds3/core.pyx"
  }

#line 941 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 941 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("change_value", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 941 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 943; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 941 "cds3/core.pyx"
  __pyx_L3_error:;

#line 941 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Att.change_value", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 941 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 941 "cds3/core.pyx"
  return NULL;

#line 941 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 941 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Att_14change_value(((struct __pyx_obj_4cds3_4core_Att *)__pyx_v_self), __pyx_v_type, __pyx_v_value);

#line 941 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 941 "cds3/core.pyx"
  return __pyx_r;

#line 941 "cds3/core.pyx"
}

/* "cds3/core.pyx":943
 *         return cds_change_att_text(self.c_ob, text)
 * 
 *     def change_value(self, CDSDataType type, object value):             # <<<<<<<<<<<<<<
 *         """Change the type and value of a CDS Attribute.
 * 
 */

#line 943 "cds3/core.pyx"


#line 943 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Att_14change_value(struct __pyx_obj_4cds3_4core_Att *__pyx_v_self, CDSDataType __pyx_v_type, PyObject *__pyx_v_value) {
  PyArrayObject *__pyx_v_value_nd = 0
#line 943 "cds3/core.pyx"
;

#line 943 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 943 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("change_value", 0);

  /* "cds3/core.pyx":957
 * 
 *         """
 *         cdef np.ndarray value_nd = np.asarray(value, cds_type_to_dtype_obj(type))             # <<<<<<<<<<<<<<
 *         if value_nd.ndim == 0:
 *             value_nd = value_nd[None] # add dummy dimension to a scalar value
 */

#line 957 "cds3/core.pyx"
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 957 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 957 "cds3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__asarray); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 957 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 957 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 957 "cds3/core.pyx"
  __pyx_t_1 = ((PyObject *)__pyx_f_4cds3_4core_cds_type_to_dtype_obj(__pyx_v_type)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 957 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 957 "cds3/core.pyx"
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 957 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 957 "cds3/core.pyx"
  __Pyx_INCREF(__pyx_v_value);

#line 957 "cds3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_value);

#line 957 "cds3/core.pyx"
  __Pyx_GIVEREF(__pyx_v_value);

#line 957 "cds3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);

#line 957 "cds3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 957 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 957 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 957 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 957 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 957 "cds3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 957 "cds3/core.pyx"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 957; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 957 "cds3/core.pyx"
  __pyx_v_value_nd = ((PyArrayObject *)__pyx_t_1);

#line 957 "cds3/core.pyx"
  __pyx_t_1 = 0;

  /* "cds3/core.pyx":958
 *         """
 *         cdef np.ndarray value_nd = np.asarray(value, cds_type_to_dtype_obj(type))
 *         if value_nd.ndim == 0:             # <<<<<<<<<<<<<<
 *             value_nd = value_nd[None] # add dummy dimension to a scalar value
 *         assert value_nd.ndim == 1
 */

#line 958 "cds3/core.pyx"
  __pyx_t_4 = (__pyx_v_value_nd->nd == 0);

#line 958 "cds3/core.pyx"
  if (__pyx_t_4) {

    /* "cds3/core.pyx":959
 *         cdef np.ndarray value_nd = np.asarray(value, cds_type_to_dtype_obj(type))
 *         if value_nd.ndim == 0:
 *             value_nd = value_nd[None] # add dummy dimension to a scalar value             # <<<<<<<<<<<<<<
 *         assert value_nd.ndim == 1
 *         return cds_change_att_value(self.c_ob, type, len(value_nd),
 */

#line 959 "cds3/core.pyx"
    __pyx_t_1 = PyObject_GetItem(((PyObject *)__pyx_v_value_nd), Py_None); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 959 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 959 "cds3/core.pyx"
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 959 "cds3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_v_value_nd));

#line 959 "cds3/core.pyx"
    __pyx_v_value_nd = ((PyArrayObject *)__pyx_t_1);

#line 959 "cds3/core.pyx"
    __pyx_t_1 = 0;

#line 959 "cds3/core.pyx"
    goto __pyx_L3;

#line 959 "cds3/core.pyx"
  }

#line 959 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":960
 *         if value_nd.ndim == 0:
 *             value_nd = value_nd[None] # add dummy dimension to a scalar value
 *         assert value_nd.ndim == 1             # <<<<<<<<<<<<<<
 *         return cds_change_att_value(self.c_ob, type, len(value_nd),
 *                 value_nd.data)
 */

#line 960 "cds3/core.pyx"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 960 "cds3/core.pyx"
  if (unlikely(!(__pyx_v_value_nd->nd == 1))) {

#line 960 "cds3/core.pyx"
    PyErr_SetNone(PyExc_AssertionError);

#line 960 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 960; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 960 "cds3/core.pyx"
  }

#line 960 "cds3/core.pyx"
  #endif

  /* "cds3/core.pyx":961
 *             value_nd = value_nd[None] # add dummy dimension to a scalar value
 *         assert value_nd.ndim == 1
 *         return cds_change_att_value(self.c_ob, type, len(value_nd),             # <<<<<<<<<<<<<<
 *                 value_nd.data)
 * 
 */

#line 961 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 961 "cds3/core.pyx"
  __pyx_t_5 = PyObject_Length(((PyObject *)__pyx_v_value_nd)); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 961; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "cds3/core.pyx":962
 *         assert value_nd.ndim == 1
 *         return cds_change_att_value(self.c_ob, type, len(value_nd),
 *                 value_nd.data)             # <<<<<<<<<<<<<<
 * 
 *     def get_text(self):
 */

#line 962 "cds3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(cds_change_att_value(__pyx_v_self->c_ob, __pyx_v_type, __pyx_t_5, __pyx_v_value_nd->data)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 961; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 962 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 962 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 962 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 962 "cds3/core.pyx"
  goto __pyx_L0;

#line 962 "cds3/core.pyx"


#line 962 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 962 "cds3/core.pyx"
  goto __pyx_L0;

#line 962 "cds3/core.pyx"
  __pyx_L1_error:;

#line 962 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 962 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 962 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 962 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Att.change_value", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 962 "cds3/core.pyx"
  __pyx_r = NULL;

#line 962 "cds3/core.pyx"
  __pyx_L0:;

#line 962 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_value_nd);

#line 962 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 962 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 962 "cds3/core.pyx"
  return __pyx_r;

#line 962 "cds3/core.pyx"
}

#line 962 "cds3/core.pyx"


#line 962 "cds3/core.pyx"
/* Python wrapper */

#line 962 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Att_17get_text(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 962 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Att_16get_text[] = "Att.get_text(self)\nGet a copy of a CDS attribute value.\n        \n        This function will get a copy of an attribute value converted to a text\n        string. If the data type of the attribute is not CDS_CHAR the\n        cds_array_to_string() function is used to create the output string.\n        \n        Memory will be allocated for the returned string if the output string\n        is NULL. In this case the calling process is responsible for freeing\n        the allocated memory.\n        \n        Error messages from this function are sent to the message handler\n        (see msngr_init_log() and msngr_init_mail()).\n        \n        @retval the string\n        @retval None if the attribute value has zero length (length == 0)\n        @retval None if a memory allocation error occurs (length == (size_t)-1)\n\n        ";

#line 962 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Att_17get_text(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 962 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 962 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 962 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_text (wrapper)", 0);
  __pyx_r = 
#line 962 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Att_16get_text(((struct __pyx_obj_4cds3_4core_Att *)__pyx_v_self));

#line 962 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 962 "cds3/core.pyx"
  return __pyx_r;

#line 962 "cds3/core.pyx"
}

/* "cds3/core.pyx":964
 *                 value_nd.data)
 * 
 *     def get_text(self):             # <<<<<<<<<<<<<<
 *         """Get a copy of a CDS attribute value.
 * 
 */

#line 964 "cds3/core.pyx"


#line 964 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Att_16get_text(struct __pyx_obj_4cds3_4core_Att *__pyx_v_self) {
  size_t __pyx_v_length
#line 964 "cds3/core.pyx"
;
  char *__pyx_v_retval
#line 964 "cds3/core.pyx"
;
  CYTHON_UNUSED PyObject *__pyx_v_retval_py = 0
#line 964 "cds3/core.pyx"
;

#line 964 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 964 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_text", 0);

  /* "cds3/core.pyx":986
 *         cdef char *retval
 *         cdef object retval_py
 *         retval = cds_get_att_text(self.c_ob, &length, NULL)             # <<<<<<<<<<<<<<
 *         if retval == NULL:
 *             return None
 */

#line 986 "cds3/core.pyx"
  __pyx_v_retval = cds_get_att_text(__pyx_v_self->c_ob, (&__pyx_v_length), NULL);

  /* "cds3/core.pyx":987
 *         cdef object retval_py
 *         retval = cds_get_att_text(self.c_ob, &length, NULL)
 *         if retval == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         retval_py = retval # copies the string to a Python string
 */

#line 987 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_retval == NULL);

#line 987 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":988
 *         retval = cds_get_att_text(self.c_ob, &length, NULL)
 *         if retval == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         retval_py = retval # copies the string to a Python string
 *         free(retval)
 */

#line 988 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 988 "cds3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 988 "cds3/core.pyx"
    __pyx_r = Py_None;

#line 988 "cds3/core.pyx"
    goto __pyx_L0;

#line 988 "cds3/core.pyx"
    goto __pyx_L3;

#line 988 "cds3/core.pyx"
  }

#line 988 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":989
 *         if retval == NULL:
 *             return None
 *         retval_py = retval # copies the string to a Python string             # <<<<<<<<<<<<<<
 *         free(retval)
 *         return retval
 */

#line 989 "cds3/core.pyx"
  __pyx_t_2 = PyBytes_FromString(__pyx_v_retval); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 989 "cds3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));

#line 989 "cds3/core.pyx"
  __pyx_v_retval_py = ((PyObject *)__pyx_t_2);

#line 989 "cds3/core.pyx"
  __pyx_t_2 = 0;

  /* "cds3/core.pyx":990
 *             return None
 *         retval_py = retval # copies the string to a Python string
 *         free(retval)             # <<<<<<<<<<<<<<
 *         return retval
 * 
 */

#line 990 "cds3/core.pyx"
  free(__pyx_v_retval);

  /* "cds3/core.pyx":991
 *         retval_py = retval # copies the string to a Python string
 *         free(retval)
 *         return retval             # <<<<<<<<<<<<<<
 * 
 *     def get_value(self, CDSDataType type):
 */

#line 991 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 991 "cds3/core.pyx"
  __pyx_t_2 = PyBytes_FromString(__pyx_v_retval); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 991 "cds3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));

#line 991 "cds3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_t_2);

#line 991 "cds3/core.pyx"
  __pyx_t_2 = 0;

#line 991 "cds3/core.pyx"
  goto __pyx_L0;

#line 991 "cds3/core.pyx"


#line 991 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 991 "cds3/core.pyx"
  goto __pyx_L0;

#line 991 "cds3/core.pyx"
  __pyx_L1_error:;

#line 991 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 991 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Att.get_text", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 991 "cds3/core.pyx"
  __pyx_r = NULL;

#line 991 "cds3/core.pyx"
  __pyx_L0:;

#line 991 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_v_retval_py);

#line 991 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 991 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 991 "cds3/core.pyx"
  return __pyx_r;

#line 991 "cds3/core.pyx"
}

#line 991 "cds3/core.pyx"


#line 991 "cds3/core.pyx"
/* Python wrapper */

#line 991 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Att_19get_value(PyObject *__pyx_v_self, PyObject *__pyx_arg_type); /*proto*/

#line 991 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Att_18get_value[] = "Att.get_value(self, CDSDataType type)\nGet a copy of a CDS attribute value.\n        \n        This function will get a copy of an attribute value casted into the\n        specified data type. The functions cds_string_to_array() and\n        cds_array_to_string() are used to convert between text (CDS_CHAR) and\n        numeric data types.\n        \n        Memory will be allocated for the returned array if the output array is\n        NULL. In this case the calling process is responsible for freeing the\n        allocated memory.\n        \n        Error messages from this function are sent to the message handler\n        (see msngr_init_log() and msngr_init_mail()).\n        \n        @param type - data type of the output array\n        \n        @retval the output ndarray\n        @retval None if the attribute value has zero length (length == 0)\n        @retval None if a memory allocation error occurs (length == (size_t)-1)\n\n        ";

#line 991 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Att_19get_value(PyObject *__pyx_v_self, PyObject *__pyx_arg_type) {
  CDSDataType __pyx_v_type
#line 991 "cds3/core.pyx"
;

#line 991 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 991 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 991 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_value (wrapper)", 0);

#line 991 "cds3/core.pyx"
  assert(__pyx_arg_type); {

#line 991 "cds3/core.pyx"
    __pyx_v_type = ((CDSDataType)PyInt_AsLong(__pyx_arg_type)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 993; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 991 "cds3/core.pyx"
  }

#line 991 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 991 "cds3/core.pyx"
  __pyx_L3_error:;

#line 991 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Att.get_value", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 991 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 991 "cds3/core.pyx"
  return NULL;

#line 991 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 991 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Att_18get_value(((struct __pyx_obj_4cds3_4core_Att *)__pyx_v_self), ((CDSDataType)__pyx_v_type));

#line 991 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 991 "cds3/core.pyx"
  return __pyx_r;

#line 991 "cds3/core.pyx"
}

/* "cds3/core.pyx":993
 *         return retval
 * 
 *     def get_value(self, CDSDataType type):             # <<<<<<<<<<<<<<
 *         """Get a copy of a CDS attribute value.
 * 
 */

#line 993 "cds3/core.pyx"


#line 993 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Att_18get_value(struct __pyx_obj_4cds3_4core_Att *__pyx_v_self, CDSDataType __pyx_v_type) {
  void *__pyx_v_value_ptr
#line 993 "cds3/core.pyx"
;
  size_t __pyx_v_length
#line 993 "cds3/core.pyx"
;
  PyArrayObject *__pyx_v_value_nd = 0
#line 993 "cds3/core.pyx"
;
  npy_intp __pyx_v_dims
#line 993 "cds3/core.pyx"
;

#line 993 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 993 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_value", 0);

  /* "cds3/core.pyx":1019
 *         cdef np.ndarray value_nd
 *         cdef np.npy_intp dims
 *         value_ptr = cds_get_att_value(self.c_ob, type, &length, NULL)             # <<<<<<<<<<<<<<
 *         dims = length
 *         value_nd = np.PyArray_SimpleNewFromData(1, &dims,
 */

#line 1019 "cds3/core.pyx"
  __pyx_v_value_ptr = cds_get_att_value(__pyx_v_self->c_ob, __pyx_v_type, (&__pyx_v_length), NULL);

  /* "cds3/core.pyx":1020
 *         cdef np.npy_intp dims
 *         value_ptr = cds_get_att_value(self.c_ob, type, &length, NULL)
 *         dims = length             # <<<<<<<<<<<<<<
 *         value_nd = np.PyArray_SimpleNewFromData(1, &dims,
 *                 cds_type_to_dtype(type), value_ptr)
 */

#line 1020 "cds3/core.pyx"
  __pyx_v_dims = __pyx_v_length;

  /* "cds3/core.pyx":1022
 *         dims = length
 *         value_nd = np.PyArray_SimpleNewFromData(1, &dims,
 *                 cds_type_to_dtype(type), value_ptr)             # <<<<<<<<<<<<<<
 *         # allow numpy to reclaim memory when array goes out of scope
 *         value_nd.base = PyCObject_FromVoidPtr(value_ptr, _free)
 */

#line 1022 "cds3/core.pyx"
  __pyx_t_1 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), __pyx_f_4cds3_4core_cds_type_to_dtype(__pyx_v_type), __pyx_v_value_ptr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1021; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1022 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1022 "cds3/core.pyx"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1021; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1022 "cds3/core.pyx"
  __pyx_v_value_nd = ((PyArrayObject *)__pyx_t_1);

#line 1022 "cds3/core.pyx"
  __pyx_t_1 = 0;

  /* "cds3/core.pyx":1024
 *                 cds_type_to_dtype(type), value_ptr)
 *         # allow numpy to reclaim memory when array goes out of scope
 *         value_nd.base = PyCObject_FromVoidPtr(value_ptr, _free)             # <<<<<<<<<<<<<<
 *         return value_nd
 * 
 */

#line 1024 "cds3/core.pyx"
  __pyx_v_value_nd->base = PyCObject_FromVoidPtr(__pyx_v_value_ptr, __pyx_f_4cds3_4core__free);

  /* "cds3/core.pyx":1025
 *         # allow numpy to reclaim memory when array goes out of scope
 *         value_nd.base = PyCObject_FromVoidPtr(value_ptr, _free)
 *         return value_nd             # <<<<<<<<<<<<<<
 * 
 *     def rename(self, char *name):
 */

#line 1025 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1025 "cds3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_value_nd));

#line 1025 "cds3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_value_nd);

#line 1025 "cds3/core.pyx"
  goto __pyx_L0;

#line 1025 "cds3/core.pyx"


#line 1025 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1025 "cds3/core.pyx"
  goto __pyx_L0;

#line 1025 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1025 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1025 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Att.get_value", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1025 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1025 "cds3/core.pyx"
  __pyx_L0:;

#line 1025 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_value_nd);

#line 1025 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1025 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1025 "cds3/core.pyx"
  return __pyx_r;

#line 1025 "cds3/core.pyx"
}

#line 1025 "cds3/core.pyx"


#line 1025 "cds3/core.pyx"
/* Python wrapper */

#line 1025 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Att_21rename(PyObject *__pyx_v_self, PyObject *__pyx_arg_name); /*proto*/

#line 1025 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Att_20rename[] = "Att.rename(self, char *name)\nRename a CDS Attribute.\n        \n        Error messages from this function are sent to the message\n        handler (see msngr_init_log() and msngr_init_mail()).\n        \n        @param name - pointer to the new attribute name\n        \n        @retval 1 if the attribute was deleted\n        @retval 0 if an attribute with the new name already exists\n        @retval 0 if the attribute is locked\n        @retval 0 if the parent group or variable is locked\n        @retval 0 if a memory allocation error occured\n        \n        ";

#line 1025 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Att_21rename(PyObject *__pyx_v_self, PyObject *__pyx_arg_name) {
  char *__pyx_v_name
#line 1025 "cds3/core.pyx"
;

#line 1025 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1025 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1025 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("rename (wrapper)", 0);

#line 1025 "cds3/core.pyx"
  assert(__pyx_arg_name); {

#line 1025 "cds3/core.pyx"
    __pyx_v_name = PyBytes_AsString(__pyx_arg_name); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1027; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1025 "cds3/core.pyx"
  }

#line 1025 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1025 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1025 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Att.rename", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1025 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1025 "cds3/core.pyx"
  return NULL;

#line 1025 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1025 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Att_20rename(((struct __pyx_obj_4cds3_4core_Att *)__pyx_v_self), ((char *)__pyx_v_name));

#line 1025 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1025 "cds3/core.pyx"
  return __pyx_r;

#line 1025 "cds3/core.pyx"
}

/* "cds3/core.pyx":1027
 *         return value_nd
 * 
 *     def rename(self, char *name):             # <<<<<<<<<<<<<<
 *         """Rename a CDS Attribute.
 * 
 */

#line 1027 "cds3/core.pyx"


#line 1027 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Att_20rename(struct __pyx_obj_4cds3_4core_Att *__pyx_v_self, char *__pyx_v_name) {

#line 1027 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1027 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("rename", 0);

  /* "cds3/core.pyx":1042
 * 
 *         """
 *         return cds_rename_att(self.c_ob, name)             # <<<<<<<<<<<<<<
 * 
 *     def set_text(self, text):
 */

#line 1042 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1042 "cds3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(cds_rename_att(__pyx_v_self->c_ob, __pyx_v_name)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1042; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1042 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1042 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 1042 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 1042 "cds3/core.pyx"
  goto __pyx_L0;

#line 1042 "cds3/core.pyx"


#line 1042 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1042 "cds3/core.pyx"
  goto __pyx_L0;

#line 1042 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1042 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1042 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Att.rename", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1042 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1042 "cds3/core.pyx"
  __pyx_L0:;

#line 1042 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1042 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1042 "cds3/core.pyx"
  return __pyx_r;

#line 1042 "cds3/core.pyx"
}

#line 1042 "cds3/core.pyx"


#line 1042 "cds3/core.pyx"
/* Python wrapper */

#line 1042 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Att_23set_text(PyObject *__pyx_v_self, PyObject *__pyx_v_text); /*proto*/

#line 1042 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Att_22set_text[] = "Att.set_text(self, text)\nSet the value of a CDS attribute.\n        \n        The cds_string_to_array() function will be used to set the attribute\n        value if the data type of the attribute is not CDS_CHAR.\n        \n        Error messages from this function are sent to the message\n        handler (see msngr_init_log() and msngr_init_mail()).\n        \n        @param text to set\n        \n        @retval 1 if successful\n        @retval 0 if the attribute is locked\n        @retval 0 if a memory allocation error occurred\n        \n        ";

#line 1042 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Att_23set_text(PyObject *__pyx_v_self, PyObject *__pyx_v_text) {

#line 1042 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1042 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1042 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("set_text (wrapper)", 0);
  __pyx_r = 
#line 1042 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Att_22set_text(((struct __pyx_obj_4cds3_4core_Att *)__pyx_v_self), ((PyObject *)__pyx_v_text));

#line 1042 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1042 "cds3/core.pyx"
  return __pyx_r;

#line 1042 "cds3/core.pyx"
}

/* "cds3/core.pyx":1044
 *         return cds_rename_att(self.c_ob, name)
 * 
 *     def set_text(self, text):             # <<<<<<<<<<<<<<
 *         """Set the value of a CDS attribute.
 * 
 */

#line 1044 "cds3/core.pyx"


#line 1044 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Att_22set_text(struct __pyx_obj_4cds3_4core_Att *__pyx_v_self, PyObject *__pyx_v_text) {

#line 1044 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1044 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("set_text", 0);

  /* "cds3/core.pyx":1060
 * 
 *         """
 *         return cds_set_att_text(self.c_ob, text)             # <<<<<<<<<<<<<<
 * 
 *     def set_value(self, CDSDataType type, object value):
 */

#line 1060 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1060 "cds3/core.pyx"
  __pyx_t_1 = PyBytes_AsString(__pyx_v_text); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1060; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1060 "cds3/core.pyx"
  __pyx_t_2 = PyInt_FromLong(cds_set_att_text(__pyx_v_self->c_ob, __pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1060; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1060 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1060 "cds3/core.pyx"
  __pyx_r = __pyx_t_2;

#line 1060 "cds3/core.pyx"
  __pyx_t_2 = 0;

#line 1060 "cds3/core.pyx"
  goto __pyx_L0;

#line 1060 "cds3/core.pyx"


#line 1060 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1060 "cds3/core.pyx"
  goto __pyx_L0;

#line 1060 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1060 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1060 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Att.set_text", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1060 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1060 "cds3/core.pyx"
  __pyx_L0:;

#line 1060 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1060 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1060 "cds3/core.pyx"
  return __pyx_r;

#line 1060 "cds3/core.pyx"
}

#line 1060 "cds3/core.pyx"


#line 1060 "cds3/core.pyx"
/* Python wrapper */

#line 1060 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Att_25set_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1060 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Att_24set_value[] = "Att.set_value(self, CDSDataType type, value)\nSet the value of a CDS attribute.\n        \n        This function will set the value of an attribute by casting the\n        specified value into the data type of the attribute. The functions\n        cds_string_to_array() and cds_array_to_string() are used to convert\n        between text (CDS_CHAR) and numeric data types.\n        \n        Error messages from this function are sent to the message\n        handler (see msngr_init_log() and msngr_init_mail()).\n        \n        @param type - data type of the specified value\n        @param value - pointer to the attribute value\n        \n        @retval 0 if the attribute is locked\n        @retval 0 if a memory allocation error occurred\n        \n        ";

#line 1060 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Att_25set_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CDSDataType __pyx_v_type
#line 1060 "cds3/core.pyx"
;
  PyObject *__pyx_v_value = 0
#line 1060 "cds3/core.pyx"
;

#line 1060 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1060 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1060 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("set_value (wrapper)", 0);

#line 1060 "cds3/core.pyx"
  {

#line 1060 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__type,&__pyx_n_s__value,0};

#line 1060 "cds3/core.pyx"
    PyObject* values[2] = {0,0};

#line 1060 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1060 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 1060 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1060 "cds3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 1060 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1060 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1060 "cds3/core.pyx"
        case  0: break;
        default: 
#line 1060 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1060 "cds3/core.pyx"
      }

#line 1060 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1060 "cds3/core.pyx"
      switch (pos_args) {

#line 1060 "cds3/core.pyx"
        case  0:

#line 1060 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__type)) != 0)) kw_args--;
        else 
#line 1060 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1060 "cds3/core.pyx"
        case  1:

#line 1060 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value)) != 0)) kw_args--;

#line 1060 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_value", 1, 2, 2, 1); 
#line 1060 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1062; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1060 "cds3/core.pyx"
        }

#line 1060 "cds3/core.pyx"
      }

#line 1060 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1060 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_value") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1062; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1060 "cds3/core.pyx"
      }

#line 1060 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 1060 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1060 "cds3/core.pyx"
    } else {

#line 1060 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1060 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1060 "cds3/core.pyx"
    }

#line 1060 "cds3/core.pyx"
    __pyx_v_type = ((CDSDataType)PyInt_AsLong(values[0])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1062; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1060 "cds3/core.pyx"
    __pyx_v_value = values[1];

#line 1060 "cds3/core.pyx"
  }

#line 1060 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1060 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_value", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 1060 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1062; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1060 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1060 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Att.set_value", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1060 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1060 "cds3/core.pyx"
  return NULL;

#line 1060 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1060 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Att_24set_value(((struct __pyx_obj_4cds3_4core_Att *)__pyx_v_self), __pyx_v_type, __pyx_v_value);

#line 1060 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1060 "cds3/core.pyx"
  return __pyx_r;

#line 1060 "cds3/core.pyx"
}

/* "cds3/core.pyx":1062
 *         return cds_set_att_text(self.c_ob, text)
 * 
 *     def set_value(self, CDSDataType type, object value):             # <<<<<<<<<<<<<<
 *         """Set the value of a CDS attribute.
 * 
 */

#line 1062 "cds3/core.pyx"


#line 1062 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Att_24set_value(struct __pyx_obj_4cds3_4core_Att *__pyx_v_self, CDSDataType __pyx_v_type, PyObject *__pyx_v_value) {
  PyArrayObject *__pyx_v_value_nd = 0
#line 1062 "cds3/core.pyx"
;

#line 1062 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1062 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("set_value", 0);

  /* "cds3/core.pyx":1080
 * 
 *         """
 *         cdef np.ndarray value_nd = np.asarray(value, cds_type_to_dtype_obj(type))             # <<<<<<<<<<<<<<
 *         if value_nd.ndim == 0:
 *             value_nd = value_nd[None] # add dummy dimension to a scalar value
 */

#line 1080 "cds3/core.pyx"
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1080 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1080 "cds3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__asarray); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1080 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1080 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1080 "cds3/core.pyx"
  __pyx_t_1 = ((PyObject *)__pyx_f_4cds3_4core_cds_type_to_dtype_obj(__pyx_v_type)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1080 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1080 "cds3/core.pyx"
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1080 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 1080 "cds3/core.pyx"
  __Pyx_INCREF(__pyx_v_value);

#line 1080 "cds3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_value);

#line 1080 "cds3/core.pyx"
  __Pyx_GIVEREF(__pyx_v_value);

#line 1080 "cds3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);

#line 1080 "cds3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 1080 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 1080 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1080 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1080 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1080 "cds3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 1080 "cds3/core.pyx"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1080 "cds3/core.pyx"
  __pyx_v_value_nd = ((PyArrayObject *)__pyx_t_1);

#line 1080 "cds3/core.pyx"
  __pyx_t_1 = 0;

  /* "cds3/core.pyx":1081
 *         """
 *         cdef np.ndarray value_nd = np.asarray(value, cds_type_to_dtype_obj(type))
 *         if value_nd.ndim == 0:             # <<<<<<<<<<<<<<
 *             value_nd = value_nd[None] # add dummy dimension to a scalar value
 *         assert value_nd.ndim == 1
 */

#line 1081 "cds3/core.pyx"
  __pyx_t_4 = (__pyx_v_value_nd->nd == 0);

#line 1081 "cds3/core.pyx"
  if (__pyx_t_4) {

    /* "cds3/core.pyx":1082
 *         cdef np.ndarray value_nd = np.asarray(value, cds_type_to_dtype_obj(type))
 *         if value_nd.ndim == 0:
 *             value_nd = value_nd[None] # add dummy dimension to a scalar value             # <<<<<<<<<<<<<<
 *         assert value_nd.ndim == 1
 *         return cds_set_att_value(self.c_ob, type, len(value_nd),
 */

#line 1082 "cds3/core.pyx"
    __pyx_t_1 = PyObject_GetItem(((PyObject *)__pyx_v_value_nd), Py_None); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1082; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1082 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 1082 "cds3/core.pyx"
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1082; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1082 "cds3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_v_value_nd));

#line 1082 "cds3/core.pyx"
    __pyx_v_value_nd = ((PyArrayObject *)__pyx_t_1);

#line 1082 "cds3/core.pyx"
    __pyx_t_1 = 0;

#line 1082 "cds3/core.pyx"
    goto __pyx_L3;

#line 1082 "cds3/core.pyx"
  }

#line 1082 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":1083
 *         if value_nd.ndim == 0:
 *             value_nd = value_nd[None] # add dummy dimension to a scalar value
 *         assert value_nd.ndim == 1             # <<<<<<<<<<<<<<
 *         return cds_set_att_value(self.c_ob, type, len(value_nd),
 *                 value_nd.data)
 */

#line 1083 "cds3/core.pyx"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 1083 "cds3/core.pyx"
  if (unlikely(!(__pyx_v_value_nd->nd == 1))) {

#line 1083 "cds3/core.pyx"
    PyErr_SetNone(PyExc_AssertionError);

#line 1083 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1083; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1083 "cds3/core.pyx"
  }

#line 1083 "cds3/core.pyx"
  #endif

  /* "cds3/core.pyx":1084
 *             value_nd = value_nd[None] # add dummy dimension to a scalar value
 *         assert value_nd.ndim == 1
 *         return cds_set_att_value(self.c_ob, type, len(value_nd),             # <<<<<<<<<<<<<<
 *                 value_nd.data)
 * 
 */

#line 1084 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1084 "cds3/core.pyx"
  __pyx_t_5 = PyObject_Length(((PyObject *)__pyx_v_value_nd)); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1084; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "cds3/core.pyx":1085
 *         assert value_nd.ndim == 1
 *         return cds_set_att_value(self.c_ob, type, len(value_nd),
 *                 value_nd.data)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1085 "cds3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(cds_set_att_value(__pyx_v_self->c_ob, __pyx_v_type, __pyx_t_5, __pyx_v_value_nd->data)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1084; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1085 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1085 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 1085 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 1085 "cds3/core.pyx"
  goto __pyx_L0;

#line 1085 "cds3/core.pyx"


#line 1085 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1085 "cds3/core.pyx"
  goto __pyx_L0;

#line 1085 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1085 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1085 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1085 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 1085 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Att.set_value", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1085 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1085 "cds3/core.pyx"
  __pyx_L0:;

#line 1085 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_value_nd);

#line 1085 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1085 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1085 "cds3/core.pyx"
  return __pyx_r;

#line 1085 "cds3/core.pyx"
}

#line 1085 "cds3/core.pyx"


#line 1085 "cds3/core.pyx"
/* Python wrapper */

#line 1085 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_1delete(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1085 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_delete[] = "Var.delete(Var var)\nDelete a CDS Variable.\n        \n        Error messages from this function are sent to the message\n        handler (see msngr_init_log() and msngr_init_mail()).\n        \n        @param var - pointer to the variable\n        \n        @retval 1 if the variable was deleted\n        @retval 0 if the variable is locked\n        @retval 0 if the group is locked\n        \n        ";
static PyMethodDef __pyx_mdef_4cds3_4core_3Var_1delete = 
#line 1085 "cds3/core.pyx"
{__Pyx_NAMESTR("delete"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_1delete, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_delete)};

#line 1085 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_1delete(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = 0
#line 1085 "cds3/core.pyx"
;

#line 1085 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1085 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1085 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("delete (wrapper)", 0);

#line 1085 "cds3/core.pyx"
  {

#line 1085 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__var,0};

#line 1085 "cds3/core.pyx"
    PyObject* values[1] = {0};

#line 1085 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1085 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 1085 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1085 "cds3/core.pyx"
      switch (pos_args) {
        case  1: 
#line 1085 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1085 "cds3/core.pyx"
        case  0: break;
        default: 
#line 1085 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1085 "cds3/core.pyx"
      }

#line 1085 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1085 "cds3/core.pyx"
      switch (pos_args) {

#line 1085 "cds3/core.pyx"
        case  0:

#line 1085 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__var)) != 0)) kw_args--;
        else 
#line 1085 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1085 "cds3/core.pyx"
      }

#line 1085 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1085 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "delete") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1095; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1085 "cds3/core.pyx"
      }

#line 1085 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {

#line 1085 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1085 "cds3/core.pyx"
    } else {

#line 1085 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1085 "cds3/core.pyx"
    }

#line 1085 "cds3/core.pyx"
    __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)values[0]);

#line 1085 "cds3/core.pyx"
  }

#line 1085 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1085 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("delete", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); 
#line 1085 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1095; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1085 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1085 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1085 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1085 "cds3/core.pyx"
  return NULL;

#line 1085 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1085 "cds3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_var), __pyx_ptype_4cds3_4core_Var, 1, "var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1095; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1085 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_delete(__pyx_v_var);

#line 1085 "cds3/core.pyx"
  goto __pyx_L0;

#line 1085 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1085 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1085 "cds3/core.pyx"
  __pyx_L0:;

#line 1085 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1085 "cds3/core.pyx"
  return __pyx_r;

#line 1085 "cds3/core.pyx"
}

/* "cds3/core.pyx":1095
 *     ###################################################################
 *     @staticmethod
 *     def delete(Var var):             # <<<<<<<<<<<<<<
 *         """Delete a CDS Variable.
 * 
 */

#line 1095 "cds3/core.pyx"


#line 1095 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_delete(struct __pyx_obj_4cds3_4core_Var *__pyx_v_var) {
  int __pyx_v_retval
#line 1095 "cds3/core.pyx"
;

#line 1095 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1095 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("delete", 0);

#line 1095 "cds3/core.pyx"
  __Pyx_INCREF((PyObject *)__pyx_v_var);

  /* "cds3/core.pyx":1108
 * 
 *         """
 *         cdef int retval = cds_delete_var(var.c_ob)             # <<<<<<<<<<<<<<
 *         if retval == 1:
 *             var.set_var(NULL)
 */

#line 1108 "cds3/core.pyx"
  __pyx_v_retval = cds_delete_var(__pyx_v_var->c_ob);

  /* "cds3/core.pyx":1109
 *         """
 *         cdef int retval = cds_delete_var(var.c_ob)
 *         if retval == 1:             # <<<<<<<<<<<<<<
 *             var.set_var(NULL)
 *             del var
 */

#line 1109 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_retval == 1);

#line 1109 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":1110
 *         cdef int retval = cds_delete_var(var.c_ob)
 *         if retval == 1:
 *             var.set_var(NULL)             # <<<<<<<<<<<<<<
 *             del var
 *         return retval
 */

#line 1110 "cds3/core.pyx"
    __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_var->__pyx_base.__pyx_vtab)->set_var(__pyx_v_var, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1110 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1110 "cds3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cds3/core.pyx":1111
 *         if retval == 1:
 *             var.set_var(NULL)
 *             del var             # <<<<<<<<<<<<<<
 *         return retval
 * 
 */

#line 1111 "cds3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_v_var));

#line 1111 "cds3/core.pyx"
    __pyx_v_var = NULL;

#line 1111 "cds3/core.pyx"
    goto __pyx_L3;

#line 1111 "cds3/core.pyx"
  }

#line 1111 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":1112
 *             var.set_var(NULL)
 *             del var
 *         return retval             # <<<<<<<<<<<<<<
 * 
 *     ###################################################################
 */

#line 1112 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1112 "cds3/core.pyx"
  __pyx_t_2 = PyInt_FromLong(__pyx_v_retval); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1112 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1112 "cds3/core.pyx"
  __pyx_r = __pyx_t_2;

#line 1112 "cds3/core.pyx"
  __pyx_t_2 = 0;

#line 1112 "cds3/core.pyx"
  goto __pyx_L0;

#line 1112 "cds3/core.pyx"


#line 1112 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1112 "cds3/core.pyx"
  goto __pyx_L0;

#line 1112 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1112 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1112 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1112 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1112 "cds3/core.pyx"
  __pyx_L0:;

#line 1112 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_var);

#line 1112 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1112 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1112 "cds3/core.pyx"
  return __pyx_r;

#line 1112 "cds3/core.pyx"
}

#line 1112 "cds3/core.pyx"


#line 1112 "cds3/core.pyx"
/* Python wrapper */

#line 1112 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_3Var_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1112 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_3Var_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

#line 1112 "cds3/core.pyx"
  int __pyx_r;

#line 1112 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1112 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 1112 "cds3/core.pyx"
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;
#line 1112 "cds3/core.pyx"
}

#line 1112 "cds3/core.pyx"
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = 
#line 1112 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_2__cinit__(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self));

#line 1112 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1112 "cds3/core.pyx"
  return __pyx_r;

#line 1112 "cds3/core.pyx"
}

/* "cds3/core.pyx":1118
 *     ###################################################################
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         """TODO"""
 *         self.c_ob = NULL
 */

#line 1118 "cds3/core.pyx"


#line 1118 "cds3/core.pyx"
static int __pyx_pf_4cds3_4core_3Var_2__cinit__(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self) {

#line 1118 "cds3/core.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations

#line 1118 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cds3/core.pyx":1120
 *     def __cinit__(self):
 *         """TODO"""
 *         self.c_ob = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */

#line 1120 "cds3/core.pyx"
  __pyx_v_self->c_ob = NULL;

#line 1120 "cds3/core.pyx"


#line 1120 "cds3/core.pyx"
  __pyx_r = 0;

#line 1120 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1120 "cds3/core.pyx"
  return __pyx_r;

#line 1120 "cds3/core.pyx"
}

#line 1120 "cds3/core.pyx"


#line 1120 "cds3/core.pyx"
/* Python wrapper */

#line 1120 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_3Var_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1120 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_4__init__[] = "TODO";

#line 1120 "cds3/core.pyx"
#if CYTHON_COMPILING_IN_CPYTHON

#line 1120 "cds3/core.pyx"
struct wrapperbase __pyx_wrapperbase_4cds3_4core_3Var_4__init__;

#line 1120 "cds3/core.pyx"
#endif

#line 1120 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_3Var_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

#line 1120 "cds3/core.pyx"
  int __pyx_r;

#line 1120 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1120 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);

#line 1120 "cds3/core.pyx"
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;
#line 1120 "cds3/core.pyx"
}

#line 1120 "cds3/core.pyx"
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = 
#line 1120 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_4__init__(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self));

#line 1120 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1120 "cds3/core.pyx"
  return __pyx_r;

#line 1120 "cds3/core.pyx"
}

/* "cds3/core.pyx":1122
 *         self.c_ob = NULL
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """TODO"""
 *         pass
 */

#line 1122 "cds3/core.pyx"


#line 1122 "cds3/core.pyx"
static int __pyx_pf_4cds3_4core_3Var_4__init__(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_Var *__pyx_v_self) {

#line 1122 "cds3/core.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations

#line 1122 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__init__", 0);

#line 1122 "cds3/core.pyx"


#line 1122 "cds3/core.pyx"
  __pyx_r = 0;

#line 1122 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1122 "cds3/core.pyx"
  return __pyx_r;

#line 1122 "cds3/core.pyx"
}

/* "cds3/core.pyx":1126
 *         pass
 * 
 *     cdef set_var(self, CDSVar *var):             # <<<<<<<<<<<<<<
 *         """TODO"""
 *         self.cds_object = <CDSObject*>var
 */

#line 1126 "cds3/core.pyx"


#line 1126 "cds3/core.pyx"
static PyObject *__pyx_f_4cds3_4core_3Var_set_var(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, struct CDSVar *__pyx_v_var) {

#line 1126 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations

#line 1126 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("set_var", 0);

  /* "cds3/core.pyx":1128
 *     cdef set_var(self, CDSVar *var):
 *         """TODO"""
 *         self.cds_object = <CDSObject*>var             # <<<<<<<<<<<<<<
 *         self.c_ob = var
 * 
 */

#line 1128 "cds3/core.pyx"
  __pyx_v_self->__pyx_base.cds_object = ((struct CDSObject *)__pyx_v_var);

  /* "cds3/core.pyx":1129
 *         """TODO"""
 *         self.cds_object = <CDSObject*>var
 *         self.c_ob = var             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */

#line 1129 "cds3/core.pyx"
  __pyx_v_self->c_ob = __pyx_v_var;

#line 1129 "cds3/core.pyx"


#line 1129 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1129 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1129 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1129 "cds3/core.pyx"
  return __pyx_r;

#line 1129 "cds3/core.pyx"
}

#line 1129 "cds3/core.pyx"


#line 1129 "cds3/core.pyx"
/* Python wrapper */

#line 1129 "cds3/core.pyx"
static void __pyx_pw_4cds3_4core_3Var_7__dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 1129 "cds3/core.pyx"
static void __pyx_pw_4cds3_4core_3Var_7__dealloc__(PyObject *__pyx_v_self) {

#line 1129 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1129 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 1129 "cds3/core.pyx"
  __pyx_pf_4cds3_4core_3Var_6__dealloc__(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self));

#line 1129 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1129 "cds3/core.pyx"
}

/* "cds3/core.pyx":1131
 *         self.c_ob = var
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """TODO"""
 *         pass
 */

#line 1131 "cds3/core.pyx"


#line 1131 "cds3/core.pyx"
static void __pyx_pf_4cds3_4core_3Var_6__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_Var *__pyx_v_self) {
  __Pyx_RefNannyDeclarations

#line 1131 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

#line 1131 "cds3/core.pyx"


#line 1131 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1131 "cds3/core.pyx"
}

#line 1131 "cds3/core.pyx"


#line 1131 "cds3/core.pyx"
/* Python wrapper */

#line 1131 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_9get_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1131 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_8get_type[] = "Var.get_type(self)";

#line 1131 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_9get_type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1131 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1131 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1131 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_type (wrapper)", 0);
  __pyx_r = 
#line 1131 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_8get_type(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self));

#line 1131 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1131 "cds3/core.pyx"
  return __pyx_r;

#line 1131 "cds3/core.pyx"
}

/* "cds3/core.pyx":1139
 *     ###################################################################
 * 
 *     def get_type(self):             # <<<<<<<<<<<<<<
 *         return self.c_ob.type
 * 
 */

#line 1139 "cds3/core.pyx"


#line 1139 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_8get_type(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self) {

#line 1139 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1139 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_type", 0);

  /* "cds3/core.pyx":1140
 * 
 *     def get_type(self):
 *         return self.c_ob.type             # <<<<<<<<<<<<<<
 * 
 *     def get_ndims(self):
 */

#line 1140 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1140 "cds3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->c_ob->type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1140 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1140 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 1140 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 1140 "cds3/core.pyx"
  goto __pyx_L0;

#line 1140 "cds3/core.pyx"


#line 1140 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1140 "cds3/core.pyx"
  goto __pyx_L0;

#line 1140 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1140 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1140 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.get_type", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1140 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1140 "cds3/core.pyx"
  __pyx_L0:;

#line 1140 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1140 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1140 "cds3/core.pyx"
  return __pyx_r;

#line 1140 "cds3/core.pyx"
}

#line 1140 "cds3/core.pyx"


#line 1140 "cds3/core.pyx"
/* Python wrapper */

#line 1140 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_11get_ndims(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1140 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_10get_ndims[] = "Var.get_ndims(self)";

#line 1140 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_11get_ndims(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1140 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1140 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1140 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_ndims (wrapper)", 0);
  __pyx_r = 
#line 1140 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_10get_ndims(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self));

#line 1140 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1140 "cds3/core.pyx"
  return __pyx_r;

#line 1140 "cds3/core.pyx"
}

/* "cds3/core.pyx":1142
 *         return self.c_ob.type
 * 
 *     def get_ndims(self):             # <<<<<<<<<<<<<<
 *         return self.c_ob.ndims
 * 
 */

#line 1142 "cds3/core.pyx"


#line 1142 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_10get_ndims(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self) {

#line 1142 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1142 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_ndims", 0);

  /* "cds3/core.pyx":1143
 * 
 *     def get_ndims(self):
 *         return self.c_ob.ndims             # <<<<<<<<<<<<<<
 * 
 *     def get_dims(self):
 */

#line 1143 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1143 "cds3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->c_ob->ndims); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1143 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1143 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 1143 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 1143 "cds3/core.pyx"
  goto __pyx_L0;

#line 1143 "cds3/core.pyx"


#line 1143 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1143 "cds3/core.pyx"
  goto __pyx_L0;

#line 1143 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1143 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1143 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.get_ndims", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1143 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1143 "cds3/core.pyx"
  __pyx_L0:;

#line 1143 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1143 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1143 "cds3/core.pyx"
  return __pyx_r;

#line 1143 "cds3/core.pyx"
}

#line 1143 "cds3/core.pyx"


#line 1143 "cds3/core.pyx"
/* Python wrapper */

#line 1143 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_13get_dims(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1143 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_12get_dims[] = "Var.get_dims(self)";

#line 1143 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_13get_dims(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1143 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1143 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1143 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_dims (wrapper)", 0);
  __pyx_r = 
#line 1143 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_12get_dims(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self));

#line 1143 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1143 "cds3/core.pyx"
  return __pyx_r;

#line 1143 "cds3/core.pyx"
}

/* "cds3/core.pyx":1145
 *         return self.c_ob.ndims
 * 
 *     def get_dims(self):             # <<<<<<<<<<<<<<
 *         cdef int ndims = self.c_ob.ndims
 *         cdef Dim dim
 */

#line 1145 "cds3/core.pyx"


#line 1145 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_12get_dims(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self) {
  int __pyx_v_ndims
#line 1145 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Dim *__pyx_v_dim = 0
#line 1145 "cds3/core.pyx"
;
  PyObject *__pyx_v_dims = NULL
#line 1145 "cds3/core.pyx"
;
  int __pyx_v_i
#line 1145 "cds3/core.pyx"
;

#line 1145 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1145 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_dims", 0);

  /* "cds3/core.pyx":1146
 * 
 *     def get_dims(self):
 *         cdef int ndims = self.c_ob.ndims             # <<<<<<<<<<<<<<
 *         cdef Dim dim
 *         dims = []
 */

#line 1146 "cds3/core.pyx"
  __pyx_t_1 = __pyx_v_self->c_ob->ndims;

#line 1146 "cds3/core.pyx"
  __pyx_v_ndims = __pyx_t_1;

  /* "cds3/core.pyx":1148
 *         cdef int ndims = self.c_ob.ndims
 *         cdef Dim dim
 *         dims = []             # <<<<<<<<<<<<<<
 *         for i in range(ndims):
 *             dim = Dim()
 */

#line 1148 "cds3/core.pyx"
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1148 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1148 "cds3/core.pyx"
  __pyx_v_dims = ((PyObject*)__pyx_t_2);

#line 1148 "cds3/core.pyx"
  __pyx_t_2 = 0;

  /* "cds3/core.pyx":1149
 *         cdef Dim dim
 *         dims = []
 *         for i in range(ndims):             # <<<<<<<<<<<<<<
 *             dim = Dim()
 *             dim.set_dim(self.c_ob.dims[i])
 */

#line 1149 "cds3/core.pyx"
  __pyx_t_1 = __pyx_v_ndims;

#line 1149 "cds3/core.pyx"
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_1; __pyx_t_3+=1) {

#line 1149 "cds3/core.pyx"
    __pyx_v_i = __pyx_t_3;

    /* "cds3/core.pyx":1150
 *         dims = []
 *         for i in range(ndims):
 *             dim = Dim()             # <<<<<<<<<<<<<<
 *             dim.set_dim(self.c_ob.dims[i])
 *             dims.append(dim)
 */

#line 1150 "cds3/core.pyx"
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Dim)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1150 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1150 "cds3/core.pyx"
    __Pyx_XDECREF(((PyObject *)__pyx_v_dim));

#line 1150 "cds3/core.pyx"
    __pyx_v_dim = ((struct __pyx_obj_4cds3_4core_Dim *)__pyx_t_2);

#line 1150 "cds3/core.pyx"
    __pyx_t_2 = 0;

    /* "cds3/core.pyx":1151
 *         for i in range(ndims):
 *             dim = Dim()
 *             dim.set_dim(self.c_ob.dims[i])             # <<<<<<<<<<<<<<
 *             dims.append(dim)
 *         return dims
 */

#line 1151 "cds3/core.pyx"
    __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Dim *)__pyx_v_dim->__pyx_base.__pyx_vtab)->set_dim(__pyx_v_dim, (__pyx_v_self->c_ob->dims[__pyx_v_i])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1151 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1151 "cds3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cds3/core.pyx":1152
 *             dim = Dim()
 *             dim.set_dim(self.c_ob.dims[i])
 *             dims.append(dim)             # <<<<<<<<<<<<<<
 *         return dims
 * 
 */

#line 1152 "cds3/core.pyx"
    __pyx_t_4 = PyList_Append(__pyx_v_dims, ((PyObject *)__pyx_v_dim)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1152 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":1153
 *             dim.set_dim(self.c_ob.dims[i])
 *             dims.append(dim)
 *         return dims             # <<<<<<<<<<<<<<
 * 
 *     def get_natts(self):
 */

#line 1153 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1153 "cds3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_dims));

#line 1153 "cds3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_dims);

#line 1153 "cds3/core.pyx"
  goto __pyx_L0;

#line 1153 "cds3/core.pyx"


#line 1153 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1153 "cds3/core.pyx"
  goto __pyx_L0;

#line 1153 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1153 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1153 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.get_dims", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1153 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1153 "cds3/core.pyx"
  __pyx_L0:;

#line 1153 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_dim);

#line 1153 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_v_dims);

#line 1153 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1153 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1153 "cds3/core.pyx"
  return __pyx_r;

#line 1153 "cds3/core.pyx"
}

#line 1153 "cds3/core.pyx"


#line 1153 "cds3/core.pyx"
/* Python wrapper */

#line 1153 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_15get_natts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1153 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_14get_natts[] = "Var.get_natts(self)";

#line 1153 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_15get_natts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1153 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1153 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1153 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_natts (wrapper)", 0);
  __pyx_r = 
#line 1153 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_14get_natts(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self));

#line 1153 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1153 "cds3/core.pyx"
  return __pyx_r;

#line 1153 "cds3/core.pyx"
}

/* "cds3/core.pyx":1155
 *         return dims
 * 
 *     def get_natts(self):             # <<<<<<<<<<<<<<
 *         return self.c_ob.natts
 * 
 */

#line 1155 "cds3/core.pyx"


#line 1155 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_14get_natts(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self) {

#line 1155 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1155 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_natts", 0);

  /* "cds3/core.pyx":1156
 * 
 *     def get_natts(self):
 *         return self.c_ob.natts             # <<<<<<<<<<<<<<
 * 
 *     def get_atts(self):
 */

#line 1156 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1156 "cds3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->c_ob->natts); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1156 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1156 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 1156 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 1156 "cds3/core.pyx"
  goto __pyx_L0;

#line 1156 "cds3/core.pyx"


#line 1156 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1156 "cds3/core.pyx"
  goto __pyx_L0;

#line 1156 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1156 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1156 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.get_natts", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1156 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1156 "cds3/core.pyx"
  __pyx_L0:;

#line 1156 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1156 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1156 "cds3/core.pyx"
  return __pyx_r;

#line 1156 "cds3/core.pyx"
}

#line 1156 "cds3/core.pyx"


#line 1156 "cds3/core.pyx"
/* Python wrapper */

#line 1156 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_17get_atts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1156 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_16get_atts[] = "Var.get_atts(self)";

#line 1156 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_17get_atts(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1156 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1156 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1156 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_atts (wrapper)", 0);
  __pyx_r = 
#line 1156 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_16get_atts(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self));

#line 1156 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1156 "cds3/core.pyx"
  return __pyx_r;

#line 1156 "cds3/core.pyx"
}

/* "cds3/core.pyx":1158
 *         return self.c_ob.natts
 * 
 *     def get_atts(self):             # <<<<<<<<<<<<<<
 *         cdef int natts = self.c_ob.natts
 *         cdef Att att
 */

#line 1158 "cds3/core.pyx"


#line 1158 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_16get_atts(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self) {
  int __pyx_v_natts
#line 1158 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Att *__pyx_v_att = 0
#line 1158 "cds3/core.pyx"
;
  PyObject *__pyx_v_atts = NULL
#line 1158 "cds3/core.pyx"
;
  int __pyx_v_i
#line 1158 "cds3/core.pyx"
;

#line 1158 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1158 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_atts", 0);

  /* "cds3/core.pyx":1159
 * 
 *     def get_atts(self):
 *         cdef int natts = self.c_ob.natts             # <<<<<<<<<<<<<<
 *         cdef Att att
 *         atts = []
 */

#line 1159 "cds3/core.pyx"
  __pyx_t_1 = __pyx_v_self->c_ob->natts;

#line 1159 "cds3/core.pyx"
  __pyx_v_natts = __pyx_t_1;

  /* "cds3/core.pyx":1161
 *         cdef int natts = self.c_ob.natts
 *         cdef Att att
 *         atts = []             # <<<<<<<<<<<<<<
 *         for i in range(natts):
 *             att = Att()
 */

#line 1161 "cds3/core.pyx"
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1161 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1161 "cds3/core.pyx"
  __pyx_v_atts = ((PyObject*)__pyx_t_2);

#line 1161 "cds3/core.pyx"
  __pyx_t_2 = 0;

  /* "cds3/core.pyx":1162
 *         cdef Att att
 *         atts = []
 *         for i in range(natts):             # <<<<<<<<<<<<<<
 *             att = Att()
 *             att.set_att(self.c_ob.atts[i])
 */

#line 1162 "cds3/core.pyx"
  __pyx_t_1 = __pyx_v_natts;

#line 1162 "cds3/core.pyx"
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_1; __pyx_t_3+=1) {

#line 1162 "cds3/core.pyx"
    __pyx_v_i = __pyx_t_3;

    /* "cds3/core.pyx":1163
 *         atts = []
 *         for i in range(natts):
 *             att = Att()             # <<<<<<<<<<<<<<
 *             att.set_att(self.c_ob.atts[i])
 *             atts.append(att)
 */

#line 1163 "cds3/core.pyx"
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Att)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1163 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1163 "cds3/core.pyx"
    __Pyx_XDECREF(((PyObject *)__pyx_v_att));

#line 1163 "cds3/core.pyx"
    __pyx_v_att = ((struct __pyx_obj_4cds3_4core_Att *)__pyx_t_2);

#line 1163 "cds3/core.pyx"
    __pyx_t_2 = 0;

    /* "cds3/core.pyx":1164
 *         for i in range(natts):
 *             att = Att()
 *             att.set_att(self.c_ob.atts[i])             # <<<<<<<<<<<<<<
 *             atts.append(att)
 *         return atts
 */

#line 1164 "cds3/core.pyx"
    __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Att *)__pyx_v_att->__pyx_base.__pyx_vtab)->set_att(__pyx_v_att, (__pyx_v_self->c_ob->atts[__pyx_v_i])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1164 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1164 "cds3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "cds3/core.pyx":1165
 *             att = Att()
 *             att.set_att(self.c_ob.atts[i])
 *             atts.append(att)             # <<<<<<<<<<<<<<
 *         return atts
 * 
 */

#line 1165 "cds3/core.pyx"
    __pyx_t_4 = PyList_Append(__pyx_v_atts, ((PyObject *)__pyx_v_att)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1165 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":1166
 *             att.set_att(self.c_ob.atts[i])
 *             atts.append(att)
 *         return atts             # <<<<<<<<<<<<<<
 * 
 *     def get_sample_count(self):
 */

#line 1166 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1166 "cds3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_atts));

#line 1166 "cds3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_atts);

#line 1166 "cds3/core.pyx"
  goto __pyx_L0;

#line 1166 "cds3/core.pyx"


#line 1166 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1166 "cds3/core.pyx"
  goto __pyx_L0;

#line 1166 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1166 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1166 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.get_atts", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1166 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1166 "cds3/core.pyx"
  __pyx_L0:;

#line 1166 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_att);

#line 1166 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_v_atts);

#line 1166 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1166 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1166 "cds3/core.pyx"
  return __pyx_r;

#line 1166 "cds3/core.pyx"
}

#line 1166 "cds3/core.pyx"


#line 1166 "cds3/core.pyx"
/* Python wrapper */

#line 1166 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_19get_sample_count(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1166 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_18get_sample_count[] = "Var.get_sample_count(self)";

#line 1166 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_19get_sample_count(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1166 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1166 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1166 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_sample_count (wrapper)", 0);
  __pyx_r = 
#line 1166 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_18get_sample_count(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self));

#line 1166 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1166 "cds3/core.pyx"
  return __pyx_r;

#line 1166 "cds3/core.pyx"
}

/* "cds3/core.pyx":1168
 *         return atts
 * 
 *     def get_sample_count(self):             # <<<<<<<<<<<<<<
 *         return self.c_ob.sample_count
 * 
 */

#line 1168 "cds3/core.pyx"


#line 1168 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_18get_sample_count(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self) {

#line 1168 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1168 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_sample_count", 0);

  /* "cds3/core.pyx":1169
 * 
 *     def get_sample_count(self):
 *         return self.c_ob.sample_count             # <<<<<<<<<<<<<<
 * 
 *     property sample_count:
 */

#line 1169 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1169 "cds3/core.pyx"
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->c_ob->sample_count); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1169 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1169 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 1169 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 1169 "cds3/core.pyx"
  goto __pyx_L0;

#line 1169 "cds3/core.pyx"


#line 1169 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1169 "cds3/core.pyx"
  goto __pyx_L0;

#line 1169 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1169 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1169 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.get_sample_count", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1169 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1169 "cds3/core.pyx"
  __pyx_L0:;

#line 1169 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1169 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1169 "cds3/core.pyx"
  return __pyx_r;

#line 1169 "cds3/core.pyx"
}

#line 1169 "cds3/core.pyx"


#line 1169 "cds3/core.pyx"
/* Python wrapper */

#line 1169 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_12sample_count_1__get__(PyObject *__pyx_v_self); /*proto*/

#line 1169 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_12sample_count_1__get__(PyObject *__pyx_v_self) {

#line 1169 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1169 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1169 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = 
#line 1169 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_12sample_count___get__(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self));

#line 1169 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1169 "cds3/core.pyx"
  return __pyx_r;

#line 1169 "cds3/core.pyx"
}

/* "cds3/core.pyx":1172
 * 
 *     property sample_count:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.c_ob.sample_count
 * 
 */

#line 1172 "cds3/core.pyx"


#line 1172 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_12sample_count___get__(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self) {

#line 1172 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1172 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "cds3/core.pyx":1173
 *     property sample_count:
 *         def __get__(self):
 *             return self.c_ob.sample_count             # <<<<<<<<<<<<<<
 * 
 *     def get_alloc_count(self):
 */

#line 1173 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1173 "cds3/core.pyx"
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->c_ob->sample_count); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1173 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1173 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 1173 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 1173 "cds3/core.pyx"
  goto __pyx_L0;

#line 1173 "cds3/core.pyx"


#line 1173 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1173 "cds3/core.pyx"
  goto __pyx_L0;

#line 1173 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1173 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1173 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.sample_count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1173 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1173 "cds3/core.pyx"
  __pyx_L0:;

#line 1173 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1173 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1173 "cds3/core.pyx"
  return __pyx_r;

#line 1173 "cds3/core.pyx"
}

#line 1173 "cds3/core.pyx"


#line 1173 "cds3/core.pyx"
/* Python wrapper */

#line 1173 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_21get_alloc_count(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1173 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_20get_alloc_count[] = "Var.get_alloc_count(self)";

#line 1173 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_21get_alloc_count(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1173 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1173 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1173 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_alloc_count (wrapper)", 0);
  __pyx_r = 
#line 1173 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_20get_alloc_count(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self));

#line 1173 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1173 "cds3/core.pyx"
  return __pyx_r;

#line 1173 "cds3/core.pyx"
}

/* "cds3/core.pyx":1175
 *             return self.c_ob.sample_count
 * 
 *     def get_alloc_count(self):             # <<<<<<<<<<<<<<
 *         return self.c_ob.alloc_count
 * 
 */

#line 1175 "cds3/core.pyx"


#line 1175 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_20get_alloc_count(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self) {

#line 1175 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1175 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_alloc_count", 0);

  /* "cds3/core.pyx":1176
 * 
 *     def get_alloc_count(self):
 *         return self.c_ob.alloc_count             # <<<<<<<<<<<<<<
 * 
 *     def get_default_fill(self):
 */

#line 1176 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1176 "cds3/core.pyx"
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->c_ob->alloc_count); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1176 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1176 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 1176 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 1176 "cds3/core.pyx"
  goto __pyx_L0;

#line 1176 "cds3/core.pyx"


#line 1176 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1176 "cds3/core.pyx"
  goto __pyx_L0;

#line 1176 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1176 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1176 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.get_alloc_count", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1176 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1176 "cds3/core.pyx"
  __pyx_L0:;

#line 1176 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1176 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1176 "cds3/core.pyx"
  return __pyx_r;

#line 1176 "cds3/core.pyx"
}

#line 1176 "cds3/core.pyx"


#line 1176 "cds3/core.pyx"
/* Python wrapper */

#line 1176 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_23get_default_fill(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1176 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_22get_default_fill[] = "Var.get_default_fill(self)";

#line 1176 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_23get_default_fill(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1176 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1176 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1176 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_default_fill (wrapper)", 0);
  __pyx_r = 
#line 1176 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_22get_default_fill(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self));

#line 1176 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1176 "cds3/core.pyx"
  return __pyx_r;

#line 1176 "cds3/core.pyx"
}

/* "cds3/core.pyx":1178
 *         return self.c_ob.alloc_count
 * 
 *     def get_default_fill(self):             # <<<<<<<<<<<<<<
 *         cdef void *fill_ptr = self.c_ob.default_fill
 *         cdef CDSDataType type = self.c_ob.type
 */

#line 1178 "cds3/core.pyx"


#line 1178 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_22get_default_fill(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self) {
  void *__pyx_v_fill_ptr
#line 1178 "cds3/core.pyx"
;
  CDSDataType __pyx_v_type
#line 1178 "cds3/core.pyx"
;

#line 1178 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  CDSDataType __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1178 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_default_fill", 0);

  /* "cds3/core.pyx":1179
 * 
 *     def get_default_fill(self):
 *         cdef void *fill_ptr = self.c_ob.default_fill             # <<<<<<<<<<<<<<
 *         cdef CDSDataType type = self.c_ob.type
 *         if fill_ptr == NULL:
 */

#line 1179 "cds3/core.pyx"
  __pyx_t_1 = __pyx_v_self->c_ob->default_fill;

#line 1179 "cds3/core.pyx"
  __pyx_v_fill_ptr = __pyx_t_1;

  /* "cds3/core.pyx":1180
 *     def get_default_fill(self):
 *         cdef void *fill_ptr = self.c_ob.default_fill
 *         cdef CDSDataType type = self.c_ob.type             # <<<<<<<<<<<<<<
 *         if fill_ptr == NULL:
 *             return None
 */

#line 1180 "cds3/core.pyx"
  __pyx_t_2 = __pyx_v_self->c_ob->type;

#line 1180 "cds3/core.pyx"
  __pyx_v_type = __pyx_t_2;

  /* "cds3/core.pyx":1181
 *         cdef void *fill_ptr = self.c_ob.default_fill
 *         cdef CDSDataType type = self.c_ob.type
 *         if fill_ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         elif type == CDS_NAT:
 */

#line 1181 "cds3/core.pyx"
  __pyx_t_3 = (__pyx_v_fill_ptr == NULL);

#line 1181 "cds3/core.pyx"
  if (__pyx_t_3) {

    /* "cds3/core.pyx":1182
 *         cdef CDSDataType type = self.c_ob.type
 *         if fill_ptr == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         elif type == CDS_NAT:
 *             return None
 */

#line 1182 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1182 "cds3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 1182 "cds3/core.pyx"
    __pyx_r = Py_None;

#line 1182 "cds3/core.pyx"
    goto __pyx_L0;

#line 1182 "cds3/core.pyx"
    goto __pyx_L3;

#line 1182 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":1183
 *         if fill_ptr == NULL:
 *             return None
 *         elif type == CDS_NAT:             # <<<<<<<<<<<<<<
 *             return None
 *         elif type == CDS_CHAR:
 */

#line 1183 "cds3/core.pyx"
  __pyx_t_3 = (__pyx_v_type == CDS_NAT);

#line 1183 "cds3/core.pyx"
  if (__pyx_t_3) {

    /* "cds3/core.pyx":1184
 *             return None
 *         elif type == CDS_NAT:
 *             return None             # <<<<<<<<<<<<<<
 *         elif type == CDS_CHAR:
 *             return (<char*>fill_ptr)[0]
 */

#line 1184 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1184 "cds3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 1184 "cds3/core.pyx"
    __pyx_r = Py_None;

#line 1184 "cds3/core.pyx"
    goto __pyx_L0;

#line 1184 "cds3/core.pyx"
    goto __pyx_L3;

#line 1184 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":1185
 *         elif type == CDS_NAT:
 *             return None
 *         elif type == CDS_CHAR:             # <<<<<<<<<<<<<<
 *             return (<char*>fill_ptr)[0]
 *         elif type == CDS_BYTE:
 */

#line 1185 "cds3/core.pyx"
  __pyx_t_3 = (__pyx_v_type == CDS_CHAR);

#line 1185 "cds3/core.pyx"
  if (__pyx_t_3) {

    /* "cds3/core.pyx":1186
 *             return None
 *         elif type == CDS_CHAR:
 *             return (<char*>fill_ptr)[0]             # <<<<<<<<<<<<<<
 *         elif type == CDS_BYTE:
 *             return (<signed char*>fill_ptr)[0]
 */

#line 1186 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1186 "cds3/core.pyx"
    __pyx_t_4 = PyInt_FromLong((((char *)__pyx_v_fill_ptr)[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1186 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 1186 "cds3/core.pyx"
    __pyx_r = __pyx_t_4;

#line 1186 "cds3/core.pyx"
    __pyx_t_4 = 0;

#line 1186 "cds3/core.pyx"
    goto __pyx_L0;

#line 1186 "cds3/core.pyx"
    goto __pyx_L3;

#line 1186 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":1187
 *         elif type == CDS_CHAR:
 *             return (<char*>fill_ptr)[0]
 *         elif type == CDS_BYTE:             # <<<<<<<<<<<<<<
 *             return (<signed char*>fill_ptr)[0]
 *         elif type == CDS_SHORT:
 */

#line 1187 "cds3/core.pyx"
  __pyx_t_3 = (__pyx_v_type == CDS_BYTE);

#line 1187 "cds3/core.pyx"
  if (__pyx_t_3) {

    /* "cds3/core.pyx":1188
 *             return (<char*>fill_ptr)[0]
 *         elif type == CDS_BYTE:
 *             return (<signed char*>fill_ptr)[0]             # <<<<<<<<<<<<<<
 *         elif type == CDS_SHORT:
 *             return (<short*>fill_ptr)[0]
 */

#line 1188 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1188 "cds3/core.pyx"
    __pyx_t_4 = PyInt_FromLong((((signed char *)__pyx_v_fill_ptr)[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1188 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 1188 "cds3/core.pyx"
    __pyx_r = __pyx_t_4;

#line 1188 "cds3/core.pyx"
    __pyx_t_4 = 0;

#line 1188 "cds3/core.pyx"
    goto __pyx_L0;

#line 1188 "cds3/core.pyx"
    goto __pyx_L3;

#line 1188 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":1189
 *         elif type == CDS_BYTE:
 *             return (<signed char*>fill_ptr)[0]
 *         elif type == CDS_SHORT:             # <<<<<<<<<<<<<<
 *             return (<short*>fill_ptr)[0]
 *         elif type == CDS_INT:
 */

#line 1189 "cds3/core.pyx"
  __pyx_t_3 = (__pyx_v_type == CDS_SHORT);

#line 1189 "cds3/core.pyx"
  if (__pyx_t_3) {

    /* "cds3/core.pyx":1190
 *             return (<signed char*>fill_ptr)[0]
 *         elif type == CDS_SHORT:
 *             return (<short*>fill_ptr)[0]             # <<<<<<<<<<<<<<
 *         elif type == CDS_INT:
 *             return (<int*>fill_ptr)[0]
 */

#line 1190 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1190 "cds3/core.pyx"
    __pyx_t_4 = PyInt_FromLong((((short *)__pyx_v_fill_ptr)[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1190 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 1190 "cds3/core.pyx"
    __pyx_r = __pyx_t_4;

#line 1190 "cds3/core.pyx"
    __pyx_t_4 = 0;

#line 1190 "cds3/core.pyx"
    goto __pyx_L0;

#line 1190 "cds3/core.pyx"
    goto __pyx_L3;

#line 1190 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":1191
 *         elif type == CDS_SHORT:
 *             return (<short*>fill_ptr)[0]
 *         elif type == CDS_INT:             # <<<<<<<<<<<<<<
 *             return (<int*>fill_ptr)[0]
 *         elif type == CDS_FLOAT:
 */

#line 1191 "cds3/core.pyx"
  __pyx_t_3 = (__pyx_v_type == CDS_INT);

#line 1191 "cds3/core.pyx"
  if (__pyx_t_3) {

    /* "cds3/core.pyx":1192
 *             return (<short*>fill_ptr)[0]
 *         elif type == CDS_INT:
 *             return (<int*>fill_ptr)[0]             # <<<<<<<<<<<<<<
 *         elif type == CDS_FLOAT:
 *             return (<float*>fill_ptr)[0]
 */

#line 1192 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1192 "cds3/core.pyx"
    __pyx_t_4 = PyInt_FromLong((((int *)__pyx_v_fill_ptr)[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1192 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 1192 "cds3/core.pyx"
    __pyx_r = __pyx_t_4;

#line 1192 "cds3/core.pyx"
    __pyx_t_4 = 0;

#line 1192 "cds3/core.pyx"
    goto __pyx_L0;

#line 1192 "cds3/core.pyx"
    goto __pyx_L3;

#line 1192 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":1193
 *         elif type == CDS_INT:
 *             return (<int*>fill_ptr)[0]
 *         elif type == CDS_FLOAT:             # <<<<<<<<<<<<<<
 *             return (<float*>fill_ptr)[0]
 *         elif type == CDS_DOUBLE:
 */

#line 1193 "cds3/core.pyx"
  __pyx_t_3 = (__pyx_v_type == CDS_FLOAT);

#line 1193 "cds3/core.pyx"
  if (__pyx_t_3) {

    /* "cds3/core.pyx":1194
 *             return (<int*>fill_ptr)[0]
 *         elif type == CDS_FLOAT:
 *             return (<float*>fill_ptr)[0]             # <<<<<<<<<<<<<<
 *         elif type == CDS_DOUBLE:
 *             return (<double*>fill_ptr)[0]
 */

#line 1194 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1194 "cds3/core.pyx"
    __pyx_t_4 = PyFloat_FromDouble((((float *)__pyx_v_fill_ptr)[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1194 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 1194 "cds3/core.pyx"
    __pyx_r = __pyx_t_4;

#line 1194 "cds3/core.pyx"
    __pyx_t_4 = 0;

#line 1194 "cds3/core.pyx"
    goto __pyx_L0;

#line 1194 "cds3/core.pyx"
    goto __pyx_L3;

#line 1194 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":1195
 *         elif type == CDS_FLOAT:
 *             return (<float*>fill_ptr)[0]
 *         elif type == CDS_DOUBLE:             # <<<<<<<<<<<<<<
 *             return (<double*>fill_ptr)[0]
 * 
 */

#line 1195 "cds3/core.pyx"
  __pyx_t_3 = (__pyx_v_type == CDS_DOUBLE);

#line 1195 "cds3/core.pyx"
  if (__pyx_t_3) {

    /* "cds3/core.pyx":1196
 *             return (<float*>fill_ptr)[0]
 *         elif type == CDS_DOUBLE:
 *             return (<double*>fill_ptr)[0]             # <<<<<<<<<<<<<<
 * 
 *     ###################################################################
 */

#line 1196 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1196 "cds3/core.pyx"
    __pyx_t_4 = PyFloat_FromDouble((((double *)__pyx_v_fill_ptr)[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1196 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 1196 "cds3/core.pyx"
    __pyx_r = __pyx_t_4;

#line 1196 "cds3/core.pyx"
    __pyx_t_4 = 0;

#line 1196 "cds3/core.pyx"
    goto __pyx_L0;

#line 1196 "cds3/core.pyx"
    goto __pyx_L3;

#line 1196 "cds3/core.pyx"
  }

#line 1196 "cds3/core.pyx"
  __pyx_L3:;

#line 1196 "cds3/core.pyx"


#line 1196 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1196 "cds3/core.pyx"
  goto __pyx_L0;

#line 1196 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1196 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 1196 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.get_default_fill", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1196 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1196 "cds3/core.pyx"
  __pyx_L0:;

#line 1196 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1196 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1196 "cds3/core.pyx"
  return __pyx_r;

#line 1196 "cds3/core.pyx"
}

#line 1196 "cds3/core.pyx"


#line 1196 "cds3/core.pyx"
/* Python wrapper */

#line 1196 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_25get_coord_var(PyObject *__pyx_v_self, PyObject *__pyx_arg_dim_index); /*proto*/

#line 1196 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_24get_coord_var[] = "Var.get_coord_var(self, int dim_index)\nGet the coordinate variable for a CDS Variable's dimension.\n        \n        @param dim_index - index of the dimension to get the coordinate\n        variable for\n        \n        @retval pointer to the coordinate variable\n        @retval None if not found\n        \n        ";

#line 1196 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_25get_coord_var(PyObject *__pyx_v_self, PyObject *__pyx_arg_dim_index) {
  int __pyx_v_dim_index
#line 1196 "cds3/core.pyx"
;

#line 1196 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1196 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1196 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_coord_var (wrapper)", 0);

#line 1196 "cds3/core.pyx"
  assert(__pyx_arg_dim_index); {

#line 1196 "cds3/core.pyx"
    __pyx_v_dim_index = __Pyx_PyInt_AsInt(__pyx_arg_dim_index); if (unlikely((__pyx_v_dim_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1202; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1196 "cds3/core.pyx"
  }

#line 1196 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1196 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1196 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.get_coord_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1196 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1196 "cds3/core.pyx"
  return NULL;

#line 1196 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1196 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_24get_coord_var(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self), ((int)__pyx_v_dim_index));

#line 1196 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1196 "cds3/core.pyx"
  return __pyx_r;

#line 1196 "cds3/core.pyx"
}

/* "cds3/core.pyx":1202
 *     ###################################################################
 * 
 *     def get_coord_var(self, int dim_index):             # <<<<<<<<<<<<<<
 *         """Get the coordinate variable for a CDS Variable's dimension.
 * 
 */

#line 1202 "cds3/core.pyx"


#line 1202 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_24get_coord_var(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, int __pyx_v_dim_index) {
  struct CDSVar *__pyx_v_c_var
#line 1202 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = NULL
#line 1202 "cds3/core.pyx"
;

#line 1202 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1202 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_coord_var", 0);

  /* "cds3/core.pyx":1212
 * 
 *         """
 *         cdef CDSVar *c_var = cds_get_coord_var(self.c_ob, dim_index)             # <<<<<<<<<<<<<<
 *         if c_var == NULL:
 *             return None
 */

#line 1212 "cds3/core.pyx"
  __pyx_v_c_var = cds_get_coord_var(__pyx_v_self->c_ob, __pyx_v_dim_index);

  /* "cds3/core.pyx":1213
 *         """
 *         cdef CDSVar *c_var = cds_get_coord_var(self.c_ob, dim_index)
 *         if c_var == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         var = Var()
 */

#line 1213 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_c_var == NULL);

#line 1213 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":1214
 *         cdef CDSVar *c_var = cds_get_coord_var(self.c_ob, dim_index)
 *         if c_var == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         var = Var()
 *         var.set_var(c_var)
 */

#line 1214 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1214 "cds3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 1214 "cds3/core.pyx"
    __pyx_r = Py_None;

#line 1214 "cds3/core.pyx"
    goto __pyx_L0;

#line 1214 "cds3/core.pyx"
    goto __pyx_L3;

#line 1214 "cds3/core.pyx"
  }

#line 1214 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":1215
 *         if c_var == NULL:
 *             return None
 *         var = Var()             # <<<<<<<<<<<<<<
 *         var.set_var(c_var)
 *         return var
 */

#line 1215 "cds3/core.pyx"
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Var)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1215 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1215 "cds3/core.pyx"
  __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)__pyx_t_2);

#line 1215 "cds3/core.pyx"
  __pyx_t_2 = 0;

  /* "cds3/core.pyx":1216
 *             return None
 *         var = Var()
 *         var.set_var(c_var)             # <<<<<<<<<<<<<<
 *         return var
 * 
 */

#line 1216 "cds3/core.pyx"
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_var->__pyx_base.__pyx_vtab)->set_var(__pyx_v_var, __pyx_v_c_var); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1216 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1216 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cds3/core.pyx":1217
 *         var = Var()
 *         var.set_var(c_var)
 *         return var             # <<<<<<<<<<<<<<
 * 
 *     def rename(self, char *name):
 */

#line 1217 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1217 "cds3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_var));

#line 1217 "cds3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_var);

#line 1217 "cds3/core.pyx"
  goto __pyx_L0;

#line 1217 "cds3/core.pyx"


#line 1217 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1217 "cds3/core.pyx"
  goto __pyx_L0;

#line 1217 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1217 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1217 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.get_coord_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1217 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1217 "cds3/core.pyx"
  __pyx_L0:;

#line 1217 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_var);

#line 1217 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1217 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1217 "cds3/core.pyx"
  return __pyx_r;

#line 1217 "cds3/core.pyx"
}

#line 1217 "cds3/core.pyx"


#line 1217 "cds3/core.pyx"
/* Python wrapper */

#line 1217 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_27rename(PyObject *__pyx_v_self, PyObject *__pyx_arg_name); /*proto*/

#line 1217 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_26rename[] = "Var.rename(self, char *name)\nRename a CDS Variable.\n        \n        Error messages from this function are sent to the message handler\n        (see msngr_init_log() and msngr_init_mail()).\n        \n        @param name - pointer to the new variable name\n        \n        @retval 1 if the variable was renamed\n        @retval 0 if a variable with the new name already exists\n        @retval 0 if the variable is locked\n        @retval 0 if the group is locked\n        @retval 0 if a memory allocation error occured\n        \n        ";

#line 1217 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_27rename(PyObject *__pyx_v_self, PyObject *__pyx_arg_name) {
  char *__pyx_v_name
#line 1217 "cds3/core.pyx"
;

#line 1217 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1217 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1217 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("rename (wrapper)", 0);

#line 1217 "cds3/core.pyx"
  assert(__pyx_arg_name); {

#line 1217 "cds3/core.pyx"
    __pyx_v_name = PyBytes_AsString(__pyx_arg_name); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1219; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1217 "cds3/core.pyx"
  }

#line 1217 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1217 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1217 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.rename", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1217 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1217 "cds3/core.pyx"
  return NULL;

#line 1217 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1217 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_26rename(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self), ((char *)__pyx_v_name));

#line 1217 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1217 "cds3/core.pyx"
  return __pyx_r;

#line 1217 "cds3/core.pyx"
}

/* "cds3/core.pyx":1219
 *         return var
 * 
 *     def rename(self, char *name):             # <<<<<<<<<<<<<<
 *         """Rename a CDS Variable.
 * 
 */

#line 1219 "cds3/core.pyx"


#line 1219 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_26rename(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, char *__pyx_v_name) {

#line 1219 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1219 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("rename", 0);

  /* "cds3/core.pyx":1234
 * 
 *         """
 *         return cds_rename_var(self.c_ob, name)             # <<<<<<<<<<<<<<
 * 
 *     def is_unlimited(self):
 */

#line 1234 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1234 "cds3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(cds_rename_var(__pyx_v_self->c_ob, __pyx_v_name)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1234 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1234 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 1234 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 1234 "cds3/core.pyx"
  goto __pyx_L0;

#line 1234 "cds3/core.pyx"


#line 1234 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1234 "cds3/core.pyx"
  goto __pyx_L0;

#line 1234 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1234 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1234 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.rename", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1234 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1234 "cds3/core.pyx"
  __pyx_L0:;

#line 1234 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1234 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1234 "cds3/core.pyx"
  return __pyx_r;

#line 1234 "cds3/core.pyx"
}

#line 1234 "cds3/core.pyx"


#line 1234 "cds3/core.pyx"
/* Python wrapper */

#line 1234 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_29is_unlimited(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1234 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_28is_unlimited[] = "Var.is_unlimited(self)\nCheck if a CDS Variable has an unlimited dimension.\n        \n        @retval 1 if the variable has an unlimited dimension\n        @retval 0 if this variable does not have an unlimited dimension\n        \n        ";

#line 1234 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_29is_unlimited(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1234 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1234 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1234 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("is_unlimited (wrapper)", 0);
  __pyx_r = 
#line 1234 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_28is_unlimited(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self));

#line 1234 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1234 "cds3/core.pyx"
  return __pyx_r;

#line 1234 "cds3/core.pyx"
}

/* "cds3/core.pyx":1236
 *         return cds_rename_var(self.c_ob, name)
 * 
 *     def is_unlimited(self):             # <<<<<<<<<<<<<<
 *         """Check if a CDS Variable has an unlimited dimension.
 * 
 */

#line 1236 "cds3/core.pyx"


#line 1236 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_28is_unlimited(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self) {

#line 1236 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1236 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("is_unlimited", 0);

  /* "cds3/core.pyx":1243
 * 
 *         """
 *         return cds_var_is_unlimited(self.c_ob)             # <<<<<<<<<<<<<<
 * 
 *     def has_dim(self, char *name):
 */

#line 1243 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1243 "cds3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(cds_var_is_unlimited(__pyx_v_self->c_ob)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1243 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1243 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 1243 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 1243 "cds3/core.pyx"
  goto __pyx_L0;

#line 1243 "cds3/core.pyx"


#line 1243 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1243 "cds3/core.pyx"
  goto __pyx_L0;

#line 1243 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1243 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1243 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.is_unlimited", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1243 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1243 "cds3/core.pyx"
  __pyx_L0:;

#line 1243 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1243 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1243 "cds3/core.pyx"
  return __pyx_r;

#line 1243 "cds3/core.pyx"
}

#line 1243 "cds3/core.pyx"


#line 1243 "cds3/core.pyx"
/* Python wrapper */

#line 1243 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_31has_dim(PyObject *__pyx_v_self, PyObject *__pyx_arg_name); /*proto*/

#line 1243 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_30has_dim[] = "Var.has_dim(self, char *name)\nCheck if a CDS Variable has the specified dimension.\n        \n        @param name - name of the dimension\n        \n        @retval pointer to the dimension\n        @retval None if not found\n        \n        ";

#line 1243 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_31has_dim(PyObject *__pyx_v_self, PyObject *__pyx_arg_name) {
  char *__pyx_v_name
#line 1243 "cds3/core.pyx"
;

#line 1243 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1243 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1243 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("has_dim (wrapper)", 0);

#line 1243 "cds3/core.pyx"
  assert(__pyx_arg_name); {

#line 1243 "cds3/core.pyx"
    __pyx_v_name = PyBytes_AsString(__pyx_arg_name); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1245; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1243 "cds3/core.pyx"
  }

#line 1243 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1243 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1243 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.has_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1243 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1243 "cds3/core.pyx"
  return NULL;

#line 1243 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1243 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_30has_dim(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self), ((char *)__pyx_v_name));

#line 1243 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1243 "cds3/core.pyx"
  return __pyx_r;

#line 1243 "cds3/core.pyx"
}

/* "cds3/core.pyx":1245
 *         return cds_var_is_unlimited(self.c_ob)
 * 
 *     def has_dim(self, char *name):             # <<<<<<<<<<<<<<
 *         """Check if a CDS Variable has the specified dimension.
 * 
 */

#line 1245 "cds3/core.pyx"


#line 1245 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_30has_dim(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, char *__pyx_v_name) {
  struct CDSDim *__pyx_v_c_dim
#line 1245 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Dim *__pyx_v_dim = NULL
#line 1245 "cds3/core.pyx"
;

#line 1245 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1245 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("has_dim", 0);

  /* "cds3/core.pyx":1254
 * 
 *         """
 *         cdef CDSDim *c_dim = cds_var_has_dim(self.c_ob, name)             # <<<<<<<<<<<<<<
 *         if c_dim == NULL:
 *             return None
 */

#line 1254 "cds3/core.pyx"
  __pyx_v_c_dim = cds_var_has_dim(__pyx_v_self->c_ob, __pyx_v_name);

  /* "cds3/core.pyx":1255
 *         """
 *         cdef CDSDim *c_dim = cds_var_has_dim(self.c_ob, name)
 *         if c_dim == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         dim = Dim()
 */

#line 1255 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_c_dim == NULL);

#line 1255 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":1256
 *         cdef CDSDim *c_dim = cds_var_has_dim(self.c_ob, name)
 *         if c_dim == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         dim = Dim()
 *         dim.set_dim(c_dim)
 */

#line 1256 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1256 "cds3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 1256 "cds3/core.pyx"
    __pyx_r = Py_None;

#line 1256 "cds3/core.pyx"
    goto __pyx_L0;

#line 1256 "cds3/core.pyx"
    goto __pyx_L3;

#line 1256 "cds3/core.pyx"
  }

#line 1256 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":1257
 *         if c_dim == NULL:
 *             return None
 *         dim = Dim()             # <<<<<<<<<<<<<<
 *         dim.set_dim(c_dim)
 *         return dim
 */

#line 1257 "cds3/core.pyx"
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Dim)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1257 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1257 "cds3/core.pyx"
  __pyx_v_dim = ((struct __pyx_obj_4cds3_4core_Dim *)__pyx_t_2);

#line 1257 "cds3/core.pyx"
  __pyx_t_2 = 0;

  /* "cds3/core.pyx":1258
 *             return None
 *         dim = Dim()
 *         dim.set_dim(c_dim)             # <<<<<<<<<<<<<<
 *         return dim
 * 
 */

#line 1258 "cds3/core.pyx"
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Dim *)__pyx_v_dim->__pyx_base.__pyx_vtab)->set_dim(__pyx_v_dim, __pyx_v_c_dim); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1258 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1258 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cds3/core.pyx":1259
 *         dim = Dim()
 *         dim.set_dim(c_dim)
 *         return dim             # <<<<<<<<<<<<<<
 * 
 *     def get_sample_size(self):
 */

#line 1259 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1259 "cds3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_dim));

#line 1259 "cds3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_dim);

#line 1259 "cds3/core.pyx"
  goto __pyx_L0;

#line 1259 "cds3/core.pyx"


#line 1259 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1259 "cds3/core.pyx"
  goto __pyx_L0;

#line 1259 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1259 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1259 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.has_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1259 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1259 "cds3/core.pyx"
  __pyx_L0:;

#line 1259 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_dim);

#line 1259 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1259 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1259 "cds3/core.pyx"
  return __pyx_r;

#line 1259 "cds3/core.pyx"
}

#line 1259 "cds3/core.pyx"


#line 1259 "cds3/core.pyx"
/* Python wrapper */

#line 1259 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_33get_sample_size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1259 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_32get_sample_size[] = "Var.get_sample_size(self)\nGet the sample size of a CDS Variable.\n        \n        The sample dimension is always the first dimension defined\n        for a variable. If this dimension has unlimited length it\n        is also refered to as the record dimension.\n        \n        Variables with less than 2 dimensions will always have a\n        sample_size of 1. The sample_size for variables with 2 or\n        more dimensions is the product of all the dimension lengths\n        starting with the 2nd dimension.\n        \n        @return sample size of the variable\n        \n        ";

#line 1259 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_33get_sample_size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1259 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1259 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1259 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_sample_size (wrapper)", 0);
  __pyx_r = 
#line 1259 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_32get_sample_size(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self));

#line 1259 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1259 "cds3/core.pyx"
  return __pyx_r;

#line 1259 "cds3/core.pyx"
}

/* "cds3/core.pyx":1261
 *         return dim
 * 
 *     def get_sample_size(self):             # <<<<<<<<<<<<<<
 *         """Get the sample size of a CDS Variable.
 * 
 */

#line 1261 "cds3/core.pyx"


#line 1261 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_32get_sample_size(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self) {

#line 1261 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1261 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_sample_size", 0);

  /* "cds3/core.pyx":1276
 * 
 *         """
 *         return cds_var_sample_size(self.c_ob)             # <<<<<<<<<<<<<<
 * 
 *     def alloc_data(self, size_t sample_start, size_t sample_count):
 */

#line 1276 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1276 "cds3/core.pyx"
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(cds_var_sample_size(__pyx_v_self->c_ob)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1276 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1276 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 1276 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 1276 "cds3/core.pyx"
  goto __pyx_L0;

#line 1276 "cds3/core.pyx"


#line 1276 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1276 "cds3/core.pyx"
  goto __pyx_L0;

#line 1276 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1276 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1276 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.get_sample_size", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1276 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1276 "cds3/core.pyx"
  __pyx_L0:;

#line 1276 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1276 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1276 "cds3/core.pyx"
  return __pyx_r;

#line 1276 "cds3/core.pyx"
}

#line 1276 "cds3/core.pyx"


#line 1276 "cds3/core.pyx"
/* Python wrapper */

#line 1276 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_35alloc_data(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1276 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_34alloc_data[] = "Var.alloc_data(self, size_t sample_start, size_t sample_count)\nAllocate memory for a CDS variable's data array.\n        \n        This function will allocate memory as necessary to ensure that the\n        variable's data array is large enough to store another sample_count\n        samples starting from sample_start. The calling process must cast the\n        returned data pointer to the proper data type if it is going to be used\n        directly. The cds_set_var_data() function can be used if the variable's\n        data type is not known at compile time.\n        \n        The data array returned by this function belongs to the CDS variable\n        and will be freed when the variable is destroyed. The calling process\n        must *not* attempt to free this memory.\n        \n        The memory allocated by this function will *not* be initialized. It\n        is the responsibility of the calling process to set the data values.\n        If necessary, the cds_init_array() function can be used to initialize\n        this memory. However, if the specified start sample is greater than the\n        variable's current sample count, the hole between the two will be filled\n        with the first missing value defined for the variable. The search order\n        for missing values is:\n        \n        - missing_value attribute\n        - _FillValue attribute\n        - variable's default missing value\n        \n        If the variable does not have any missing or fill values defined the\n        default fill value for the variable's data type will be used and the\n        default fill value for the variable will be set.\n        \n        This function will also update the length of the variable's first\n        dimension if it is unlimited and its length is less than sample_start\n        plus sample_count.\n        \n        Error messages from this function are sent to the message handler\n        (see msngr_init_log() and msngr_init_mail()).\n        \n        @p""aram sample_start - start sample (0 based indexing)\n        @param sample_count - number of new samples\n        \n        @retval pointer to the specifed start sample in the variable data array\n        @retval None if the specified sample count is zero\n        @retval None if one of the variable's static dimensions has 0 length\n        @retval None if the variable has no dimensions, and sample_start is not equal\n                to 0 or sample_count is not equal to 1.\n        @retval None if the first variable dimension is not unlimited, and\n                sample_start + sample_count would exceed the dimension length.\n        @retval None if a memory allocation error occurred\n        \n        ";

#line 1276 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_35alloc_data(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_sample_start
#line 1276 "cds3/core.pyx"
;
  size_t __pyx_v_sample_count
#line 1276 "cds3/core.pyx"
;

#line 1276 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1276 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1276 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("alloc_data (wrapper)", 0);

#line 1276 "cds3/core.pyx"
  {

#line 1276 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__sample_start,&__pyx_n_s__sample_count,0};

#line 1276 "cds3/core.pyx"
    PyObject* values[2] = {0,0};

#line 1276 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1276 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 1276 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1276 "cds3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 1276 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1276 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1276 "cds3/core.pyx"
        case  0: break;
        default: 
#line 1276 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1276 "cds3/core.pyx"
      }

#line 1276 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1276 "cds3/core.pyx"
      switch (pos_args) {

#line 1276 "cds3/core.pyx"
        case  0:

#line 1276 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_start)) != 0)) kw_args--;
        else 
#line 1276 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1276 "cds3/core.pyx"
        case  1:

#line 1276 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_count)) != 0)) kw_args--;

#line 1276 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("alloc_data", 1, 2, 2, 1); 
#line 1276 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1276 "cds3/core.pyx"
        }

#line 1276 "cds3/core.pyx"
      }

#line 1276 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1276 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "alloc_data") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1276 "cds3/core.pyx"
      }

#line 1276 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 1276 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1276 "cds3/core.pyx"
    } else {

#line 1276 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1276 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1276 "cds3/core.pyx"
    }

#line 1276 "cds3/core.pyx"
    __pyx_v_sample_start = __Pyx_PyInt_AsSize_t(values[0]); if (unlikely((__pyx_v_sample_start == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1276 "cds3/core.pyx"
    __pyx_v_sample_count = __Pyx_PyInt_AsSize_t(values[1]); if (unlikely((__pyx_v_sample_count == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1276 "cds3/core.pyx"
  }

#line 1276 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1276 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("alloc_data", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 1276 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1276 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1276 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.alloc_data", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1276 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1276 "cds3/core.pyx"
  return NULL;

#line 1276 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1276 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_34alloc_data(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self), __pyx_v_sample_start, __pyx_v_sample_count);

#line 1276 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1276 "cds3/core.pyx"
  return __pyx_r;

#line 1276 "cds3/core.pyx"
}

/* "cds3/core.pyx":1278
 *         return cds_var_sample_size(self.c_ob)
 * 
 *     def alloc_data(self, size_t sample_start, size_t sample_count):             # <<<<<<<<<<<<<<
 *         """Allocate memory for a CDS variable's data array.
 * 
 */

#line 1278 "cds3/core.pyx"


#line 1278 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_34alloc_data(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, size_t __pyx_v_sample_start, size_t __pyx_v_sample_count) {
  void *__pyx_v_ptr
#line 1278 "cds3/core.pyx"
;

#line 1278 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1278 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("alloc_data", 0);

  /* "cds3/core.pyx":1329
 *         """
 *         cdef void *ptr
 *         ptr = cds_alloc_var_data(self.c_ob, sample_start, sample_count)             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

#line 1329 "cds3/core.pyx"
  __pyx_v_ptr = cds_alloc_var_data(__pyx_v_self->c_ob, __pyx_v_sample_start, __pyx_v_sample_count);

  /* "cds3/core.pyx":1330
 *         cdef void *ptr
 *         ptr = cds_alloc_var_data(self.c_ob, sample_start, sample_count)
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         return self.get_datap()[sample_start:]
 */

#line 1330 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_ptr == NULL);

#line 1330 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":1331
 *         ptr = cds_alloc_var_data(self.c_ob, sample_start, sample_count)
 *         if ptr == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         return self.get_datap()[sample_start:]
 * 
 */

#line 1331 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1331 "cds3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 1331 "cds3/core.pyx"
    __pyx_r = Py_None;

#line 1331 "cds3/core.pyx"
    goto __pyx_L0;

#line 1331 "cds3/core.pyx"
    goto __pyx_L3;

#line 1331 "cds3/core.pyx"
  }

#line 1331 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":1332
 *         if ptr == NULL:
 *             return None
 *         return self.get_datap()[sample_start:]             # <<<<<<<<<<<<<<
 * 
 *     def alloc_data_index(self, size_t sample_start, size_t sample_count):
 */

#line 1332 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1332 "cds3/core.pyx"
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_datap(__pyx_v_self, 0, NULL)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1332 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1332 "cds3/core.pyx"
  __pyx_t_3 = __Pyx_PySequence_GetSlice(__pyx_t_2, __pyx_v_sample_start, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1332 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 1332 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1332 "cds3/core.pyx"
  __pyx_r = __pyx_t_3;

#line 1332 "cds3/core.pyx"
  __pyx_t_3 = 0;

#line 1332 "cds3/core.pyx"
  goto __pyx_L0;

#line 1332 "cds3/core.pyx"


#line 1332 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1332 "cds3/core.pyx"
  goto __pyx_L0;

#line 1332 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1332 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1332 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 1332 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.alloc_data", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1332 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1332 "cds3/core.pyx"
  __pyx_L0:;

#line 1332 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1332 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1332 "cds3/core.pyx"
  return __pyx_r;

#line 1332 "cds3/core.pyx"
}

#line 1332 "cds3/core.pyx"


#line 1332 "cds3/core.pyx"
/* Python wrapper */

#line 1332 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_37alloc_data_index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1332 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_36alloc_data_index[] = "Var.alloc_data_index(self, size_t sample_start, size_t sample_count)\n\n        Allocate memory for a CDS variable's data array.\n        \n        This function behaves the same as cds_alloc_var_data() except that it\n        returns a data index starting at the specified start sample, see\n        cds_create_data_index() for details. For variables that have less than\n        two dimensions this function is identical to cds_alloc_var_data().\n        \n        The data index returned by this function belongs to the CDS variable\n        and will be freed when the variable is destroyed. The calling process\n        must *not* attempt to free this memory.\n        \n        Error messages from this function are sent to the message handler\n        (see msngr_init_log() and msngr_init_mail()).\n        \n        @param var - pointer to the variable\n        @param sample_start - start sample (0 based indexing)\n        @param sample_count - number of new samples\n        \n        @retval the data index into the variables data array starting at the\n                specified start sample.\n        @retval None if the specified sample count is zero\n        @retval None if one of the variable's static dimensions has 0 length\n        @retval None if the variable has no dimensions, and sample_start is not\n                equal to 0 or sample_count is not equal to 1.\n        @retval None if the first variable dimension is not unlimited, and\n                sample_start + sample_count would exceed the dimension length.\n        @retval None if a memory allocation error occurred\n\n        ";

#line 1332 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_37alloc_data_index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_sample_start
#line 1332 "cds3/core.pyx"
;
  size_t __pyx_v_sample_count
#line 1332 "cds3/core.pyx"
;

#line 1332 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1332 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1332 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("alloc_data_index (wrapper)", 0);

#line 1332 "cds3/core.pyx"
  {

#line 1332 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__sample_start,&__pyx_n_s__sample_count,0};

#line 1332 "cds3/core.pyx"
    PyObject* values[2] = {0,0};

#line 1332 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1332 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 1332 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1332 "cds3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 1332 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1332 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1332 "cds3/core.pyx"
        case  0: break;
        default: 
#line 1332 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1332 "cds3/core.pyx"
      }

#line 1332 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1332 "cds3/core.pyx"
      switch (pos_args) {

#line 1332 "cds3/core.pyx"
        case  0:

#line 1332 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_start)) != 0)) kw_args--;
        else 
#line 1332 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1332 "cds3/core.pyx"
        case  1:

#line 1332 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_count)) != 0)) kw_args--;

#line 1332 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("alloc_data_index", 1, 2, 2, 1); 
#line 1332 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1332 "cds3/core.pyx"
        }

#line 1332 "cds3/core.pyx"
      }

#line 1332 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1332 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "alloc_data_index") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1332 "cds3/core.pyx"
      }

#line 1332 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 1332 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1332 "cds3/core.pyx"
    } else {

#line 1332 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1332 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1332 "cds3/core.pyx"
    }

#line 1332 "cds3/core.pyx"
    __pyx_v_sample_start = __Pyx_PyInt_AsSize_t(values[0]); if (unlikely((__pyx_v_sample_start == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1332 "cds3/core.pyx"
    __pyx_v_sample_count = __Pyx_PyInt_AsSize_t(values[1]); if (unlikely((__pyx_v_sample_count == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1332 "cds3/core.pyx"
  }

#line 1332 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1332 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("alloc_data_index", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 1332 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1332 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1332 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.alloc_data_index", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1332 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1332 "cds3/core.pyx"
  return NULL;

#line 1332 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1332 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_36alloc_data_index(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self), __pyx_v_sample_start, __pyx_v_sample_count);

#line 1332 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1332 "cds3/core.pyx"
  return __pyx_r;

#line 1332 "cds3/core.pyx"
}

/* "cds3/core.pyx":1334
 *         return self.get_datap()[sample_start:]
 * 
 *     def alloc_data_index(self, size_t sample_start, size_t sample_count):             # <<<<<<<<<<<<<<
 *         """
 *         Allocate memory for a CDS variable's data array.
 */

#line 1334 "cds3/core.pyx"


#line 1334 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_36alloc_data_index(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, size_t __pyx_v_sample_start, size_t __pyx_v_sample_count) {
  void *__pyx_v_ptr
#line 1334 "cds3/core.pyx"
;

#line 1334 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1334 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("alloc_data_index", 0);

  /* "cds3/core.pyx":1365
 * 
 *         """
 *         cdef void *ptr = NULL             # <<<<<<<<<<<<<<
 *         ptr = cds_alloc_var_data_index(self.c_ob, sample_start, sample_count)
 *         if ptr == NULL:
 */

#line 1365 "cds3/core.pyx"
  __pyx_v_ptr = NULL;

  /* "cds3/core.pyx":1366
 *         """
 *         cdef void *ptr = NULL
 *         ptr = cds_alloc_var_data_index(self.c_ob, sample_start, sample_count)             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

#line 1366 "cds3/core.pyx"
  __pyx_v_ptr = cds_alloc_var_data_index(__pyx_v_self->c_ob, __pyx_v_sample_start, __pyx_v_sample_count);

  /* "cds3/core.pyx":1367
 *         cdef void *ptr = NULL
 *         ptr = cds_alloc_var_data_index(self.c_ob, sample_start, sample_count)
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         return self.get_datap()
 */

#line 1367 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_ptr == NULL);

#line 1367 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":1368
 *         ptr = cds_alloc_var_data_index(self.c_ob, sample_start, sample_count)
 *         if ptr == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         return self.get_datap()
 * 
 */

#line 1368 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1368 "cds3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 1368 "cds3/core.pyx"
    __pyx_r = Py_None;

#line 1368 "cds3/core.pyx"
    goto __pyx_L0;

#line 1368 "cds3/core.pyx"
    goto __pyx_L3;

#line 1368 "cds3/core.pyx"
  }

#line 1368 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":1369
 *         if ptr == NULL:
 *             return None
 *         return self.get_datap()             # <<<<<<<<<<<<<<
 * 
 *     def change_type(self, CDSDataType type):
 */

#line 1369 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1369 "cds3/core.pyx"
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_datap(__pyx_v_self, 0, NULL)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1369 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1369 "cds3/core.pyx"
  __pyx_r = __pyx_t_2;

#line 1369 "cds3/core.pyx"
  __pyx_t_2 = 0;

#line 1369 "cds3/core.pyx"
  goto __pyx_L0;

#line 1369 "cds3/core.pyx"


#line 1369 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1369 "cds3/core.pyx"
  goto __pyx_L0;

#line 1369 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1369 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1369 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.alloc_data_index", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1369 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1369 "cds3/core.pyx"
  __pyx_L0:;

#line 1369 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1369 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1369 "cds3/core.pyx"
  return __pyx_r;

#line 1369 "cds3/core.pyx"
}

#line 1369 "cds3/core.pyx"


#line 1369 "cds3/core.pyx"
/* Python wrapper */

#line 1369 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_39change_type(PyObject *__pyx_v_self, PyObject *__pyx_arg_type); /*proto*/

#line 1369 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_38change_type[] = "Var.change_type(self, CDSDataType type)\nChange the data type of a CDS Variable.\n        \n        This function will change the data type of a CDS variable. All data and\n        data attribute values (see cds_add_data_att()) will be converted to the\n        new data type.\n        \n        All missing values defined for the variable will be mapped to the new\n        data type using the cds_get_missing_values_map() function.\n        \n        If the range of the new data type is less than the range of the\n        variable's data type, all out-of-range values will be set to the\n        min/max values of the new data type.\n        \n        The variable's data index will also be destroyed if the size of the new\n        data type is not equal to the size of the old data type. The calling\n        process is responsible for recreating the data index if necessary (see\n        cds_create_var_data_index()).\n        \n        Error messages from this function are sent to the message handler (see\n        msngr_init_log() and msngr_init_mail()).\n        \n        @param type - new data type\n        \n        @retval 1 if successful\n        @retval 0 if an error occurred\n\n        ";

#line 1369 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_39change_type(PyObject *__pyx_v_self, PyObject *__pyx_arg_type) {
  CDSDataType __pyx_v_type
#line 1369 "cds3/core.pyx"
;

#line 1369 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1369 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1369 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("change_type (wrapper)", 0);

#line 1369 "cds3/core.pyx"
  assert(__pyx_arg_type); {

#line 1369 "cds3/core.pyx"
    __pyx_v_type = ((CDSDataType)PyInt_AsLong(__pyx_arg_type)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1371; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1369 "cds3/core.pyx"
  }

#line 1369 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1369 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1369 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.change_type", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1369 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1369 "cds3/core.pyx"
  return NULL;

#line 1369 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1369 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_38change_type(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self), ((CDSDataType)__pyx_v_type));

#line 1369 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1369 "cds3/core.pyx"
  return __pyx_r;

#line 1369 "cds3/core.pyx"
}

/* "cds3/core.pyx":1371
 *         return self.get_datap()
 * 
 *     def change_type(self, CDSDataType type):             # <<<<<<<<<<<<<<
 *         """Change the data type of a CDS Variable.
 * 
 */

#line 1371 "cds3/core.pyx"


#line 1371 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_38change_type(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, CDSDataType __pyx_v_type) {

#line 1371 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1371 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("change_type", 0);

  /* "cds3/core.pyx":1399
 * 
 *         """
 *         return cds_change_var_type(self.c_ob, type)             # <<<<<<<<<<<<<<
 * 
 *     def change_units(self, CDSDataType type, char *units):
 */

#line 1399 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1399 "cds3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(cds_change_var_type(__pyx_v_self->c_ob, __pyx_v_type)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1399 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1399 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 1399 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 1399 "cds3/core.pyx"
  goto __pyx_L0;

#line 1399 "cds3/core.pyx"


#line 1399 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1399 "cds3/core.pyx"
  goto __pyx_L0;

#line 1399 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1399 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1399 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.change_type", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1399 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1399 "cds3/core.pyx"
  __pyx_L0:;

#line 1399 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1399 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1399 "cds3/core.pyx"
  return __pyx_r;

#line 1399 "cds3/core.pyx"
}

#line 1399 "cds3/core.pyx"


#line 1399 "cds3/core.pyx"
/* Python wrapper */

#line 1399 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_41change_units(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1399 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_40change_units[] = "Var.change_units(self, CDSDataType type, char *units)\nChange the units of a CDS Variable.\n        \n        This function will change the data type and units of a CDS variable.\n        All data and data attribute values (see cds_add_data_att()) will be\n        converted to the new data type and units.\n        \n        All missing values defined for the variable will be mapped to the new\n        data type using the cds_get_missing_values_map() function.\n        \n        If the range of the new data type is less than the range of the\n        variable's data type, all out-of-range values will be set to the\n        min/max values of the new data type.\n        \n        The variable's data index will also be destroyed if the size of the new\n        data type is not equal to the size of the old data type. The calling\n        process is responsible for recreating the data index if necessary (see\n        cds_create_var_data_index()).\n        \n        Error messages from this function are sent to the message handler (see\n        msngr_init_log() and msngr_init_mail()).\n        \n        @param type - new data type\n        @param units - new units\n        \n        @retval 1 if successful\n        @retval 0 if an error occurred\n\n        ";

#line 1399 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_41change_units(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CDSDataType __pyx_v_type
#line 1399 "cds3/core.pyx"
;
  char *__pyx_v_units
#line 1399 "cds3/core.pyx"
;

#line 1399 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1399 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1399 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("change_units (wrapper)", 0);

#line 1399 "cds3/core.pyx"
  {

#line 1399 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__type,&__pyx_n_s__units,0};

#line 1399 "cds3/core.pyx"
    PyObject* values[2] = {0,0};

#line 1399 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1399 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 1399 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1399 "cds3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 1399 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1399 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1399 "cds3/core.pyx"
        case  0: break;
        default: 
#line 1399 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1399 "cds3/core.pyx"
      }

#line 1399 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1399 "cds3/core.pyx"
      switch (pos_args) {

#line 1399 "cds3/core.pyx"
        case  0:

#line 1399 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__type)) != 0)) kw_args--;
        else 
#line 1399 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1399 "cds3/core.pyx"
        case  1:

#line 1399 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__units)) != 0)) kw_args--;

#line 1399 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("change_units", 1, 2, 2, 1); 
#line 1399 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1401; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1399 "cds3/core.pyx"
        }

#line 1399 "cds3/core.pyx"
      }

#line 1399 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1399 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "change_units") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1401; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1399 "cds3/core.pyx"
      }

#line 1399 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 1399 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1399 "cds3/core.pyx"
    } else {

#line 1399 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1399 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1399 "cds3/core.pyx"
    }

#line 1399 "cds3/core.pyx"
    __pyx_v_type = ((CDSDataType)PyInt_AsLong(values[0])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1401; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1399 "cds3/core.pyx"
    __pyx_v_units = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_units) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1401; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1399 "cds3/core.pyx"
  }

#line 1399 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1399 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("change_units", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 1399 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1401; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1399 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1399 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.change_units", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1399 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1399 "cds3/core.pyx"
  return NULL;

#line 1399 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1399 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_40change_units(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self), __pyx_v_type, __pyx_v_units);

#line 1399 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1399 "cds3/core.pyx"
  return __pyx_r;

#line 1399 "cds3/core.pyx"
}

/* "cds3/core.pyx":1401
 *         return cds_change_var_type(self.c_ob, type)
 * 
 *     def change_units(self, CDSDataType type, char *units):             # <<<<<<<<<<<<<<
 *         """Change the units of a CDS Variable.
 * 
 */

#line 1401 "cds3/core.pyx"


#line 1401 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_40change_units(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, CDSDataType __pyx_v_type, char *__pyx_v_units) {

#line 1401 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1401 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("change_units", 0);

  /* "cds3/core.pyx":1430
 * 
 *         """
 *         return cds_change_var_units(self.c_ob, type, units)             # <<<<<<<<<<<<<<
 * 
 *     def create_data_index(self):
 */

#line 1430 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1430 "cds3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(cds_change_var_units(__pyx_v_self->c_ob, __pyx_v_type, __pyx_v_units)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1430 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1430 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 1430 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 1430 "cds3/core.pyx"
  goto __pyx_L0;

#line 1430 "cds3/core.pyx"


#line 1430 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1430 "cds3/core.pyx"
  goto __pyx_L0;

#line 1430 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1430 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1430 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.change_units", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1430 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1430 "cds3/core.pyx"
  __pyx_L0:;

#line 1430 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1430 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1430 "cds3/core.pyx"
  return __pyx_r;

#line 1430 "cds3/core.pyx"
}

#line 1430 "cds3/core.pyx"


#line 1430 "cds3/core.pyx"
/* Python wrapper */

#line 1430 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_43create_data_index(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1430 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_42create_data_index[] = "Var.create_data_index(self)";

#line 1430 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_43create_data_index(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1430 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1430 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1430 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("create_data_index (wrapper)", 0);
  __pyx_r = 
#line 1430 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_42create_data_index(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self));

#line 1430 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1430 "cds3/core.pyx"
  return __pyx_r;

#line 1430 "cds3/core.pyx"
}

/* "cds3/core.pyx":1432
 *         return cds_change_var_units(self.c_ob, type, units)
 * 
 *     def create_data_index(self):             # <<<<<<<<<<<<<<
 *         cdef void *ptr
 *         ptr = cds_get_var_datap(self.c_ob, 0)
 */

#line 1432 "cds3/core.pyx"


#line 1432 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_42create_data_index(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self) {
  void *__pyx_v_ptr
#line 1432 "cds3/core.pyx"
;

#line 1432 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1432 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("create_data_index", 0);

  /* "cds3/core.pyx":1434
 *     def create_data_index(self):
 *         cdef void *ptr
 *         ptr = cds_get_var_datap(self.c_ob, 0)             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

#line 1434 "cds3/core.pyx"
  __pyx_v_ptr = cds_get_var_datap(__pyx_v_self->c_ob, 0);

  /* "cds3/core.pyx":1435
 *         cdef void *ptr
 *         ptr = cds_get_var_datap(self.c_ob, 0)
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         return self.get_datap()
 */

#line 1435 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_ptr == NULL);

#line 1435 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":1436
 *         ptr = cds_get_var_datap(self.c_ob, 0)
 *         if ptr == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         return self.get_datap()
 * 
 */

#line 1436 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1436 "cds3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 1436 "cds3/core.pyx"
    __pyx_r = Py_None;

#line 1436 "cds3/core.pyx"
    goto __pyx_L0;

#line 1436 "cds3/core.pyx"
    goto __pyx_L3;

#line 1436 "cds3/core.pyx"
  }

#line 1436 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":1437
 *         if ptr == NULL:
 *             return None
 *         return self.get_datap()             # <<<<<<<<<<<<<<
 * 
 *     def delete_data(self):
 */

#line 1437 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1437 "cds3/core.pyx"
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_datap(__pyx_v_self, 0, NULL)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1437 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1437 "cds3/core.pyx"
  __pyx_r = __pyx_t_2;

#line 1437 "cds3/core.pyx"
  __pyx_t_2 = 0;

#line 1437 "cds3/core.pyx"
  goto __pyx_L0;

#line 1437 "cds3/core.pyx"


#line 1437 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1437 "cds3/core.pyx"
  goto __pyx_L0;

#line 1437 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1437 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1437 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.create_data_index", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1437 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1437 "cds3/core.pyx"
  __pyx_L0:;

#line 1437 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1437 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1437 "cds3/core.pyx"
  return __pyx_r;

#line 1437 "cds3/core.pyx"
}

#line 1437 "cds3/core.pyx"


#line 1437 "cds3/core.pyx"
/* Python wrapper */

#line 1437 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_45delete_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1437 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_44delete_data[] = "Var.delete_data(self)\nDelete the data for a CDS variable.";

#line 1437 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_45delete_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1437 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1437 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1437 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("delete_data (wrapper)", 0);
  __pyx_r = 
#line 1437 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_44delete_data(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self));

#line 1437 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1437 "cds3/core.pyx"
  return __pyx_r;

#line 1437 "cds3/core.pyx"
}

/* "cds3/core.pyx":1439
 *         return self.get_datap()
 * 
 *     def delete_data(self):             # <<<<<<<<<<<<<<
 *         """Delete the data for a CDS variable."""
 *         cds_delete_var_data(self.c_ob)
 */

#line 1439 "cds3/core.pyx"


#line 1439 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_44delete_data(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self) {

#line 1439 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations

#line 1439 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("delete_data", 0);

  /* "cds3/core.pyx":1441
 *     def delete_data(self):
 *         """Delete the data for a CDS variable."""
 *         cds_delete_var_data(self.c_ob)             # <<<<<<<<<<<<<<
 * 
 *     def get_data(self, CDSDataType type, size_t sample_start):
 */

#line 1441 "cds3/core.pyx"
  cds_delete_var_data(__pyx_v_self->c_ob);

#line 1441 "cds3/core.pyx"


#line 1441 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1441 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1441 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1441 "cds3/core.pyx"
  return __pyx_r;

#line 1441 "cds3/core.pyx"
}

#line 1441 "cds3/core.pyx"


#line 1441 "cds3/core.pyx"
/* Python wrapper */

#line 1441 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_47get_data(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1441 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_46get_data[] = "Var.get_data(self, CDSDataType type, size_t sample_start)\nGet the data from a CDS variable.\n        \n        This function will get the data from a variable casted into the\n        specified data type. All missing values used in the data will be\n        converted to a single missing value appropriate for the requested data\n        type. The missing value used will be the first value returned by the\n        cds_get_missing_values_map() function. If no missing values are defined\n        for the variable data, the missing_value returned will be the default\n        fill value for the requested data type.\n        \n        If the range of the output data type is less than the range of the\n        variable's data type, all out-of-range values will be set to the\n        min/max values of the output data type.\n        \n        Memory will be allocated for the returned data array if the output\n        array is NULL. In this case the calling process is responsible for\n        freeing the allocated memory. If an output data array is specified it\n        must be large enough to hold (sample_count * cds_var_sample_size(var))\n        values of the specified data type.\n        \n        For multi-dimensional variables, the values in the output data array\n        will be stored linearly in memory with the last dimension varying the\n        fastest.\n        \n        Error messages from this function are sent to the message handler (see\n        msngr_init_log() and msngr_init_mail()).\n        \n        @param type - data type of the output missing_value and data array\n        @param sample_start - start sample (0 based indexing)\n        @retval missing_value - output: missing value\n        @param data - pointer to the output data array\n        or NULL to dynamically allocate the memory needed.\n        \n        @retval pointer to the output data array\n        @retval None if the variable has no data for sample_start\n                (sample_count == 0)""\n        @retval None if a memory allocation error occurs\n                (sample_count == (size_t)-1)\n        \n        ";

#line 1441 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_47get_data(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CDSDataType __pyx_v_type
#line 1441 "cds3/core.pyx"
;
  size_t __pyx_v_sample_start
#line 1441 "cds3/core.pyx"
;

#line 1441 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1441 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1441 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_data (wrapper)", 0);

#line 1441 "cds3/core.pyx"
  {

#line 1441 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__type,&__pyx_n_s__sample_start,0};

#line 1441 "cds3/core.pyx"
    PyObject* values[2] = {0,0};

#line 1441 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1441 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 1441 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1441 "cds3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 1441 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1441 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1441 "cds3/core.pyx"
        case  0: break;
        default: 
#line 1441 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1441 "cds3/core.pyx"
      }

#line 1441 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1441 "cds3/core.pyx"
      switch (pos_args) {

#line 1441 "cds3/core.pyx"
        case  0:

#line 1441 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__type)) != 0)) kw_args--;
        else 
#line 1441 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1441 "cds3/core.pyx"
        case  1:

#line 1441 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_start)) != 0)) kw_args--;

#line 1441 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("get_data", 1, 2, 2, 1); 
#line 1441 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1443; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1441 "cds3/core.pyx"
        }

#line 1441 "cds3/core.pyx"
      }

#line 1441 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1441 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_data") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1443; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1441 "cds3/core.pyx"
      }

#line 1441 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 1441 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1441 "cds3/core.pyx"
    } else {

#line 1441 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1441 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1441 "cds3/core.pyx"
    }

#line 1441 "cds3/core.pyx"
    __pyx_v_type = ((CDSDataType)PyInt_AsLong(values[0])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1443; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1441 "cds3/core.pyx"
    __pyx_v_sample_start = __Pyx_PyInt_AsSize_t(values[1]); if (unlikely((__pyx_v_sample_start == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1443; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1441 "cds3/core.pyx"
  }

#line 1441 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1441 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_data", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 1441 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1443; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1441 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1441 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.get_data", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1441 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1441 "cds3/core.pyx"
  return NULL;

#line 1441 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1441 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_46get_data(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self), __pyx_v_type, __pyx_v_sample_start);

#line 1441 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1441 "cds3/core.pyx"
  return __pyx_r;

#line 1441 "cds3/core.pyx"
}

/* "cds3/core.pyx":1443
 *         cds_delete_var_data(self.c_ob)
 * 
 *     def get_data(self, CDSDataType type, size_t sample_start):             # <<<<<<<<<<<<<<
 *         """Get the data from a CDS variable.
 * 
 */

#line 1443 "cds3/core.pyx"


#line 1443 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_46get_data(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, CDSDataType __pyx_v_type, size_t __pyx_v_sample_start) {
  void *__pyx_v_ptr
#line 1443 "cds3/core.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 1443 "cds3/core.pyx"
;
  npy_intp *__pyx_v_dims
#line 1443 "cds3/core.pyx"
;
  int __pyx_v_ndims
#line 1443 "cds3/core.pyx"
;
  size_t __pyx_v_sample_count
#line 1443 "cds3/core.pyx"
;
  void *__pyx_v_missing_ptr
#line 1443 "cds3/core.pyx"
;
  char __pyx_v_missing_char
#line 1443 "cds3/core.pyx"
;
  signed char __pyx_v_missing_signed_char
#line 1443 "cds3/core.pyx"
;
  short __pyx_v_missing_short
#line 1443 "cds3/core.pyx"
;
  int __pyx_v_missing_int
#line 1443 "cds3/core.pyx"
;
  float __pyx_v_missing_float
#line 1443 "cds3/core.pyx"
;
  double __pyx_v_missing_double
#line 1443 "cds3/core.pyx"
;
  PyObject *__pyx_v_missing_py = 0
#line 1443 "cds3/core.pyx"
;
  int __pyx_v_i
#line 1443 "cds3/core.pyx"
;

#line 1443 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1443 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_data", 0);

  /* "cds3/core.pyx":1487
 *         cdef np.ndarray array
 *         cdef np.npy_intp *dims
 *         cdef int ndims = self.c_ob.ndims             # <<<<<<<<<<<<<<
 *         cdef size_t sample_count
 *         cdef void *missing_ptr
 */

#line 1487 "cds3/core.pyx"
  __pyx_t_1 = __pyx_v_self->c_ob->ndims;

#line 1487 "cds3/core.pyx"
  __pyx_v_ndims = __pyx_t_1;

  /* "cds3/core.pyx":1497
 *         cdef double missing_double
 *         cdef object missing_py
 *         if type == CDS_NAT:             # <<<<<<<<<<<<<<
 *             raise ValueError, "CDS_NAT"
 *         elif type == CDS_CHAR:
 */

#line 1497 "cds3/core.pyx"
  __pyx_t_2 = (__pyx_v_type == CDS_NAT);

#line 1497 "cds3/core.pyx"
  if (__pyx_t_2) {

    /* "cds3/core.pyx":1498
 *         cdef object missing_py
 *         if type == CDS_NAT:
 *             raise ValueError, "CDS_NAT"             # <<<<<<<<<<<<<<
 *         elif type == CDS_CHAR:
 *             missing_ptr = &missing_char
 */

#line 1498 "cds3/core.pyx"
    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_n_s__CDS_NAT), 0, 0);

#line 1498 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1498 "cds3/core.pyx"
    goto __pyx_L3;

#line 1498 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":1499
 *         if type == CDS_NAT:
 *             raise ValueError, "CDS_NAT"
 *         elif type == CDS_CHAR:             # <<<<<<<<<<<<<<
 *             missing_ptr = &missing_char
 *         elif type == CDS_BYTE:
 */

#line 1499 "cds3/core.pyx"
  __pyx_t_2 = (__pyx_v_type == CDS_CHAR);

#line 1499 "cds3/core.pyx"
  if (__pyx_t_2) {

    /* "cds3/core.pyx":1500
 *             raise ValueError, "CDS_NAT"
 *         elif type == CDS_CHAR:
 *             missing_ptr = &missing_char             # <<<<<<<<<<<<<<
 *         elif type == CDS_BYTE:
 *             missing_ptr = &missing_signed_char
 */

#line 1500 "cds3/core.pyx"
    __pyx_v_missing_ptr = (&__pyx_v_missing_char);

#line 1500 "cds3/core.pyx"
    goto __pyx_L3;

#line 1500 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":1501
 *         elif type == CDS_CHAR:
 *             missing_ptr = &missing_char
 *         elif type == CDS_BYTE:             # <<<<<<<<<<<<<<
 *             missing_ptr = &missing_signed_char
 *         elif type == CDS_SHORT:
 */

#line 1501 "cds3/core.pyx"
  __pyx_t_2 = (__pyx_v_type == CDS_BYTE);

#line 1501 "cds3/core.pyx"
  if (__pyx_t_2) {

    /* "cds3/core.pyx":1502
 *             missing_ptr = &missing_char
 *         elif type == CDS_BYTE:
 *             missing_ptr = &missing_signed_char             # <<<<<<<<<<<<<<
 *         elif type == CDS_SHORT:
 *             missing_ptr = &missing_short
 */

#line 1502 "cds3/core.pyx"
    __pyx_v_missing_ptr = (&__pyx_v_missing_signed_char);

#line 1502 "cds3/core.pyx"
    goto __pyx_L3;

#line 1502 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":1503
 *         elif type == CDS_BYTE:
 *             missing_ptr = &missing_signed_char
 *         elif type == CDS_SHORT:             # <<<<<<<<<<<<<<
 *             missing_ptr = &missing_short
 *         elif type == CDS_INT:
 */

#line 1503 "cds3/core.pyx"
  __pyx_t_2 = (__pyx_v_type == CDS_SHORT);

#line 1503 "cds3/core.pyx"
  if (__pyx_t_2) {

    /* "cds3/core.pyx":1504
 *             missing_ptr = &missing_signed_char
 *         elif type == CDS_SHORT:
 *             missing_ptr = &missing_short             # <<<<<<<<<<<<<<
 *         elif type == CDS_INT:
 *             missing_ptr = &missing_int
 */

#line 1504 "cds3/core.pyx"
    __pyx_v_missing_ptr = (&__pyx_v_missing_short);

#line 1504 "cds3/core.pyx"
    goto __pyx_L3;

#line 1504 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":1505
 *         elif type == CDS_SHORT:
 *             missing_ptr = &missing_short
 *         elif type == CDS_INT:             # <<<<<<<<<<<<<<
 *             missing_ptr = &missing_int
 *         elif type == CDS_FLOAT:
 */

#line 1505 "cds3/core.pyx"
  __pyx_t_2 = (__pyx_v_type == CDS_INT);

#line 1505 "cds3/core.pyx"
  if (__pyx_t_2) {

    /* "cds3/core.pyx":1506
 *             missing_ptr = &missing_short
 *         elif type == CDS_INT:
 *             missing_ptr = &missing_int             # <<<<<<<<<<<<<<
 *         elif type == CDS_FLOAT:
 *             missing_ptr = &missing_float
 */

#line 1506 "cds3/core.pyx"
    __pyx_v_missing_ptr = (&__pyx_v_missing_int);

#line 1506 "cds3/core.pyx"
    goto __pyx_L3;

#line 1506 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":1507
 *         elif type == CDS_INT:
 *             missing_ptr = &missing_int
 *         elif type == CDS_FLOAT:             # <<<<<<<<<<<<<<
 *             missing_ptr = &missing_float
 *         elif type == CDS_DOUBLE:
 */

#line 1507 "cds3/core.pyx"
  __pyx_t_2 = (__pyx_v_type == CDS_FLOAT);

#line 1507 "cds3/core.pyx"
  if (__pyx_t_2) {

    /* "cds3/core.pyx":1508
 *             missing_ptr = &missing_int
 *         elif type == CDS_FLOAT:
 *             missing_ptr = &missing_float             # <<<<<<<<<<<<<<
 *         elif type == CDS_DOUBLE:
 *             missing_ptr = &missing_double
 */

#line 1508 "cds3/core.pyx"
    __pyx_v_missing_ptr = (&__pyx_v_missing_float);

#line 1508 "cds3/core.pyx"
    goto __pyx_L3;

#line 1508 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":1509
 *         elif type == CDS_FLOAT:
 *             missing_ptr = &missing_float
 *         elif type == CDS_DOUBLE:             # <<<<<<<<<<<<<<
 *             missing_ptr = &missing_double
 *         else:
 */

#line 1509 "cds3/core.pyx"
  __pyx_t_2 = (__pyx_v_type == CDS_DOUBLE);

#line 1509 "cds3/core.pyx"
  if (__pyx_t_2) {

    /* "cds3/core.pyx":1510
 *             missing_ptr = &missing_float
 *         elif type == CDS_DOUBLE:
 *             missing_ptr = &missing_double             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError, "Unknown CDSDataType"
 */

#line 1510 "cds3/core.pyx"
    __pyx_v_missing_ptr = (&__pyx_v_missing_double);

#line 1510 "cds3/core.pyx"
    goto __pyx_L3;

#line 1510 "cds3/core.pyx"
  }

#line 1510 "cds3/core.pyx"
  /*else*/ {

    /* "cds3/core.pyx":1512
 *             missing_ptr = &missing_double
 *         else:
 *             raise ValueError, "Unknown CDSDataType"             # <<<<<<<<<<<<<<
 *         ptr = cds_get_var_data(self.c_ob, type, sample_start, &sample_count,
 *                 missing_ptr, NULL)
 */

#line 1512 "cds3/core.pyx"
    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_kp_s_3), 0, 0);

#line 1512 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1512 "cds3/core.pyx"
  }

#line 1512 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":1514
 *             raise ValueError, "Unknown CDSDataType"
 *         ptr = cds_get_var_data(self.c_ob, type, sample_start, &sample_count,
 *                 missing_ptr, NULL)             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None,None
 */

#line 1514 "cds3/core.pyx"
  __pyx_v_ptr = cds_get_var_data(__pyx_v_self->c_ob, __pyx_v_type, __pyx_v_sample_start, (&__pyx_v_sample_count), __pyx_v_missing_ptr, NULL);

  /* "cds3/core.pyx":1515
 *         ptr = cds_get_var_data(self.c_ob, type, sample_start, &sample_count,
 *                 missing_ptr, NULL)
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None,None
 *         dims = <np.npy_intp*>malloc(sizeof(np.npy_intp) * ndims)
 */

#line 1515 "cds3/core.pyx"
  __pyx_t_2 = (__pyx_v_ptr == NULL);

#line 1515 "cds3/core.pyx"
  if (__pyx_t_2) {

    /* "cds3/core.pyx":1516
 *                 missing_ptr, NULL)
 *         if ptr == NULL:
 *             return None,None             # <<<<<<<<<<<<<<
 *         dims = <np.npy_intp*>malloc(sizeof(np.npy_intp) * ndims)
 *         for i in range(ndims):
 */

#line 1516 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1516 "cds3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_k_tuple_4));

#line 1516 "cds3/core.pyx"
    __pyx_r = ((PyObject *)__pyx_k_tuple_4);

#line 1516 "cds3/core.pyx"
    goto __pyx_L0;

#line 1516 "cds3/core.pyx"
    goto __pyx_L4;

#line 1516 "cds3/core.pyx"
  }

#line 1516 "cds3/core.pyx"
  __pyx_L4:;

  /* "cds3/core.pyx":1517
 *         if ptr == NULL:
 *             return None,None
 *         dims = <np.npy_intp*>malloc(sizeof(np.npy_intp) * ndims)             # <<<<<<<<<<<<<<
 *         for i in range(ndims):
 *             dims[i] = self.c_ob.dims[i].length
 */

#line 1517 "cds3/core.pyx"
  __pyx_v_dims = ((npy_intp *)malloc(((sizeof(npy_intp)) * __pyx_v_ndims)));

  /* "cds3/core.pyx":1518
 *             return None,None
 *         dims = <np.npy_intp*>malloc(sizeof(np.npy_intp) * ndims)
 *         for i in range(ndims):             # <<<<<<<<<<<<<<
 *             dims[i] = self.c_ob.dims[i].length
 *         dims[0] = sample_count
 */

#line 1518 "cds3/core.pyx"
  __pyx_t_1 = __pyx_v_ndims;

#line 1518 "cds3/core.pyx"
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_1; __pyx_t_3+=1) {

#line 1518 "cds3/core.pyx"
    __pyx_v_i = __pyx_t_3;

    /* "cds3/core.pyx":1519
 *         dims = <np.npy_intp*>malloc(sizeof(np.npy_intp) * ndims)
 *         for i in range(ndims):
 *             dims[i] = self.c_ob.dims[i].length             # <<<<<<<<<<<<<<
 *         dims[0] = sample_count
 *         array = np.PyArray_SimpleNewFromData(ndims, dims,
 */

#line 1519 "cds3/core.pyx"
    __pyx_t_4 = (__pyx_v_self->c_ob->dims[__pyx_v_i])->length;

#line 1519 "cds3/core.pyx"
    (__pyx_v_dims[__pyx_v_i]) = __pyx_t_4;

#line 1519 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":1520
 *         for i in range(ndims):
 *             dims[i] = self.c_ob.dims[i].length
 *         dims[0] = sample_count             # <<<<<<<<<<<<<<
 *         array = np.PyArray_SimpleNewFromData(ndims, dims,
 *                 cds_type_to_dtype(type), ptr)
 */

#line 1520 "cds3/core.pyx"
  (__pyx_v_dims[0]) = __pyx_v_sample_count;

  /* "cds3/core.pyx":1522
 *         dims[0] = sample_count
 *         array = np.PyArray_SimpleNewFromData(ndims, dims,
 *                 cds_type_to_dtype(type), ptr)             # <<<<<<<<<<<<<<
 *         # allow numpy to reclaim memory when array goes out of scope
 *         array.base = PyCObject_FromVoidPtr(ptr, _free)
 */

#line 1522 "cds3/core.pyx"
  __pyx_t_5 = PyArray_SimpleNewFromData(__pyx_v_ndims, __pyx_v_dims, __pyx_f_4cds3_4core_cds_type_to_dtype(__pyx_v_type), __pyx_v_ptr); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1522 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 1522 "cds3/core.pyx"
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1522 "cds3/core.pyx"
  __pyx_v_array = ((PyArrayObject *)__pyx_t_5);

#line 1522 "cds3/core.pyx"
  __pyx_t_5 = 0;

  /* "cds3/core.pyx":1524
 *                 cds_type_to_dtype(type), ptr)
 *         # allow numpy to reclaim memory when array goes out of scope
 *         array.base = PyCObject_FromVoidPtr(ptr, _free)             # <<<<<<<<<<<<<<
 *         free(dims)
 *         if type == CDS_NAT:
 */

#line 1524 "cds3/core.pyx"
  __pyx_v_array->base = PyCObject_FromVoidPtr(__pyx_v_ptr, __pyx_f_4cds3_4core__free);

  /* "cds3/core.pyx":1525
 *         # allow numpy to reclaim memory when array goes out of scope
 *         array.base = PyCObject_FromVoidPtr(ptr, _free)
 *         free(dims)             # <<<<<<<<<<<<<<
 *         if type == CDS_NAT:
 *             raise ValueError, "CDS_NAT"
 */

#line 1525 "cds3/core.pyx"
  free(__pyx_v_dims);

  /* "cds3/core.pyx":1526
 *         array.base = PyCObject_FromVoidPtr(ptr, _free)
 *         free(dims)
 *         if type == CDS_NAT:             # <<<<<<<<<<<<<<
 *             raise ValueError, "CDS_NAT"
 *         elif type == CDS_CHAR:
 */

#line 1526 "cds3/core.pyx"
  __pyx_t_2 = (__pyx_v_type == CDS_NAT);

#line 1526 "cds3/core.pyx"
  if (__pyx_t_2) {

    /* "cds3/core.pyx":1527
 *         free(dims)
 *         if type == CDS_NAT:
 *             raise ValueError, "CDS_NAT"             # <<<<<<<<<<<<<<
 *         elif type == CDS_CHAR:
 *             missing_py = missing_char
 */

#line 1527 "cds3/core.pyx"
    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_n_s__CDS_NAT), 0, 0);

#line 1527 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1527 "cds3/core.pyx"
    goto __pyx_L7;

#line 1527 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":1528
 *         if type == CDS_NAT:
 *             raise ValueError, "CDS_NAT"
 *         elif type == CDS_CHAR:             # <<<<<<<<<<<<<<
 *             missing_py = missing_char
 *         elif type == CDS_BYTE:
 */

#line 1528 "cds3/core.pyx"
  __pyx_t_2 = (__pyx_v_type == CDS_CHAR);

#line 1528 "cds3/core.pyx"
  if (__pyx_t_2) {

    /* "cds3/core.pyx":1529
 *             raise ValueError, "CDS_NAT"
 *         elif type == CDS_CHAR:
 *             missing_py = missing_char             # <<<<<<<<<<<<<<
 *         elif type == CDS_BYTE:
 *             missing_py = missing_signed_char
 */

#line 1529 "cds3/core.pyx"
    __pyx_t_5 = PyInt_FromLong(__pyx_v_missing_char); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1529 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 1529 "cds3/core.pyx"
    __pyx_v_missing_py = __pyx_t_5;

#line 1529 "cds3/core.pyx"
    __pyx_t_5 = 0;

#line 1529 "cds3/core.pyx"
    goto __pyx_L7;

#line 1529 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":1530
 *         elif type == CDS_CHAR:
 *             missing_py = missing_char
 *         elif type == CDS_BYTE:             # <<<<<<<<<<<<<<
 *             missing_py = missing_signed_char
 *         elif type == CDS_SHORT:
 */

#line 1530 "cds3/core.pyx"
  __pyx_t_2 = (__pyx_v_type == CDS_BYTE);

#line 1530 "cds3/core.pyx"
  if (__pyx_t_2) {

    /* "cds3/core.pyx":1531
 *             missing_py = missing_char
 *         elif type == CDS_BYTE:
 *             missing_py = missing_signed_char             # <<<<<<<<<<<<<<
 *         elif type == CDS_SHORT:
 *             missing_py = missing_short
 */

#line 1531 "cds3/core.pyx"
    __pyx_t_5 = PyInt_FromLong(__pyx_v_missing_signed_char); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1531 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 1531 "cds3/core.pyx"
    __pyx_v_missing_py = __pyx_t_5;

#line 1531 "cds3/core.pyx"
    __pyx_t_5 = 0;

#line 1531 "cds3/core.pyx"
    goto __pyx_L7;

#line 1531 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":1532
 *         elif type == CDS_BYTE:
 *             missing_py = missing_signed_char
 *         elif type == CDS_SHORT:             # <<<<<<<<<<<<<<
 *             missing_py = missing_short
 *         elif type == CDS_INT:
 */

#line 1532 "cds3/core.pyx"
  __pyx_t_2 = (__pyx_v_type == CDS_SHORT);

#line 1532 "cds3/core.pyx"
  if (__pyx_t_2) {

    /* "cds3/core.pyx":1533
 *             missing_py = missing_signed_char
 *         elif type == CDS_SHORT:
 *             missing_py = missing_short             # <<<<<<<<<<<<<<
 *         elif type == CDS_INT:
 *             missing_py = missing_int
 */

#line 1533 "cds3/core.pyx"
    __pyx_t_5 = PyInt_FromLong(__pyx_v_missing_short); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1533 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 1533 "cds3/core.pyx"
    __pyx_v_missing_py = __pyx_t_5;

#line 1533 "cds3/core.pyx"
    __pyx_t_5 = 0;

#line 1533 "cds3/core.pyx"
    goto __pyx_L7;

#line 1533 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":1534
 *         elif type == CDS_SHORT:
 *             missing_py = missing_short
 *         elif type == CDS_INT:             # <<<<<<<<<<<<<<
 *             missing_py = missing_int
 *         elif type == CDS_FLOAT:
 */

#line 1534 "cds3/core.pyx"
  __pyx_t_2 = (__pyx_v_type == CDS_INT);

#line 1534 "cds3/core.pyx"
  if (__pyx_t_2) {

    /* "cds3/core.pyx":1535
 *             missing_py = missing_short
 *         elif type == CDS_INT:
 *             missing_py = missing_int             # <<<<<<<<<<<<<<
 *         elif type == CDS_FLOAT:
 *             missing_py = missing_float
 */

#line 1535 "cds3/core.pyx"
    __pyx_t_5 = PyInt_FromLong(__pyx_v_missing_int); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1535 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 1535 "cds3/core.pyx"
    __pyx_v_missing_py = __pyx_t_5;

#line 1535 "cds3/core.pyx"
    __pyx_t_5 = 0;

#line 1535 "cds3/core.pyx"
    goto __pyx_L7;

#line 1535 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":1536
 *         elif type == CDS_INT:
 *             missing_py = missing_int
 *         elif type == CDS_FLOAT:             # <<<<<<<<<<<<<<
 *             missing_py = missing_float
 *         elif type == CDS_DOUBLE:
 */

#line 1536 "cds3/core.pyx"
  __pyx_t_2 = (__pyx_v_type == CDS_FLOAT);

#line 1536 "cds3/core.pyx"
  if (__pyx_t_2) {

    /* "cds3/core.pyx":1537
 *             missing_py = missing_int
 *         elif type == CDS_FLOAT:
 *             missing_py = missing_float             # <<<<<<<<<<<<<<
 *         elif type == CDS_DOUBLE:
 *             missing_py = missing_double
 */

#line 1537 "cds3/core.pyx"
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_missing_float); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1537; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1537 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 1537 "cds3/core.pyx"
    __pyx_v_missing_py = __pyx_t_5;

#line 1537 "cds3/core.pyx"
    __pyx_t_5 = 0;

#line 1537 "cds3/core.pyx"
    goto __pyx_L7;

#line 1537 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":1538
 *         elif type == CDS_FLOAT:
 *             missing_py = missing_float
 *         elif type == CDS_DOUBLE:             # <<<<<<<<<<<<<<
 *             missing_py = missing_double
 *         else:
 */

#line 1538 "cds3/core.pyx"
  __pyx_t_2 = (__pyx_v_type == CDS_DOUBLE);

#line 1538 "cds3/core.pyx"
  if (__pyx_t_2) {

    /* "cds3/core.pyx":1539
 *             missing_py = missing_float
 *         elif type == CDS_DOUBLE:
 *             missing_py = missing_double             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError, "Unknown CDSDataType"
 */

#line 1539 "cds3/core.pyx"
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_missing_double); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1539 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 1539 "cds3/core.pyx"
    __pyx_v_missing_py = __pyx_t_5;

#line 1539 "cds3/core.pyx"
    __pyx_t_5 = 0;

#line 1539 "cds3/core.pyx"
    goto __pyx_L7;

#line 1539 "cds3/core.pyx"
  }

#line 1539 "cds3/core.pyx"
  /*else*/ {

    /* "cds3/core.pyx":1541
 *             missing_py = missing_double
 *         else:
 *             raise ValueError, "Unknown CDSDataType"             # <<<<<<<<<<<<<<
 *         return array,missing_py
 * 
 */

#line 1541 "cds3/core.pyx"
    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_kp_s_3), 0, 0);

#line 1541 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1541; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1541 "cds3/core.pyx"
  }

#line 1541 "cds3/core.pyx"
  __pyx_L7:;

  /* "cds3/core.pyx":1542
 *         else:
 *             raise ValueError, "Unknown CDSDataType"
 *         return array,missing_py             # <<<<<<<<<<<<<<
 * 
 *     cpdef np.ndarray get_datap(self, size_t sample_start=0):
 */

#line 1542 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1542 "cds3/core.pyx"
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1542 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 1542 "cds3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_array));

#line 1542 "cds3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_array));

#line 1542 "cds3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_v_array));

#line 1542 "cds3/core.pyx"
  __Pyx_INCREF(__pyx_v_missing_py);

#line 1542 "cds3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_missing_py);

#line 1542 "cds3/core.pyx"
  __Pyx_GIVEREF(__pyx_v_missing_py);

#line 1542 "cds3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_t_5);

#line 1542 "cds3/core.pyx"
  __pyx_t_5 = 0;

#line 1542 "cds3/core.pyx"
  goto __pyx_L0;

#line 1542 "cds3/core.pyx"


#line 1542 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1542 "cds3/core.pyx"
  goto __pyx_L0;

#line 1542 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1542 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 1542 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.get_data", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1542 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1542 "cds3/core.pyx"
  __pyx_L0:;

#line 1542 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_array);

#line 1542 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_v_missing_py);

#line 1542 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1542 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1542 "cds3/core.pyx"
  return __pyx_r;

#line 1542 "cds3/core.pyx"
}

/* "cds3/core.pyx":1544
 *         return array,missing_py
 * 
 *     cpdef np.ndarray get_datap(self, size_t sample_start=0):             # <<<<<<<<<<<<<<
 *         """Get an ndarray for the the data in a CDS variable.
 * 
 */

#line 1544 "cds3/core.pyx"


#line 1544 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_49get_datap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1544 "cds3/core.pyx"
static PyArrayObject *__pyx_f_4cds3_4core_3Var_get_datap(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_4cds3_4core_3Var_get_datap *__pyx_optional_args) {

#line 1544 "cds3/core.pyx"
  size_t __pyx_v_sample_start = ((size_t)0);
  void *__pyx_v_ptr
#line 1544 "cds3/core.pyx"
;
  size_t __pyx_v_sample_count
#line 1544 "cds3/core.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 1544 "cds3/core.pyx"
;
  npy_intp *__pyx_v_dims
#line 1544 "cds3/core.pyx"
;
  int __pyx_v_ndims
#line 1544 "cds3/core.pyx"
;
  PyArray_Descr *__pyx_v_type = 0
#line 1544 "cds3/core.pyx"
;
  int __pyx_v_i
#line 1544 "cds3/core.pyx"
;

#line 1544 "cds3/core.pyx"
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1544 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_datap", 0);

#line 1544 "cds3/core.pyx"
  if (__pyx_optional_args) {

#line 1544 "cds3/core.pyx"
    if (__pyx_optional_args->__pyx_n > 0) {

#line 1544 "cds3/core.pyx"
      __pyx_v_sample_start = __pyx_optional_args->sample_start;

#line 1544 "cds3/core.pyx"
    }

#line 1544 "cds3/core.pyx"
  }

#line 1544 "cds3/core.pyx"
  /* Check if called by wrapper */

#line 1544 "cds3/core.pyx"
  if (unlikely(__pyx_skip_dispatch)) ;

#line 1544 "cds3/core.pyx"
  /* Check if overridden in Python */

#line 1544 "cds3/core.pyx"
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {

#line 1544 "cds3/core.pyx"
    __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_self), __pyx_n_s__get_datap); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1544 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 1544 "cds3/core.pyx"
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_4cds3_4core_3Var_49get_datap)) {

#line 1544 "cds3/core.pyx"
      __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 1544 "cds3/core.pyx"
      __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_sample_start); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1544 "cds3/core.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 1544 "cds3/core.pyx"
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1544 "cds3/core.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 1544 "cds3/core.pyx"
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 1544 "cds3/core.pyx"
      __Pyx_GIVEREF(__pyx_t_2);

#line 1544 "cds3/core.pyx"
      __pyx_t_2 = 0;

#line 1544 "cds3/core.pyx"
      __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1544 "cds3/core.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 1544 "cds3/core.pyx"
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 1544 "cds3/core.pyx"
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1544 "cds3/core.pyx"
      __pyx_r = ((PyArrayObject *)__pyx_t_2);

#line 1544 "cds3/core.pyx"
      __pyx_t_2 = 0;

#line 1544 "cds3/core.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1544 "cds3/core.pyx"
      goto __pyx_L0;

#line 1544 "cds3/core.pyx"
    }

#line 1544 "cds3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1544 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":1553
 * 
 *         """
 *         cdef void *ptr = NULL             # <<<<<<<<<<<<<<
 *         cdef size_t sample_count = self.c_ob.sample_count
 *         cdef np.ndarray array
 */

#line 1553 "cds3/core.pyx"
  __pyx_v_ptr = NULL;

  /* "cds3/core.pyx":1554
 *         """
 *         cdef void *ptr = NULL
 *         cdef size_t sample_count = self.c_ob.sample_count             # <<<<<<<<<<<<<<
 *         cdef np.ndarray array
 *         cdef np.npy_intp *dims
 */

#line 1554 "cds3/core.pyx"
  __pyx_t_4 = __pyx_v_self->c_ob->sample_count;

#line 1554 "cds3/core.pyx"
  __pyx_v_sample_count = __pyx_t_4;

  /* "cds3/core.pyx":1557
 *         cdef np.ndarray array
 *         cdef np.npy_intp *dims
 *         cdef int ndims = self.c_ob.ndims             # <<<<<<<<<<<<<<
 *         cdef np.dtype type = cds_type_to_dtype_obj(self.c_ob.type)
 *         ptr = cds_get_var_datap(self.c_ob, 0)
 */

#line 1557 "cds3/core.pyx"
  __pyx_t_5 = __pyx_v_self->c_ob->ndims;

#line 1557 "cds3/core.pyx"
  __pyx_v_ndims = __pyx_t_5;

  /* "cds3/core.pyx":1558
 *         cdef np.npy_intp *dims
 *         cdef int ndims = self.c_ob.ndims
 *         cdef np.dtype type = cds_type_to_dtype_obj(self.c_ob.type)             # <<<<<<<<<<<<<<
 *         ptr = cds_get_var_datap(self.c_ob, 0)
 *         if ptr == NULL:
 */

#line 1558 "cds3/core.pyx"
  __pyx_t_1 = ((PyObject *)__pyx_f_4cds3_4core_cds_type_to_dtype_obj(__pyx_v_self->c_ob->type)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1558; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1558 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1558 "cds3/core.pyx"
  __pyx_v_type = ((PyArray_Descr *)__pyx_t_1);

#line 1558 "cds3/core.pyx"
  __pyx_t_1 = 0;

  /* "cds3/core.pyx":1559
 *         cdef int ndims = self.c_ob.ndims
 *         cdef np.dtype type = cds_type_to_dtype_obj(self.c_ob.type)
 *         ptr = cds_get_var_datap(self.c_ob, 0)             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

#line 1559 "cds3/core.pyx"
  __pyx_v_ptr = cds_get_var_datap(__pyx_v_self->c_ob, 0);

  /* "cds3/core.pyx":1560
 *         cdef np.dtype type = cds_type_to_dtype_obj(self.c_ob.type)
 *         ptr = cds_get_var_datap(self.c_ob, 0)
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         dims = <np.npy_intp*>malloc(sizeof(np.npy_intp) * ndims)
 */

#line 1560 "cds3/core.pyx"
  __pyx_t_6 = (__pyx_v_ptr == NULL);

#line 1560 "cds3/core.pyx"
  if (__pyx_t_6) {

    /* "cds3/core.pyx":1561
 *         ptr = cds_get_var_datap(self.c_ob, 0)
 *         if ptr == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         dims = <np.npy_intp*>malloc(sizeof(np.npy_intp) * ndims)
 *         for i in range(ndims):
 */

#line 1561 "cds3/core.pyx"
    __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 1561 "cds3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 1561 "cds3/core.pyx"
    __pyx_r = ((PyArrayObject *)Py_None);

#line 1561 "cds3/core.pyx"
    goto __pyx_L0;

#line 1561 "cds3/core.pyx"
    goto __pyx_L3;

#line 1561 "cds3/core.pyx"
  }

#line 1561 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":1562
 *         if ptr == NULL:
 *             return None
 *         dims = <np.npy_intp*>malloc(sizeof(np.npy_intp) * ndims)             # <<<<<<<<<<<<<<
 *         for i in range(ndims):
 *             dims[i] = self.c_ob.dims[i].length
 */

#line 1562 "cds3/core.pyx"
  __pyx_v_dims = ((npy_intp *)malloc(((sizeof(npy_intp)) * __pyx_v_ndims)));

  /* "cds3/core.pyx":1563
 *             return None
 *         dims = <np.npy_intp*>malloc(sizeof(np.npy_intp) * ndims)
 *         for i in range(ndims):             # <<<<<<<<<<<<<<
 *             dims[i] = self.c_ob.dims[i].length
 *         dims[0] = sample_count
 */

#line 1563 "cds3/core.pyx"
  __pyx_t_5 = __pyx_v_ndims;

#line 1563 "cds3/core.pyx"
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_5; __pyx_t_7+=1) {

#line 1563 "cds3/core.pyx"
    __pyx_v_i = __pyx_t_7;

    /* "cds3/core.pyx":1564
 *         dims = <np.npy_intp*>malloc(sizeof(np.npy_intp) * ndims)
 *         for i in range(ndims):
 *             dims[i] = self.c_ob.dims[i].length             # <<<<<<<<<<<<<<
 *         dims[0] = sample_count
 *         array = np.PyArray_SimpleNewFromData(ndims, dims, type.num, ptr)
 */

#line 1564 "cds3/core.pyx"
    __pyx_t_4 = (__pyx_v_self->c_ob->dims[__pyx_v_i])->length;

#line 1564 "cds3/core.pyx"
    (__pyx_v_dims[__pyx_v_i]) = __pyx_t_4;

#line 1564 "cds3/core.pyx"
  }

  /* "cds3/core.pyx":1565
 *         for i in range(ndims):
 *             dims[i] = self.c_ob.dims[i].length
 *         dims[0] = sample_count             # <<<<<<<<<<<<<<
 *         array = np.PyArray_SimpleNewFromData(ndims, dims, type.num, ptr)
 *         free(dims)
 */

#line 1565 "cds3/core.pyx"
  (__pyx_v_dims[0]) = __pyx_v_sample_count;

  /* "cds3/core.pyx":1566
 *             dims[i] = self.c_ob.dims[i].length
 *         dims[0] = sample_count
 *         array = np.PyArray_SimpleNewFromData(ndims, dims, type.num, ptr)             # <<<<<<<<<<<<<<
 *         free(dims)
 *         if 0 == sample_start:
 */

#line 1566 "cds3/core.pyx"
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_type), __pyx_n_s__num); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1566 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1566 "cds3/core.pyx"
  __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1566 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1566 "cds3/core.pyx"
  __pyx_t_1 = PyArray_SimpleNewFromData(__pyx_v_ndims, __pyx_v_dims, __pyx_t_5, __pyx_v_ptr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1566 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1566 "cds3/core.pyx"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1566 "cds3/core.pyx"
  __pyx_v_array = ((PyArrayObject *)__pyx_t_1);

#line 1566 "cds3/core.pyx"
  __pyx_t_1 = 0;

  /* "cds3/core.pyx":1567
 *         dims[0] = sample_count
 *         array = np.PyArray_SimpleNewFromData(ndims, dims, type.num, ptr)
 *         free(dims)             # <<<<<<<<<<<<<<
 *         if 0 == sample_start:
 *             return array
 */

#line 1567 "cds3/core.pyx"
  free(__pyx_v_dims);

  /* "cds3/core.pyx":1568
 *         array = np.PyArray_SimpleNewFromData(ndims, dims, type.num, ptr)
 *         free(dims)
 *         if 0 == sample_start:             # <<<<<<<<<<<<<<
 *             return array
 *         else:
 */

#line 1568 "cds3/core.pyx"
  __pyx_t_6 = (0 == __pyx_v_sample_start);

#line 1568 "cds3/core.pyx"
  if (__pyx_t_6) {

    /* "cds3/core.pyx":1569
 *         free(dims)
 *         if 0 == sample_start:
 *             return array             # <<<<<<<<<<<<<<
 *         else:
 *             return array[sample_start:]
 */

#line 1569 "cds3/core.pyx"
    __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 1569 "cds3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_array));

#line 1569 "cds3/core.pyx"
    __pyx_r = __pyx_v_array;

#line 1569 "cds3/core.pyx"
    goto __pyx_L0;

#line 1569 "cds3/core.pyx"
    goto __pyx_L6;

#line 1569 "cds3/core.pyx"
  }

#line 1569 "cds3/core.pyx"
  /*else*/ {

    /* "cds3/core.pyx":1571
 *             return array
 *         else:
 *             return array[sample_start:]             # <<<<<<<<<<<<<<
 * 
 *     def get_missing_values(self):
 */

#line 1571 "cds3/core.pyx"
    __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 1571 "cds3/core.pyx"
    __pyx_t_1 = __Pyx_PySequence_GetSlice(((PyObject *)__pyx_v_array), __pyx_v_sample_start, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1571 "cds3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 1571 "cds3/core.pyx"
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1571 "cds3/core.pyx"
    __pyx_r = ((PyArrayObject *)__pyx_t_1);

#line 1571 "cds3/core.pyx"
    __pyx_t_1 = 0;

#line 1571 "cds3/core.pyx"
    goto __pyx_L0;

#line 1571 "cds3/core.pyx"
  }

#line 1571 "cds3/core.pyx"
  __pyx_L6:;

#line 1571 "cds3/core.pyx"


#line 1571 "cds3/core.pyx"
  __pyx_r = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None);

#line 1571 "cds3/core.pyx"
  goto __pyx_L0;

#line 1571 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1571 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1571 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1571 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 1571 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.get_datap", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1571 "cds3/core.pyx"
  __pyx_r = 0;

#line 1571 "cds3/core.pyx"
  __pyx_L0:;

#line 1571 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_array);

#line 1571 "cds3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_type);

#line 1571 "cds3/core.pyx"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 1571 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1571 "cds3/core.pyx"
  return __pyx_r;

#line 1571 "cds3/core.pyx"
}

#line 1571 "cds3/core.pyx"


#line 1571 "cds3/core.pyx"
/* Python wrapper */

#line 1571 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_49get_datap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1571 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_48get_datap[] = "Var.get_datap(self, size_t sample_start=0) -> ndarray\nGet an ndarray for the the data in a CDS variable.\n        \n        @param sample_start - start sample\n        \n        @retval the variable data as an ndarray\n        @retval None if the variable has no data for sample_start\n        \n        ";

#line 1571 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_49get_datap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_sample_start
#line 1571 "cds3/core.pyx"
;

#line 1571 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1571 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1571 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_datap (wrapper)", 0);

#line 1571 "cds3/core.pyx"
  {

#line 1571 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__sample_start,0};

#line 1571 "cds3/core.pyx"
    PyObject* values[1] = {0};

#line 1571 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1571 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 1571 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1571 "cds3/core.pyx"
      switch (pos_args) {
        case  1: 
#line 1571 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1571 "cds3/core.pyx"
        case  0: break;
        default: 
#line 1571 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1571 "cds3/core.pyx"
      }

#line 1571 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1571 "cds3/core.pyx"
      switch (pos_args) {

#line 1571 "cds3/core.pyx"
        case  0:

#line 1571 "cds3/core.pyx"
        if (kw_args > 0) {

#line 1571 "cds3/core.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_start);

#line 1571 "cds3/core.pyx"
          if (value) { values[0] = value; kw_args--; }

#line 1571 "cds3/core.pyx"
        }

#line 1571 "cds3/core.pyx"
      }

#line 1571 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1571 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_datap") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1544; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1571 "cds3/core.pyx"
      }

#line 1571 "cds3/core.pyx"
    } else {

#line 1571 "cds3/core.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: 
#line 1571 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: 
#line 1571 "cds3/core.pyx"
break;
        default: 
#line 1571 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1571 "cds3/core.pyx"
      }

#line 1571 "cds3/core.pyx"
    }

#line 1571 "cds3/core.pyx"
    if (values[0]) {

#line 1571 "cds3/core.pyx"
      __pyx_v_sample_start = __Pyx_PyInt_AsSize_t(values[0]); if (unlikely((__pyx_v_sample_start == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1544; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1571 "cds3/core.pyx"
    } else {

#line 1571 "cds3/core.pyx"
      __pyx_v_sample_start = ((size_t)0);

#line 1571 "cds3/core.pyx"
    }

#line 1571 "cds3/core.pyx"
  }

#line 1571 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1571 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_datap", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); 
#line 1571 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1544; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1571 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1571 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.get_datap", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1571 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1571 "cds3/core.pyx"
  return NULL;

#line 1571 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1571 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_48get_datap(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self), __pyx_v_sample_start);

#line 1571 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1571 "cds3/core.pyx"
  return __pyx_r;

#line 1571 "cds3/core.pyx"
}

/* "cds3/core.pyx":1544
 *         return array,missing_py
 * 
 *     cpdef np.ndarray get_datap(self, size_t sample_start=0):             # <<<<<<<<<<<<<<
 *         """Get an ndarray for the the data in a CDS variable.
 * 
 */

#line 1544 "cds3/core.pyx"


#line 1544 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_48get_datap(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, size_t __pyx_v_sample_start) {

#line 1544 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_4cds3_4core_3Var_get_datap __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1544 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_datap", 0);

#line 1544 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1544 "cds3/core.pyx"
  __pyx_t_2.__pyx_n = 1;

#line 1544 "cds3/core.pyx"
  __pyx_t_2.sample_start = __pyx_v_sample_start;

#line 1544 "cds3/core.pyx"
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_datap(__pyx_v_self, 1, &__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1544 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1544 "cds3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 1544 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 1544 "cds3/core.pyx"
  goto __pyx_L0;

#line 1544 "cds3/core.pyx"


#line 1544 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1544 "cds3/core.pyx"
  goto __pyx_L0;

#line 1544 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1544 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1544 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.get_datap", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1544 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1544 "cds3/core.pyx"
  __pyx_L0:;

#line 1544 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1544 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1544 "cds3/core.pyx"
  return __pyx_r;

#line 1544 "cds3/core.pyx"
}

#line 1544 "cds3/core.pyx"


#line 1544 "cds3/core.pyx"
/* Python wrapper */

#line 1544 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_51get_missing_values(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1544 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_50get_missing_values[] = "Var.get_missing_values(self)";

#line 1544 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_51get_missing_values(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1544 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1544 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1544 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_missing_values (wrapper)", 0);
  __pyx_r = 
#line 1544 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_50get_missing_values(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self));

#line 1544 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1544 "cds3/core.pyx"
  return __pyx_r;

#line 1544 "cds3/core.pyx"
}

/* "cds3/core.pyx":1573
 *             return array[sample_start:]
 * 
 *     def get_missing_values(self):             # <<<<<<<<<<<<<<
 *         # WHERE JEFF LEFT OFF
 *         raise NotImplementedError, "TODO"
 */

#line 1573 "cds3/core.pyx"


#line 1573 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_50get_missing_values(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_Var *__pyx_v_self) {

#line 1573 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1573 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_missing_values", 0);

  /* "cds3/core.pyx":1575
 *     def get_missing_values(self):
 *         # WHERE JEFF LEFT OFF
 *         raise NotImplementedError, "TODO"             # <<<<<<<<<<<<<<
 * 
 *     def get_units(self):
 */

#line 1575 "cds3/core.pyx"
  __Pyx_Raise(__pyx_builtin_NotImplementedError, ((PyObject *)__pyx_n_s__TODO), 0, 0);

#line 1575 "cds3/core.pyx"
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1575 "cds3/core.pyx"


#line 1575 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1575 "cds3/core.pyx"
  goto __pyx_L0;

#line 1575 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1575 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.get_missing_values", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1575 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1575 "cds3/core.pyx"
  __pyx_L0:;

#line 1575 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1575 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1575 "cds3/core.pyx"
  return __pyx_r;

#line 1575 "cds3/core.pyx"
}

#line 1575 "cds3/core.pyx"


#line 1575 "cds3/core.pyx"
/* Python wrapper */

#line 1575 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_53get_units(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 1575 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_52get_units[] = "Var.get_units(self)";

#line 1575 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_53get_units(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {

#line 1575 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1575 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1575 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_units (wrapper)", 0);
  __pyx_r = 
#line 1575 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_52get_units(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self));

#line 1575 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1575 "cds3/core.pyx"
  return __pyx_r;

#line 1575 "cds3/core.pyx"
}

/* "cds3/core.pyx":1577
 *         raise NotImplementedError, "TODO"
 * 
 *     def get_units(self):             # <<<<<<<<<<<<<<
 *         return cds_get_var_units(self.c_ob)
 * 
 */

#line 1577 "cds3/core.pyx"


#line 1577 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_52get_units(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self) {

#line 1577 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1577 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("get_units", 0);

  /* "cds3/core.pyx":1578
 * 
 *     def get_units(self):
 *         return cds_get_var_units(self.c_ob)             # <<<<<<<<<<<<<<
 * 
 *     def init_data(self, size_t sample_start, size_t sample_count,
 */

#line 1578 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1578 "cds3/core.pyx"
  __pyx_t_1 = PyBytes_FromString(cds_get_var_units(__pyx_v_self->c_ob)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1578 "cds3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 1578 "cds3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_t_1);

#line 1578 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 1578 "cds3/core.pyx"
  goto __pyx_L0;

#line 1578 "cds3/core.pyx"


#line 1578 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1578 "cds3/core.pyx"
  goto __pyx_L0;

#line 1578 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1578 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1578 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.get_units", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1578 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1578 "cds3/core.pyx"
  __pyx_L0:;

#line 1578 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1578 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1578 "cds3/core.pyx"
  return __pyx_r;

#line 1578 "cds3/core.pyx"
}

#line 1578 "cds3/core.pyx"


#line 1578 "cds3/core.pyx"
/* Python wrapper */

#line 1578 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_55init_data(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1578 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_54init_data[] = "Var.init_data(self, size_t sample_start, size_t sample_count, int use_missing)";

#line 1578 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_55init_data(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED size_t __pyx_v_sample_start
#line 1578 "cds3/core.pyx"
;
  CYTHON_UNUSED size_t __pyx_v_sample_count
#line 1578 "cds3/core.pyx"
;
  CYTHON_UNUSED int __pyx_v_use_missing
#line 1578 "cds3/core.pyx"
;

#line 1578 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1578 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1578 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("init_data (wrapper)", 0);

#line 1578 "cds3/core.pyx"
  {

#line 1578 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__sample_start,&__pyx_n_s__sample_count,&__pyx_n_s__use_missing,0};

#line 1578 "cds3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 1578 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1578 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 1578 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1578 "cds3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 1578 "cds3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1578 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1578 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1578 "cds3/core.pyx"
        case  0: break;
        default: 
#line 1578 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1578 "cds3/core.pyx"
      }

#line 1578 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1578 "cds3/core.pyx"
      switch (pos_args) {

#line 1578 "cds3/core.pyx"
        case  0:

#line 1578 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_start)) != 0)) kw_args--;
        else 
#line 1578 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1578 "cds3/core.pyx"
        case  1:

#line 1578 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_count)) != 0)) kw_args--;

#line 1578 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("init_data", 1, 3, 3, 1); 
#line 1578 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1580; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1578 "cds3/core.pyx"
        }

#line 1578 "cds3/core.pyx"
        case  2:

#line 1578 "cds3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__use_missing)) != 0)) kw_args--;

#line 1578 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("init_data", 1, 3, 3, 2); 
#line 1578 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1580; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1578 "cds3/core.pyx"
        }

#line 1578 "cds3/core.pyx"
      }

#line 1578 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1578 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "init_data") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1580; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1578 "cds3/core.pyx"
      }

#line 1578 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 1578 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1578 "cds3/core.pyx"
    } else {

#line 1578 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1578 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1578 "cds3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1578 "cds3/core.pyx"
    }

#line 1578 "cds3/core.pyx"
    __pyx_v_sample_start = __Pyx_PyInt_AsSize_t(values[0]); if (unlikely((__pyx_v_sample_start == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1580; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1578 "cds3/core.pyx"
    __pyx_v_sample_count = __Pyx_PyInt_AsSize_t(values[1]); if (unlikely((__pyx_v_sample_count == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1580; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1578 "cds3/core.pyx"
    __pyx_v_use_missing = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_use_missing == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1581; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1578 "cds3/core.pyx"
  }

#line 1578 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1578 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init_data", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 1578 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1580; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1578 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1578 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.init_data", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1578 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1578 "cds3/core.pyx"
  return NULL;

#line 1578 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1578 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_54init_data(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self), __pyx_v_sample_start, __pyx_v_sample_count, __pyx_v_use_missing);

#line 1578 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1578 "cds3/core.pyx"
  return __pyx_r;

#line 1578 "cds3/core.pyx"
}

/* "cds3/core.pyx":1580
 *         return cds_get_var_units(self.c_ob)
 * 
 *     def init_data(self, size_t sample_start, size_t sample_count,             # <<<<<<<<<<<<<<
 *             int use_missing):
 *         raise NotImplementedError, "TODO"
 */

#line 1580 "cds3/core.pyx"


#line 1580 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_54init_data(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, CYTHON_UNUSED size_t __pyx_v_sample_start, CYTHON_UNUSED size_t __pyx_v_sample_count, CYTHON_UNUSED int __pyx_v_use_missing) {

#line 1580 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1580 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("init_data", 0);

  /* "cds3/core.pyx":1582
 *     def init_data(self, size_t sample_start, size_t sample_count,
 *             int use_missing):
 *         raise NotImplementedError, "TODO"             # <<<<<<<<<<<<<<
 * 
 *     def init_data_index(self, size_t sample_start, size_t sample_count,
 */

#line 1582 "cds3/core.pyx"
  __Pyx_Raise(__pyx_builtin_NotImplementedError, ((PyObject *)__pyx_n_s__TODO), 0, 0);

#line 1582 "cds3/core.pyx"
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1582; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1582 "cds3/core.pyx"


#line 1582 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1582 "cds3/core.pyx"
  goto __pyx_L0;

#line 1582 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1582 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.init_data", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1582 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1582 "cds3/core.pyx"
  __pyx_L0:;

#line 1582 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1582 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1582 "cds3/core.pyx"
  return __pyx_r;

#line 1582 "cds3/core.pyx"
}

#line 1582 "cds3/core.pyx"


#line 1582 "cds3/core.pyx"
/* Python wrapper */

#line 1582 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_57init_data_index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1582 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_56init_data_index[] = "Var.init_data_index(self, size_t sample_start, size_t sample_count, int use_missing)\nInitialize the data values for a CDS variable.\n        \n        This function behaves the same as cds_init_var_data() except that it\n        returns a data index starting at the specified start sample, see\n        cds_create_data_index() for details. For variables that have less than\n        two dimensions this function is identical to cds_init_var_data().\n        \n        The data index returned by this function belongs to the CDS variable\n        and will be freed when the variable is destroyed. The calling process\n        must *not* attempt to free this memory.\n        \n        Error messages from this function are sent to the message handler\n        (see msngr_init_log() and msngr_init_mail()).\n        \n        @param var - pointer to the variable\n        @param sample_start - start sample of the data to initialize\n        (0 based indexing)\n        @param sample_count - number of samples to initialize\n        @param use_missing - flag indicating if the variables missing value\n        should be used (1 == TRUE, 0 == fill with zeros)\n        \n        @retval the data index into the variables data array starting at the\n                specified start sample.\n        @retval None if the specified sample count is zero\n        @retval None if one of the variable's static dimensions has 0 length\n        @retval None if the variable has no dimensions, and sample_start is not\n                equal to 0 or sample_count is not equal to 1.\n        @retval None if the first variable dimension is not unlimited, and\n                sample_start + sample_count would exceed the dimension length.\n        @retval None if a memory allocation error occurred\n\n        ";

#line 1582 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_57init_data_index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  size_t __pyx_v_sample_start
#line 1582 "cds3/core.pyx"
;
  size_t __pyx_v_sample_count
#line 1582 "cds3/core.pyx"
;
  int __pyx_v_use_missing
#line 1582 "cds3/core.pyx"
;

#line 1582 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1582 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1582 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("init_data_index (wrapper)", 0);

#line 1582 "cds3/core.pyx"
  {

#line 1582 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__sample_start,&__pyx_n_s__sample_count,&__pyx_n_s__use_missing,0};

#line 1582 "cds3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 1582 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1582 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 1582 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1582 "cds3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 1582 "cds3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1582 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1582 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1582 "cds3/core.pyx"
        case  0: break;
        default: 
#line 1582 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1582 "cds3/core.pyx"
      }

#line 1582 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1582 "cds3/core.pyx"
      switch (pos_args) {

#line 1582 "cds3/core.pyx"
        case  0:

#line 1582 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_start)) != 0)) kw_args--;
        else 
#line 1582 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1582 "cds3/core.pyx"
        case  1:

#line 1582 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_count)) != 0)) kw_args--;

#line 1582 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("init_data_index", 1, 3, 3, 1); 
#line 1582 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1584; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1582 "cds3/core.pyx"
        }

#line 1582 "cds3/core.pyx"
        case  2:

#line 1582 "cds3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__use_missing)) != 0)) kw_args--;

#line 1582 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("init_data_index", 1, 3, 3, 2); 
#line 1582 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1584; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1582 "cds3/core.pyx"
        }

#line 1582 "cds3/core.pyx"
      }

#line 1582 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1582 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "init_data_index") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1584; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1582 "cds3/core.pyx"
      }

#line 1582 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 1582 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1582 "cds3/core.pyx"
    } else {

#line 1582 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1582 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1582 "cds3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1582 "cds3/core.pyx"
    }

#line 1582 "cds3/core.pyx"
    __pyx_v_sample_start = __Pyx_PyInt_AsSize_t(values[0]); if (unlikely((__pyx_v_sample_start == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1584; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1582 "cds3/core.pyx"
    __pyx_v_sample_count = __Pyx_PyInt_AsSize_t(values[1]); if (unlikely((__pyx_v_sample_count == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1584; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1582 "cds3/core.pyx"
    __pyx_v_use_missing = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_use_missing == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1585; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1582 "cds3/core.pyx"
  }

#line 1582 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1582 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init_data_index", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 1582 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1584; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1582 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1582 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.init_data_index", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1582 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1582 "cds3/core.pyx"
  return NULL;

#line 1582 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1582 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_56init_data_index(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self), __pyx_v_sample_start, __pyx_v_sample_count, __pyx_v_use_missing);

#line 1582 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1582 "cds3/core.pyx"
  return __pyx_r;

#line 1582 "cds3/core.pyx"
}

/* "cds3/core.pyx":1584
 *         raise NotImplementedError, "TODO"
 * 
 *     def init_data_index(self, size_t sample_start, size_t sample_count,             # <<<<<<<<<<<<<<
 *             int use_missing):
 *         """Initialize the data values for a CDS variable.
 */

#line 1584 "cds3/core.pyx"


#line 1584 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_56init_data_index(struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, size_t __pyx_v_sample_start, size_t __pyx_v_sample_count, int __pyx_v_use_missing) {
  void *__pyx_v_ptr
#line 1584 "cds3/core.pyx"
;

#line 1584 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_4cds3_4core_3Var_get_datap __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1584 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("init_data_index", 0);

  /* "cds3/core.pyx":1619
 *         """
 *         cdef void *ptr = cds_init_var_data_index(self.c_ob, sample_start,
 *                 sample_count, use_missing)             # <<<<<<<<<<<<<<
 *         if ptr == NULL:
 *             return None
 */

#line 1619 "cds3/core.pyx"
  __pyx_v_ptr = cds_init_var_data_index(__pyx_v_self->c_ob, __pyx_v_sample_start, __pyx_v_sample_count, __pyx_v_use_missing);

  /* "cds3/core.pyx":1620
 *         cdef void *ptr = cds_init_var_data_index(self.c_ob, sample_start,
 *                 sample_count, use_missing)
 *         if ptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         return self.get_datap(sample_start)
 */

#line 1620 "cds3/core.pyx"
  __pyx_t_1 = (__pyx_v_ptr == NULL);

#line 1620 "cds3/core.pyx"
  if (__pyx_t_1) {

    /* "cds3/core.pyx":1621
 *                 sample_count, use_missing)
 *         if ptr == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         return self.get_datap(sample_start)
 * 
 */

#line 1621 "cds3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1621 "cds3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 1621 "cds3/core.pyx"
    __pyx_r = Py_None;

#line 1621 "cds3/core.pyx"
    goto __pyx_L0;

#line 1621 "cds3/core.pyx"
    goto __pyx_L3;

#line 1621 "cds3/core.pyx"
  }

#line 1621 "cds3/core.pyx"
  __pyx_L3:;

  /* "cds3/core.pyx":1622
 *         if ptr == NULL:
 *             return None
 *         return self.get_datap(sample_start)             # <<<<<<<<<<<<<<
 * 
 *     def set_default_fill_value(self, object fill_value):
 */

#line 1622 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1622 "cds3/core.pyx"
  __pyx_t_3.__pyx_n = 1;

#line 1622 "cds3/core.pyx"
  __pyx_t_3.sample_start = __pyx_v_sample_start;

#line 1622 "cds3/core.pyx"
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_datap(__pyx_v_self, 0, &__pyx_t_3)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1622 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1622 "cds3/core.pyx"
  __pyx_r = __pyx_t_2;

#line 1622 "cds3/core.pyx"
  __pyx_t_2 = 0;

#line 1622 "cds3/core.pyx"
  goto __pyx_L0;

#line 1622 "cds3/core.pyx"


#line 1622 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1622 "cds3/core.pyx"
  goto __pyx_L0;

#line 1622 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1622 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1622 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.init_data_index", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1622 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1622 "cds3/core.pyx"
  __pyx_L0:;

#line 1622 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1622 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1622 "cds3/core.pyx"
  return __pyx_r;

#line 1622 "cds3/core.pyx"
}

#line 1622 "cds3/core.pyx"


#line 1622 "cds3/core.pyx"
/* Python wrapper */

#line 1622 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_59set_default_fill_value(PyObject *__pyx_v_self, PyObject *__pyx_v_fill_value); /*proto*/

#line 1622 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_58set_default_fill_value[] = "Var.set_default_fill_value(self, fill_value)";

#line 1622 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_59set_default_fill_value(PyObject *__pyx_v_self, PyObject *__pyx_v_fill_value) {

#line 1622 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1622 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1622 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("set_default_fill_value (wrapper)", 0);
  __pyx_r = 
#line 1622 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_58set_default_fill_value(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self), ((PyObject *)__pyx_v_fill_value));

#line 1622 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1622 "cds3/core.pyx"
  return __pyx_r;

#line 1622 "cds3/core.pyx"
}

/* "cds3/core.pyx":1624
 *         return self.get_datap(sample_start)
 * 
 *     def set_default_fill_value(self, object fill_value):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError, "TODO"
 * 
 */

#line 1624 "cds3/core.pyx"


#line 1624 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_58set_default_fill_value(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_fill_value) {

#line 1624 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1624 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("set_default_fill_value", 0);

  /* "cds3/core.pyx":1625
 * 
 *     def set_default_fill_value(self, object fill_value):
 *         raise NotImplementedError, "TODO"             # <<<<<<<<<<<<<<
 * 
 *     def set_data(self, CDSDataType type, size_t sample_start, size_t
 */

#line 1625 "cds3/core.pyx"
  __Pyx_Raise(__pyx_builtin_NotImplementedError, ((PyObject *)__pyx_n_s__TODO), 0, 0);

#line 1625 "cds3/core.pyx"
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1625 "cds3/core.pyx"


#line 1625 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1625 "cds3/core.pyx"
  goto __pyx_L0;

#line 1625 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1625 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.set_default_fill_value", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1625 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1625 "cds3/core.pyx"
  __pyx_L0:;

#line 1625 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1625 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1625 "cds3/core.pyx"
  return __pyx_r;

#line 1625 "cds3/core.pyx"
}

#line 1625 "cds3/core.pyx"


#line 1625 "cds3/core.pyx"
/* Python wrapper */

#line 1625 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_61set_data(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1625 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_3Var_60set_data[] = "Var.set_data(self, CDSDataType type, size_t sample_start, size_t sample_count, missing_value, data)";

#line 1625 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3Var_61set_data(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED CDSDataType __pyx_v_type
#line 1625 "cds3/core.pyx"
;
  CYTHON_UNUSED size_t __pyx_v_sample_start
#line 1625 "cds3/core.pyx"
;
  CYTHON_UNUSED size_t __pyx_v_sample_count
#line 1625 "cds3/core.pyx"
;
  CYTHON_UNUSED PyObject *__pyx_v_missing_value = 0
#line 1625 "cds3/core.pyx"
;
  CYTHON_UNUSED PyObject *__pyx_v_data = 0
#line 1625 "cds3/core.pyx"
;

#line 1625 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1625 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1625 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("set_data (wrapper)", 0);

#line 1625 "cds3/core.pyx"
  {

#line 1625 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__type,&__pyx_n_s__sample_start,&__pyx_n_s__sample_count,&__pyx_n_s__missing_value,&__pyx_n_s__data,0};

#line 1625 "cds3/core.pyx"
    PyObject* values[5] = {0,0,0,0,0};

#line 1625 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1625 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 1625 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1625 "cds3/core.pyx"
      switch (pos_args) {
        case  5: 
#line 1625 "cds3/core.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 1625 "cds3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 1625 "cds3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1625 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1625 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1625 "cds3/core.pyx"
        case  0: break;
        default: 
#line 1625 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1625 "cds3/core.pyx"
      }

#line 1625 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1625 "cds3/core.pyx"
      switch (pos_args) {

#line 1625 "cds3/core.pyx"
        case  0:

#line 1625 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__type)) != 0)) kw_args--;
        else 
#line 1625 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1625 "cds3/core.pyx"
        case  1:

#line 1625 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_start)) != 0)) kw_args--;

#line 1625 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_data", 1, 5, 5, 1); 
#line 1625 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1627; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1625 "cds3/core.pyx"
        }

#line 1625 "cds3/core.pyx"
        case  2:

#line 1625 "cds3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_count)) != 0)) kw_args--;

#line 1625 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_data", 1, 5, 5, 2); 
#line 1625 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1627; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1625 "cds3/core.pyx"
        }

#line 1625 "cds3/core.pyx"
        case  3:

#line 1625 "cds3/core.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__missing_value)) != 0)) kw_args--;

#line 1625 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_data", 1, 5, 5, 3); 
#line 1625 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1627; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1625 "cds3/core.pyx"
        }

#line 1625 "cds3/core.pyx"
        case  4:

#line 1625 "cds3/core.pyx"
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__data)) != 0)) kw_args--;

#line 1625 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_data", 1, 5, 5, 4); 
#line 1625 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1627; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1625 "cds3/core.pyx"
        }

#line 1625 "cds3/core.pyx"
      }

#line 1625 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1625 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_data") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1627; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1625 "cds3/core.pyx"
      }

#line 1625 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {

#line 1625 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1625 "cds3/core.pyx"
    } else {

#line 1625 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1625 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1625 "cds3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1625 "cds3/core.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 1625 "cds3/core.pyx"
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 1625 "cds3/core.pyx"
    }

#line 1625 "cds3/core.pyx"
    __pyx_v_type = ((CDSDataType)PyInt_AsLong(values[0])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1627; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1625 "cds3/core.pyx"
    __pyx_v_sample_start = __Pyx_PyInt_AsSize_t(values[1]); if (unlikely((__pyx_v_sample_start == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1627; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1625 "cds3/core.pyx"
    __pyx_v_sample_count = __Pyx_PyInt_AsSize_t(values[2]); if (unlikely((__pyx_v_sample_count == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1627; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1625 "cds3/core.pyx"
    __pyx_v_missing_value = values[3];

#line 1625 "cds3/core.pyx"
    __pyx_v_data = values[4];

#line 1625 "cds3/core.pyx"
  }

#line 1625 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1625 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_data", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); 
#line 1625 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1627; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1625 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1625 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.set_data", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1625 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1625 "cds3/core.pyx"
  return NULL;

#line 1625 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1625 "cds3/core.pyx"
__pyx_pf_4cds3_4core_3Var_60set_data(((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_self), __pyx_v_type, __pyx_v_sample_start, __pyx_v_sample_count, __pyx_v_missing_value, __pyx_v_data);

#line 1625 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1625 "cds3/core.pyx"
  return __pyx_r;

#line 1625 "cds3/core.pyx"
}

/* "cds3/core.pyx":1627
 *         raise NotImplementedError, "TODO"
 * 
 *     def set_data(self, CDSDataType type, size_t sample_start, size_t             # <<<<<<<<<<<<<<
 *             sample_count, object missing_value, object data):
 *         raise NotImplementedError, "TODO"
 */

#line 1627 "cds3/core.pyx"


#line 1627 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_3Var_60set_data(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_Var *__pyx_v_self, CYTHON_UNUSED CDSDataType __pyx_v_type, CYTHON_UNUSED size_t __pyx_v_sample_start, CYTHON_UNUSED size_t __pyx_v_sample_count, CYTHON_UNUSED PyObject *__pyx_v_missing_value, CYTHON_UNUSED PyObject *__pyx_v_data) {

#line 1627 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1627 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("set_data", 0);

  /* "cds3/core.pyx":1629
 *     def set_data(self, CDSDataType type, size_t sample_start, size_t
 *             sample_count, object missing_value, object data):
 *         raise NotImplementedError, "TODO"             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 1629 "cds3/core.pyx"
  __Pyx_Raise(__pyx_builtin_NotImplementedError, ((PyObject *)__pyx_n_s__TODO), 0, 0);

#line 1629 "cds3/core.pyx"
  {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1629; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1629 "cds3/core.pyx"


#line 1629 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1629 "cds3/core.pyx"
  goto __pyx_L0;

#line 1629 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1629 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.Var.set_data", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1629 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1629 "cds3/core.pyx"
  __pyx_L0:;

#line 1629 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1629 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1629 "cds3/core.pyx"
  return __pyx_r;

#line 1629 "cds3/core.pyx"
}

#line 1629 "cds3/core.pyx"


#line 1629 "cds3/core.pyx"
/* Python wrapper */

#line 1629 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_8VarGroup_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1629 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_8VarGroup_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

#line 1629 "cds3/core.pyx"
  int __pyx_r;

#line 1629 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1629 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 1629 "cds3/core.pyx"
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;
#line 1629 "cds3/core.pyx"
}

#line 1629 "cds3/core.pyx"
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = 
#line 1629 "cds3/core.pyx"
__pyx_pf_4cds3_4core_8VarGroup___cinit__(((struct __pyx_obj_4cds3_4core_VarGroup *)__pyx_v_self));

#line 1629 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1629 "cds3/core.pyx"
  return __pyx_r;

#line 1629 "cds3/core.pyx"
}

/* "cds3/core.pyx":1635
 *     """CDSVarGroup"""
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.c_ob = NULL
 * 
 */

#line 1635 "cds3/core.pyx"


#line 1635 "cds3/core.pyx"
static int __pyx_pf_4cds3_4core_8VarGroup___cinit__(struct __pyx_obj_4cds3_4core_VarGroup *__pyx_v_self) {

#line 1635 "cds3/core.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations

#line 1635 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cds3/core.pyx":1636
 * 
 *     def __cinit__(self):
 *         self.c_ob = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */

#line 1636 "cds3/core.pyx"
  __pyx_v_self->c_ob = NULL;

#line 1636 "cds3/core.pyx"


#line 1636 "cds3/core.pyx"
  __pyx_r = 0;

#line 1636 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1636 "cds3/core.pyx"
  return __pyx_r;

#line 1636 "cds3/core.pyx"
}

#line 1636 "cds3/core.pyx"


#line 1636 "cds3/core.pyx"
/* Python wrapper */

#line 1636 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_8VarGroup_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1636 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_8VarGroup_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

#line 1636 "cds3/core.pyx"
  int __pyx_r;

#line 1636 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1636 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);

#line 1636 "cds3/core.pyx"
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;
#line 1636 "cds3/core.pyx"
}

#line 1636 "cds3/core.pyx"
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = 
#line 1636 "cds3/core.pyx"
__pyx_pf_4cds3_4core_8VarGroup_2__init__(((struct __pyx_obj_4cds3_4core_VarGroup *)__pyx_v_self));

#line 1636 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1636 "cds3/core.pyx"
  return __pyx_r;

#line 1636 "cds3/core.pyx"
}

/* "cds3/core.pyx":1638
 *         self.c_ob = NULL
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

#line 1638 "cds3/core.pyx"


#line 1638 "cds3/core.pyx"
static int __pyx_pf_4cds3_4core_8VarGroup_2__init__(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_VarGroup *__pyx_v_self) {

#line 1638 "cds3/core.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations

#line 1638 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__init__", 0);

#line 1638 "cds3/core.pyx"


#line 1638 "cds3/core.pyx"
  __pyx_r = 0;

#line 1638 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1638 "cds3/core.pyx"
  return __pyx_r;

#line 1638 "cds3/core.pyx"
}

/* "cds3/core.pyx":1641
 *         pass
 * 
 *     cdef set_vargroup(self, CDSVarGroup *vargroup):             # <<<<<<<<<<<<<<
 *         self.cds_object = <CDSObject*>vargroup
 *         self.c_ob = vargroup
 */

#line 1641 "cds3/core.pyx"


#line 1641 "cds3/core.pyx"
static PyObject *__pyx_f_4cds3_4core_8VarGroup_set_vargroup(struct __pyx_obj_4cds3_4core_VarGroup *__pyx_v_self, struct CDSVarGroup *__pyx_v_vargroup) {

#line 1641 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations

#line 1641 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("set_vargroup", 0);

  /* "cds3/core.pyx":1642
 * 
 *     cdef set_vargroup(self, CDSVarGroup *vargroup):
 *         self.cds_object = <CDSObject*>vargroup             # <<<<<<<<<<<<<<
 *         self.c_ob = vargroup
 * 
 */

#line 1642 "cds3/core.pyx"
  __pyx_v_self->__pyx_base.cds_object = ((struct CDSObject *)__pyx_v_vargroup);

  /* "cds3/core.pyx":1643
 *     cdef set_vargroup(self, CDSVarGroup *vargroup):
 *         self.cds_object = <CDSObject*>vargroup
 *         self.c_ob = vargroup             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */

#line 1643 "cds3/core.pyx"
  __pyx_v_self->c_ob = __pyx_v_vargroup;

#line 1643 "cds3/core.pyx"


#line 1643 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1643 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1643 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1643 "cds3/core.pyx"
  return __pyx_r;

#line 1643 "cds3/core.pyx"
}

#line 1643 "cds3/core.pyx"


#line 1643 "cds3/core.pyx"
/* Python wrapper */

#line 1643 "cds3/core.pyx"
static void __pyx_pw_4cds3_4core_8VarGroup_5__dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 1643 "cds3/core.pyx"
static void __pyx_pw_4cds3_4core_8VarGroup_5__dealloc__(PyObject *__pyx_v_self) {

#line 1643 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1643 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 1643 "cds3/core.pyx"
  __pyx_pf_4cds3_4core_8VarGroup_4__dealloc__(((struct __pyx_obj_4cds3_4core_VarGroup *)__pyx_v_self));

#line 1643 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1643 "cds3/core.pyx"
}

/* "cds3/core.pyx":1645
 *         self.c_ob = vargroup
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

#line 1645 "cds3/core.pyx"


#line 1645 "cds3/core.pyx"
static void __pyx_pf_4cds3_4core_8VarGroup_4__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_VarGroup *__pyx_v_self) {
  __Pyx_RefNannyDeclarations

#line 1645 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

#line 1645 "cds3/core.pyx"


#line 1645 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1645 "cds3/core.pyx"
}

#line 1645 "cds3/core.pyx"


#line 1645 "cds3/core.pyx"
/* Python wrapper */

#line 1645 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_8VarArray_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1645 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_8VarArray_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

#line 1645 "cds3/core.pyx"
  int __pyx_r;

#line 1645 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1645 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);

#line 1645 "cds3/core.pyx"
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;
#line 1645 "cds3/core.pyx"
}

#line 1645 "cds3/core.pyx"
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = 
#line 1645 "cds3/core.pyx"
__pyx_pf_4cds3_4core_8VarArray___cinit__(((struct __pyx_obj_4cds3_4core_VarArray *)__pyx_v_self));

#line 1645 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1645 "cds3/core.pyx"
  return __pyx_r;

#line 1645 "cds3/core.pyx"
}

/* "cds3/core.pyx":1652
 *     """CDSVarArray"""
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.c_ob = NULL
 * 
 */

#line 1652 "cds3/core.pyx"


#line 1652 "cds3/core.pyx"
static int __pyx_pf_4cds3_4core_8VarArray___cinit__(struct __pyx_obj_4cds3_4core_VarArray *__pyx_v_self) {

#line 1652 "cds3/core.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations

#line 1652 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "cds3/core.pyx":1653
 * 
 *     def __cinit__(self):
 *         self.c_ob = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */

#line 1653 "cds3/core.pyx"
  __pyx_v_self->c_ob = NULL;

#line 1653 "cds3/core.pyx"


#line 1653 "cds3/core.pyx"
  __pyx_r = 0;

#line 1653 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1653 "cds3/core.pyx"
  return __pyx_r;

#line 1653 "cds3/core.pyx"
}

#line 1653 "cds3/core.pyx"


#line 1653 "cds3/core.pyx"
/* Python wrapper */

#line 1653 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_8VarArray_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1653 "cds3/core.pyx"
static int __pyx_pw_4cds3_4core_8VarArray_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

#line 1653 "cds3/core.pyx"
  int __pyx_r;

#line 1653 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1653 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);

#line 1653 "cds3/core.pyx"
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;
#line 1653 "cds3/core.pyx"
}

#line 1653 "cds3/core.pyx"
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = 
#line 1653 "cds3/core.pyx"
__pyx_pf_4cds3_4core_8VarArray_2__init__(((struct __pyx_obj_4cds3_4core_VarArray *)__pyx_v_self));

#line 1653 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1653 "cds3/core.pyx"
  return __pyx_r;

#line 1653 "cds3/core.pyx"
}

/* "cds3/core.pyx":1655
 *         self.c_ob = NULL
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

#line 1655 "cds3/core.pyx"


#line 1655 "cds3/core.pyx"
static int __pyx_pf_4cds3_4core_8VarArray_2__init__(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_VarArray *__pyx_v_self) {

#line 1655 "cds3/core.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations

#line 1655 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__init__", 0);

#line 1655 "cds3/core.pyx"


#line 1655 "cds3/core.pyx"
  __pyx_r = 0;

#line 1655 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1655 "cds3/core.pyx"
  return __pyx_r;

#line 1655 "cds3/core.pyx"
}

/* "cds3/core.pyx":1658
 *         pass
 * 
 *     cdef set_vararray(self, CDSVarArray *vararray):             # <<<<<<<<<<<<<<
 *         self.cds_object = <CDSObject*>vararray
 *         self.c_ob = vararray
 */

#line 1658 "cds3/core.pyx"


#line 1658 "cds3/core.pyx"
static PyObject *__pyx_f_4cds3_4core_8VarArray_set_vararray(struct __pyx_obj_4cds3_4core_VarArray *__pyx_v_self, struct CDSVarArray *__pyx_v_vararray) {

#line 1658 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations

#line 1658 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("set_vararray", 0);

  /* "cds3/core.pyx":1659
 * 
 *     cdef set_vararray(self, CDSVarArray *vararray):
 *         self.cds_object = <CDSObject*>vararray             # <<<<<<<<<<<<<<
 *         self.c_ob = vararray
 * 
 */

#line 1659 "cds3/core.pyx"
  __pyx_v_self->__pyx_base.cds_object = ((struct CDSObject *)__pyx_v_vararray);

  /* "cds3/core.pyx":1660
 *     cdef set_vararray(self, CDSVarArray *vararray):
 *         self.cds_object = <CDSObject*>vararray
 *         self.c_ob = vararray             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */

#line 1660 "cds3/core.pyx"
  __pyx_v_self->c_ob = __pyx_v_vararray;

#line 1660 "cds3/core.pyx"


#line 1660 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1660 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1660 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1660 "cds3/core.pyx"
  return __pyx_r;

#line 1660 "cds3/core.pyx"
}

#line 1660 "cds3/core.pyx"


#line 1660 "cds3/core.pyx"
/* Python wrapper */

#line 1660 "cds3/core.pyx"
static void __pyx_pw_4cds3_4core_8VarArray_5__dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 1660 "cds3/core.pyx"
static void __pyx_pw_4cds3_4core_8VarArray_5__dealloc__(PyObject *__pyx_v_self) {

#line 1660 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1660 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 1660 "cds3/core.pyx"
  __pyx_pf_4cds3_4core_8VarArray_4__dealloc__(((struct __pyx_obj_4cds3_4core_VarArray *)__pyx_v_self));

#line 1660 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1660 "cds3/core.pyx"
}

/* "cds3/core.pyx":1662
 *         self.c_ob = vararray
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

#line 1662 "cds3/core.pyx"


#line 1662 "cds3/core.pyx"
static void __pyx_pf_4cds3_4core_8VarArray_4__dealloc__(CYTHON_UNUSED struct __pyx_obj_4cds3_4core_VarArray *__pyx_v_self) {
  __Pyx_RefNannyDeclarations

#line 1662 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

#line 1662 "cds3/core.pyx"


#line 1662 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1662 "cds3/core.pyx"
}

#line 1662 "cds3/core.pyx"


#line 1662 "cds3/core.pyx"
/* Python wrapper */

#line 1662 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_1print_all(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1662 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_print_all[] = "print_all(file_like, Group group, int flags)";
static PyMethodDef __pyx_mdef_4cds3_4core_1print_all = 
#line 1662 "cds3/core.pyx"
{__Pyx_NAMESTR("print_all"), (PyCFunction)__pyx_pw_4cds3_4core_1print_all, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_print_all)};

#line 1662 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_1print_all(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_like = 0
#line 1662 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Group *__pyx_v_group = 0
#line 1662 "cds3/core.pyx"
;
  int __pyx_v_flags
#line 1662 "cds3/core.pyx"
;

#line 1662 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1662 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1662 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_all (wrapper)", 0);

#line 1662 "cds3/core.pyx"
  {

#line 1662 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__file_like,&__pyx_n_s__group,&__pyx_n_s__flags,0};

#line 1662 "cds3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 1662 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1662 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 1662 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1662 "cds3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 1662 "cds3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1662 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1662 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1662 "cds3/core.pyx"
        case  0: break;
        default: 
#line 1662 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1662 "cds3/core.pyx"
      }

#line 1662 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1662 "cds3/core.pyx"
      switch (pos_args) {

#line 1662 "cds3/core.pyx"
        case  0:

#line 1662 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__file_like)) != 0)) kw_args--;
        else 
#line 1662 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1662 "cds3/core.pyx"
        case  1:

#line 1662 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__group)) != 0)) kw_args--;

#line 1662 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_all", 1, 3, 3, 1); 
#line 1662 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1666; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1662 "cds3/core.pyx"
        }

#line 1662 "cds3/core.pyx"
        case  2:

#line 1662 "cds3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags)) != 0)) kw_args--;

#line 1662 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_all", 1, 3, 3, 2); 
#line 1662 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1666; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1662 "cds3/core.pyx"
        }

#line 1662 "cds3/core.pyx"
      }

#line 1662 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1662 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "print_all") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1666; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1662 "cds3/core.pyx"
      }

#line 1662 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 1662 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1662 "cds3/core.pyx"
    } else {

#line 1662 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1662 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1662 "cds3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1662 "cds3/core.pyx"
    }

#line 1662 "cds3/core.pyx"
    __pyx_v_file_like = values[0];

#line 1662 "cds3/core.pyx"
    __pyx_v_group = ((struct __pyx_obj_4cds3_4core_Group *)values[1]);

#line 1662 "cds3/core.pyx"
    __pyx_v_flags = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1666; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1662 "cds3/core.pyx"
  }

#line 1662 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1662 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("print_all", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 1662 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1666; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1662 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1662 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_all", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1662 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1662 "cds3/core.pyx"
  return NULL;

#line 1662 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1662 "cds3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_group), __pyx_ptype_4cds3_4core_Group, 1, "group", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1662 "cds3/core.pyx"
__pyx_pf_4cds3_4core_print_all(__pyx_self, __pyx_v_file_like, __pyx_v_group, __pyx_v_flags);

#line 1662 "cds3/core.pyx"
  goto __pyx_L0;

#line 1662 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1662 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1662 "cds3/core.pyx"
  __pyx_L0:;

#line 1662 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1662 "cds3/core.pyx"
  return __pyx_r;

#line 1662 "cds3/core.pyx"
}

/* "cds3/core.pyx":1666
 * 
 * 
 * def print_all(object file_like, Group group, int flags):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1666 "cds3/core.pyx"


#line 1666 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_print_all(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, struct __pyx_obj_4cds3_4core_Group *__pyx_v_group, int __pyx_v_flags) {
  FILE *__pyx_v_fp
#line 1666 "cds3/core.pyx"
;
  int __pyx_v_fd
#line 1666 "cds3/core.pyx"
;

#line 1666 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1666 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_all", 0);

  /* "cds3/core.pyx":1669
 *     cdef FILE *fp
 *     cdef int fd
 *     file_like.flush()             # <<<<<<<<<<<<<<
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 */

#line 1669 "cds3/core.pyx"
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__flush); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1669 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1669 "cds3/core.pyx"
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1669 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1669 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1669 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cds3/core.pyx":1670
 *     cdef int fd
 *     file_like.flush()
 *     fd = file_like.fileno()             # <<<<<<<<<<<<<<
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 */

#line 1670 "cds3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__fileno); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1670 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1670 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1670 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1670 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1670 "cds3/core.pyx"
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1670 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1670 "cds3/core.pyx"
  __pyx_v_fd = __pyx_t_3;

  /* "cds3/core.pyx":1671
 *     file_like.flush()
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")             # <<<<<<<<<<<<<<
 *     assert fp != NULL
 *     cds_print(fp, group.c_ob, flags)
 */

#line 1671 "cds3/core.pyx"
  __pyx_v_fp = fdopen(__pyx_v_fd, __pyx_k__w);

  /* "cds3/core.pyx":1672
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL             # <<<<<<<<<<<<<<
 *     cds_print(fp, group.c_ob, flags)
 *     fflush(fp)
 */

#line 1672 "cds3/core.pyx"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 1672 "cds3/core.pyx"
  if (unlikely(!(__pyx_v_fp != NULL))) {

#line 1672 "cds3/core.pyx"
    PyErr_SetNone(PyExc_AssertionError);

#line 1672 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1672; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1672 "cds3/core.pyx"
  }

#line 1672 "cds3/core.pyx"
  #endif

  /* "cds3/core.pyx":1673
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 *     cds_print(fp, group.c_ob, flags)             # <<<<<<<<<<<<<<
 *     fflush(fp)
 * 
 */

#line 1673 "cds3/core.pyx"
  cds_print(__pyx_v_fp, __pyx_v_group->c_ob, __pyx_v_flags);

  /* "cds3/core.pyx":1674
 *     assert fp != NULL
 *     cds_print(fp, group.c_ob, flags)
 *     fflush(fp)             # <<<<<<<<<<<<<<
 * 
 * def print_att(object file_like, char *indent, int  min_width, Att att):
 */

#line 1674 "cds3/core.pyx"
  fflush(__pyx_v_fp);

#line 1674 "cds3/core.pyx"


#line 1674 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1674 "cds3/core.pyx"
  goto __pyx_L0;

#line 1674 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1674 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1674 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1674 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_all", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1674 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1674 "cds3/core.pyx"
  __pyx_L0:;

#line 1674 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1674 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1674 "cds3/core.pyx"
  return __pyx_r;

#line 1674 "cds3/core.pyx"
}

#line 1674 "cds3/core.pyx"


#line 1674 "cds3/core.pyx"
/* Python wrapper */

#line 1674 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3print_att(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1674 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_2print_att[] = "print_att(file_like, char *indent, int min_width, Att att)";
static PyMethodDef __pyx_mdef_4cds3_4core_3print_att = 
#line 1674 "cds3/core.pyx"
{__Pyx_NAMESTR("print_att"), (PyCFunction)__pyx_pw_4cds3_4core_3print_att, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_2print_att)};

#line 1674 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_3print_att(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_like = 0
#line 1674 "cds3/core.pyx"
;
  char *__pyx_v_indent
#line 1674 "cds3/core.pyx"
;
  int __pyx_v_min_width
#line 1674 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Att *__pyx_v_att = 0
#line 1674 "cds3/core.pyx"
;

#line 1674 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1674 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1674 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_att (wrapper)", 0);

#line 1674 "cds3/core.pyx"
  {

#line 1674 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__file_like,&__pyx_n_s__indent,&__pyx_n_s__min_width,&__pyx_n_s__att,0};

#line 1674 "cds3/core.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 1674 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1674 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 1674 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1674 "cds3/core.pyx"
      switch (pos_args) {
        case  4: 
#line 1674 "cds3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 1674 "cds3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1674 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1674 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1674 "cds3/core.pyx"
        case  0: break;
        default: 
#line 1674 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1674 "cds3/core.pyx"
      }

#line 1674 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1674 "cds3/core.pyx"
      switch (pos_args) {

#line 1674 "cds3/core.pyx"
        case  0:

#line 1674 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__file_like)) != 0)) kw_args--;
        else 
#line 1674 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1674 "cds3/core.pyx"
        case  1:

#line 1674 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__indent)) != 0)) kw_args--;

#line 1674 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_att", 1, 4, 4, 1); 
#line 1674 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1676; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1674 "cds3/core.pyx"
        }

#line 1674 "cds3/core.pyx"
        case  2:

#line 1674 "cds3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__min_width)) != 0)) kw_args--;

#line 1674 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_att", 1, 4, 4, 2); 
#line 1674 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1676; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1674 "cds3/core.pyx"
        }

#line 1674 "cds3/core.pyx"
        case  3:

#line 1674 "cds3/core.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__att)) != 0)) kw_args--;

#line 1674 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_att", 1, 4, 4, 3); 
#line 1674 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1676; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1674 "cds3/core.pyx"
        }

#line 1674 "cds3/core.pyx"
      }

#line 1674 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1674 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "print_att") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1676; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1674 "cds3/core.pyx"
      }

#line 1674 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {

#line 1674 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1674 "cds3/core.pyx"
    } else {

#line 1674 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1674 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1674 "cds3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1674 "cds3/core.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 1674 "cds3/core.pyx"
    }

#line 1674 "cds3/core.pyx"
    __pyx_v_file_like = values[0];

#line 1674 "cds3/core.pyx"
    __pyx_v_indent = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_indent) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1676; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1674 "cds3/core.pyx"
    __pyx_v_min_width = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_min_width == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1676; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1674 "cds3/core.pyx"
    __pyx_v_att = ((struct __pyx_obj_4cds3_4core_Att *)values[3]);

#line 1674 "cds3/core.pyx"
  }

#line 1674 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1674 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("print_att", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 1674 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1676; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1674 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1674 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_att", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1674 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1674 "cds3/core.pyx"
  return NULL;

#line 1674 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1674 "cds3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_att), __pyx_ptype_4cds3_4core_Att, 1, "att", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1674 "cds3/core.pyx"
__pyx_pf_4cds3_4core_2print_att(__pyx_self, __pyx_v_file_like, __pyx_v_indent, __pyx_v_min_width, __pyx_v_att);

#line 1674 "cds3/core.pyx"
  goto __pyx_L0;

#line 1674 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1674 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1674 "cds3/core.pyx"
  __pyx_L0:;

#line 1674 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1674 "cds3/core.pyx"
  return __pyx_r;

#line 1674 "cds3/core.pyx"
}

/* "cds3/core.pyx":1676
 *     fflush(fp)
 * 
 * def print_att(object file_like, char *indent, int  min_width, Att att):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1676 "cds3/core.pyx"


#line 1676 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_2print_att(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, char *__pyx_v_indent, int __pyx_v_min_width, struct __pyx_obj_4cds3_4core_Att *__pyx_v_att) {
  FILE *__pyx_v_fp
#line 1676 "cds3/core.pyx"
;
  int __pyx_v_fd
#line 1676 "cds3/core.pyx"
;

#line 1676 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1676 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_att", 0);

  /* "cds3/core.pyx":1679
 *     cdef FILE *fp
 *     cdef int fd
 *     file_like.flush()             # <<<<<<<<<<<<<<
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 */

#line 1679 "cds3/core.pyx"
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__flush); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1679 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1679 "cds3/core.pyx"
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1679 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1679 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1679 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cds3/core.pyx":1680
 *     cdef int fd
 *     file_like.flush()
 *     fd = file_like.fileno()             # <<<<<<<<<<<<<<
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 */

#line 1680 "cds3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__fileno); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1680 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1680 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1680 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1680 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1680 "cds3/core.pyx"
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1680 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1680 "cds3/core.pyx"
  __pyx_v_fd = __pyx_t_3;

  /* "cds3/core.pyx":1681
 *     file_like.flush()
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")             # <<<<<<<<<<<<<<
 *     assert fp != NULL
 *     cds_print_att(fp, indent, min_width, att.c_ob)
 */

#line 1681 "cds3/core.pyx"
  __pyx_v_fp = fdopen(__pyx_v_fd, __pyx_k__w);

  /* "cds3/core.pyx":1682
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL             # <<<<<<<<<<<<<<
 *     cds_print_att(fp, indent, min_width, att.c_ob)
 *     fflush(fp)
 */

#line 1682 "cds3/core.pyx"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 1682 "cds3/core.pyx"
  if (unlikely(!(__pyx_v_fp != NULL))) {

#line 1682 "cds3/core.pyx"
    PyErr_SetNone(PyExc_AssertionError);

#line 1682 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1682; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1682 "cds3/core.pyx"
  }

#line 1682 "cds3/core.pyx"
  #endif

  /* "cds3/core.pyx":1683
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 *     cds_print_att(fp, indent, min_width, att.c_ob)             # <<<<<<<<<<<<<<
 *     fflush(fp)
 * 
 */

#line 1683 "cds3/core.pyx"
  cds_print_att(__pyx_v_fp, __pyx_v_indent, __pyx_v_min_width, __pyx_v_att->c_ob);

  /* "cds3/core.pyx":1684
 *     assert fp != NULL
 *     cds_print_att(fp, indent, min_width, att.c_ob)
 *     fflush(fp)             # <<<<<<<<<<<<<<
 * 
 * def print_atts(object file_like, char *indent, Object parent):
 */

#line 1684 "cds3/core.pyx"
  fflush(__pyx_v_fp);

#line 1684 "cds3/core.pyx"


#line 1684 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1684 "cds3/core.pyx"
  goto __pyx_L0;

#line 1684 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1684 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1684 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1684 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_att", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1684 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1684 "cds3/core.pyx"
  __pyx_L0:;

#line 1684 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1684 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1684 "cds3/core.pyx"
  return __pyx_r;

#line 1684 "cds3/core.pyx"
}

#line 1684 "cds3/core.pyx"


#line 1684 "cds3/core.pyx"
/* Python wrapper */

#line 1684 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5print_atts(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1684 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_4print_atts[] = "print_atts(file_like, char *indent, Object parent)";
static PyMethodDef __pyx_mdef_4cds3_4core_5print_atts = 
#line 1684 "cds3/core.pyx"
{__Pyx_NAMESTR("print_atts"), (PyCFunction)__pyx_pw_4cds3_4core_5print_atts, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_4print_atts)};

#line 1684 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_5print_atts(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_like = 0
#line 1684 "cds3/core.pyx"
;
  char *__pyx_v_indent
#line 1684 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Object *__pyx_v_parent = 0
#line 1684 "cds3/core.pyx"
;

#line 1684 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1684 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1684 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_atts (wrapper)", 0);

#line 1684 "cds3/core.pyx"
  {

#line 1684 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__file_like,&__pyx_n_s__indent,&__pyx_n_s__parent,0};

#line 1684 "cds3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 1684 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1684 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 1684 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1684 "cds3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 1684 "cds3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1684 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1684 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1684 "cds3/core.pyx"
        case  0: break;
        default: 
#line 1684 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1684 "cds3/core.pyx"
      }

#line 1684 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1684 "cds3/core.pyx"
      switch (pos_args) {

#line 1684 "cds3/core.pyx"
        case  0:

#line 1684 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__file_like)) != 0)) kw_args--;
        else 
#line 1684 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1684 "cds3/core.pyx"
        case  1:

#line 1684 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__indent)) != 0)) kw_args--;

#line 1684 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_atts", 1, 3, 3, 1); 
#line 1684 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1686; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1684 "cds3/core.pyx"
        }

#line 1684 "cds3/core.pyx"
        case  2:

#line 1684 "cds3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__parent)) != 0)) kw_args--;

#line 1684 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_atts", 1, 3, 3, 2); 
#line 1684 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1686; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1684 "cds3/core.pyx"
        }

#line 1684 "cds3/core.pyx"
      }

#line 1684 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1684 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "print_atts") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1686; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1684 "cds3/core.pyx"
      }

#line 1684 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 1684 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1684 "cds3/core.pyx"
    } else {

#line 1684 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1684 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1684 "cds3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1684 "cds3/core.pyx"
    }

#line 1684 "cds3/core.pyx"
    __pyx_v_file_like = values[0];

#line 1684 "cds3/core.pyx"
    __pyx_v_indent = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_indent) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1686; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1684 "cds3/core.pyx"
    __pyx_v_parent = ((struct __pyx_obj_4cds3_4core_Object *)values[2]);

#line 1684 "cds3/core.pyx"
  }

#line 1684 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1684 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("print_atts", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 1684 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1686; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1684 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1684 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_atts", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1684 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1684 "cds3/core.pyx"
  return NULL;

#line 1684 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1684 "cds3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_4cds3_4core_Object, 1, "parent", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1684 "cds3/core.pyx"
__pyx_pf_4cds3_4core_4print_atts(__pyx_self, __pyx_v_file_like, __pyx_v_indent, __pyx_v_parent);

#line 1684 "cds3/core.pyx"
  goto __pyx_L0;

#line 1684 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1684 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1684 "cds3/core.pyx"
  __pyx_L0:;

#line 1684 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1684 "cds3/core.pyx"
  return __pyx_r;

#line 1684 "cds3/core.pyx"
}

/* "cds3/core.pyx":1686
 *     fflush(fp)
 * 
 * def print_atts(object file_like, char *indent, Object parent):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1686 "cds3/core.pyx"


#line 1686 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_4print_atts(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, char *__pyx_v_indent, struct __pyx_obj_4cds3_4core_Object *__pyx_v_parent) {
  FILE *__pyx_v_fp
#line 1686 "cds3/core.pyx"
;
  int __pyx_v_fd
#line 1686 "cds3/core.pyx"
;

#line 1686 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1686 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_atts", 0);

  /* "cds3/core.pyx":1689
 *     cdef FILE *fp
 *     cdef int fd
 *     file_like.flush()             # <<<<<<<<<<<<<<
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 */

#line 1689 "cds3/core.pyx"
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__flush); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1689 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1689 "cds3/core.pyx"
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1689 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1689 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1689 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cds3/core.pyx":1690
 *     cdef int fd
 *     file_like.flush()
 *     fd = file_like.fileno()             # <<<<<<<<<<<<<<
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 */

#line 1690 "cds3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__fileno); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1690 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1690 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1690 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1690 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1690 "cds3/core.pyx"
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1690 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1690 "cds3/core.pyx"
  __pyx_v_fd = __pyx_t_3;

  /* "cds3/core.pyx":1691
 *     file_like.flush()
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")             # <<<<<<<<<<<<<<
 *     assert fp != NULL
 *     cds_print_atts(fp, indent, parent.cds_object)
 */

#line 1691 "cds3/core.pyx"
  __pyx_v_fp = fdopen(__pyx_v_fd, __pyx_k__w);

  /* "cds3/core.pyx":1692
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL             # <<<<<<<<<<<<<<
 *     cds_print_atts(fp, indent, parent.cds_object)
 *     fflush(fp)
 */

#line 1692 "cds3/core.pyx"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 1692 "cds3/core.pyx"
  if (unlikely(!(__pyx_v_fp != NULL))) {

#line 1692 "cds3/core.pyx"
    PyErr_SetNone(PyExc_AssertionError);

#line 1692 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1692; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1692 "cds3/core.pyx"
  }

#line 1692 "cds3/core.pyx"
  #endif

  /* "cds3/core.pyx":1693
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 *     cds_print_atts(fp, indent, parent.cds_object)             # <<<<<<<<<<<<<<
 *     fflush(fp)
 * 
 */

#line 1693 "cds3/core.pyx"
  cds_print_atts(__pyx_v_fp, __pyx_v_indent, __pyx_v_parent->cds_object);

  /* "cds3/core.pyx":1694
 *     assert fp != NULL
 *     cds_print_atts(fp, indent, parent.cds_object)
 *     fflush(fp)             # <<<<<<<<<<<<<<
 * 
 * def print_dim(object file_like, char *indent, int min_width, Dim dim):
 */

#line 1694 "cds3/core.pyx"
  fflush(__pyx_v_fp);

#line 1694 "cds3/core.pyx"


#line 1694 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1694 "cds3/core.pyx"
  goto __pyx_L0;

#line 1694 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1694 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1694 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1694 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_atts", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1694 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1694 "cds3/core.pyx"
  __pyx_L0:;

#line 1694 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1694 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1694 "cds3/core.pyx"
  return __pyx_r;

#line 1694 "cds3/core.pyx"
}

#line 1694 "cds3/core.pyx"


#line 1694 "cds3/core.pyx"
/* Python wrapper */

#line 1694 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_7print_dim(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1694 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_6print_dim[] = "print_dim(file_like, char *indent, int min_width, Dim dim)";
static PyMethodDef __pyx_mdef_4cds3_4core_7print_dim = 
#line 1694 "cds3/core.pyx"
{__Pyx_NAMESTR("print_dim"), (PyCFunction)__pyx_pw_4cds3_4core_7print_dim, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_6print_dim)};

#line 1694 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_7print_dim(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_like = 0
#line 1694 "cds3/core.pyx"
;
  char *__pyx_v_indent
#line 1694 "cds3/core.pyx"
;
  int __pyx_v_min_width
#line 1694 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Dim *__pyx_v_dim = 0
#line 1694 "cds3/core.pyx"
;

#line 1694 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1694 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1694 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_dim (wrapper)", 0);

#line 1694 "cds3/core.pyx"
  {

#line 1694 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__file_like,&__pyx_n_s__indent,&__pyx_n_s__min_width,&__pyx_n_s__dim,0};

#line 1694 "cds3/core.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 1694 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1694 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 1694 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1694 "cds3/core.pyx"
      switch (pos_args) {
        case  4: 
#line 1694 "cds3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 1694 "cds3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1694 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1694 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1694 "cds3/core.pyx"
        case  0: break;
        default: 
#line 1694 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1694 "cds3/core.pyx"
      }

#line 1694 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1694 "cds3/core.pyx"
      switch (pos_args) {

#line 1694 "cds3/core.pyx"
        case  0:

#line 1694 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__file_like)) != 0)) kw_args--;
        else 
#line 1694 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1694 "cds3/core.pyx"
        case  1:

#line 1694 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__indent)) != 0)) kw_args--;

#line 1694 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_dim", 1, 4, 4, 1); 
#line 1694 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1696; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1694 "cds3/core.pyx"
        }

#line 1694 "cds3/core.pyx"
        case  2:

#line 1694 "cds3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__min_width)) != 0)) kw_args--;

#line 1694 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_dim", 1, 4, 4, 2); 
#line 1694 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1696; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1694 "cds3/core.pyx"
        }

#line 1694 "cds3/core.pyx"
        case  3:

#line 1694 "cds3/core.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dim)) != 0)) kw_args--;

#line 1694 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_dim", 1, 4, 4, 3); 
#line 1694 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1696; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1694 "cds3/core.pyx"
        }

#line 1694 "cds3/core.pyx"
      }

#line 1694 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1694 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "print_dim") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1696; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1694 "cds3/core.pyx"
      }

#line 1694 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {

#line 1694 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1694 "cds3/core.pyx"
    } else {

#line 1694 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1694 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1694 "cds3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1694 "cds3/core.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 1694 "cds3/core.pyx"
    }

#line 1694 "cds3/core.pyx"
    __pyx_v_file_like = values[0];

#line 1694 "cds3/core.pyx"
    __pyx_v_indent = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_indent) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1696; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1694 "cds3/core.pyx"
    __pyx_v_min_width = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_min_width == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1696; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1694 "cds3/core.pyx"
    __pyx_v_dim = ((struct __pyx_obj_4cds3_4core_Dim *)values[3]);

#line 1694 "cds3/core.pyx"
  }

#line 1694 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1694 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("print_dim", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 1694 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1696; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1694 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1694 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1694 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1694 "cds3/core.pyx"
  return NULL;

#line 1694 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1694 "cds3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dim), __pyx_ptype_4cds3_4core_Dim, 1, "dim", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1694 "cds3/core.pyx"
__pyx_pf_4cds3_4core_6print_dim(__pyx_self, __pyx_v_file_like, __pyx_v_indent, __pyx_v_min_width, __pyx_v_dim);

#line 1694 "cds3/core.pyx"
  goto __pyx_L0;

#line 1694 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1694 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1694 "cds3/core.pyx"
  __pyx_L0:;

#line 1694 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1694 "cds3/core.pyx"
  return __pyx_r;

#line 1694 "cds3/core.pyx"
}

/* "cds3/core.pyx":1696
 *     fflush(fp)
 * 
 * def print_dim(object file_like, char *indent, int min_width, Dim dim):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1696 "cds3/core.pyx"


#line 1696 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_6print_dim(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, char *__pyx_v_indent, int __pyx_v_min_width, struct __pyx_obj_4cds3_4core_Dim *__pyx_v_dim) {
  FILE *__pyx_v_fp
#line 1696 "cds3/core.pyx"
;
  int __pyx_v_fd
#line 1696 "cds3/core.pyx"
;

#line 1696 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1696 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_dim", 0);

  /* "cds3/core.pyx":1699
 *     cdef FILE *fp
 *     cdef int fd
 *     file_like.flush()             # <<<<<<<<<<<<<<
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 */

#line 1699 "cds3/core.pyx"
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__flush); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1699 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1699 "cds3/core.pyx"
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1699 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1699 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1699 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cds3/core.pyx":1700
 *     cdef int fd
 *     file_like.flush()
 *     fd = file_like.fileno()             # <<<<<<<<<<<<<<
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 */

#line 1700 "cds3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__fileno); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1700 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1700 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1700 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1700 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1700 "cds3/core.pyx"
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1700 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1700 "cds3/core.pyx"
  __pyx_v_fd = __pyx_t_3;

  /* "cds3/core.pyx":1701
 *     file_like.flush()
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")             # <<<<<<<<<<<<<<
 *     assert fp != NULL
 *     cds_print_dim(fp, indent, min_width, dim.c_ob)
 */

#line 1701 "cds3/core.pyx"
  __pyx_v_fp = fdopen(__pyx_v_fd, __pyx_k__w);

  /* "cds3/core.pyx":1702
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL             # <<<<<<<<<<<<<<
 *     cds_print_dim(fp, indent, min_width, dim.c_ob)
 *     fflush(fp)
 */

#line 1702 "cds3/core.pyx"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 1702 "cds3/core.pyx"
  if (unlikely(!(__pyx_v_fp != NULL))) {

#line 1702 "cds3/core.pyx"
    PyErr_SetNone(PyExc_AssertionError);

#line 1702 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1702 "cds3/core.pyx"
  }

#line 1702 "cds3/core.pyx"
  #endif

  /* "cds3/core.pyx":1703
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 *     cds_print_dim(fp, indent, min_width, dim.c_ob)             # <<<<<<<<<<<<<<
 *     fflush(fp)
 * 
 */

#line 1703 "cds3/core.pyx"
  cds_print_dim(__pyx_v_fp, __pyx_v_indent, __pyx_v_min_width, __pyx_v_dim->c_ob);

  /* "cds3/core.pyx":1704
 *     assert fp != NULL
 *     cds_print_dim(fp, indent, min_width, dim.c_ob)
 *     fflush(fp)             # <<<<<<<<<<<<<<
 * 
 * def print_dims(object file_like, char *indent, Group group):
 */

#line 1704 "cds3/core.pyx"
  fflush(__pyx_v_fp);

#line 1704 "cds3/core.pyx"


#line 1704 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1704 "cds3/core.pyx"
  goto __pyx_L0;

#line 1704 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1704 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1704 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1704 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1704 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1704 "cds3/core.pyx"
  __pyx_L0:;

#line 1704 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1704 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1704 "cds3/core.pyx"
  return __pyx_r;

#line 1704 "cds3/core.pyx"
}

#line 1704 "cds3/core.pyx"


#line 1704 "cds3/core.pyx"
/* Python wrapper */

#line 1704 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_9print_dims(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1704 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_8print_dims[] = "print_dims(file_like, char *indent, Group group)";
static PyMethodDef __pyx_mdef_4cds3_4core_9print_dims = 
#line 1704 "cds3/core.pyx"
{__Pyx_NAMESTR("print_dims"), (PyCFunction)__pyx_pw_4cds3_4core_9print_dims, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_8print_dims)};

#line 1704 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_9print_dims(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_like = 0
#line 1704 "cds3/core.pyx"
;
  char *__pyx_v_indent
#line 1704 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Group *__pyx_v_group = 0
#line 1704 "cds3/core.pyx"
;

#line 1704 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1704 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1704 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_dims (wrapper)", 0);

#line 1704 "cds3/core.pyx"
  {

#line 1704 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__file_like,&__pyx_n_s__indent,&__pyx_n_s__group,0};

#line 1704 "cds3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 1704 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1704 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 1704 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1704 "cds3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 1704 "cds3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1704 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1704 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1704 "cds3/core.pyx"
        case  0: break;
        default: 
#line 1704 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1704 "cds3/core.pyx"
      }

#line 1704 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1704 "cds3/core.pyx"
      switch (pos_args) {

#line 1704 "cds3/core.pyx"
        case  0:

#line 1704 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__file_like)) != 0)) kw_args--;
        else 
#line 1704 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1704 "cds3/core.pyx"
        case  1:

#line 1704 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__indent)) != 0)) kw_args--;

#line 1704 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_dims", 1, 3, 3, 1); 
#line 1704 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1706; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1704 "cds3/core.pyx"
        }

#line 1704 "cds3/core.pyx"
        case  2:

#line 1704 "cds3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__group)) != 0)) kw_args--;

#line 1704 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_dims", 1, 3, 3, 2); 
#line 1704 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1706; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1704 "cds3/core.pyx"
        }

#line 1704 "cds3/core.pyx"
      }

#line 1704 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1704 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "print_dims") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1706; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1704 "cds3/core.pyx"
      }

#line 1704 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 1704 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1704 "cds3/core.pyx"
    } else {

#line 1704 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1704 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1704 "cds3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1704 "cds3/core.pyx"
    }

#line 1704 "cds3/core.pyx"
    __pyx_v_file_like = values[0];

#line 1704 "cds3/core.pyx"
    __pyx_v_indent = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_indent) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1706; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1704 "cds3/core.pyx"
    __pyx_v_group = ((struct __pyx_obj_4cds3_4core_Group *)values[2]);

#line 1704 "cds3/core.pyx"
  }

#line 1704 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1704 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("print_dims", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 1704 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1706; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1704 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1704 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_dims", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1704 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1704 "cds3/core.pyx"
  return NULL;

#line 1704 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1704 "cds3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_group), __pyx_ptype_4cds3_4core_Group, 1, "group", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1704 "cds3/core.pyx"
__pyx_pf_4cds3_4core_8print_dims(__pyx_self, __pyx_v_file_like, __pyx_v_indent, __pyx_v_group);

#line 1704 "cds3/core.pyx"
  goto __pyx_L0;

#line 1704 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1704 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1704 "cds3/core.pyx"
  __pyx_L0:;

#line 1704 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1704 "cds3/core.pyx"
  return __pyx_r;

#line 1704 "cds3/core.pyx"
}

/* "cds3/core.pyx":1706
 *     fflush(fp)
 * 
 * def print_dims(object file_like, char *indent, Group group):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1706 "cds3/core.pyx"


#line 1706 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_8print_dims(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, char *__pyx_v_indent, struct __pyx_obj_4cds3_4core_Group *__pyx_v_group) {
  FILE *__pyx_v_fp
#line 1706 "cds3/core.pyx"
;
  int __pyx_v_fd
#line 1706 "cds3/core.pyx"
;

#line 1706 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1706 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_dims", 0);

  /* "cds3/core.pyx":1709
 *     cdef FILE *fp
 *     cdef int fd
 *     file_like.flush()             # <<<<<<<<<<<<<<
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 */

#line 1709 "cds3/core.pyx"
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__flush); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1709 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1709 "cds3/core.pyx"
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1709 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1709 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1709 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cds3/core.pyx":1710
 *     cdef int fd
 *     file_like.flush()
 *     fd = file_like.fileno()             # <<<<<<<<<<<<<<
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 */

#line 1710 "cds3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__fileno); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1710 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1710 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1710 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1710 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1710 "cds3/core.pyx"
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1710 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1710 "cds3/core.pyx"
  __pyx_v_fd = __pyx_t_3;

  /* "cds3/core.pyx":1711
 *     file_like.flush()
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")             # <<<<<<<<<<<<<<
 *     assert fp != NULL
 *     cds_print_dims(fp, indent, group.c_ob)
 */

#line 1711 "cds3/core.pyx"
  __pyx_v_fp = fdopen(__pyx_v_fd, __pyx_k__w);

  /* "cds3/core.pyx":1712
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL             # <<<<<<<<<<<<<<
 *     cds_print_dims(fp, indent, group.c_ob)
 *     fflush(fp)
 */

#line 1712 "cds3/core.pyx"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 1712 "cds3/core.pyx"
  if (unlikely(!(__pyx_v_fp != NULL))) {

#line 1712 "cds3/core.pyx"
    PyErr_SetNone(PyExc_AssertionError);

#line 1712 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1712 "cds3/core.pyx"
  }

#line 1712 "cds3/core.pyx"
  #endif

  /* "cds3/core.pyx":1713
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 *     cds_print_dims(fp, indent, group.c_ob)             # <<<<<<<<<<<<<<
 *     fflush(fp)
 * 
 */

#line 1713 "cds3/core.pyx"
  cds_print_dims(__pyx_v_fp, __pyx_v_indent, __pyx_v_group->c_ob);

  /* "cds3/core.pyx":1714
 *     assert fp != NULL
 *     cds_print_dims(fp, indent, group.c_ob)
 *     fflush(fp)             # <<<<<<<<<<<<<<
 * 
 * def print_var(object file_like, char *indent, Var var, int flags):
 */

#line 1714 "cds3/core.pyx"
  fflush(__pyx_v_fp);

#line 1714 "cds3/core.pyx"


#line 1714 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1714 "cds3/core.pyx"
  goto __pyx_L0;

#line 1714 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1714 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1714 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1714 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_dims", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1714 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1714 "cds3/core.pyx"
  __pyx_L0:;

#line 1714 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1714 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1714 "cds3/core.pyx"
  return __pyx_r;

#line 1714 "cds3/core.pyx"
}

#line 1714 "cds3/core.pyx"


#line 1714 "cds3/core.pyx"
/* Python wrapper */

#line 1714 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_11print_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1714 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_10print_var[] = "print_var(file_like, char *indent, Var var, int flags)";
static PyMethodDef __pyx_mdef_4cds3_4core_11print_var = 
#line 1714 "cds3/core.pyx"
{__Pyx_NAMESTR("print_var"), (PyCFunction)__pyx_pw_4cds3_4core_11print_var, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_10print_var)};

#line 1714 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_11print_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_like = 0
#line 1714 "cds3/core.pyx"
;
  char *__pyx_v_indent
#line 1714 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = 0
#line 1714 "cds3/core.pyx"
;
  int __pyx_v_flags
#line 1714 "cds3/core.pyx"
;

#line 1714 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1714 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1714 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_var (wrapper)", 0);

#line 1714 "cds3/core.pyx"
  {

#line 1714 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__file_like,&__pyx_n_s__indent,&__pyx_n_s__var,&__pyx_n_s__flags,0};

#line 1714 "cds3/core.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 1714 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1714 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 1714 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1714 "cds3/core.pyx"
      switch (pos_args) {
        case  4: 
#line 1714 "cds3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 1714 "cds3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1714 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1714 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1714 "cds3/core.pyx"
        case  0: break;
        default: 
#line 1714 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1714 "cds3/core.pyx"
      }

#line 1714 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1714 "cds3/core.pyx"
      switch (pos_args) {

#line 1714 "cds3/core.pyx"
        case  0:

#line 1714 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__file_like)) != 0)) kw_args--;
        else 
#line 1714 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1714 "cds3/core.pyx"
        case  1:

#line 1714 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__indent)) != 0)) kw_args--;

#line 1714 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_var", 1, 4, 4, 1); 
#line 1714 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1714 "cds3/core.pyx"
        }

#line 1714 "cds3/core.pyx"
        case  2:

#line 1714 "cds3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__var)) != 0)) kw_args--;

#line 1714 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_var", 1, 4, 4, 2); 
#line 1714 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1714 "cds3/core.pyx"
        }

#line 1714 "cds3/core.pyx"
        case  3:

#line 1714 "cds3/core.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags)) != 0)) kw_args--;

#line 1714 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_var", 1, 4, 4, 3); 
#line 1714 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1714 "cds3/core.pyx"
        }

#line 1714 "cds3/core.pyx"
      }

#line 1714 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1714 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "print_var") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1714 "cds3/core.pyx"
      }

#line 1714 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {

#line 1714 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1714 "cds3/core.pyx"
    } else {

#line 1714 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1714 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1714 "cds3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1714 "cds3/core.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 1714 "cds3/core.pyx"
    }

#line 1714 "cds3/core.pyx"
    __pyx_v_file_like = values[0];

#line 1714 "cds3/core.pyx"
    __pyx_v_indent = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_indent) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1714 "cds3/core.pyx"
    __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)values[2]);

#line 1714 "cds3/core.pyx"
    __pyx_v_flags = __Pyx_PyInt_AsInt(values[3]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1714 "cds3/core.pyx"
  }

#line 1714 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1714 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("print_var", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 1714 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1714 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1714 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1714 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1714 "cds3/core.pyx"
  return NULL;

#line 1714 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1714 "cds3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_var), __pyx_ptype_4cds3_4core_Var, 1, "var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1714 "cds3/core.pyx"
__pyx_pf_4cds3_4core_10print_var(__pyx_self, __pyx_v_file_like, __pyx_v_indent, __pyx_v_var, __pyx_v_flags);

#line 1714 "cds3/core.pyx"
  goto __pyx_L0;

#line 1714 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1714 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1714 "cds3/core.pyx"
  __pyx_L0:;

#line 1714 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1714 "cds3/core.pyx"
  return __pyx_r;

#line 1714 "cds3/core.pyx"
}

/* "cds3/core.pyx":1716
 *     fflush(fp)
 * 
 * def print_var(object file_like, char *indent, Var var, int flags):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1716 "cds3/core.pyx"


#line 1716 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_10print_var(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, char *__pyx_v_indent, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var, int __pyx_v_flags) {
  FILE *__pyx_v_fp
#line 1716 "cds3/core.pyx"
;
  int __pyx_v_fd
#line 1716 "cds3/core.pyx"
;

#line 1716 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1716 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_var", 0);

  /* "cds3/core.pyx":1719
 *     cdef FILE *fp
 *     cdef int fd
 *     file_like.flush()             # <<<<<<<<<<<<<<
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 */

#line 1719 "cds3/core.pyx"
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__flush); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1719 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1719 "cds3/core.pyx"
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1719 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1719 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1719 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cds3/core.pyx":1720
 *     cdef int fd
 *     file_like.flush()
 *     fd = file_like.fileno()             # <<<<<<<<<<<<<<
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 */

#line 1720 "cds3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__fileno); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1720 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1720 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1720 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1720 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1720 "cds3/core.pyx"
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1720; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1720 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1720 "cds3/core.pyx"
  __pyx_v_fd = __pyx_t_3;

  /* "cds3/core.pyx":1721
 *     file_like.flush()
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")             # <<<<<<<<<<<<<<
 *     assert fp != NULL
 *     cds_print_var(fp, indent, var.c_ob, flags)
 */

#line 1721 "cds3/core.pyx"
  __pyx_v_fp = fdopen(__pyx_v_fd, __pyx_k__w);

  /* "cds3/core.pyx":1722
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL             # <<<<<<<<<<<<<<
 *     cds_print_var(fp, indent, var.c_ob, flags)
 *     fflush(fp)
 */

#line 1722 "cds3/core.pyx"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 1722 "cds3/core.pyx"
  if (unlikely(!(__pyx_v_fp != NULL))) {

#line 1722 "cds3/core.pyx"
    PyErr_SetNone(PyExc_AssertionError);

#line 1722 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1722; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1722 "cds3/core.pyx"
  }

#line 1722 "cds3/core.pyx"
  #endif

  /* "cds3/core.pyx":1723
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 *     cds_print_var(fp, indent, var.c_ob, flags)             # <<<<<<<<<<<<<<
 *     fflush(fp)
 * 
 */

#line 1723 "cds3/core.pyx"
  cds_print_var(__pyx_v_fp, __pyx_v_indent, __pyx_v_var->c_ob, __pyx_v_flags);

  /* "cds3/core.pyx":1724
 *     assert fp != NULL
 *     cds_print_var(fp, indent, var.c_ob, flags)
 *     fflush(fp)             # <<<<<<<<<<<<<<
 * 
 * def print_vars(object file_like, char *indent, Group group, int flags):
 */

#line 1724 "cds3/core.pyx"
  fflush(__pyx_v_fp);

#line 1724 "cds3/core.pyx"


#line 1724 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1724 "cds3/core.pyx"
  goto __pyx_L0;

#line 1724 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1724 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1724 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1724 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1724 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1724 "cds3/core.pyx"
  __pyx_L0:;

#line 1724 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1724 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1724 "cds3/core.pyx"
  return __pyx_r;

#line 1724 "cds3/core.pyx"
}

#line 1724 "cds3/core.pyx"


#line 1724 "cds3/core.pyx"
/* Python wrapper */

#line 1724 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_13print_vars(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1724 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_12print_vars[] = "print_vars(file_like, char *indent, Group group, int flags)";
static PyMethodDef __pyx_mdef_4cds3_4core_13print_vars = 
#line 1724 "cds3/core.pyx"
{__Pyx_NAMESTR("print_vars"), (PyCFunction)__pyx_pw_4cds3_4core_13print_vars, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_12print_vars)};

#line 1724 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_13print_vars(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_like = 0
#line 1724 "cds3/core.pyx"
;
  char *__pyx_v_indent
#line 1724 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Group *__pyx_v_group = 0
#line 1724 "cds3/core.pyx"
;
  int __pyx_v_flags
#line 1724 "cds3/core.pyx"
;

#line 1724 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1724 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1724 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_vars (wrapper)", 0);

#line 1724 "cds3/core.pyx"
  {

#line 1724 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__file_like,&__pyx_n_s__indent,&__pyx_n_s__group,&__pyx_n_s__flags,0};

#line 1724 "cds3/core.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 1724 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1724 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 1724 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1724 "cds3/core.pyx"
      switch (pos_args) {
        case  4: 
#line 1724 "cds3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 1724 "cds3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1724 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1724 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1724 "cds3/core.pyx"
        case  0: break;
        default: 
#line 1724 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1724 "cds3/core.pyx"
      }

#line 1724 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1724 "cds3/core.pyx"
      switch (pos_args) {

#line 1724 "cds3/core.pyx"
        case  0:

#line 1724 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__file_like)) != 0)) kw_args--;
        else 
#line 1724 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1724 "cds3/core.pyx"
        case  1:

#line 1724 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__indent)) != 0)) kw_args--;

#line 1724 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_vars", 1, 4, 4, 1); 
#line 1724 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1726; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1724 "cds3/core.pyx"
        }

#line 1724 "cds3/core.pyx"
        case  2:

#line 1724 "cds3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__group)) != 0)) kw_args--;

#line 1724 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_vars", 1, 4, 4, 2); 
#line 1724 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1726; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1724 "cds3/core.pyx"
        }

#line 1724 "cds3/core.pyx"
        case  3:

#line 1724 "cds3/core.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags)) != 0)) kw_args--;

#line 1724 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_vars", 1, 4, 4, 3); 
#line 1724 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1726; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1724 "cds3/core.pyx"
        }

#line 1724 "cds3/core.pyx"
      }

#line 1724 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1724 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "print_vars") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1726; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1724 "cds3/core.pyx"
      }

#line 1724 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {

#line 1724 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1724 "cds3/core.pyx"
    } else {

#line 1724 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1724 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1724 "cds3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1724 "cds3/core.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 1724 "cds3/core.pyx"
    }

#line 1724 "cds3/core.pyx"
    __pyx_v_file_like = values[0];

#line 1724 "cds3/core.pyx"
    __pyx_v_indent = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_indent) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1726; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1724 "cds3/core.pyx"
    __pyx_v_group = ((struct __pyx_obj_4cds3_4core_Group *)values[2]);

#line 1724 "cds3/core.pyx"
    __pyx_v_flags = __Pyx_PyInt_AsInt(values[3]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1726; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1724 "cds3/core.pyx"
  }

#line 1724 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1724 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("print_vars", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 1724 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1726; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1724 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1724 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_vars", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1724 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1724 "cds3/core.pyx"
  return NULL;

#line 1724 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1724 "cds3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_group), __pyx_ptype_4cds3_4core_Group, 1, "group", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1724 "cds3/core.pyx"
__pyx_pf_4cds3_4core_12print_vars(__pyx_self, __pyx_v_file_like, __pyx_v_indent, __pyx_v_group, __pyx_v_flags);

#line 1724 "cds3/core.pyx"
  goto __pyx_L0;

#line 1724 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1724 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1724 "cds3/core.pyx"
  __pyx_L0:;

#line 1724 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1724 "cds3/core.pyx"
  return __pyx_r;

#line 1724 "cds3/core.pyx"
}

/* "cds3/core.pyx":1726
 *     fflush(fp)
 * 
 * def print_vars(object file_like, char *indent, Group group, int flags):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1726 "cds3/core.pyx"


#line 1726 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_12print_vars(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, char *__pyx_v_indent, struct __pyx_obj_4cds3_4core_Group *__pyx_v_group, int __pyx_v_flags) {
  FILE *__pyx_v_fp
#line 1726 "cds3/core.pyx"
;
  int __pyx_v_fd
#line 1726 "cds3/core.pyx"
;

#line 1726 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1726 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_vars", 0);

  /* "cds3/core.pyx":1729
 *     cdef FILE *fp
 *     cdef int fd
 *     file_like.flush()             # <<<<<<<<<<<<<<
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 */

#line 1729 "cds3/core.pyx"
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__flush); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1729 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1729 "cds3/core.pyx"
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1729 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1729 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1729 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cds3/core.pyx":1730
 *     cdef int fd
 *     file_like.flush()
 *     fd = file_like.fileno()             # <<<<<<<<<<<<<<
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 */

#line 1730 "cds3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__fileno); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1730; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1730 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1730 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1730; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1730 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1730 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1730 "cds3/core.pyx"
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1730; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1730 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1730 "cds3/core.pyx"
  __pyx_v_fd = __pyx_t_3;

  /* "cds3/core.pyx":1731
 *     file_like.flush()
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")             # <<<<<<<<<<<<<<
 *     assert fp != NULL
 *     cds_print_vars(fp, indent, group.c_ob, flags)
 */

#line 1731 "cds3/core.pyx"
  __pyx_v_fp = fdopen(__pyx_v_fd, __pyx_k__w);

  /* "cds3/core.pyx":1732
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL             # <<<<<<<<<<<<<<
 *     cds_print_vars(fp, indent, group.c_ob, flags)
 *     fflush(fp)
 */

#line 1732 "cds3/core.pyx"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 1732 "cds3/core.pyx"
  if (unlikely(!(__pyx_v_fp != NULL))) {

#line 1732 "cds3/core.pyx"
    PyErr_SetNone(PyExc_AssertionError);

#line 1732 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1732; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1732 "cds3/core.pyx"
  }

#line 1732 "cds3/core.pyx"
  #endif

  /* "cds3/core.pyx":1733
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 *     cds_print_vars(fp, indent, group.c_ob, flags)             # <<<<<<<<<<<<<<
 *     fflush(fp)
 * 
 */

#line 1733 "cds3/core.pyx"
  cds_print_vars(__pyx_v_fp, __pyx_v_indent, __pyx_v_group->c_ob, __pyx_v_flags);

  /* "cds3/core.pyx":1734
 *     assert fp != NULL
 *     cds_print_vars(fp, indent, group.c_ob, flags)
 *     fflush(fp)             # <<<<<<<<<<<<<<
 * 
 * def print_var_data(object file_like, char *label, char *indent, Var var):
 */

#line 1734 "cds3/core.pyx"
  fflush(__pyx_v_fp);

#line 1734 "cds3/core.pyx"


#line 1734 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1734 "cds3/core.pyx"
  goto __pyx_L0;

#line 1734 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1734 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1734 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1734 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_vars", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1734 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1734 "cds3/core.pyx"
  __pyx_L0:;

#line 1734 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1734 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1734 "cds3/core.pyx"
  return __pyx_r;

#line 1734 "cds3/core.pyx"
}

#line 1734 "cds3/core.pyx"


#line 1734 "cds3/core.pyx"
/* Python wrapper */

#line 1734 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_15print_var_data(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1734 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_14print_var_data[] = "print_var_data(file_like, char *label, char *indent, Var var)";
static PyMethodDef __pyx_mdef_4cds3_4core_15print_var_data = 
#line 1734 "cds3/core.pyx"
{__Pyx_NAMESTR("print_var_data"), (PyCFunction)__pyx_pw_4cds3_4core_15print_var_data, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_14print_var_data)};

#line 1734 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_15print_var_data(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_like = 0
#line 1734 "cds3/core.pyx"
;
  char *__pyx_v_label
#line 1734 "cds3/core.pyx"
;
  char *__pyx_v_indent
#line 1734 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = 0
#line 1734 "cds3/core.pyx"
;

#line 1734 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1734 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1734 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_var_data (wrapper)", 0);

#line 1734 "cds3/core.pyx"
  {

#line 1734 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__file_like,&__pyx_n_s__label,&__pyx_n_s__indent,&__pyx_n_s__var,0};

#line 1734 "cds3/core.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 1734 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1734 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 1734 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1734 "cds3/core.pyx"
      switch (pos_args) {
        case  4: 
#line 1734 "cds3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 1734 "cds3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1734 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1734 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1734 "cds3/core.pyx"
        case  0: break;
        default: 
#line 1734 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1734 "cds3/core.pyx"
      }

#line 1734 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1734 "cds3/core.pyx"
      switch (pos_args) {

#line 1734 "cds3/core.pyx"
        case  0:

#line 1734 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__file_like)) != 0)) kw_args--;
        else 
#line 1734 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1734 "cds3/core.pyx"
        case  1:

#line 1734 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__label)) != 0)) kw_args--;

#line 1734 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_var_data", 1, 4, 4, 1); 
#line 1734 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1736; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1734 "cds3/core.pyx"
        }

#line 1734 "cds3/core.pyx"
        case  2:

#line 1734 "cds3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__indent)) != 0)) kw_args--;

#line 1734 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_var_data", 1, 4, 4, 2); 
#line 1734 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1736; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1734 "cds3/core.pyx"
        }

#line 1734 "cds3/core.pyx"
        case  3:

#line 1734 "cds3/core.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__var)) != 0)) kw_args--;

#line 1734 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_var_data", 1, 4, 4, 3); 
#line 1734 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1736; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1734 "cds3/core.pyx"
        }

#line 1734 "cds3/core.pyx"
      }

#line 1734 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1734 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "print_var_data") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1736; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1734 "cds3/core.pyx"
      }

#line 1734 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {

#line 1734 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1734 "cds3/core.pyx"
    } else {

#line 1734 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1734 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1734 "cds3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1734 "cds3/core.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 1734 "cds3/core.pyx"
    }

#line 1734 "cds3/core.pyx"
    __pyx_v_file_like = values[0];

#line 1734 "cds3/core.pyx"
    __pyx_v_label = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_label) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1736; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1734 "cds3/core.pyx"
    __pyx_v_indent = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_indent) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1736; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1734 "cds3/core.pyx"
    __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)values[3]);

#line 1734 "cds3/core.pyx"
  }

#line 1734 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1734 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("print_var_data", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 1734 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1736; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1734 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1734 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_var_data", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1734 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1734 "cds3/core.pyx"
  return NULL;

#line 1734 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1734 "cds3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_var), __pyx_ptype_4cds3_4core_Var, 1, "var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1734 "cds3/core.pyx"
__pyx_pf_4cds3_4core_14print_var_data(__pyx_self, __pyx_v_file_like, __pyx_v_label, __pyx_v_indent, __pyx_v_var);

#line 1734 "cds3/core.pyx"
  goto __pyx_L0;

#line 1734 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1734 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1734 "cds3/core.pyx"
  __pyx_L0:;

#line 1734 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1734 "cds3/core.pyx"
  return __pyx_r;

#line 1734 "cds3/core.pyx"
}

/* "cds3/core.pyx":1736
 *     fflush(fp)
 * 
 * def print_var_data(object file_like, char *label, char *indent, Var var):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1736 "cds3/core.pyx"


#line 1736 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_14print_var_data(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, char *__pyx_v_label, char *__pyx_v_indent, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var) {
  FILE *__pyx_v_fp
#line 1736 "cds3/core.pyx"
;
  int __pyx_v_fd
#line 1736 "cds3/core.pyx"
;

#line 1736 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1736 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_var_data", 0);

  /* "cds3/core.pyx":1739
 *     cdef FILE *fp
 *     cdef int fd
 *     file_like.flush()             # <<<<<<<<<<<<<<
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 */

#line 1739 "cds3/core.pyx"
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__flush); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1739 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1739 "cds3/core.pyx"
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1739 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1739 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1739 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cds3/core.pyx":1740
 *     cdef int fd
 *     file_like.flush()
 *     fd = file_like.fileno()             # <<<<<<<<<<<<<<
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 */

#line 1740 "cds3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__fileno); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1740 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1740 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1740 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1740 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1740 "cds3/core.pyx"
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1740 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1740 "cds3/core.pyx"
  __pyx_v_fd = __pyx_t_3;

  /* "cds3/core.pyx":1741
 *     file_like.flush()
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")             # <<<<<<<<<<<<<<
 *     assert fp != NULL
 *     cds_print_var_data(fp, label, indent, var.c_ob)
 */

#line 1741 "cds3/core.pyx"
  __pyx_v_fp = fdopen(__pyx_v_fd, __pyx_k__w);

  /* "cds3/core.pyx":1742
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL             # <<<<<<<<<<<<<<
 *     cds_print_var_data(fp, label, indent, var.c_ob)
 *     fflush(fp)
 */

#line 1742 "cds3/core.pyx"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 1742 "cds3/core.pyx"
  if (unlikely(!(__pyx_v_fp != NULL))) {

#line 1742 "cds3/core.pyx"
    PyErr_SetNone(PyExc_AssertionError);

#line 1742 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1742 "cds3/core.pyx"
  }

#line 1742 "cds3/core.pyx"
  #endif

  /* "cds3/core.pyx":1743
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 *     cds_print_var_data(fp, label, indent, var.c_ob)             # <<<<<<<<<<<<<<
 *     fflush(fp)
 * 
 */

#line 1743 "cds3/core.pyx"
  cds_print_var_data(__pyx_v_fp, __pyx_v_label, __pyx_v_indent, __pyx_v_var->c_ob);

  /* "cds3/core.pyx":1744
 *     assert fp != NULL
 *     cds_print_var_data(fp, label, indent, var.c_ob)
 *     fflush(fp)             # <<<<<<<<<<<<<<
 * 
 * def print_data(object file_like, char *indent, Group group):
 */

#line 1744 "cds3/core.pyx"
  fflush(__pyx_v_fp);

#line 1744 "cds3/core.pyx"


#line 1744 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1744 "cds3/core.pyx"
  goto __pyx_L0;

#line 1744 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1744 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1744 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1744 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_var_data", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1744 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1744 "cds3/core.pyx"
  __pyx_L0:;

#line 1744 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1744 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1744 "cds3/core.pyx"
  return __pyx_r;

#line 1744 "cds3/core.pyx"
}

#line 1744 "cds3/core.pyx"


#line 1744 "cds3/core.pyx"
/* Python wrapper */

#line 1744 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_17print_data(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1744 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_16print_data[] = "print_data(file_like, char *indent, Group group)";
static PyMethodDef __pyx_mdef_4cds3_4core_17print_data = 
#line 1744 "cds3/core.pyx"
{__Pyx_NAMESTR("print_data"), (PyCFunction)__pyx_pw_4cds3_4core_17print_data, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_16print_data)};

#line 1744 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_17print_data(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_like = 0
#line 1744 "cds3/core.pyx"
;
  char *__pyx_v_indent
#line 1744 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Group *__pyx_v_group = 0
#line 1744 "cds3/core.pyx"
;

#line 1744 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1744 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1744 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_data (wrapper)", 0);

#line 1744 "cds3/core.pyx"
  {

#line 1744 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__file_like,&__pyx_n_s__indent,&__pyx_n_s__group,0};

#line 1744 "cds3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 1744 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1744 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 1744 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1744 "cds3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 1744 "cds3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1744 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1744 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1744 "cds3/core.pyx"
        case  0: break;
        default: 
#line 1744 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1744 "cds3/core.pyx"
      }

#line 1744 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1744 "cds3/core.pyx"
      switch (pos_args) {

#line 1744 "cds3/core.pyx"
        case  0:

#line 1744 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__file_like)) != 0)) kw_args--;
        else 
#line 1744 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1744 "cds3/core.pyx"
        case  1:

#line 1744 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__indent)) != 0)) kw_args--;

#line 1744 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_data", 1, 3, 3, 1); 
#line 1744 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1746; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1744 "cds3/core.pyx"
        }

#line 1744 "cds3/core.pyx"
        case  2:

#line 1744 "cds3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__group)) != 0)) kw_args--;

#line 1744 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_data", 1, 3, 3, 2); 
#line 1744 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1746; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1744 "cds3/core.pyx"
        }

#line 1744 "cds3/core.pyx"
      }

#line 1744 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1744 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "print_data") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1746; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1744 "cds3/core.pyx"
      }

#line 1744 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 1744 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1744 "cds3/core.pyx"
    } else {

#line 1744 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1744 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1744 "cds3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1744 "cds3/core.pyx"
    }

#line 1744 "cds3/core.pyx"
    __pyx_v_file_like = values[0];

#line 1744 "cds3/core.pyx"
    __pyx_v_indent = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_indent) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1746; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1744 "cds3/core.pyx"
    __pyx_v_group = ((struct __pyx_obj_4cds3_4core_Group *)values[2]);

#line 1744 "cds3/core.pyx"
  }

#line 1744 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1744 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("print_data", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 1744 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1746; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1744 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1744 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_data", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1744 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1744 "cds3/core.pyx"
  return NULL;

#line 1744 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1744 "cds3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_group), __pyx_ptype_4cds3_4core_Group, 1, "group", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1744 "cds3/core.pyx"
__pyx_pf_4cds3_4core_16print_data(__pyx_self, __pyx_v_file_like, __pyx_v_indent, __pyx_v_group);

#line 1744 "cds3/core.pyx"
  goto __pyx_L0;

#line 1744 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1744 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1744 "cds3/core.pyx"
  __pyx_L0:;

#line 1744 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1744 "cds3/core.pyx"
  return __pyx_r;

#line 1744 "cds3/core.pyx"
}

/* "cds3/core.pyx":1746
 *     fflush(fp)
 * 
 * def print_data(object file_like, char *indent, Group group):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1746 "cds3/core.pyx"


#line 1746 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_16print_data(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, char *__pyx_v_indent, struct __pyx_obj_4cds3_4core_Group *__pyx_v_group) {
  FILE *__pyx_v_fp
#line 1746 "cds3/core.pyx"
;
  int __pyx_v_fd
#line 1746 "cds3/core.pyx"
;

#line 1746 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1746 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_data", 0);

  /* "cds3/core.pyx":1749
 *     cdef FILE *fp
 *     cdef int fd
 *     file_like.flush()             # <<<<<<<<<<<<<<
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 */

#line 1749 "cds3/core.pyx"
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__flush); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1749 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1749 "cds3/core.pyx"
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1749 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1749 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1749 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cds3/core.pyx":1750
 *     cdef int fd
 *     file_like.flush()
 *     fd = file_like.fileno()             # <<<<<<<<<<<<<<
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 */

#line 1750 "cds3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__fileno); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1750 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1750 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1750 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1750 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1750 "cds3/core.pyx"
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1750 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1750 "cds3/core.pyx"
  __pyx_v_fd = __pyx_t_3;

  /* "cds3/core.pyx":1751
 *     file_like.flush()
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")             # <<<<<<<<<<<<<<
 *     assert fp != NULL
 *     cds_print_data(fp, indent, group.c_ob)
 */

#line 1751 "cds3/core.pyx"
  __pyx_v_fp = fdopen(__pyx_v_fd, __pyx_k__w);

  /* "cds3/core.pyx":1752
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL             # <<<<<<<<<<<<<<
 *     cds_print_data(fp, indent, group.c_ob)
 *     fflush(fp)
 */

#line 1752 "cds3/core.pyx"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 1752 "cds3/core.pyx"
  if (unlikely(!(__pyx_v_fp != NULL))) {

#line 1752 "cds3/core.pyx"
    PyErr_SetNone(PyExc_AssertionError);

#line 1752 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1752 "cds3/core.pyx"
  }

#line 1752 "cds3/core.pyx"
  #endif

  /* "cds3/core.pyx":1753
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 *     cds_print_data(fp, indent, group.c_ob)             # <<<<<<<<<<<<<<
 *     fflush(fp)
 * 
 */

#line 1753 "cds3/core.pyx"
  cds_print_data(__pyx_v_fp, __pyx_v_indent, __pyx_v_group->c_ob);

  /* "cds3/core.pyx":1754
 *     assert fp != NULL
 *     cds_print_data(fp, indent, group.c_ob)
 *     fflush(fp)             # <<<<<<<<<<<<<<
 * 
 * def print_group(object file_like, char *indent, Group group, int flags):
 */

#line 1754 "cds3/core.pyx"
  fflush(__pyx_v_fp);

#line 1754 "cds3/core.pyx"


#line 1754 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1754 "cds3/core.pyx"
  goto __pyx_L0;

#line 1754 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1754 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1754 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1754 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_data", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1754 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1754 "cds3/core.pyx"
  __pyx_L0:;

#line 1754 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1754 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1754 "cds3/core.pyx"
  return __pyx_r;

#line 1754 "cds3/core.pyx"
}

#line 1754 "cds3/core.pyx"


#line 1754 "cds3/core.pyx"
/* Python wrapper */

#line 1754 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_19print_group(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1754 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_18print_group[] = "print_group(file_like, char *indent, Group group, int flags)";
static PyMethodDef __pyx_mdef_4cds3_4core_19print_group = 
#line 1754 "cds3/core.pyx"
{__Pyx_NAMESTR("print_group"), (PyCFunction)__pyx_pw_4cds3_4core_19print_group, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_18print_group)};

#line 1754 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_19print_group(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_like = 0
#line 1754 "cds3/core.pyx"
;
  char *__pyx_v_indent
#line 1754 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Group *__pyx_v_group = 0
#line 1754 "cds3/core.pyx"
;
  int __pyx_v_flags
#line 1754 "cds3/core.pyx"
;

#line 1754 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1754 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1754 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_group (wrapper)", 0);

#line 1754 "cds3/core.pyx"
  {

#line 1754 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__file_like,&__pyx_n_s__indent,&__pyx_n_s__group,&__pyx_n_s__flags,0};

#line 1754 "cds3/core.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 1754 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1754 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 1754 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1754 "cds3/core.pyx"
      switch (pos_args) {
        case  4: 
#line 1754 "cds3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 1754 "cds3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1754 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1754 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1754 "cds3/core.pyx"
        case  0: break;
        default: 
#line 1754 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1754 "cds3/core.pyx"
      }

#line 1754 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1754 "cds3/core.pyx"
      switch (pos_args) {

#line 1754 "cds3/core.pyx"
        case  0:

#line 1754 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__file_like)) != 0)) kw_args--;
        else 
#line 1754 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1754 "cds3/core.pyx"
        case  1:

#line 1754 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__indent)) != 0)) kw_args--;

#line 1754 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_group", 1, 4, 4, 1); 
#line 1754 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1756; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1754 "cds3/core.pyx"
        }

#line 1754 "cds3/core.pyx"
        case  2:

#line 1754 "cds3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__group)) != 0)) kw_args--;

#line 1754 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_group", 1, 4, 4, 2); 
#line 1754 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1756; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1754 "cds3/core.pyx"
        }

#line 1754 "cds3/core.pyx"
        case  3:

#line 1754 "cds3/core.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags)) != 0)) kw_args--;

#line 1754 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_group", 1, 4, 4, 3); 
#line 1754 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1756; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1754 "cds3/core.pyx"
        }

#line 1754 "cds3/core.pyx"
      }

#line 1754 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1754 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "print_group") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1756; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1754 "cds3/core.pyx"
      }

#line 1754 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {

#line 1754 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1754 "cds3/core.pyx"
    } else {

#line 1754 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1754 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1754 "cds3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1754 "cds3/core.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 1754 "cds3/core.pyx"
    }

#line 1754 "cds3/core.pyx"
    __pyx_v_file_like = values[0];

#line 1754 "cds3/core.pyx"
    __pyx_v_indent = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_indent) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1756; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1754 "cds3/core.pyx"
    __pyx_v_group = ((struct __pyx_obj_4cds3_4core_Group *)values[2]);

#line 1754 "cds3/core.pyx"
    __pyx_v_flags = __Pyx_PyInt_AsInt(values[3]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1756; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1754 "cds3/core.pyx"
  }

#line 1754 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1754 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("print_group", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 1754 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1756; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1754 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1754 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_group", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1754 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1754 "cds3/core.pyx"
  return NULL;

#line 1754 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1754 "cds3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_group), __pyx_ptype_4cds3_4core_Group, 1, "group", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1756; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1754 "cds3/core.pyx"
__pyx_pf_4cds3_4core_18print_group(__pyx_self, __pyx_v_file_like, __pyx_v_indent, __pyx_v_group, __pyx_v_flags);

#line 1754 "cds3/core.pyx"
  goto __pyx_L0;

#line 1754 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1754 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1754 "cds3/core.pyx"
  __pyx_L0:;

#line 1754 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1754 "cds3/core.pyx"
  return __pyx_r;

#line 1754 "cds3/core.pyx"
}

/* "cds3/core.pyx":1756
 *     fflush(fp)
 * 
 * def print_group(object file_like, char *indent, Group group, int flags):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1756 "cds3/core.pyx"


#line 1756 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_18print_group(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, char *__pyx_v_indent, struct __pyx_obj_4cds3_4core_Group *__pyx_v_group, int __pyx_v_flags) {
  FILE *__pyx_v_fp
#line 1756 "cds3/core.pyx"
;
  int __pyx_v_fd
#line 1756 "cds3/core.pyx"
;

#line 1756 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1756 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_group", 0);

  /* "cds3/core.pyx":1759
 *     cdef FILE *fp
 *     cdef int fd
 *     file_like.flush()             # <<<<<<<<<<<<<<
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 */

#line 1759 "cds3/core.pyx"
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__flush); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1759; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1759 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1759 "cds3/core.pyx"
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1759; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1759 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1759 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1759 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cds3/core.pyx":1760
 *     cdef int fd
 *     file_like.flush()
 *     fd = file_like.fileno()             # <<<<<<<<<<<<<<
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 */

#line 1760 "cds3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__fileno); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1760; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1760 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1760 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1760; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1760 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1760 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1760 "cds3/core.pyx"
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1760; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1760 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1760 "cds3/core.pyx"
  __pyx_v_fd = __pyx_t_3;

  /* "cds3/core.pyx":1761
 *     file_like.flush()
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")             # <<<<<<<<<<<<<<
 *     assert fp != NULL
 *     cds_print_group(fp, indent, group.c_ob, flags)
 */

#line 1761 "cds3/core.pyx"
  __pyx_v_fp = fdopen(__pyx_v_fd, __pyx_k__w);

  /* "cds3/core.pyx":1762
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL             # <<<<<<<<<<<<<<
 *     cds_print_group(fp, indent, group.c_ob, flags)
 *     fflush(fp)
 */

#line 1762 "cds3/core.pyx"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 1762 "cds3/core.pyx"
  if (unlikely(!(__pyx_v_fp != NULL))) {

#line 1762 "cds3/core.pyx"
    PyErr_SetNone(PyExc_AssertionError);

#line 1762 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1762 "cds3/core.pyx"
  }

#line 1762 "cds3/core.pyx"
  #endif

  /* "cds3/core.pyx":1763
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 *     cds_print_group(fp, indent, group.c_ob, flags)             # <<<<<<<<<<<<<<
 *     fflush(fp)
 * 
 */

#line 1763 "cds3/core.pyx"
  cds_print_group(__pyx_v_fp, __pyx_v_indent, __pyx_v_group->c_ob, __pyx_v_flags);

  /* "cds3/core.pyx":1764
 *     assert fp != NULL
 *     cds_print_group(fp, indent, group.c_ob, flags)
 *     fflush(fp)             # <<<<<<<<<<<<<<
 * 
 * def print_groups(object file_like, char *indent, Group group, int flags):
 */

#line 1764 "cds3/core.pyx"
  fflush(__pyx_v_fp);

#line 1764 "cds3/core.pyx"


#line 1764 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1764 "cds3/core.pyx"
  goto __pyx_L0;

#line 1764 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1764 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1764 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1764 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_group", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1764 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1764 "cds3/core.pyx"
  __pyx_L0:;

#line 1764 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1764 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1764 "cds3/core.pyx"
  return __pyx_r;

#line 1764 "cds3/core.pyx"
}

#line 1764 "cds3/core.pyx"


#line 1764 "cds3/core.pyx"
/* Python wrapper */

#line 1764 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_21print_groups(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1764 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_20print_groups[] = "print_groups(file_like, char *indent, Group group, int flags)";
static PyMethodDef __pyx_mdef_4cds3_4core_21print_groups = 
#line 1764 "cds3/core.pyx"
{__Pyx_NAMESTR("print_groups"), (PyCFunction)__pyx_pw_4cds3_4core_21print_groups, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_20print_groups)};

#line 1764 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_21print_groups(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_like = 0
#line 1764 "cds3/core.pyx"
;
  char *__pyx_v_indent
#line 1764 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Group *__pyx_v_group = 0
#line 1764 "cds3/core.pyx"
;
  int __pyx_v_flags
#line 1764 "cds3/core.pyx"
;

#line 1764 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1764 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1764 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_groups (wrapper)", 0);

#line 1764 "cds3/core.pyx"
  {

#line 1764 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__file_like,&__pyx_n_s__indent,&__pyx_n_s__group,&__pyx_n_s__flags,0};

#line 1764 "cds3/core.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 1764 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1764 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 1764 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1764 "cds3/core.pyx"
      switch (pos_args) {
        case  4: 
#line 1764 "cds3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 1764 "cds3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1764 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1764 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1764 "cds3/core.pyx"
        case  0: break;
        default: 
#line 1764 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1764 "cds3/core.pyx"
      }

#line 1764 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1764 "cds3/core.pyx"
      switch (pos_args) {

#line 1764 "cds3/core.pyx"
        case  0:

#line 1764 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__file_like)) != 0)) kw_args--;
        else 
#line 1764 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1764 "cds3/core.pyx"
        case  1:

#line 1764 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__indent)) != 0)) kw_args--;

#line 1764 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_groups", 1, 4, 4, 1); 
#line 1764 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1766; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1764 "cds3/core.pyx"
        }

#line 1764 "cds3/core.pyx"
        case  2:

#line 1764 "cds3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__group)) != 0)) kw_args--;

#line 1764 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_groups", 1, 4, 4, 2); 
#line 1764 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1766; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1764 "cds3/core.pyx"
        }

#line 1764 "cds3/core.pyx"
        case  3:

#line 1764 "cds3/core.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags)) != 0)) kw_args--;

#line 1764 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_groups", 1, 4, 4, 3); 
#line 1764 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1766; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1764 "cds3/core.pyx"
        }

#line 1764 "cds3/core.pyx"
      }

#line 1764 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1764 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "print_groups") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1766; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1764 "cds3/core.pyx"
      }

#line 1764 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {

#line 1764 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1764 "cds3/core.pyx"
    } else {

#line 1764 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1764 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1764 "cds3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1764 "cds3/core.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 1764 "cds3/core.pyx"
    }

#line 1764 "cds3/core.pyx"
    __pyx_v_file_like = values[0];

#line 1764 "cds3/core.pyx"
    __pyx_v_indent = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_indent) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1766; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1764 "cds3/core.pyx"
    __pyx_v_group = ((struct __pyx_obj_4cds3_4core_Group *)values[2]);

#line 1764 "cds3/core.pyx"
    __pyx_v_flags = __Pyx_PyInt_AsInt(values[3]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1766; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1764 "cds3/core.pyx"
  }

#line 1764 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1764 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("print_groups", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 1764 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1766; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1764 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1764 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_groups", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1764 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1764 "cds3/core.pyx"
  return NULL;

#line 1764 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1764 "cds3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_group), __pyx_ptype_4cds3_4core_Group, 1, "group", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1764 "cds3/core.pyx"
__pyx_pf_4cds3_4core_20print_groups(__pyx_self, __pyx_v_file_like, __pyx_v_indent, __pyx_v_group, __pyx_v_flags);

#line 1764 "cds3/core.pyx"
  goto __pyx_L0;

#line 1764 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1764 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1764 "cds3/core.pyx"
  __pyx_L0:;

#line 1764 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1764 "cds3/core.pyx"
  return __pyx_r;

#line 1764 "cds3/core.pyx"
}

/* "cds3/core.pyx":1766
 *     fflush(fp)
 * 
 * def print_groups(object file_like, char *indent, Group group, int flags):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1766 "cds3/core.pyx"


#line 1766 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_20print_groups(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, char *__pyx_v_indent, struct __pyx_obj_4cds3_4core_Group *__pyx_v_group, int __pyx_v_flags) {
  FILE *__pyx_v_fp
#line 1766 "cds3/core.pyx"
;
  int __pyx_v_fd
#line 1766 "cds3/core.pyx"
;

#line 1766 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1766 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_groups", 0);

  /* "cds3/core.pyx":1769
 *     cdef FILE *fp
 *     cdef int fd
 *     file_like.flush()             # <<<<<<<<<<<<<<
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 */

#line 1769 "cds3/core.pyx"
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__flush); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1769 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1769 "cds3/core.pyx"
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1769 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1769 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1769 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cds3/core.pyx":1770
 *     cdef int fd
 *     file_like.flush()
 *     fd = file_like.fileno()             # <<<<<<<<<<<<<<
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 */

#line 1770 "cds3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__fileno); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1770 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1770 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1770 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1770 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1770 "cds3/core.pyx"
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1770 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1770 "cds3/core.pyx"
  __pyx_v_fd = __pyx_t_3;

  /* "cds3/core.pyx":1771
 *     file_like.flush()
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")             # <<<<<<<<<<<<<<
 *     assert fp != NULL
 *     cds_print_groups(fp, indent, group.c_ob, flags)
 */

#line 1771 "cds3/core.pyx"
  __pyx_v_fp = fdopen(__pyx_v_fd, __pyx_k__w);

  /* "cds3/core.pyx":1772
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL             # <<<<<<<<<<<<<<
 *     cds_print_groups(fp, indent, group.c_ob, flags)
 *     fflush(fp)
 */

#line 1772 "cds3/core.pyx"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 1772 "cds3/core.pyx"
  if (unlikely(!(__pyx_v_fp != NULL))) {

#line 1772 "cds3/core.pyx"
    PyErr_SetNone(PyExc_AssertionError);

#line 1772 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1772 "cds3/core.pyx"
  }

#line 1772 "cds3/core.pyx"
  #endif

  /* "cds3/core.pyx":1773
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 *     cds_print_groups(fp, indent, group.c_ob, flags)             # <<<<<<<<<<<<<<
 *     fflush(fp)
 * 
 */

#line 1773 "cds3/core.pyx"
  cds_print_groups(__pyx_v_fp, __pyx_v_indent, __pyx_v_group->c_ob, __pyx_v_flags);

  /* "cds3/core.pyx":1774
 *     assert fp != NULL
 *     cds_print_groups(fp, indent, group.c_ob, flags)
 *     fflush(fp)             # <<<<<<<<<<<<<<
 * 
 * def print_vararray(object file_like, char *indent, VarArray vararray, int flags):
 */

#line 1774 "cds3/core.pyx"
  fflush(__pyx_v_fp);

#line 1774 "cds3/core.pyx"


#line 1774 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1774 "cds3/core.pyx"
  goto __pyx_L0;

#line 1774 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1774 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1774 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1774 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_groups", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1774 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1774 "cds3/core.pyx"
  __pyx_L0:;

#line 1774 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1774 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1774 "cds3/core.pyx"
  return __pyx_r;

#line 1774 "cds3/core.pyx"
}

#line 1774 "cds3/core.pyx"


#line 1774 "cds3/core.pyx"
/* Python wrapper */

#line 1774 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_23print_vararray(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1774 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_22print_vararray[] = "print_vararray(file_like, char *indent, VarArray vararray, int flags)";
static PyMethodDef __pyx_mdef_4cds3_4core_23print_vararray = 
#line 1774 "cds3/core.pyx"
{__Pyx_NAMESTR("print_vararray"), (PyCFunction)__pyx_pw_4cds3_4core_23print_vararray, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_22print_vararray)};

#line 1774 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_23print_vararray(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_like = 0
#line 1774 "cds3/core.pyx"
;
  char *__pyx_v_indent
#line 1774 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_VarArray *__pyx_v_vararray = 0
#line 1774 "cds3/core.pyx"
;
  int __pyx_v_flags
#line 1774 "cds3/core.pyx"
;

#line 1774 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1774 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1774 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_vararray (wrapper)", 0);

#line 1774 "cds3/core.pyx"
  {

#line 1774 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__file_like,&__pyx_n_s__indent,&__pyx_n_s__vararray,&__pyx_n_s__flags,0};

#line 1774 "cds3/core.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 1774 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1774 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 1774 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1774 "cds3/core.pyx"
      switch (pos_args) {
        case  4: 
#line 1774 "cds3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 1774 "cds3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1774 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1774 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1774 "cds3/core.pyx"
        case  0: break;
        default: 
#line 1774 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1774 "cds3/core.pyx"
      }

#line 1774 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1774 "cds3/core.pyx"
      switch (pos_args) {

#line 1774 "cds3/core.pyx"
        case  0:

#line 1774 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__file_like)) != 0)) kw_args--;
        else 
#line 1774 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1774 "cds3/core.pyx"
        case  1:

#line 1774 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__indent)) != 0)) kw_args--;

#line 1774 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_vararray", 1, 4, 4, 1); 
#line 1774 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1776; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1774 "cds3/core.pyx"
        }

#line 1774 "cds3/core.pyx"
        case  2:

#line 1774 "cds3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__vararray)) != 0)) kw_args--;

#line 1774 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_vararray", 1, 4, 4, 2); 
#line 1774 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1776; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1774 "cds3/core.pyx"
        }

#line 1774 "cds3/core.pyx"
        case  3:

#line 1774 "cds3/core.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags)) != 0)) kw_args--;

#line 1774 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_vararray", 1, 4, 4, 3); 
#line 1774 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1776; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1774 "cds3/core.pyx"
        }

#line 1774 "cds3/core.pyx"
      }

#line 1774 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1774 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "print_vararray") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1776; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1774 "cds3/core.pyx"
      }

#line 1774 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {

#line 1774 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1774 "cds3/core.pyx"
    } else {

#line 1774 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1774 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1774 "cds3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1774 "cds3/core.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 1774 "cds3/core.pyx"
    }

#line 1774 "cds3/core.pyx"
    __pyx_v_file_like = values[0];

#line 1774 "cds3/core.pyx"
    __pyx_v_indent = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_indent) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1776; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1774 "cds3/core.pyx"
    __pyx_v_vararray = ((struct __pyx_obj_4cds3_4core_VarArray *)values[2]);

#line 1774 "cds3/core.pyx"
    __pyx_v_flags = __Pyx_PyInt_AsInt(values[3]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1776; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1774 "cds3/core.pyx"
  }

#line 1774 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1774 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("print_vararray", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 1774 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1776; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1774 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1774 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_vararray", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1774 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1774 "cds3/core.pyx"
  return NULL;

#line 1774 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1774 "cds3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vararray), __pyx_ptype_4cds3_4core_VarArray, 1, "vararray", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1776; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1774 "cds3/core.pyx"
__pyx_pf_4cds3_4core_22print_vararray(__pyx_self, __pyx_v_file_like, __pyx_v_indent, __pyx_v_vararray, __pyx_v_flags);

#line 1774 "cds3/core.pyx"
  goto __pyx_L0;

#line 1774 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1774 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1774 "cds3/core.pyx"
  __pyx_L0:;

#line 1774 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1774 "cds3/core.pyx"
  return __pyx_r;

#line 1774 "cds3/core.pyx"
}

/* "cds3/core.pyx":1776
 *     fflush(fp)
 * 
 * def print_vararray(object file_like, char *indent, VarArray vararray, int flags):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1776 "cds3/core.pyx"


#line 1776 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_22print_vararray(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, char *__pyx_v_indent, struct __pyx_obj_4cds3_4core_VarArray *__pyx_v_vararray, int __pyx_v_flags) {
  FILE *__pyx_v_fp
#line 1776 "cds3/core.pyx"
;
  int __pyx_v_fd
#line 1776 "cds3/core.pyx"
;

#line 1776 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1776 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_vararray", 0);

  /* "cds3/core.pyx":1779
 *     cdef FILE *fp
 *     cdef int fd
 *     file_like.flush()             # <<<<<<<<<<<<<<
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 */

#line 1779 "cds3/core.pyx"
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__flush); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1779; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1779 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1779 "cds3/core.pyx"
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1779; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1779 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1779 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1779 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cds3/core.pyx":1780
 *     cdef int fd
 *     file_like.flush()
 *     fd = file_like.fileno()             # <<<<<<<<<<<<<<
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 */

#line 1780 "cds3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__fileno); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1780 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1780 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1780 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1780 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1780 "cds3/core.pyx"
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1780 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1780 "cds3/core.pyx"
  __pyx_v_fd = __pyx_t_3;

  /* "cds3/core.pyx":1781
 *     file_like.flush()
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")             # <<<<<<<<<<<<<<
 *     assert fp != NULL
 *     cds_print_vararray(fp, indent, vararray.c_ob, flags)
 */

#line 1781 "cds3/core.pyx"
  __pyx_v_fp = fdopen(__pyx_v_fd, __pyx_k__w);

  /* "cds3/core.pyx":1782
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL             # <<<<<<<<<<<<<<
 *     cds_print_vararray(fp, indent, vararray.c_ob, flags)
 *     fflush(fp)
 */

#line 1782 "cds3/core.pyx"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 1782 "cds3/core.pyx"
  if (unlikely(!(__pyx_v_fp != NULL))) {

#line 1782 "cds3/core.pyx"
    PyErr_SetNone(PyExc_AssertionError);

#line 1782 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1782; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1782 "cds3/core.pyx"
  }

#line 1782 "cds3/core.pyx"
  #endif

  /* "cds3/core.pyx":1783
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 *     cds_print_vararray(fp, indent, vararray.c_ob, flags)             # <<<<<<<<<<<<<<
 *     fflush(fp)
 * 
 */

#line 1783 "cds3/core.pyx"
  cds_print_vararray(__pyx_v_fp, __pyx_v_indent, __pyx_v_vararray->c_ob, __pyx_v_flags);

  /* "cds3/core.pyx":1784
 *     assert fp != NULL
 *     cds_print_vararray(fp, indent, vararray.c_ob, flags)
 *     fflush(fp)             # <<<<<<<<<<<<<<
 * 
 * def print_vargroup(object file_like, char *indent, VarGroup vargroup, int flags):
 */

#line 1784 "cds3/core.pyx"
  fflush(__pyx_v_fp);

#line 1784 "cds3/core.pyx"


#line 1784 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1784 "cds3/core.pyx"
  goto __pyx_L0;

#line 1784 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1784 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1784 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1784 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_vararray", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1784 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1784 "cds3/core.pyx"
  __pyx_L0:;

#line 1784 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1784 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1784 "cds3/core.pyx"
  return __pyx_r;

#line 1784 "cds3/core.pyx"
}

#line 1784 "cds3/core.pyx"


#line 1784 "cds3/core.pyx"
/* Python wrapper */

#line 1784 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_25print_vargroup(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1784 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_24print_vargroup[] = "print_vargroup(file_like, char *indent, VarGroup vargroup, int flags)";
static PyMethodDef __pyx_mdef_4cds3_4core_25print_vargroup = 
#line 1784 "cds3/core.pyx"
{__Pyx_NAMESTR("print_vargroup"), (PyCFunction)__pyx_pw_4cds3_4core_25print_vargroup, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_24print_vargroup)};

#line 1784 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_25print_vargroup(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_like = 0
#line 1784 "cds3/core.pyx"
;
  char *__pyx_v_indent
#line 1784 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_VarGroup *__pyx_v_vargroup = 0
#line 1784 "cds3/core.pyx"
;
  int __pyx_v_flags
#line 1784 "cds3/core.pyx"
;

#line 1784 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1784 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1784 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_vargroup (wrapper)", 0);

#line 1784 "cds3/core.pyx"
  {

#line 1784 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__file_like,&__pyx_n_s__indent,&__pyx_n_s__vargroup,&__pyx_n_s__flags,0};

#line 1784 "cds3/core.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 1784 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1784 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 1784 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1784 "cds3/core.pyx"
      switch (pos_args) {
        case  4: 
#line 1784 "cds3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 1784 "cds3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1784 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1784 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1784 "cds3/core.pyx"
        case  0: break;
        default: 
#line 1784 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1784 "cds3/core.pyx"
      }

#line 1784 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1784 "cds3/core.pyx"
      switch (pos_args) {

#line 1784 "cds3/core.pyx"
        case  0:

#line 1784 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__file_like)) != 0)) kw_args--;
        else 
#line 1784 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1784 "cds3/core.pyx"
        case  1:

#line 1784 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__indent)) != 0)) kw_args--;

#line 1784 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_vargroup", 1, 4, 4, 1); 
#line 1784 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1786; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1784 "cds3/core.pyx"
        }

#line 1784 "cds3/core.pyx"
        case  2:

#line 1784 "cds3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__vargroup)) != 0)) kw_args--;

#line 1784 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_vargroup", 1, 4, 4, 2); 
#line 1784 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1786; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1784 "cds3/core.pyx"
        }

#line 1784 "cds3/core.pyx"
        case  3:

#line 1784 "cds3/core.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags)) != 0)) kw_args--;

#line 1784 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_vargroup", 1, 4, 4, 3); 
#line 1784 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1786; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1784 "cds3/core.pyx"
        }

#line 1784 "cds3/core.pyx"
      }

#line 1784 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1784 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "print_vargroup") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1786; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1784 "cds3/core.pyx"
      }

#line 1784 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {

#line 1784 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1784 "cds3/core.pyx"
    } else {

#line 1784 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1784 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1784 "cds3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1784 "cds3/core.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 1784 "cds3/core.pyx"
    }

#line 1784 "cds3/core.pyx"
    __pyx_v_file_like = values[0];

#line 1784 "cds3/core.pyx"
    __pyx_v_indent = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_indent) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1786; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1784 "cds3/core.pyx"
    __pyx_v_vargroup = ((struct __pyx_obj_4cds3_4core_VarGroup *)values[2]);

#line 1784 "cds3/core.pyx"
    __pyx_v_flags = __Pyx_PyInt_AsInt(values[3]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1786; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1784 "cds3/core.pyx"
  }

#line 1784 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1784 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("print_vargroup", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 1784 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1786; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1784 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1784 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_vargroup", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1784 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1784 "cds3/core.pyx"
  return NULL;

#line 1784 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1784 "cds3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vargroup), __pyx_ptype_4cds3_4core_VarGroup, 1, "vargroup", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1784 "cds3/core.pyx"
__pyx_pf_4cds3_4core_24print_vargroup(__pyx_self, __pyx_v_file_like, __pyx_v_indent, __pyx_v_vargroup, __pyx_v_flags);

#line 1784 "cds3/core.pyx"
  goto __pyx_L0;

#line 1784 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1784 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1784 "cds3/core.pyx"
  __pyx_L0:;

#line 1784 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1784 "cds3/core.pyx"
  return __pyx_r;

#line 1784 "cds3/core.pyx"
}

/* "cds3/core.pyx":1786
 *     fflush(fp)
 * 
 * def print_vargroup(object file_like, char *indent, VarGroup vargroup, int flags):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1786 "cds3/core.pyx"


#line 1786 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_24print_vargroup(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, char *__pyx_v_indent, struct __pyx_obj_4cds3_4core_VarGroup *__pyx_v_vargroup, int __pyx_v_flags) {
  FILE *__pyx_v_fp
#line 1786 "cds3/core.pyx"
;
  int __pyx_v_fd
#line 1786 "cds3/core.pyx"
;

#line 1786 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1786 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_vargroup", 0);

  /* "cds3/core.pyx":1789
 *     cdef FILE *fp
 *     cdef int fd
 *     file_like.flush()             # <<<<<<<<<<<<<<
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 */

#line 1789 "cds3/core.pyx"
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__flush); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1789 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1789 "cds3/core.pyx"
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1789 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1789 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1789 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cds3/core.pyx":1790
 *     cdef int fd
 *     file_like.flush()
 *     fd = file_like.fileno()             # <<<<<<<<<<<<<<
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 */

#line 1790 "cds3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__fileno); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1790; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1790 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1790 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1790; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1790 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1790 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1790 "cds3/core.pyx"
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1790; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1790 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1790 "cds3/core.pyx"
  __pyx_v_fd = __pyx_t_3;

  /* "cds3/core.pyx":1791
 *     file_like.flush()
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")             # <<<<<<<<<<<<<<
 *     assert fp != NULL
 *     cds_print_vargroup(fp, indent, vargroup.c_ob, flags)
 */

#line 1791 "cds3/core.pyx"
  __pyx_v_fp = fdopen(__pyx_v_fd, __pyx_k__w);

  /* "cds3/core.pyx":1792
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL             # <<<<<<<<<<<<<<
 *     cds_print_vargroup(fp, indent, vargroup.c_ob, flags)
 *     fflush(fp)
 */

#line 1792 "cds3/core.pyx"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 1792 "cds3/core.pyx"
  if (unlikely(!(__pyx_v_fp != NULL))) {

#line 1792 "cds3/core.pyx"
    PyErr_SetNone(PyExc_AssertionError);

#line 1792 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1792; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1792 "cds3/core.pyx"
  }

#line 1792 "cds3/core.pyx"
  #endif

  /* "cds3/core.pyx":1793
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 *     cds_print_vargroup(fp, indent, vargroup.c_ob, flags)             # <<<<<<<<<<<<<<
 *     fflush(fp)
 * 
 */

#line 1793 "cds3/core.pyx"
  cds_print_vargroup(__pyx_v_fp, __pyx_v_indent, __pyx_v_vargroup->c_ob, __pyx_v_flags);

  /* "cds3/core.pyx":1794
 *     assert fp != NULL
 *     cds_print_vargroup(fp, indent, vargroup.c_ob, flags)
 *     fflush(fp)             # <<<<<<<<<<<<<<
 * 
 * def print_vargroups(object file_like, char *indent, Group group, int flags):
 */

#line 1794 "cds3/core.pyx"
  fflush(__pyx_v_fp);

#line 1794 "cds3/core.pyx"


#line 1794 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1794 "cds3/core.pyx"
  goto __pyx_L0;

#line 1794 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1794 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1794 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1794 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_vargroup", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1794 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1794 "cds3/core.pyx"
  __pyx_L0:;

#line 1794 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1794 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1794 "cds3/core.pyx"
  return __pyx_r;

#line 1794 "cds3/core.pyx"
}

#line 1794 "cds3/core.pyx"


#line 1794 "cds3/core.pyx"
/* Python wrapper */

#line 1794 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_27print_vargroups(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1794 "cds3/core.pyx"
static char __pyx_doc_4cds3_4core_26print_vargroups[] = "print_vargroups(file_like, char *indent, Group group, int flags)";
static PyMethodDef __pyx_mdef_4cds3_4core_27print_vargroups = 
#line 1794 "cds3/core.pyx"
{__Pyx_NAMESTR("print_vargroups"), (PyCFunction)__pyx_pw_4cds3_4core_27print_vargroups, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_26print_vargroups)};

#line 1794 "cds3/core.pyx"
static PyObject *__pyx_pw_4cds3_4core_27print_vargroups(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_like = 0
#line 1794 "cds3/core.pyx"
;
  char *__pyx_v_indent
#line 1794 "cds3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Group *__pyx_v_group = 0
#line 1794 "cds3/core.pyx"
;
  int __pyx_v_flags
#line 1794 "cds3/core.pyx"
;

#line 1794 "cds3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1794 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1794 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_vargroups (wrapper)", 0);

#line 1794 "cds3/core.pyx"
  {

#line 1794 "cds3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__file_like,&__pyx_n_s__indent,&__pyx_n_s__group,&__pyx_n_s__flags,0};

#line 1794 "cds3/core.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 1794 "cds3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1794 "cds3/core.pyx"
      Py_ssize_t kw_args;

#line 1794 "cds3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1794 "cds3/core.pyx"
      switch (pos_args) {
        case  4: 
#line 1794 "cds3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 1794 "cds3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1794 "cds3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1794 "cds3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1794 "cds3/core.pyx"
        case  0: break;
        default: 
#line 1794 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1794 "cds3/core.pyx"
      }

#line 1794 "cds3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1794 "cds3/core.pyx"
      switch (pos_args) {

#line 1794 "cds3/core.pyx"
        case  0:

#line 1794 "cds3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__file_like)) != 0)) kw_args--;
        else 
#line 1794 "cds3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1794 "cds3/core.pyx"
        case  1:

#line 1794 "cds3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__indent)) != 0)) kw_args--;

#line 1794 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_vargroups", 1, 4, 4, 1); 
#line 1794 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1794 "cds3/core.pyx"
        }

#line 1794 "cds3/core.pyx"
        case  2:

#line 1794 "cds3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__group)) != 0)) kw_args--;

#line 1794 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_vargroups", 1, 4, 4, 2); 
#line 1794 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1794 "cds3/core.pyx"
        }

#line 1794 "cds3/core.pyx"
        case  3:

#line 1794 "cds3/core.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags)) != 0)) kw_args--;

#line 1794 "cds3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("print_vargroups", 1, 4, 4, 3); 
#line 1794 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1794 "cds3/core.pyx"
        }

#line 1794 "cds3/core.pyx"
      }

#line 1794 "cds3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1794 "cds3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "print_vargroups") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1794 "cds3/core.pyx"
      }

#line 1794 "cds3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {

#line 1794 "cds3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1794 "cds3/core.pyx"
    } else {

#line 1794 "cds3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1794 "cds3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1794 "cds3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1794 "cds3/core.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 1794 "cds3/core.pyx"
    }

#line 1794 "cds3/core.pyx"
    __pyx_v_file_like = values[0];

#line 1794 "cds3/core.pyx"
    __pyx_v_indent = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_indent) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1794 "cds3/core.pyx"
    __pyx_v_group = ((struct __pyx_obj_4cds3_4core_Group *)values[2]);

#line 1794 "cds3/core.pyx"
    __pyx_v_flags = __Pyx_PyInt_AsInt(values[3]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1794 "cds3/core.pyx"
  }

#line 1794 "cds3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1794 "cds3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("print_vargroups", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 1794 "cds3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1794 "cds3/core.pyx"
  __pyx_L3_error:;

#line 1794 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_vargroups", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1794 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1794 "cds3/core.pyx"
  return NULL;

#line 1794 "cds3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1794 "cds3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_group), __pyx_ptype_4cds3_4core_Group, 1, "group", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1794 "cds3/core.pyx"
__pyx_pf_4cds3_4core_26print_vargroups(__pyx_self, __pyx_v_file_like, __pyx_v_indent, __pyx_v_group, __pyx_v_flags);

#line 1794 "cds3/core.pyx"
  goto __pyx_L0;

#line 1794 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1794 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1794 "cds3/core.pyx"
  __pyx_L0:;

#line 1794 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1794 "cds3/core.pyx"
  return __pyx_r;

#line 1794 "cds3/core.pyx"
}

/* "cds3/core.pyx":1796
 *     fflush(fp)
 * 
 * def print_vargroups(object file_like, char *indent, Group group, int flags):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1796 "cds3/core.pyx"


#line 1796 "cds3/core.pyx"
static PyObject *__pyx_pf_4cds3_4core_26print_vargroups(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_file_like, char *__pyx_v_indent, struct __pyx_obj_4cds3_4core_Group *__pyx_v_group, int __pyx_v_flags) {
  FILE *__pyx_v_fp
#line 1796 "cds3/core.pyx"
;
  int __pyx_v_fd
#line 1796 "cds3/core.pyx"
;

#line 1796 "cds3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1796 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("print_vargroups", 0);

  /* "cds3/core.pyx":1799
 *     cdef FILE *fp
 *     cdef int fd
 *     file_like.flush()             # <<<<<<<<<<<<<<
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 */

#line 1799 "cds3/core.pyx"
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__flush); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1799 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1799 "cds3/core.pyx"
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1799 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1799 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1799 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "cds3/core.pyx":1800
 *     cdef int fd
 *     file_like.flush()
 *     fd = file_like.fileno()             # <<<<<<<<<<<<<<
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 */

#line 1800 "cds3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_file_like, __pyx_n_s__fileno); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1800; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1800 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1800 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1800; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1800 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1800 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1800 "cds3/core.pyx"
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1800; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1800 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1800 "cds3/core.pyx"
  __pyx_v_fd = __pyx_t_3;

  /* "cds3/core.pyx":1801
 *     file_like.flush()
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")             # <<<<<<<<<<<<<<
 *     assert fp != NULL
 *     cds_print_vargroups(fp, indent, group.c_ob, flags)
 */

#line 1801 "cds3/core.pyx"
  __pyx_v_fp = fdopen(__pyx_v_fd, __pyx_k__w);

  /* "cds3/core.pyx":1802
 *     fd = file_like.fileno()
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL             # <<<<<<<<<<<<<<
 *     cds_print_vargroups(fp, indent, group.c_ob, flags)
 *     fflush(fp)
 */

#line 1802 "cds3/core.pyx"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 1802 "cds3/core.pyx"
  if (unlikely(!(__pyx_v_fp != NULL))) {

#line 1802 "cds3/core.pyx"
    PyErr_SetNone(PyExc_AssertionError);

#line 1802 "cds3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1802; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1802 "cds3/core.pyx"
  }

#line 1802 "cds3/core.pyx"
  #endif

  /* "cds3/core.pyx":1803
 *     fp = fdopen(fd, "w")
 *     assert fp != NULL
 *     cds_print_vargroups(fp, indent, group.c_ob, flags)             # <<<<<<<<<<<<<<
 *     fflush(fp)
 */

#line 1803 "cds3/core.pyx"
  cds_print_vargroups(__pyx_v_fp, __pyx_v_indent, __pyx_v_group->c_ob, __pyx_v_flags);

  /* "cds3/core.pyx":1804
 *     assert fp != NULL
 *     cds_print_vargroups(fp, indent, group.c_ob, flags)
 *     fflush(fp)             # <<<<<<<<<<<<<<
 */

#line 1804 "cds3/core.pyx"
  fflush(__pyx_v_fp);

#line 1804 "cds3/core.pyx"


#line 1804 "cds3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1804 "cds3/core.pyx"
  goto __pyx_L0;

#line 1804 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1804 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1804 "cds3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1804 "cds3/core.pyx"
  __Pyx_AddTraceback("cds3.core.print_vargroups", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1804 "cds3/core.pyx"
  __pyx_r = NULL;

#line 1804 "cds3/core.pyx"
  __pyx_L0:;

#line 1804 "cds3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1804 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1804 "cds3/core.pyx"
  return __pyx_r;

#line 1804 "cds3/core.pyx"
}

#line 1804 "cds3/core.pyx"


#line 1804 "cds3/core.pyx"
/* Python wrapper */

#line 1804 "cds3/core.pyx"
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/

#line 1804 "cds3/core.pyx"
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {

#line 1804 "cds3/core.pyx"
  int __pyx_r;

#line 1804 "cds3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1804 "cds3/core.pyx"
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = 
#line 1804 "cds3/core.pyx"
__pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

#line 1804 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1804 "cds3/core.pyx"
  return __pyx_r;

#line 1804 "cds3/core.pyx"
}

/* "numpy.pxd":194
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

#line 194 "numpy.pxd"


#line 194 "numpy.pxd"
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape
#line 194 "numpy.pxd"
;
  int __pyx_v_i
#line 194 "numpy.pxd"
;
  int __pyx_v_ndim
#line 194 "numpy.pxd"
;
  int __pyx_v_endian_detector
#line 194 "numpy.pxd"
;
  int __pyx_v_little_endian
#line 194 "numpy.pxd"
;
  int __pyx_v_t
#line 194 "numpy.pxd"
;
  char *__pyx_v_f
#line 194 "numpy.pxd"
;
  PyArray_Descr *__pyx_v_descr = 0
#line 194 "numpy.pxd"
;
  int __pyx_v_offset
#line 194 "numpy.pxd"
;
  int __pyx_v_hasfields
#line 194 "numpy.pxd"
;

#line 194 "numpy.pxd"
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 194 "numpy.pxd"
  __Pyx_RefNannySetupContext("__getbuffer__", 0);

#line 194 "numpy.pxd"
  if (__pyx_v_info != NULL) {

#line 194 "numpy.pxd"
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);

#line 194 "numpy.pxd"
    __Pyx_GIVEREF(__pyx_v_info->obj);

#line 194 "numpy.pxd"
  }

  /* "numpy.pxd":200
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */

#line 200 "numpy.pxd"
  __pyx_t_1 = (__pyx_v_info == NULL);

#line 200 "numpy.pxd"
  if (__pyx_t_1) {

#line 200 "numpy.pxd"
    __pyx_r = 0;

#line 200 "numpy.pxd"
    goto __pyx_L0;

#line 200 "numpy.pxd"
    goto __pyx_L3;

#line 200 "numpy.pxd"
  }

#line 200 "numpy.pxd"
  __pyx_L3:;

  /* "numpy.pxd":203
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */

#line 203 "numpy.pxd"
  __pyx_v_endian_detector = 1;

  /* "numpy.pxd":204
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */

#line 204 "numpy.pxd"
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "numpy.pxd":206
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */

#line 206 "numpy.pxd"
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "numpy.pxd":208
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */

#line 208 "numpy.pxd"
  __pyx_t_1 = ((sizeof(npy_intp)) != (sizeof(Py_ssize_t)));

#line 208 "numpy.pxd"
  if (__pyx_t_1) {

    /* "numpy.pxd":209
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */

#line 209 "numpy.pxd"
    __pyx_v_copy_shape = 1;

#line 209 "numpy.pxd"
    goto __pyx_L4;

#line 209 "numpy.pxd"
  }

#line 209 "numpy.pxd"
  /*else*/ {

    /* "numpy.pxd":211
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */

#line 211 "numpy.pxd"
    __pyx_v_copy_shape = 0;

#line 211 "numpy.pxd"
  }

#line 211 "numpy.pxd"
  __pyx_L4:;

  /* "numpy.pxd":213
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */

#line 213 "numpy.pxd"
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS);

#line 213 "numpy.pxd"
  if (__pyx_t_1) {

    /* "numpy.pxd":214
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */

#line 214 "numpy.pxd"
    __pyx_t_2 = (!PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS));

#line 214 "numpy.pxd"
    __pyx_t_3 = __pyx_t_2;

#line 214 "numpy.pxd"
  } else {

#line 214 "numpy.pxd"
    __pyx_t_3 = __pyx_t_1;

#line 214 "numpy.pxd"
  }

#line 214 "numpy.pxd"
  if (__pyx_t_3) {

    /* "numpy.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */

#line 215 "numpy.pxd"
    __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_6), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 215 "numpy.pxd"
    __Pyx_GOTREF(__pyx_t_4);

#line 215 "numpy.pxd"
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);

#line 215 "numpy.pxd"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 215 "numpy.pxd"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 215 "numpy.pxd"
    goto __pyx_L5;

#line 215 "numpy.pxd"
  }

#line 215 "numpy.pxd"
  __pyx_L5:;

  /* "numpy.pxd":217
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */

#line 217 "numpy.pxd"
  __pyx_t_3 = ((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS);

#line 217 "numpy.pxd"
  if (__pyx_t_3) {

    /* "numpy.pxd":218
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */

#line 218 "numpy.pxd"
    __pyx_t_1 = (!PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS));

#line 218 "numpy.pxd"
    __pyx_t_2 = __pyx_t_1;

#line 218 "numpy.pxd"
  } else {

#line 218 "numpy.pxd"
    __pyx_t_2 = __pyx_t_3;

#line 218 "numpy.pxd"
  }

#line 218 "numpy.pxd"
  if (__pyx_t_2) {

    /* "numpy.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */

#line 219 "numpy.pxd"
    __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_8), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 219 "numpy.pxd"
    __Pyx_GOTREF(__pyx_t_4);

#line 219 "numpy.pxd"
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);

#line 219 "numpy.pxd"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 219 "numpy.pxd"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 219 "numpy.pxd"
    goto __pyx_L6;

#line 219 "numpy.pxd"
  }

#line 219 "numpy.pxd"
  __pyx_L6:;

  /* "numpy.pxd":221
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */

#line 221 "numpy.pxd"
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "numpy.pxd":222
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */

#line 222 "numpy.pxd"
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "numpy.pxd":223
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */

#line 223 "numpy.pxd"
  if (__pyx_v_copy_shape) {

    /* "numpy.pxd":226
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */

#line 226 "numpy.pxd"
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "numpy.pxd":227
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */

#line 227 "numpy.pxd"
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "numpy.pxd":228
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */

#line 228 "numpy.pxd"
    __pyx_t_5 = __pyx_v_ndim;

#line 228 "numpy.pxd"
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {

#line 228 "numpy.pxd"
      __pyx_v_i = __pyx_t_6;

      /* "numpy.pxd":229
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */

#line 229 "numpy.pxd"
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "numpy.pxd":230
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */

#line 230 "numpy.pxd"
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);

#line 230 "numpy.pxd"
    }

#line 230 "numpy.pxd"
    goto __pyx_L7;

#line 230 "numpy.pxd"
  }

#line 230 "numpy.pxd"
  /*else*/ {

    /* "numpy.pxd":232
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */

#line 232 "numpy.pxd"
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "numpy.pxd":233
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */

#line 233 "numpy.pxd"
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));

#line 233 "numpy.pxd"
  }

#line 233 "numpy.pxd"
  __pyx_L7:;

  /* "numpy.pxd":234
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */

#line 234 "numpy.pxd"
  __pyx_v_info->suboffsets = NULL;

  /* "numpy.pxd":235
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */

#line 235 "numpy.pxd"
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "numpy.pxd":236
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */

#line 236 "numpy.pxd"
  __pyx_v_info->readonly = (!PyArray_ISWRITEABLE(__pyx_v_self));

  /* "numpy.pxd":239
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef list stack
 */

#line 239 "numpy.pxd"
  __pyx_v_f = NULL;

  /* "numpy.pxd":240
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef list stack
 *             cdef int offset
 */

#line 240 "numpy.pxd"
  __pyx_t_4 = ((PyObject *)__pyx_v_self->descr);

#line 240 "numpy.pxd"
  __Pyx_INCREF(__pyx_t_4);

#line 240 "numpy.pxd"
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_4);

#line 240 "numpy.pxd"
  __pyx_t_4 = 0;

  /* "numpy.pxd":244
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */

#line 244 "numpy.pxd"
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "numpy.pxd":246
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */

#line 246 "numpy.pxd"
  __pyx_t_2 = (!__pyx_v_hasfields);

#line 246 "numpy.pxd"
  if (__pyx_t_2) {

#line 246 "numpy.pxd"
    __pyx_t_3 = (!__pyx_v_copy_shape);

#line 246 "numpy.pxd"
    __pyx_t_1 = __pyx_t_3;

#line 246 "numpy.pxd"
  } else {

#line 246 "numpy.pxd"
    __pyx_t_1 = __pyx_t_2;

#line 246 "numpy.pxd"
  }

#line 246 "numpy.pxd"
  if (__pyx_t_1) {

    /* "numpy.pxd":248
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */

#line 248 "numpy.pxd"
    __Pyx_INCREF(Py_None);

#line 248 "numpy.pxd"
    __Pyx_GIVEREF(Py_None);

#line 248 "numpy.pxd"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 248 "numpy.pxd"
    __Pyx_DECREF(__pyx_v_info->obj);

#line 248 "numpy.pxd"
    __pyx_v_info->obj = Py_None;

#line 248 "numpy.pxd"
    goto __pyx_L10;

#line 248 "numpy.pxd"
  }

#line 248 "numpy.pxd"
  /*else*/ {

    /* "numpy.pxd":251
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */

#line 251 "numpy.pxd"
    __Pyx_INCREF(((PyObject *)__pyx_v_self));

#line 251 "numpy.pxd"
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));

#line 251 "numpy.pxd"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 251 "numpy.pxd"
    __Pyx_DECREF(__pyx_v_info->obj);

#line 251 "numpy.pxd"
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

#line 251 "numpy.pxd"
  }

#line 251 "numpy.pxd"
  __pyx_L10:;

  /* "numpy.pxd":253
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */

#line 253 "numpy.pxd"
  __pyx_t_1 = (!__pyx_v_hasfields);

#line 253 "numpy.pxd"
  if (__pyx_t_1) {

    /* "numpy.pxd":254
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */

#line 254 "numpy.pxd"
    __pyx_t_5 = __pyx_v_descr->type_num;

#line 254 "numpy.pxd"
    __pyx_v_t = __pyx_t_5;

    /* "numpy.pxd":255
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */

#line 255 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_descr->byteorder == '>');

#line 255 "numpy.pxd"
    if (__pyx_t_1) {

#line 255 "numpy.pxd"
      __pyx_t_2 = __pyx_v_little_endian;

#line 255 "numpy.pxd"
    } else {

#line 255 "numpy.pxd"
      __pyx_t_2 = __pyx_t_1;

#line 255 "numpy.pxd"
    }

#line 255 "numpy.pxd"
    if (!__pyx_t_2) {

      /* "numpy.pxd":256
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */

#line 256 "numpy.pxd"
      __pyx_t_1 = (__pyx_v_descr->byteorder == '<');

#line 256 "numpy.pxd"
      if (__pyx_t_1) {

#line 256 "numpy.pxd"
        __pyx_t_3 = (!__pyx_v_little_endian);

#line 256 "numpy.pxd"
        __pyx_t_7 = __pyx_t_3;

#line 256 "numpy.pxd"
      } else {

#line 256 "numpy.pxd"
        __pyx_t_7 = __pyx_t_1;

#line 256 "numpy.pxd"
      }

#line 256 "numpy.pxd"
      __pyx_t_1 = __pyx_t_7;

#line 256 "numpy.pxd"
    } else {

#line 256 "numpy.pxd"
      __pyx_t_1 = __pyx_t_2;

#line 256 "numpy.pxd"
    }

#line 256 "numpy.pxd"
    if (__pyx_t_1) {

      /* "numpy.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */

#line 257 "numpy.pxd"
      __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_10), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 257 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 257 "numpy.pxd"
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);

#line 257 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 257 "numpy.pxd"
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 257 "numpy.pxd"
      goto __pyx_L12;

#line 257 "numpy.pxd"
    }

#line 257 "numpy.pxd"
    __pyx_L12:;

    /* "numpy.pxd":258
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */

#line 258 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_BYTE);

#line 258 "numpy.pxd"
    if (__pyx_t_1) {

#line 258 "numpy.pxd"
      __pyx_v_f = __pyx_k__b;

#line 258 "numpy.pxd"
      goto __pyx_L13;

#line 258 "numpy.pxd"
    }

    /* "numpy.pxd":259
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */

#line 259 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_UBYTE);

#line 259 "numpy.pxd"
    if (__pyx_t_1) {

#line 259 "numpy.pxd"
      __pyx_v_f = __pyx_k__B;

#line 259 "numpy.pxd"
      goto __pyx_L13;

#line 259 "numpy.pxd"
    }

    /* "numpy.pxd":260
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */

#line 260 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_SHORT);

#line 260 "numpy.pxd"
    if (__pyx_t_1) {

#line 260 "numpy.pxd"
      __pyx_v_f = __pyx_k__h;

#line 260 "numpy.pxd"
      goto __pyx_L13;

#line 260 "numpy.pxd"
    }

    /* "numpy.pxd":261
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */

#line 261 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_USHORT);

#line 261 "numpy.pxd"
    if (__pyx_t_1) {

#line 261 "numpy.pxd"
      __pyx_v_f = __pyx_k__H;

#line 261 "numpy.pxd"
      goto __pyx_L13;

#line 261 "numpy.pxd"
    }

    /* "numpy.pxd":262
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */

#line 262 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_INT);

#line 262 "numpy.pxd"
    if (__pyx_t_1) {

#line 262 "numpy.pxd"
      __pyx_v_f = __pyx_k__i;

#line 262 "numpy.pxd"
      goto __pyx_L13;

#line 262 "numpy.pxd"
    }

    /* "numpy.pxd":263
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */

#line 263 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_UINT);

#line 263 "numpy.pxd"
    if (__pyx_t_1) {

#line 263 "numpy.pxd"
      __pyx_v_f = __pyx_k__I;

#line 263 "numpy.pxd"
      goto __pyx_L13;

#line 263 "numpy.pxd"
    }

    /* "numpy.pxd":264
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */

#line 264 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_LONG);

#line 264 "numpy.pxd"
    if (__pyx_t_1) {

#line 264 "numpy.pxd"
      __pyx_v_f = __pyx_k__l;

#line 264 "numpy.pxd"
      goto __pyx_L13;

#line 264 "numpy.pxd"
    }

    /* "numpy.pxd":265
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */

#line 265 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_ULONG);

#line 265 "numpy.pxd"
    if (__pyx_t_1) {

#line 265 "numpy.pxd"
      __pyx_v_f = __pyx_k__L;

#line 265 "numpy.pxd"
      goto __pyx_L13;

#line 265 "numpy.pxd"
    }

    /* "numpy.pxd":266
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */

#line 266 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_LONGLONG);

#line 266 "numpy.pxd"
    if (__pyx_t_1) {

#line 266 "numpy.pxd"
      __pyx_v_f = __pyx_k__q;

#line 266 "numpy.pxd"
      goto __pyx_L13;

#line 266 "numpy.pxd"
    }

    /* "numpy.pxd":267
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */

#line 267 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_ULONGLONG);

#line 267 "numpy.pxd"
    if (__pyx_t_1) {

#line 267 "numpy.pxd"
      __pyx_v_f = __pyx_k__Q;

#line 267 "numpy.pxd"
      goto __pyx_L13;

#line 267 "numpy.pxd"
    }

    /* "numpy.pxd":268
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */

#line 268 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_FLOAT);

#line 268 "numpy.pxd"
    if (__pyx_t_1) {

#line 268 "numpy.pxd"
      __pyx_v_f = __pyx_k__f;

#line 268 "numpy.pxd"
      goto __pyx_L13;

#line 268 "numpy.pxd"
    }

    /* "numpy.pxd":269
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */

#line 269 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_DOUBLE);

#line 269 "numpy.pxd"
    if (__pyx_t_1) {

#line 269 "numpy.pxd"
      __pyx_v_f = __pyx_k__d;

#line 269 "numpy.pxd"
      goto __pyx_L13;

#line 269 "numpy.pxd"
    }

    /* "numpy.pxd":270
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */

#line 270 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_LONGDOUBLE);

#line 270 "numpy.pxd"
    if (__pyx_t_1) {

#line 270 "numpy.pxd"
      __pyx_v_f = __pyx_k__g;

#line 270 "numpy.pxd"
      goto __pyx_L13;

#line 270 "numpy.pxd"
    }

    /* "numpy.pxd":271
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */

#line 271 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_CFLOAT);

#line 271 "numpy.pxd"
    if (__pyx_t_1) {

#line 271 "numpy.pxd"
      __pyx_v_f = __pyx_k__Zf;

#line 271 "numpy.pxd"
      goto __pyx_L13;

#line 271 "numpy.pxd"
    }

    /* "numpy.pxd":272
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */

#line 272 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_CDOUBLE);

#line 272 "numpy.pxd"
    if (__pyx_t_1) {

#line 272 "numpy.pxd"
      __pyx_v_f = __pyx_k__Zd;

#line 272 "numpy.pxd"
      goto __pyx_L13;

#line 272 "numpy.pxd"
    }

    /* "numpy.pxd":273
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */

#line 273 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_CLONGDOUBLE);

#line 273 "numpy.pxd"
    if (__pyx_t_1) {

#line 273 "numpy.pxd"
      __pyx_v_f = __pyx_k__Zg;

#line 273 "numpy.pxd"
      goto __pyx_L13;

#line 273 "numpy.pxd"
    }

    /* "numpy.pxd":274
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */

#line 274 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_OBJECT);

#line 274 "numpy.pxd"
    if (__pyx_t_1) {

#line 274 "numpy.pxd"
      __pyx_v_f = __pyx_k__O;

#line 274 "numpy.pxd"
      goto __pyx_L13;

#line 274 "numpy.pxd"
    }

#line 274 "numpy.pxd"
    /*else*/ {

      /* "numpy.pxd":276
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */

#line 276 "numpy.pxd"
      __pyx_t_4 = PyInt_FromLong(__pyx_v_t); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 276 "numpy.pxd"
      __pyx_t_8 = PyNumber_Remainder(((PyObject *)__pyx_kp_u_11), __pyx_t_4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "numpy.pxd"
      __Pyx_GOTREF(((PyObject *)__pyx_t_8));

#line 276 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 276 "numpy.pxd"
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 276 "numpy.pxd"
      PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_8));

#line 276 "numpy.pxd"
      __Pyx_GIVEREF(((PyObject *)__pyx_t_8));

#line 276 "numpy.pxd"
      __pyx_t_8 = 0;

#line 276 "numpy.pxd"
      __pyx_t_8 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_8);

#line 276 "numpy.pxd"
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;

#line 276 "numpy.pxd"
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);

#line 276 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 276 "numpy.pxd"
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "numpy.pxd"
    }

#line 276 "numpy.pxd"
    __pyx_L13:;

    /* "numpy.pxd":277
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */

#line 277 "numpy.pxd"
    __pyx_v_info->format = __pyx_v_f;

    /* "numpy.pxd":278
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */

#line 278 "numpy.pxd"
    __pyx_r = 0;

#line 278 "numpy.pxd"
    goto __pyx_L0;

#line 278 "numpy.pxd"
    goto __pyx_L11;

#line 278 "numpy.pxd"
  }

#line 278 "numpy.pxd"
  /*else*/ {

    /* "numpy.pxd":280
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */

#line 280 "numpy.pxd"
    __pyx_v_info->format = ((char *)malloc(255));

    /* "numpy.pxd":281
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */

#line 281 "numpy.pxd"
    (__pyx_v_info->format[0]) = '^';

    /* "numpy.pxd":282
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */

#line 282 "numpy.pxd"
    __pyx_v_offset = 0;

    /* "numpy.pxd":285
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)             # <<<<<<<<<<<<<<
 *                 f[0] = c'\0' # Terminate format string
 * 
 */

#line 285 "numpy.pxd"
    __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 255), (&__pyx_v_offset)); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 285 "numpy.pxd"
    __pyx_v_f = __pyx_t_9;

    /* "numpy.pxd":286
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */

#line 286 "numpy.pxd"
    (__pyx_v_f[0]) = '\x00';

#line 286 "numpy.pxd"
  }

#line 286 "numpy.pxd"
  __pyx_L11:;

#line 286 "numpy.pxd"


#line 286 "numpy.pxd"
  __pyx_r = 0;

#line 286 "numpy.pxd"
  goto __pyx_L0;

#line 286 "numpy.pxd"
  __pyx_L1_error:;

#line 286 "numpy.pxd"
  __Pyx_XDECREF(__pyx_t_4);

#line 286 "numpy.pxd"
  __Pyx_XDECREF(__pyx_t_8);

#line 286 "numpy.pxd"
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 286 "numpy.pxd"
  __pyx_r = -1;

#line 286 "numpy.pxd"
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {

#line 286 "numpy.pxd"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 286 "numpy.pxd"
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;

#line 286 "numpy.pxd"
  }

#line 286 "numpy.pxd"
  goto __pyx_L2;

#line 286 "numpy.pxd"
  __pyx_L0:;

#line 286 "numpy.pxd"
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {

#line 286 "numpy.pxd"
    __Pyx_GOTREF(Py_None);

#line 286 "numpy.pxd"
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;

#line 286 "numpy.pxd"
  }

#line 286 "numpy.pxd"
  __pyx_L2:;

#line 286 "numpy.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);

#line 286 "numpy.pxd"
  __Pyx_RefNannyFinishContext();

#line 286 "numpy.pxd"
  return __pyx_r;

#line 286 "numpy.pxd"
}

#line 286 "numpy.pxd"


#line 286 "numpy.pxd"
/* Python wrapper */

#line 286 "numpy.pxd"
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/

#line 286 "numpy.pxd"
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {

#line 286 "numpy.pxd"
  __Pyx_RefNannyDeclarations

#line 286 "numpy.pxd"
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);

#line 286 "numpy.pxd"
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

#line 286 "numpy.pxd"
  __Pyx_RefNannyFinishContext();

#line 286 "numpy.pxd"
}

/* "numpy.pxd":288
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

#line 288 "numpy.pxd"


#line 288 "numpy.pxd"
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;

#line 288 "numpy.pxd"
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "numpy.pxd":289
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */

#line 289 "numpy.pxd"
  __pyx_t_1 = PyArray_HASFIELDS(__pyx_v_self);

#line 289 "numpy.pxd"
  if (__pyx_t_1) {

    /* "numpy.pxd":290
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */

#line 290 "numpy.pxd"
    free(__pyx_v_info->format);

#line 290 "numpy.pxd"
    goto __pyx_L3;

#line 290 "numpy.pxd"
  }

#line 290 "numpy.pxd"
  __pyx_L3:;

  /* "numpy.pxd":291
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */

#line 291 "numpy.pxd"
  __pyx_t_1 = ((sizeof(npy_intp)) != (sizeof(Py_ssize_t)));

#line 291 "numpy.pxd"
  if (__pyx_t_1) {

    /* "numpy.pxd":292
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */

#line 292 "numpy.pxd"
    free(__pyx_v_info->strides);

#line 292 "numpy.pxd"
    goto __pyx_L4;

#line 292 "numpy.pxd"
  }

#line 292 "numpy.pxd"
  __pyx_L4:;

#line 292 "numpy.pxd"


#line 292 "numpy.pxd"
  __Pyx_RefNannyFinishContext();

#line 292 "numpy.pxd"
}

/* "numpy.pxd":768
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

#line 768 "numpy.pxd"


#line 768 "numpy.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {

#line 768 "numpy.pxd"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 768 "numpy.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "numpy.pxd":769
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */

#line 769 "numpy.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 769 "numpy.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 769 "numpy.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 769 "numpy.pxd"
  __pyx_r = __pyx_t_1;

#line 769 "numpy.pxd"
  __pyx_t_1 = 0;

#line 769 "numpy.pxd"
  goto __pyx_L0;

#line 769 "numpy.pxd"


#line 769 "numpy.pxd"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 769 "numpy.pxd"
  goto __pyx_L0;

#line 769 "numpy.pxd"
  __pyx_L1_error:;

#line 769 "numpy.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 769 "numpy.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 769 "numpy.pxd"
  __pyx_r = 0;

#line 769 "numpy.pxd"
  __pyx_L0:;

#line 769 "numpy.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 769 "numpy.pxd"
  __Pyx_RefNannyFinishContext();

#line 769 "numpy.pxd"
  return __pyx_r;

#line 769 "numpy.pxd"
}

/* "numpy.pxd":771
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

#line 771 "numpy.pxd"


#line 771 "numpy.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {

#line 771 "numpy.pxd"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 771 "numpy.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "numpy.pxd":772
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */

#line 772 "numpy.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 772 "numpy.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 772 "numpy.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 772 "numpy.pxd"
  __pyx_r = __pyx_t_1;

#line 772 "numpy.pxd"
  __pyx_t_1 = 0;

#line 772 "numpy.pxd"
  goto __pyx_L0;

#line 772 "numpy.pxd"


#line 772 "numpy.pxd"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 772 "numpy.pxd"
  goto __pyx_L0;

#line 772 "numpy.pxd"
  __pyx_L1_error:;

#line 772 "numpy.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 772 "numpy.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 772 "numpy.pxd"
  __pyx_r = 0;

#line 772 "numpy.pxd"
  __pyx_L0:;

#line 772 "numpy.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 772 "numpy.pxd"
  __Pyx_RefNannyFinishContext();

#line 772 "numpy.pxd"
  return __pyx_r;

#line 772 "numpy.pxd"
}

/* "numpy.pxd":774
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

#line 774 "numpy.pxd"


#line 774 "numpy.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {

#line 774 "numpy.pxd"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 774 "numpy.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "numpy.pxd":775
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */

#line 775 "numpy.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 775 "numpy.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 775 "numpy.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 775 "numpy.pxd"
  __pyx_r = __pyx_t_1;

#line 775 "numpy.pxd"
  __pyx_t_1 = 0;

#line 775 "numpy.pxd"
  goto __pyx_L0;

#line 775 "numpy.pxd"


#line 775 "numpy.pxd"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 775 "numpy.pxd"
  goto __pyx_L0;

#line 775 "numpy.pxd"
  __pyx_L1_error:;

#line 775 "numpy.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 775 "numpy.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 775 "numpy.pxd"
  __pyx_r = 0;

#line 775 "numpy.pxd"
  __pyx_L0:;

#line 775 "numpy.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 775 "numpy.pxd"
  __Pyx_RefNannyFinishContext();

#line 775 "numpy.pxd"
  return __pyx_r;

#line 775 "numpy.pxd"
}

/* "numpy.pxd":777
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

#line 777 "numpy.pxd"


#line 777 "numpy.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {

#line 777 "numpy.pxd"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 777 "numpy.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "numpy.pxd":778
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */

#line 778 "numpy.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 778 "numpy.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 778 "numpy.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 778 "numpy.pxd"
  __pyx_r = __pyx_t_1;

#line 778 "numpy.pxd"
  __pyx_t_1 = 0;

#line 778 "numpy.pxd"
  goto __pyx_L0;

#line 778 "numpy.pxd"


#line 778 "numpy.pxd"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 778 "numpy.pxd"
  goto __pyx_L0;

#line 778 "numpy.pxd"
  __pyx_L1_error:;

#line 778 "numpy.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 778 "numpy.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 778 "numpy.pxd"
  __pyx_r = 0;

#line 778 "numpy.pxd"
  __pyx_L0:;

#line 778 "numpy.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 778 "numpy.pxd"
  __Pyx_RefNannyFinishContext();

#line 778 "numpy.pxd"
  return __pyx_r;

#line 778 "numpy.pxd"
}

/* "numpy.pxd":780
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

#line 780 "numpy.pxd"


#line 780 "numpy.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {

#line 780 "numpy.pxd"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 780 "numpy.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "numpy.pxd":781
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */

#line 781 "numpy.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 781 "numpy.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 781 "numpy.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 781 "numpy.pxd"
  __pyx_r = __pyx_t_1;

#line 781 "numpy.pxd"
  __pyx_t_1 = 0;

#line 781 "numpy.pxd"
  goto __pyx_L0;

#line 781 "numpy.pxd"


#line 781 "numpy.pxd"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 781 "numpy.pxd"
  goto __pyx_L0;

#line 781 "numpy.pxd"
  __pyx_L1_error:;

#line 781 "numpy.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 781 "numpy.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 781 "numpy.pxd"
  __pyx_r = 0;

#line 781 "numpy.pxd"
  __pyx_L0:;

#line 781 "numpy.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 781 "numpy.pxd"
  __Pyx_RefNannyFinishContext();

#line 781 "numpy.pxd"
  return __pyx_r;

#line 781 "numpy.pxd"
}

/* "numpy.pxd":783
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

#line 783 "numpy.pxd"


#line 783 "numpy.pxd"
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0
#line 783 "numpy.pxd"
;
  int __pyx_v_endian_detector
#line 783 "numpy.pxd"
;
  int __pyx_v_little_endian
#line 783 "numpy.pxd"
;
  PyObject *__pyx_v_fields = 0
#line 783 "numpy.pxd"
;
  PyObject *__pyx_v_childname = NULL
#line 783 "numpy.pxd"
;
  PyObject *__pyx_v_new_offset = NULL
#line 783 "numpy.pxd"
;
  PyObject *__pyx_v_t = NULL
#line 783 "numpy.pxd"
;

#line 783 "numpy.pxd"
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  long __pyx_t_11;
  char *__pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 783 "numpy.pxd"
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "numpy.pxd":790
 *     cdef int delta_offset
 *     cdef tuple i
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */

#line 790 "numpy.pxd"
  __pyx_v_endian_detector = 1;

  /* "numpy.pxd":791
 *     cdef tuple i
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */

#line 791 "numpy.pxd"
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "numpy.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */

#line 794 "numpy.pxd"
  if (unlikely(((PyObject *)__pyx_v_descr->names) == Py_None)) {

#line 794 "numpy.pxd"
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");

#line 794 "numpy.pxd"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 794 "numpy.pxd"
  }

#line 794 "numpy.pxd"
  __pyx_t_1 = ((PyObject *)__pyx_v_descr->names); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;

#line 794 "numpy.pxd"
  for (;;) {

#line 794 "numpy.pxd"
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

#line 794 "numpy.pxd"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 794 "numpy.pxd"
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 794 "numpy.pxd"
    #else

#line 794 "numpy.pxd"
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 794 "numpy.pxd"
    #endif

#line 794 "numpy.pxd"
    __Pyx_XDECREF(__pyx_v_childname);

#line 794 "numpy.pxd"
    __pyx_v_childname = __pyx_t_3;

#line 794 "numpy.pxd"
    __pyx_t_3 = 0;

    /* "numpy.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */

#line 795 "numpy.pxd"
    __pyx_t_3 = PyObject_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (!__pyx_t_3) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 795 "numpy.pxd"
    __Pyx_GOTREF(__pyx_t_3);

#line 795 "numpy.pxd"
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected tuple, got %.200s", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 795 "numpy.pxd"
    __Pyx_XDECREF(((PyObject *)__pyx_v_fields));

#line 795 "numpy.pxd"
    __pyx_v_fields = ((PyObject*)__pyx_t_3);

#line 795 "numpy.pxd"
    __pyx_t_3 = 0;

    /* "numpy.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:
 */

#line 796 "numpy.pxd"
    if (likely(PyTuple_CheckExact(((PyObject *)__pyx_v_fields)))) {

#line 796 "numpy.pxd"
      PyObject* sequence = ((PyObject *)__pyx_v_fields);

#line 796 "numpy.pxd"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 796 "numpy.pxd"
      Py_ssize_t size = Py_SIZE(sequence);

#line 796 "numpy.pxd"
      #else

#line 796 "numpy.pxd"
      Py_ssize_t size = PySequence_Size(sequence);

#line 796 "numpy.pxd"
      #endif

#line 796 "numpy.pxd"
      if (unlikely(size != 2)) {

#line 796 "numpy.pxd"
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);

#line 796 "numpy.pxd"
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 796 "numpy.pxd"
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "numpy.pxd"
      }

#line 796 "numpy.pxd"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 796 "numpy.pxd"
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 

#line 796 "numpy.pxd"
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 

#line 796 "numpy.pxd"
      __Pyx_INCREF(__pyx_t_3);

#line 796 "numpy.pxd"
      __Pyx_INCREF(__pyx_t_4);

#line 796 "numpy.pxd"
      #else

#line 796 "numpy.pxd"
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 796 "numpy.pxd"
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 796 "numpy.pxd"
      #endif

#line 796 "numpy.pxd"
    } else if (1) {

#line 796 "numpy.pxd"
      __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "numpy.pxd"
    } else

#line 796 "numpy.pxd"
    {

#line 796 "numpy.pxd"
      Py_ssize_t index = -1;

#line 796 "numpy.pxd"
      __pyx_t_5 = PyObject_GetIter(((PyObject *)__pyx_v_fields)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_5);

#line 796 "numpy.pxd"
      __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) 
#line 796 "numpy.pxd"
goto __pyx_L5_unpacking_failed;

#line 796 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) 
#line 796 "numpy.pxd"
goto __pyx_L5_unpacking_failed;

#line 796 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 796 "numpy.pxd"
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "numpy.pxd"
      __pyx_t_6 = NULL;

#line 796 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 796 "numpy.pxd"
      goto __pyx_L6_unpacking_done;

#line 796 "numpy.pxd"
      __pyx_L5_unpacking_failed:;

#line 796 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 796 "numpy.pxd"
      __pyx_t_6 = NULL;

#line 796 "numpy.pxd"
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 796 "numpy.pxd"
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "numpy.pxd"
      __pyx_L6_unpacking_done:;

#line 796 "numpy.pxd"
    }

#line 796 "numpy.pxd"
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "numpy.pxd"
    __Pyx_XDECREF(((PyObject *)__pyx_v_child));

#line 796 "numpy.pxd"
    __pyx_v_child = ((PyArray_Descr *)__pyx_t_3);

#line 796 "numpy.pxd"
    __pyx_t_3 = 0;

#line 796 "numpy.pxd"
    __Pyx_XDECREF(__pyx_v_new_offset);

#line 796 "numpy.pxd"
    __pyx_v_new_offset = __pyx_t_4;

#line 796 "numpy.pxd"
    __pyx_t_4 = 0;

    /* "numpy.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */

#line 798 "numpy.pxd"
    __pyx_t_4 = PyInt_FromLong((__pyx_v_end - __pyx_v_f)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 798 "numpy.pxd"
    __Pyx_GOTREF(__pyx_t_4);

#line 798 "numpy.pxd"
    __pyx_t_3 = PyInt_FromLong((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 798 "numpy.pxd"
    __Pyx_GOTREF(__pyx_t_3);

#line 798 "numpy.pxd"
    __pyx_t_5 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 798 "numpy.pxd"
    __Pyx_GOTREF(__pyx_t_5);

#line 798 "numpy.pxd"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 798 "numpy.pxd"
    __pyx_t_3 = PyNumber_Subtract(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 798 "numpy.pxd"
    __Pyx_GOTREF(__pyx_t_3);

#line 798 "numpy.pxd"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 798 "numpy.pxd"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 798 "numpy.pxd"
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_int_15, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 798 "numpy.pxd"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 798 "numpy.pxd"
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 798 "numpy.pxd"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 798 "numpy.pxd"
    if (__pyx_t_7) {

      /* "numpy.pxd":799
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */

#line 799 "numpy.pxd"
      __pyx_t_5 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_13), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 799 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_5);

#line 799 "numpy.pxd"
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);

#line 799 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 799 "numpy.pxd"
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 799 "numpy.pxd"
      goto __pyx_L7;

#line 799 "numpy.pxd"
    }

#line 799 "numpy.pxd"
    __pyx_L7:;

    /* "numpy.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */

#line 801 "numpy.pxd"
    __pyx_t_7 = (__pyx_v_child->byteorder == '>');

#line 801 "numpy.pxd"
    if (__pyx_t_7) {

#line 801 "numpy.pxd"
      __pyx_t_8 = __pyx_v_little_endian;

#line 801 "numpy.pxd"
    } else {

#line 801 "numpy.pxd"
      __pyx_t_8 = __pyx_t_7;

#line 801 "numpy.pxd"
    }

#line 801 "numpy.pxd"
    if (!__pyx_t_8) {

      /* "numpy.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */

#line 802 "numpy.pxd"
      __pyx_t_7 = (__pyx_v_child->byteorder == '<');

#line 802 "numpy.pxd"
      if (__pyx_t_7) {

#line 802 "numpy.pxd"
        __pyx_t_9 = (!__pyx_v_little_endian);

#line 802 "numpy.pxd"
        __pyx_t_10 = __pyx_t_9;

#line 802 "numpy.pxd"
      } else {

#line 802 "numpy.pxd"
        __pyx_t_10 = __pyx_t_7;

#line 802 "numpy.pxd"
      }

#line 802 "numpy.pxd"
      __pyx_t_7 = __pyx_t_10;

#line 802 "numpy.pxd"
    } else {

#line 802 "numpy.pxd"
      __pyx_t_7 = __pyx_t_8;

#line 802 "numpy.pxd"
    }

#line 802 "numpy.pxd"
    if (__pyx_t_7) {

      /* "numpy.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */

#line 803 "numpy.pxd"
      __pyx_t_5 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_14), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 803 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_5);

#line 803 "numpy.pxd"
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);

#line 803 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 803 "numpy.pxd"
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 803 "numpy.pxd"
      goto __pyx_L8;

#line 803 "numpy.pxd"
    }

#line 803 "numpy.pxd"
    __pyx_L8:;

    /* "numpy.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */

#line 813 "numpy.pxd"
    while (1) {

#line 813 "numpy.pxd"
      __pyx_t_5 = PyInt_FromLong((__pyx_v_offset[0])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 813 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_5);

#line 813 "numpy.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 813 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 813 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 813 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 813 "numpy.pxd"
      if (!__pyx_t_7) break;

      /* "numpy.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */

#line 814 "numpy.pxd"
      (__pyx_v_f[0]) = 120;

      /* "numpy.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */

#line 815 "numpy.pxd"
      __pyx_v_f = (__pyx_v_f + 1);

      /* "numpy.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */

#line 816 "numpy.pxd"
      __pyx_t_11 = 0;

#line 816 "numpy.pxd"
      (__pyx_v_offset[__pyx_t_11]) = ((__pyx_v_offset[__pyx_t_11]) + 1);

#line 816 "numpy.pxd"
    }

    /* "numpy.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */

#line 818 "numpy.pxd"
    __pyx_t_11 = 0;

#line 818 "numpy.pxd"
    (__pyx_v_offset[__pyx_t_11]) = ((__pyx_v_offset[__pyx_t_11]) + __pyx_v_child->elsize);

    /* "numpy.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */

#line 820 "numpy.pxd"
    __pyx_t_7 = (!PyDataType_HASFIELDS(__pyx_v_child));

#line 820 "numpy.pxd"
    if (__pyx_t_7) {

      /* "numpy.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */

#line 821 "numpy.pxd"
      __pyx_t_3 = PyInt_FromLong(__pyx_v_child->type_num); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 821 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 821 "numpy.pxd"
      __Pyx_XDECREF(__pyx_v_t);

#line 821 "numpy.pxd"
      __pyx_v_t = __pyx_t_3;

#line 821 "numpy.pxd"
      __pyx_t_3 = 0;

      /* "numpy.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */

#line 822 "numpy.pxd"
      __pyx_t_7 = ((__pyx_v_end - __pyx_v_f) < 5);

#line 822 "numpy.pxd"
      if (__pyx_t_7) {

        /* "numpy.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */

#line 823 "numpy.pxd"
        __pyx_t_3 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_16), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 823 "numpy.pxd"
        __Pyx_GOTREF(__pyx_t_3);

#line 823 "numpy.pxd"
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 823 "numpy.pxd"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 823 "numpy.pxd"
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 823 "numpy.pxd"
        goto __pyx_L12;

#line 823 "numpy.pxd"
      }

#line 823 "numpy.pxd"
      __pyx_L12:;

      /* "numpy.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */

#line 826 "numpy.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_BYTE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 826 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 826 "numpy.pxd"
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 826 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 826 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 826 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 826 "numpy.pxd"
      if (__pyx_t_7) {

#line 826 "numpy.pxd"
        (__pyx_v_f[0]) = 98;

#line 826 "numpy.pxd"
        goto __pyx_L13;

#line 826 "numpy.pxd"
      }

      /* "numpy.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */

#line 827 "numpy.pxd"
      __pyx_t_5 = PyInt_FromLong(NPY_UBYTE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 827 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_5);

#line 827 "numpy.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 827 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 827 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 827 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 827 "numpy.pxd"
      if (__pyx_t_7) {

#line 827 "numpy.pxd"
        (__pyx_v_f[0]) = 66;

#line 827 "numpy.pxd"
        goto __pyx_L13;

#line 827 "numpy.pxd"
      }

      /* "numpy.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */

#line 828 "numpy.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_SHORT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 828 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 828 "numpy.pxd"
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 828 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 828 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 828 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 828 "numpy.pxd"
      if (__pyx_t_7) {

#line 828 "numpy.pxd"
        (__pyx_v_f[0]) = 104;

#line 828 "numpy.pxd"
        goto __pyx_L13;

#line 828 "numpy.pxd"
      }

      /* "numpy.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */

#line 829 "numpy.pxd"
      __pyx_t_5 = PyInt_FromLong(NPY_USHORT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 829 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_5);

#line 829 "numpy.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 829 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 829 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 829 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 829 "numpy.pxd"
      if (__pyx_t_7) {

#line 829 "numpy.pxd"
        (__pyx_v_f[0]) = 72;

#line 829 "numpy.pxd"
        goto __pyx_L13;

#line 829 "numpy.pxd"
      }

      /* "numpy.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */

#line 830 "numpy.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_INT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 830 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 830 "numpy.pxd"
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 830 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 830 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 830 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 830 "numpy.pxd"
      if (__pyx_t_7) {

#line 830 "numpy.pxd"
        (__pyx_v_f[0]) = 105;

#line 830 "numpy.pxd"
        goto __pyx_L13;

#line 830 "numpy.pxd"
      }

      /* "numpy.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */

#line 831 "numpy.pxd"
      __pyx_t_5 = PyInt_FromLong(NPY_UINT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 831 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_5);

#line 831 "numpy.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 831 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 831 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 831 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 831 "numpy.pxd"
      if (__pyx_t_7) {

#line 831 "numpy.pxd"
        (__pyx_v_f[0]) = 73;

#line 831 "numpy.pxd"
        goto __pyx_L13;

#line 831 "numpy.pxd"
      }

      /* "numpy.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */

#line 832 "numpy.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_LONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 832 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 832 "numpy.pxd"
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 832 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 832 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 832 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 832 "numpy.pxd"
      if (__pyx_t_7) {

#line 832 "numpy.pxd"
        (__pyx_v_f[0]) = 108;

#line 832 "numpy.pxd"
        goto __pyx_L13;

#line 832 "numpy.pxd"
      }

      /* "numpy.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */

#line 833 "numpy.pxd"
      __pyx_t_5 = PyInt_FromLong(NPY_ULONG); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 833 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_5);

#line 833 "numpy.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 833 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 833 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 833 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 833 "numpy.pxd"
      if (__pyx_t_7) {

#line 833 "numpy.pxd"
        (__pyx_v_f[0]) = 76;

#line 833 "numpy.pxd"
        goto __pyx_L13;

#line 833 "numpy.pxd"
      }

      /* "numpy.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */

#line 834 "numpy.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_LONGLONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 834 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 834 "numpy.pxd"
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 834 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 834 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 834 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 834 "numpy.pxd"
      if (__pyx_t_7) {

#line 834 "numpy.pxd"
        (__pyx_v_f[0]) = 113;

#line 834 "numpy.pxd"
        goto __pyx_L13;

#line 834 "numpy.pxd"
      }

      /* "numpy.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */

#line 835 "numpy.pxd"
      __pyx_t_5 = PyInt_FromLong(NPY_ULONGLONG); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 835 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_5);

#line 835 "numpy.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 835 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 835 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 835 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 835 "numpy.pxd"
      if (__pyx_t_7) {

#line 835 "numpy.pxd"
        (__pyx_v_f[0]) = 81;

#line 835 "numpy.pxd"
        goto __pyx_L13;

#line 835 "numpy.pxd"
      }

      /* "numpy.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */

#line 836 "numpy.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_FLOAT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 836 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 836 "numpy.pxd"
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 836 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 836 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 836 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 836 "numpy.pxd"
      if (__pyx_t_7) {

#line 836 "numpy.pxd"
        (__pyx_v_f[0]) = 102;

#line 836 "numpy.pxd"
        goto __pyx_L13;

#line 836 "numpy.pxd"
      }

      /* "numpy.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */

#line 837 "numpy.pxd"
      __pyx_t_5 = PyInt_FromLong(NPY_DOUBLE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 837 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_5);

#line 837 "numpy.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 837 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 837 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 837 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 837 "numpy.pxd"
      if (__pyx_t_7) {

#line 837 "numpy.pxd"
        (__pyx_v_f[0]) = 100;

#line 837 "numpy.pxd"
        goto __pyx_L13;

#line 837 "numpy.pxd"
      }

      /* "numpy.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */

#line 838 "numpy.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 838 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 838 "numpy.pxd"
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 838 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 838 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 838 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 838 "numpy.pxd"
      if (__pyx_t_7) {

#line 838 "numpy.pxd"
        (__pyx_v_f[0]) = 103;

#line 838 "numpy.pxd"
        goto __pyx_L13;

#line 838 "numpy.pxd"
      }

      /* "numpy.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */

#line 839 "numpy.pxd"
      __pyx_t_5 = PyInt_FromLong(NPY_CFLOAT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 839 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_5);

#line 839 "numpy.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 839 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 839 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 839 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 839 "numpy.pxd"
      if (__pyx_t_7) {

#line 839 "numpy.pxd"
        (__pyx_v_f[0]) = 90;

#line 839 "numpy.pxd"
        (__pyx_v_f[1]) = 102;

#line 839 "numpy.pxd"
        __pyx_v_f = (__pyx_v_f + 1);

#line 839 "numpy.pxd"
        goto __pyx_L13;

#line 839 "numpy.pxd"
      }

      /* "numpy.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */

#line 840 "numpy.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_CDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 840 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 840 "numpy.pxd"
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 840 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 840 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 840 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 840 "numpy.pxd"
      if (__pyx_t_7) {

#line 840 "numpy.pxd"
        (__pyx_v_f[0]) = 90;

#line 840 "numpy.pxd"
        (__pyx_v_f[1]) = 100;

#line 840 "numpy.pxd"
        __pyx_v_f = (__pyx_v_f + 1);

#line 840 "numpy.pxd"
        goto __pyx_L13;

#line 840 "numpy.pxd"
      }

      /* "numpy.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */

#line 841 "numpy.pxd"
      __pyx_t_5 = PyInt_FromLong(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 841 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_5);

#line 841 "numpy.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 841 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 841 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 841 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 841 "numpy.pxd"
      if (__pyx_t_7) {

#line 841 "numpy.pxd"
        (__pyx_v_f[0]) = 90;

#line 841 "numpy.pxd"
        (__pyx_v_f[1]) = 103;

#line 841 "numpy.pxd"
        __pyx_v_f = (__pyx_v_f + 1);

#line 841 "numpy.pxd"
        goto __pyx_L13;

#line 841 "numpy.pxd"
      }

      /* "numpy.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */

#line 842 "numpy.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_OBJECT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 842 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 842 "numpy.pxd"
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 842 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 842 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 842 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 842 "numpy.pxd"
      if (__pyx_t_7) {

#line 842 "numpy.pxd"
        (__pyx_v_f[0]) = 79;

#line 842 "numpy.pxd"
        goto __pyx_L13;

#line 842 "numpy.pxd"
      }

#line 842 "numpy.pxd"
      /*else*/ {

        /* "numpy.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */

#line 844 "numpy.pxd"
        __pyx_t_5 = PyNumber_Remainder(((PyObject *)__pyx_kp_u_11), __pyx_v_t); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 844 "numpy.pxd"
        __Pyx_GOTREF(((PyObject *)__pyx_t_5));

#line 844 "numpy.pxd"
        __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 844 "numpy.pxd"
        __Pyx_GOTREF(__pyx_t_3);

#line 844 "numpy.pxd"
        PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_5));

#line 844 "numpy.pxd"
        __Pyx_GIVEREF(((PyObject *)__pyx_t_5));

#line 844 "numpy.pxd"
        __pyx_t_5 = 0;

#line 844 "numpy.pxd"
        __pyx_t_5 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 844 "numpy.pxd"
        __Pyx_GOTREF(__pyx_t_5);

#line 844 "numpy.pxd"
        __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 844 "numpy.pxd"
        __Pyx_Raise(__pyx_t_5, 0, 0, 0);

#line 844 "numpy.pxd"
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 844 "numpy.pxd"
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 844 "numpy.pxd"
      }

#line 844 "numpy.pxd"
      __pyx_L13:;

      /* "numpy.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */

#line 845 "numpy.pxd"
      __pyx_v_f = (__pyx_v_f + 1);

#line 845 "numpy.pxd"
      goto __pyx_L11;

#line 845 "numpy.pxd"
    }

#line 845 "numpy.pxd"
    /*else*/ {

      /* "numpy.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */

#line 849 "numpy.pxd"
      __pyx_t_12 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_12 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 849 "numpy.pxd"
      __pyx_v_f = __pyx_t_12;

#line 849 "numpy.pxd"
    }

#line 849 "numpy.pxd"
    __pyx_L11:;

#line 849 "numpy.pxd"
  }

#line 849 "numpy.pxd"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "numpy.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 850 "numpy.pxd"
  __pyx_r = __pyx_v_f;

#line 850 "numpy.pxd"
  goto __pyx_L0;

#line 850 "numpy.pxd"


#line 850 "numpy.pxd"
  __pyx_r = 0;

#line 850 "numpy.pxd"
  goto __pyx_L0;

#line 850 "numpy.pxd"
  __pyx_L1_error:;

#line 850 "numpy.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 850 "numpy.pxd"
  __Pyx_XDECREF(__pyx_t_3);

#line 850 "numpy.pxd"
  __Pyx_XDECREF(__pyx_t_4);

#line 850 "numpy.pxd"
  __Pyx_XDECREF(__pyx_t_5);

#line 850 "numpy.pxd"
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 850 "numpy.pxd"
  __pyx_r = NULL;

#line 850 "numpy.pxd"
  __pyx_L0:;

#line 850 "numpy.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_v_child);

#line 850 "numpy.pxd"
  __Pyx_XDECREF(__pyx_v_fields);

#line 850 "numpy.pxd"
  __Pyx_XDECREF(__pyx_v_childname);

#line 850 "numpy.pxd"
  __Pyx_XDECREF(__pyx_v_new_offset);

#line 850 "numpy.pxd"
  __Pyx_XDECREF(__pyx_v_t);

#line 850 "numpy.pxd"
  __Pyx_RefNannyFinishContext();

#line 850 "numpy.pxd"
  return __pyx_r;

#line 850 "numpy.pxd"
}

/* "numpy.pxd":965
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

#line 965 "numpy.pxd"


#line 965 "numpy.pxd"
static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr
#line 965 "numpy.pxd"
;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;

#line 965 "numpy.pxd"
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "numpy.pxd":967
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */

#line 967 "numpy.pxd"
  __pyx_t_1 = (__pyx_v_base == Py_None);

#line 967 "numpy.pxd"
  if (__pyx_t_1) {

    /* "numpy.pxd":968
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */

#line 968 "numpy.pxd"
    __pyx_v_baseptr = NULL;

#line 968 "numpy.pxd"
    goto __pyx_L3;

#line 968 "numpy.pxd"
  }

#line 968 "numpy.pxd"
  /*else*/ {

    /* "numpy.pxd":970
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */

#line 970 "numpy.pxd"
    Py_INCREF(__pyx_v_base);

    /* "numpy.pxd":971
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */

#line 971 "numpy.pxd"
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);

#line 971 "numpy.pxd"
  }

#line 971 "numpy.pxd"
  __pyx_L3:;

  /* "numpy.pxd":972
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */

#line 972 "numpy.pxd"
  Py_XDECREF(__pyx_v_arr->base);

  /* "numpy.pxd":973
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */

#line 973 "numpy.pxd"
  __pyx_v_arr->base = __pyx_v_baseptr;

#line 973 "numpy.pxd"


#line 973 "numpy.pxd"
  __Pyx_RefNannyFinishContext();

#line 973 "numpy.pxd"
}

/* "numpy.pxd":975
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

#line 975 "numpy.pxd"


#line 975 "numpy.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {

#line 975 "numpy.pxd"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;

#line 975 "numpy.pxd"
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "numpy.pxd":976
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */

#line 976 "numpy.pxd"
  __pyx_t_1 = (__pyx_v_arr->base == NULL);

#line 976 "numpy.pxd"
  if (__pyx_t_1) {

    /* "numpy.pxd":977
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */

#line 977 "numpy.pxd"
    __Pyx_XDECREF(__pyx_r);

#line 977 "numpy.pxd"
    __Pyx_INCREF(Py_None);

#line 977 "numpy.pxd"
    __pyx_r = Py_None;

#line 977 "numpy.pxd"
    goto __pyx_L0;

#line 977 "numpy.pxd"
    goto __pyx_L3;

#line 977 "numpy.pxd"
  }

#line 977 "numpy.pxd"
  /*else*/ {

    /* "numpy.pxd":979
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */

#line 979 "numpy.pxd"
    __Pyx_XDECREF(__pyx_r);

#line 979 "numpy.pxd"
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));

#line 979 "numpy.pxd"
    __pyx_r = ((PyObject *)__pyx_v_arr->base);

#line 979 "numpy.pxd"
    goto __pyx_L0;

#line 979 "numpy.pxd"
  }

#line 979 "numpy.pxd"
  __pyx_L3:;

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 979 "numpy.pxd"
  __pyx_L0:;

#line 979 "numpy.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 979 "numpy.pxd"
  __Pyx_RefNannyFinishContext();

#line 979 "numpy.pxd"
  return __pyx_r;

#line 979 "numpy.pxd"
}

#line 979 "numpy.pxd"
static struct __pyx_vtabstruct_4cds3_4core_Object __pyx_vtable_4cds3_4core_Object;

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyObject *__pyx_tp_new_4cds3_4core_Object(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {

#line 979 "numpy.pxd"
  struct __pyx_obj_4cds3_4core_Object *p;

#line 979 "numpy.pxd"
  PyObject *o = (*t->tp_alloc)(t, 0);

#line 979 "numpy.pxd"
  if (!o) return 0;

#line 979 "numpy.pxd"
  p = ((struct __pyx_obj_4cds3_4core_Object *)o);

#line 979 "numpy.pxd"
  p->__pyx_vtab = __pyx_vtabptr_4cds3_4core_Object;

#line 979 "numpy.pxd"
  if (__pyx_pw_4cds3_4core_6Object_1__cinit__(o, __pyx_empty_tuple, NULL) < 0) {

#line 979 "numpy.pxd"
    Py_DECREF(o); o = 0;

#line 979 "numpy.pxd"
  }

#line 979 "numpy.pxd"
  return o;

#line 979 "numpy.pxd"
}

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static void __pyx_tp_dealloc_4cds3_4core_Object(PyObject *o) {

#line 979 "numpy.pxd"
  {

#line 979 "numpy.pxd"
    PyObject *etype, *eval, *etb;

#line 979 "numpy.pxd"
    PyErr_Fetch(&etype, &eval, &etb);

#line 979 "numpy.pxd"
    ++Py_REFCNT(o);

#line 979 "numpy.pxd"
    __pyx_pw_4cds3_4core_6Object_5__dealloc__(o);

#line 979 "numpy.pxd"
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);

#line 979 "numpy.pxd"
    --Py_REFCNT(o);

#line 979 "numpy.pxd"
    PyErr_Restore(etype, eval, etb);

#line 979 "numpy.pxd"
  }

#line 979 "numpy.pxd"
  (*Py_TYPE(o)->tp_free)(o);

#line 979 "numpy.pxd"
}

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyMethodDef __pyx_methods_4cds3_4core_Object[] = {

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_name"), (PyCFunction)__pyx_pw_4cds3_4core_6Object_7get_name, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_6Object_6get_name)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_path"), (PyCFunction)__pyx_pw_4cds3_4core_6Object_9get_path, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_6Object_8get_path)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("set_definition_lock"), (PyCFunction)__pyx_pw_4cds3_4core_6Object_11set_definition_lock, METH_O, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_6Object_10set_definition_lock)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("delete_user_data"), (PyCFunction)__pyx_pw_4cds3_4core_6Object_13delete_user_data, METH_O, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_6Object_12delete_user_data)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_user_data"), (PyCFunction)__pyx_pw_4cds3_4core_6Object_15get_user_data, METH_O, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_6Object_14get_user_data)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("set_user_data"), (PyCFunction)__pyx_pw_4cds3_4core_6Object_17set_user_data, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_6Object_16set_user_data)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_user_data_dict"), (PyCFunction)__pyx_pw_4cds3_4core_6Object_19get_user_data_dict, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_6Object_18get_user_data_dict)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_parent"), (PyCFunction)__pyx_pw_4cds3_4core_6Object_21get_parent, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_6Object_20get_parent)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_obj_type"), (PyCFunction)__pyx_pw_4cds3_4core_6Object_23get_obj_type, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_6Object_22get_obj_type)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_def_lock"), (PyCFunction)__pyx_pw_4cds3_4core_6Object_25get_def_lock, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_6Object_24get_def_lock)},

#line 979 "numpy.pxd"
  {0, 0, 0, 0}

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyNumberMethods __pyx_tp_as_number_Object = {

#line 979 "numpy.pxd"
  0, /*nb_add*/

#line 979 "numpy.pxd"
  0, /*nb_subtract*/

#line 979 "numpy.pxd"
  0, /*nb_multiply*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_divide*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_remainder*/

#line 979 "numpy.pxd"
  0, /*nb_divmod*/

#line 979 "numpy.pxd"
  0, /*nb_power*/

#line 979 "numpy.pxd"
  0, /*nb_negative*/

#line 979 "numpy.pxd"
  0, /*nb_positive*/

#line 979 "numpy.pxd"
  0, /*nb_absolute*/

#line 979 "numpy.pxd"
  0, /*nb_nonzero*/

#line 979 "numpy.pxd"
  0, /*nb_invert*/

#line 979 "numpy.pxd"
  0, /*nb_lshift*/

#line 979 "numpy.pxd"
  0, /*nb_rshift*/

#line 979 "numpy.pxd"
  0, /*nb_and*/

#line 979 "numpy.pxd"
  0, /*nb_xor*/

#line 979 "numpy.pxd"
  0, /*nb_or*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_coerce*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_int*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_long*/

#line 979 "numpy.pxd"
  #else

#line 979 "numpy.pxd"
  0, /*reserved*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_float*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_oct*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_hex*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_inplace_add*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_subtract*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_multiply*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_inplace_divide*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_inplace_remainder*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_power*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_lshift*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_rshift*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_and*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_xor*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_or*/

#line 979 "numpy.pxd"
  0, /*nb_floor_divide*/

#line 979 "numpy.pxd"
  0, /*nb_true_divide*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_floor_divide*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_true_divide*/

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02050000

#line 979 "numpy.pxd"
  0, /*nb_index*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PySequenceMethods __pyx_tp_as_sequence_Object = {

#line 979 "numpy.pxd"
  0, /*sq_length*/

#line 979 "numpy.pxd"
  0, /*sq_concat*/

#line 979 "numpy.pxd"
  0, /*sq_repeat*/

#line 979 "numpy.pxd"
  0, /*sq_item*/

#line 979 "numpy.pxd"
  0, /*sq_slice*/

#line 979 "numpy.pxd"
  0, /*sq_ass_item*/

#line 979 "numpy.pxd"
  0, /*sq_ass_slice*/

#line 979 "numpy.pxd"
  0, /*sq_contains*/

#line 979 "numpy.pxd"
  0, /*sq_inplace_concat*/

#line 979 "numpy.pxd"
  0, /*sq_inplace_repeat*/

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyMappingMethods __pyx_tp_as_mapping_Object = {

#line 979 "numpy.pxd"
  0, /*mp_length*/

#line 979 "numpy.pxd"
  0, /*mp_subscript*/

#line 979 "numpy.pxd"
  0, /*mp_ass_subscript*/

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyBufferProcs __pyx_tp_as_buffer_Object = {

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getreadbuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getwritebuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getsegcount*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getcharbuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02060000

#line 979 "numpy.pxd"
  0, /*bf_getbuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02060000

#line 979 "numpy.pxd"
  0, /*bf_releasebuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyTypeObject __pyx_type_4cds3_4core_Object = {

#line 979 "numpy.pxd"
  PyVarObject_HEAD_INIT(0, 0)

#line 979 "numpy.pxd"
  __Pyx_NAMESTR("cds3.core.Object"), /*tp_name*/

#line 979 "numpy.pxd"
  sizeof(struct __pyx_obj_4cds3_4core_Object), /*tp_basicsize*/

#line 979 "numpy.pxd"
  0, /*tp_itemsize*/

#line 979 "numpy.pxd"
  __pyx_tp_dealloc_4cds3_4core_Object, /*tp_dealloc*/

#line 979 "numpy.pxd"
  0, /*tp_print*/

#line 979 "numpy.pxd"
  0, /*tp_getattr*/

#line 979 "numpy.pxd"
  0, /*tp_setattr*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*tp_compare*/

#line 979 "numpy.pxd"
  #else

#line 979 "numpy.pxd"
  0, /*reserved*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*tp_repr*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_number_Object, /*tp_as_number*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_sequence_Object, /*tp_as_sequence*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_mapping_Object, /*tp_as_mapping*/

#line 979 "numpy.pxd"
  0, /*tp_hash*/

#line 979 "numpy.pxd"
  0, /*tp_call*/

#line 979 "numpy.pxd"
  0, /*tp_str*/

#line 979 "numpy.pxd"
  0, /*tp_getattro*/

#line 979 "numpy.pxd"
  0, /*tp_setattro*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_buffer_Object, /*tp_as_buffer*/

#line 979 "numpy.pxd"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/

#line 979 "numpy.pxd"
  __Pyx_DOCSTR("Object()\nCDSObject"), /*tp_doc*/

#line 979 "numpy.pxd"
  0, /*tp_traverse*/

#line 979 "numpy.pxd"
  0, /*tp_clear*/

#line 979 "numpy.pxd"
  0, /*tp_richcompare*/

#line 979 "numpy.pxd"
  0, /*tp_weaklistoffset*/

#line 979 "numpy.pxd"
  0, /*tp_iter*/

#line 979 "numpy.pxd"
  0, /*tp_iternext*/

#line 979 "numpy.pxd"
  __pyx_methods_4cds3_4core_Object, /*tp_methods*/

#line 979 "numpy.pxd"
  0, /*tp_members*/

#line 979 "numpy.pxd"
  0, /*tp_getset*/

#line 979 "numpy.pxd"
  0, /*tp_base*/

#line 979 "numpy.pxd"
  0, /*tp_dict*/

#line 979 "numpy.pxd"
  0, /*tp_descr_get*/

#line 979 "numpy.pxd"
  0, /*tp_descr_set*/

#line 979 "numpy.pxd"
  0, /*tp_dictoffset*/

#line 979 "numpy.pxd"
  __pyx_pw_4cds3_4core_6Object_3__init__, /*tp_init*/

#line 979 "numpy.pxd"
  0, /*tp_alloc*/

#line 979 "numpy.pxd"
  __pyx_tp_new_4cds3_4core_Object, /*tp_new*/

#line 979 "numpy.pxd"
  0, /*tp_free*/

#line 979 "numpy.pxd"
  0, /*tp_is_gc*/

#line 979 "numpy.pxd"
  0, /*tp_bases*/

#line 979 "numpy.pxd"
  0, /*tp_mro*/

#line 979 "numpy.pxd"
  0, /*tp_cache*/

#line 979 "numpy.pxd"
  0, /*tp_subclasses*/

#line 979 "numpy.pxd"
  0, /*tp_weaklist*/

#line 979 "numpy.pxd"
  0, /*tp_del*/

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02060000

#line 979 "numpy.pxd"
  0, /*tp_version_tag*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"
static struct __pyx_vtabstruct_4cds3_4core_Group __pyx_vtable_4cds3_4core_Group;

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyObject *__pyx_tp_new_4cds3_4core_Group(PyTypeObject *t, PyObject *a, PyObject *k) {

#line 979 "numpy.pxd"
  struct __pyx_obj_4cds3_4core_Group *p;

#line 979 "numpy.pxd"
  PyObject *o = __pyx_tp_new_4cds3_4core_Object(t, a, k);

#line 979 "numpy.pxd"
  if (!o) return 0;

#line 979 "numpy.pxd"
  p = ((struct __pyx_obj_4cds3_4core_Group *)o);

#line 979 "numpy.pxd"
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_4cds3_4core_Object*)__pyx_vtabptr_4cds3_4core_Group;

#line 979 "numpy.pxd"
  if (__pyx_pw_4cds3_4core_5Group_5__cinit__(o, __pyx_empty_tuple, NULL) < 0) {

#line 979 "numpy.pxd"
    Py_DECREF(o); o = 0;

#line 979 "numpy.pxd"
  }

#line 979 "numpy.pxd"
  return o;

#line 979 "numpy.pxd"
}

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static void __pyx_tp_dealloc_4cds3_4core_Group(PyObject *o) {

#line 979 "numpy.pxd"
  {

#line 979 "numpy.pxd"
    PyObject *etype, *eval, *etb;

#line 979 "numpy.pxd"
    PyErr_Fetch(&etype, &eval, &etb);

#line 979 "numpy.pxd"
    ++Py_REFCNT(o);

#line 979 "numpy.pxd"
    __pyx_pw_4cds3_4core_5Group_9__dealloc__(o);

#line 979 "numpy.pxd"
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);

#line 979 "numpy.pxd"
    --Py_REFCNT(o);

#line 979 "numpy.pxd"
    PyErr_Restore(etype, eval, etb);

#line 979 "numpy.pxd"
  }

#line 979 "numpy.pxd"
  __pyx_tp_dealloc_4cds3_4core_Object(o);

#line 979 "numpy.pxd"
}

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyMethodDef __pyx_methods_4cds3_4core_Group[] = {

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("define"), (PyCFunction)__pyx_pw_4cds3_4core_5Group_1define, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_5Group_define)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("delete"), (PyCFunction)__pyx_pw_4cds3_4core_5Group_3delete, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_5Group_2delete)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_ndims"), (PyCFunction)__pyx_pw_4cds3_4core_5Group_11get_ndims, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_5Group_10get_ndims)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_dims"), (PyCFunction)__pyx_pw_4cds3_4core_5Group_13get_dims, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_5Group_12get_dims)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_natts"), (PyCFunction)__pyx_pw_4cds3_4core_5Group_15get_natts, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_5Group_14get_natts)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_atts"), (PyCFunction)__pyx_pw_4cds3_4core_5Group_17get_atts, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_5Group_16get_atts)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_nvars"), (PyCFunction)__pyx_pw_4cds3_4core_5Group_19get_nvars, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_5Group_18get_nvars)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_vars"), (PyCFunction)__pyx_pw_4cds3_4core_5Group_21get_vars, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_5Group_20get_vars)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_ngroups"), (PyCFunction)__pyx_pw_4cds3_4core_5Group_23get_ngroups, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_5Group_22get_ngroups)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_groups"), (PyCFunction)__pyx_pw_4cds3_4core_5Group_25get_groups, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_5Group_24get_groups)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_nvargroups"), (PyCFunction)__pyx_pw_4cds3_4core_5Group_27get_nvargroups, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_5Group_26get_nvargroups)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_vargroups"), (PyCFunction)__pyx_pw_4cds3_4core_5Group_29get_vargroups, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_5Group_28get_vargroups)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("rename"), (PyCFunction)__pyx_pw_4cds3_4core_5Group_31rename, METH_O, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_5Group_30rename)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("define_dim"), (PyCFunction)__pyx_pw_4cds3_4core_5Group_33define_dim, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_5Group_32define_dim)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_dim"), (PyCFunction)__pyx_pw_4cds3_4core_5Group_35get_dim, METH_O, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_5Group_34get_dim)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("change_att"), (PyCFunction)__pyx_pw_4cds3_4core_5Group_37change_att, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_5Group_36change_att)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("define_att"), (PyCFunction)__pyx_pw_4cds3_4core_5Group_39define_att, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_5Group_38define_att)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("define_att_text"), (PyCFunction)__pyx_pw_4cds3_4core_5Group_41define_att_text, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_5Group_40define_att_text)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_att"), (PyCFunction)__pyx_pw_4cds3_4core_5Group_43get_att, METH_O, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_5Group_42get_att)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("set_att"), (PyCFunction)__pyx_pw_4cds3_4core_5Group_45set_att, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_5Group_44set_att)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("define_var"), (PyCFunction)__pyx_pw_4cds3_4core_5Group_47define_var, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_5Group_46define_var)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_var"), (PyCFunction)__pyx_pw_4cds3_4core_5Group_49get_var, METH_O, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_5Group_48get_var)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_group"), (PyCFunction)__pyx_pw_4cds3_4core_5Group_51get_group, METH_O, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_5Group_50get_group)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("reset_sample_counts"), (PyCFunction)__pyx_pw_4cds3_4core_5Group_53reset_sample_counts, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_5Group_52reset_sample_counts)},

#line 979 "numpy.pxd"
  {0, 0, 0, 0}

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyNumberMethods __pyx_tp_as_number_Group = {

#line 979 "numpy.pxd"
  0, /*nb_add*/

#line 979 "numpy.pxd"
  0, /*nb_subtract*/

#line 979 "numpy.pxd"
  0, /*nb_multiply*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_divide*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_remainder*/

#line 979 "numpy.pxd"
  0, /*nb_divmod*/

#line 979 "numpy.pxd"
  0, /*nb_power*/

#line 979 "numpy.pxd"
  0, /*nb_negative*/

#line 979 "numpy.pxd"
  0, /*nb_positive*/

#line 979 "numpy.pxd"
  0, /*nb_absolute*/

#line 979 "numpy.pxd"
  0, /*nb_nonzero*/

#line 979 "numpy.pxd"
  0, /*nb_invert*/

#line 979 "numpy.pxd"
  0, /*nb_lshift*/

#line 979 "numpy.pxd"
  0, /*nb_rshift*/

#line 979 "numpy.pxd"
  0, /*nb_and*/

#line 979 "numpy.pxd"
  0, /*nb_xor*/

#line 979 "numpy.pxd"
  0, /*nb_or*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_coerce*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_int*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_long*/

#line 979 "numpy.pxd"
  #else

#line 979 "numpy.pxd"
  0, /*reserved*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_float*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_oct*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_hex*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_inplace_add*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_subtract*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_multiply*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_inplace_divide*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_inplace_remainder*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_power*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_lshift*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_rshift*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_and*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_xor*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_or*/

#line 979 "numpy.pxd"
  0, /*nb_floor_divide*/

#line 979 "numpy.pxd"
  0, /*nb_true_divide*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_floor_divide*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_true_divide*/

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02050000

#line 979 "numpy.pxd"
  0, /*nb_index*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PySequenceMethods __pyx_tp_as_sequence_Group = {

#line 979 "numpy.pxd"
  0, /*sq_length*/

#line 979 "numpy.pxd"
  0, /*sq_concat*/

#line 979 "numpy.pxd"
  0, /*sq_repeat*/

#line 979 "numpy.pxd"
  0, /*sq_item*/

#line 979 "numpy.pxd"
  0, /*sq_slice*/

#line 979 "numpy.pxd"
  0, /*sq_ass_item*/

#line 979 "numpy.pxd"
  0, /*sq_ass_slice*/

#line 979 "numpy.pxd"
  0, /*sq_contains*/

#line 979 "numpy.pxd"
  0, /*sq_inplace_concat*/

#line 979 "numpy.pxd"
  0, /*sq_inplace_repeat*/

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyMappingMethods __pyx_tp_as_mapping_Group = {

#line 979 "numpy.pxd"
  0, /*mp_length*/

#line 979 "numpy.pxd"
  0, /*mp_subscript*/

#line 979 "numpy.pxd"
  0, /*mp_ass_subscript*/

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyBufferProcs __pyx_tp_as_buffer_Group = {

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getreadbuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getwritebuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getsegcount*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getcharbuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02060000

#line 979 "numpy.pxd"
  0, /*bf_getbuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02060000

#line 979 "numpy.pxd"
  0, /*bf_releasebuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyTypeObject __pyx_type_4cds3_4core_Group = {

#line 979 "numpy.pxd"
  PyVarObject_HEAD_INIT(0, 0)

#line 979 "numpy.pxd"
  __Pyx_NAMESTR("cds3.core.Group"), /*tp_name*/

#line 979 "numpy.pxd"
  sizeof(struct __pyx_obj_4cds3_4core_Group), /*tp_basicsize*/

#line 979 "numpy.pxd"
  0, /*tp_itemsize*/

#line 979 "numpy.pxd"
  __pyx_tp_dealloc_4cds3_4core_Group, /*tp_dealloc*/

#line 979 "numpy.pxd"
  0, /*tp_print*/

#line 979 "numpy.pxd"
  0, /*tp_getattr*/

#line 979 "numpy.pxd"
  0, /*tp_setattr*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*tp_compare*/

#line 979 "numpy.pxd"
  #else

#line 979 "numpy.pxd"
  0, /*reserved*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*tp_repr*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_number_Group, /*tp_as_number*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_sequence_Group, /*tp_as_sequence*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_mapping_Group, /*tp_as_mapping*/

#line 979 "numpy.pxd"
  0, /*tp_hash*/

#line 979 "numpy.pxd"
  0, /*tp_call*/

#line 979 "numpy.pxd"
  0, /*tp_str*/

#line 979 "numpy.pxd"
  0, /*tp_getattro*/

#line 979 "numpy.pxd"
  0, /*tp_setattro*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_buffer_Group, /*tp_as_buffer*/

#line 979 "numpy.pxd"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/

#line 979 "numpy.pxd"
  __Pyx_DOCSTR("Group()\nCDSGroup"), /*tp_doc*/

#line 979 "numpy.pxd"
  0, /*tp_traverse*/

#line 979 "numpy.pxd"
  0, /*tp_clear*/

#line 979 "numpy.pxd"
  0, /*tp_richcompare*/

#line 979 "numpy.pxd"
  0, /*tp_weaklistoffset*/

#line 979 "numpy.pxd"
  0, /*tp_iter*/

#line 979 "numpy.pxd"
  0, /*tp_iternext*/

#line 979 "numpy.pxd"
  __pyx_methods_4cds3_4core_Group, /*tp_methods*/

#line 979 "numpy.pxd"
  0, /*tp_members*/

#line 979 "numpy.pxd"
  0, /*tp_getset*/

#line 979 "numpy.pxd"
  0, /*tp_base*/

#line 979 "numpy.pxd"
  0, /*tp_dict*/

#line 979 "numpy.pxd"
  0, /*tp_descr_get*/

#line 979 "numpy.pxd"
  0, /*tp_descr_set*/

#line 979 "numpy.pxd"
  0, /*tp_dictoffset*/

#line 979 "numpy.pxd"
  __pyx_pw_4cds3_4core_5Group_7__init__, /*tp_init*/

#line 979 "numpy.pxd"
  0, /*tp_alloc*/

#line 979 "numpy.pxd"
  __pyx_tp_new_4cds3_4core_Group, /*tp_new*/

#line 979 "numpy.pxd"
  0, /*tp_free*/

#line 979 "numpy.pxd"
  0, /*tp_is_gc*/

#line 979 "numpy.pxd"
  0, /*tp_bases*/

#line 979 "numpy.pxd"
  0, /*tp_mro*/

#line 979 "numpy.pxd"
  0, /*tp_cache*/

#line 979 "numpy.pxd"
  0, /*tp_subclasses*/

#line 979 "numpy.pxd"
  0, /*tp_weaklist*/

#line 979 "numpy.pxd"
  0, /*tp_del*/

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02060000

#line 979 "numpy.pxd"
  0, /*tp_version_tag*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"
static struct __pyx_vtabstruct_4cds3_4core_Dim __pyx_vtable_4cds3_4core_Dim;

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyObject *__pyx_tp_new_4cds3_4core_Dim(PyTypeObject *t, PyObject *a, PyObject *k) {

#line 979 "numpy.pxd"
  struct __pyx_obj_4cds3_4core_Dim *p;

#line 979 "numpy.pxd"
  PyObject *o = __pyx_tp_new_4cds3_4core_Object(t, a, k);

#line 979 "numpy.pxd"
  if (!o) return 0;

#line 979 "numpy.pxd"
  p = ((struct __pyx_obj_4cds3_4core_Dim *)o);

#line 979 "numpy.pxd"
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_4cds3_4core_Object*)__pyx_vtabptr_4cds3_4core_Dim;

#line 979 "numpy.pxd"
  if (__pyx_pw_4cds3_4core_3Dim_3__cinit__(o, __pyx_empty_tuple, NULL) < 0) {

#line 979 "numpy.pxd"
    Py_DECREF(o); o = 0;

#line 979 "numpy.pxd"
  }

#line 979 "numpy.pxd"
  return o;

#line 979 "numpy.pxd"
}

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static void __pyx_tp_dealloc_4cds3_4core_Dim(PyObject *o) {

#line 979 "numpy.pxd"
  {

#line 979 "numpy.pxd"
    PyObject *etype, *eval, *etb;

#line 979 "numpy.pxd"
    PyErr_Fetch(&etype, &eval, &etb);

#line 979 "numpy.pxd"
    ++Py_REFCNT(o);

#line 979 "numpy.pxd"
    __pyx_pw_4cds3_4core_3Dim_7__dealloc__(o);

#line 979 "numpy.pxd"
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);

#line 979 "numpy.pxd"
    --Py_REFCNT(o);

#line 979 "numpy.pxd"
    PyErr_Restore(etype, eval, etb);

#line 979 "numpy.pxd"
  }

#line 979 "numpy.pxd"
  __pyx_tp_dealloc_4cds3_4core_Object(o);

#line 979 "numpy.pxd"
}

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyMethodDef __pyx_methods_4cds3_4core_Dim[] = {

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("delete"), (PyCFunction)__pyx_pw_4cds3_4core_3Dim_1delete, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Dim_delete)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_length"), (PyCFunction)__pyx_pw_4cds3_4core_3Dim_9get_length, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Dim_8get_length)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("is_unlimited"), (PyCFunction)__pyx_pw_4cds3_4core_3Dim_11is_unlimited, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Dim_10is_unlimited)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("change_length"), (PyCFunction)__pyx_pw_4cds3_4core_3Dim_13change_length, METH_O, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Dim_12change_length)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_var"), (PyCFunction)__pyx_pw_4cds3_4core_3Dim_15get_var, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Dim_14get_var)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("rename"), (PyCFunction)__pyx_pw_4cds3_4core_3Dim_17rename, METH_O, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Dim_16rename)},

#line 979 "numpy.pxd"
  {0, 0, 0, 0}

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyNumberMethods __pyx_tp_as_number_Dim = {

#line 979 "numpy.pxd"
  0, /*nb_add*/

#line 979 "numpy.pxd"
  0, /*nb_subtract*/

#line 979 "numpy.pxd"
  0, /*nb_multiply*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_divide*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_remainder*/

#line 979 "numpy.pxd"
  0, /*nb_divmod*/

#line 979 "numpy.pxd"
  0, /*nb_power*/

#line 979 "numpy.pxd"
  0, /*nb_negative*/

#line 979 "numpy.pxd"
  0, /*nb_positive*/

#line 979 "numpy.pxd"
  0, /*nb_absolute*/

#line 979 "numpy.pxd"
  0, /*nb_nonzero*/

#line 979 "numpy.pxd"
  0, /*nb_invert*/

#line 979 "numpy.pxd"
  0, /*nb_lshift*/

#line 979 "numpy.pxd"
  0, /*nb_rshift*/

#line 979 "numpy.pxd"
  0, /*nb_and*/

#line 979 "numpy.pxd"
  0, /*nb_xor*/

#line 979 "numpy.pxd"
  0, /*nb_or*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_coerce*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_int*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_long*/

#line 979 "numpy.pxd"
  #else

#line 979 "numpy.pxd"
  0, /*reserved*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_float*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_oct*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_hex*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_inplace_add*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_subtract*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_multiply*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_inplace_divide*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_inplace_remainder*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_power*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_lshift*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_rshift*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_and*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_xor*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_or*/

#line 979 "numpy.pxd"
  0, /*nb_floor_divide*/

#line 979 "numpy.pxd"
  0, /*nb_true_divide*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_floor_divide*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_true_divide*/

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02050000

#line 979 "numpy.pxd"
  0, /*nb_index*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PySequenceMethods __pyx_tp_as_sequence_Dim = {

#line 979 "numpy.pxd"
  0, /*sq_length*/

#line 979 "numpy.pxd"
  0, /*sq_concat*/

#line 979 "numpy.pxd"
  0, /*sq_repeat*/

#line 979 "numpy.pxd"
  0, /*sq_item*/

#line 979 "numpy.pxd"
  0, /*sq_slice*/

#line 979 "numpy.pxd"
  0, /*sq_ass_item*/

#line 979 "numpy.pxd"
  0, /*sq_ass_slice*/

#line 979 "numpy.pxd"
  0, /*sq_contains*/

#line 979 "numpy.pxd"
  0, /*sq_inplace_concat*/

#line 979 "numpy.pxd"
  0, /*sq_inplace_repeat*/

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyMappingMethods __pyx_tp_as_mapping_Dim = {

#line 979 "numpy.pxd"
  0, /*mp_length*/

#line 979 "numpy.pxd"
  0, /*mp_subscript*/

#line 979 "numpy.pxd"
  0, /*mp_ass_subscript*/

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyBufferProcs __pyx_tp_as_buffer_Dim = {

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getreadbuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getwritebuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getsegcount*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getcharbuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02060000

#line 979 "numpy.pxd"
  0, /*bf_getbuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02060000

#line 979 "numpy.pxd"
  0, /*bf_releasebuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyTypeObject __pyx_type_4cds3_4core_Dim = {

#line 979 "numpy.pxd"
  PyVarObject_HEAD_INIT(0, 0)

#line 979 "numpy.pxd"
  __Pyx_NAMESTR("cds3.core.Dim"), /*tp_name*/

#line 979 "numpy.pxd"
  sizeof(struct __pyx_obj_4cds3_4core_Dim), /*tp_basicsize*/

#line 979 "numpy.pxd"
  0, /*tp_itemsize*/

#line 979 "numpy.pxd"
  __pyx_tp_dealloc_4cds3_4core_Dim, /*tp_dealloc*/

#line 979 "numpy.pxd"
  0, /*tp_print*/

#line 979 "numpy.pxd"
  0, /*tp_getattr*/

#line 979 "numpy.pxd"
  0, /*tp_setattr*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*tp_compare*/

#line 979 "numpy.pxd"
  #else

#line 979 "numpy.pxd"
  0, /*reserved*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*tp_repr*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_number_Dim, /*tp_as_number*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_sequence_Dim, /*tp_as_sequence*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_mapping_Dim, /*tp_as_mapping*/

#line 979 "numpy.pxd"
  0, /*tp_hash*/

#line 979 "numpy.pxd"
  0, /*tp_call*/

#line 979 "numpy.pxd"
  0, /*tp_str*/

#line 979 "numpy.pxd"
  0, /*tp_getattro*/

#line 979 "numpy.pxd"
  0, /*tp_setattro*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_buffer_Dim, /*tp_as_buffer*/

#line 979 "numpy.pxd"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/

#line 979 "numpy.pxd"
  __Pyx_DOCSTR("Dim()\nCDSDim"), /*tp_doc*/

#line 979 "numpy.pxd"
  0, /*tp_traverse*/

#line 979 "numpy.pxd"
  0, /*tp_clear*/

#line 979 "numpy.pxd"
  0, /*tp_richcompare*/

#line 979 "numpy.pxd"
  0, /*tp_weaklistoffset*/

#line 979 "numpy.pxd"
  0, /*tp_iter*/

#line 979 "numpy.pxd"
  0, /*tp_iternext*/

#line 979 "numpy.pxd"
  __pyx_methods_4cds3_4core_Dim, /*tp_methods*/

#line 979 "numpy.pxd"
  0, /*tp_members*/

#line 979 "numpy.pxd"
  0, /*tp_getset*/

#line 979 "numpy.pxd"
  0, /*tp_base*/

#line 979 "numpy.pxd"
  0, /*tp_dict*/

#line 979 "numpy.pxd"
  0, /*tp_descr_get*/

#line 979 "numpy.pxd"
  0, /*tp_descr_set*/

#line 979 "numpy.pxd"
  0, /*tp_dictoffset*/

#line 979 "numpy.pxd"
  __pyx_pw_4cds3_4core_3Dim_5__init__, /*tp_init*/

#line 979 "numpy.pxd"
  0, /*tp_alloc*/

#line 979 "numpy.pxd"
  __pyx_tp_new_4cds3_4core_Dim, /*tp_new*/

#line 979 "numpy.pxd"
  0, /*tp_free*/

#line 979 "numpy.pxd"
  0, /*tp_is_gc*/

#line 979 "numpy.pxd"
  0, /*tp_bases*/

#line 979 "numpy.pxd"
  0, /*tp_mro*/

#line 979 "numpy.pxd"
  0, /*tp_cache*/

#line 979 "numpy.pxd"
  0, /*tp_subclasses*/

#line 979 "numpy.pxd"
  0, /*tp_weaklist*/

#line 979 "numpy.pxd"
  0, /*tp_del*/

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02060000

#line 979 "numpy.pxd"
  0, /*tp_version_tag*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"
static struct __pyx_vtabstruct_4cds3_4core_Att __pyx_vtable_4cds3_4core_Att;

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyObject *__pyx_tp_new_4cds3_4core_Att(PyTypeObject *t, PyObject *a, PyObject *k) {

#line 979 "numpy.pxd"
  struct __pyx_obj_4cds3_4core_Att *p;

#line 979 "numpy.pxd"
  PyObject *o = __pyx_tp_new_4cds3_4core_Object(t, a, k);

#line 979 "numpy.pxd"
  if (!o) return 0;

#line 979 "numpy.pxd"
  p = ((struct __pyx_obj_4cds3_4core_Att *)o);

#line 979 "numpy.pxd"
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_4cds3_4core_Object*)__pyx_vtabptr_4cds3_4core_Att;

#line 979 "numpy.pxd"
  if (__pyx_pw_4cds3_4core_3Att_3__cinit__(o, __pyx_empty_tuple, NULL) < 0) {

#line 979 "numpy.pxd"
    Py_DECREF(o); o = 0;

#line 979 "numpy.pxd"
  }

#line 979 "numpy.pxd"
  return o;

#line 979 "numpy.pxd"
}

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static void __pyx_tp_dealloc_4cds3_4core_Att(PyObject *o) {

#line 979 "numpy.pxd"
  {

#line 979 "numpy.pxd"
    PyObject *etype, *eval, *etb;

#line 979 "numpy.pxd"
    PyErr_Fetch(&etype, &eval, &etb);

#line 979 "numpy.pxd"
    ++Py_REFCNT(o);

#line 979 "numpy.pxd"
    __pyx_pw_4cds3_4core_3Att_7__dealloc__(o);

#line 979 "numpy.pxd"
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);

#line 979 "numpy.pxd"
    --Py_REFCNT(o);

#line 979 "numpy.pxd"
    PyErr_Restore(etype, eval, etb);

#line 979 "numpy.pxd"
  }

#line 979 "numpy.pxd"
  __pyx_tp_dealloc_4cds3_4core_Object(o);

#line 979 "numpy.pxd"
}

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyMethodDef __pyx_methods_4cds3_4core_Att[] = {

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("delete"), (PyCFunction)__pyx_pw_4cds3_4core_3Att_1delete, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Att_delete)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_type"), (PyCFunction)__pyx_pw_4cds3_4core_3Att_9get_type, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Att_8get_type)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_length"), (PyCFunction)__pyx_pw_4cds3_4core_3Att_11get_length, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Att_10get_length)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("change_text"), (PyCFunction)__pyx_pw_4cds3_4core_3Att_13change_text, METH_O, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Att_12change_text)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("change_value"), (PyCFunction)__pyx_pw_4cds3_4core_3Att_15change_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Att_14change_value)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_text"), (PyCFunction)__pyx_pw_4cds3_4core_3Att_17get_text, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Att_16get_text)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_value"), (PyCFunction)__pyx_pw_4cds3_4core_3Att_19get_value, METH_O, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Att_18get_value)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("rename"), (PyCFunction)__pyx_pw_4cds3_4core_3Att_21rename, METH_O, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Att_20rename)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("set_text"), (PyCFunction)__pyx_pw_4cds3_4core_3Att_23set_text, METH_O, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Att_22set_text)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("set_value"), (PyCFunction)__pyx_pw_4cds3_4core_3Att_25set_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Att_24set_value)},

#line 979 "numpy.pxd"
  {0, 0, 0, 0}

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyNumberMethods __pyx_tp_as_number_Att = {

#line 979 "numpy.pxd"
  0, /*nb_add*/

#line 979 "numpy.pxd"
  0, /*nb_subtract*/

#line 979 "numpy.pxd"
  0, /*nb_multiply*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_divide*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_remainder*/

#line 979 "numpy.pxd"
  0, /*nb_divmod*/

#line 979 "numpy.pxd"
  0, /*nb_power*/

#line 979 "numpy.pxd"
  0, /*nb_negative*/

#line 979 "numpy.pxd"
  0, /*nb_positive*/

#line 979 "numpy.pxd"
  0, /*nb_absolute*/

#line 979 "numpy.pxd"
  0, /*nb_nonzero*/

#line 979 "numpy.pxd"
  0, /*nb_invert*/

#line 979 "numpy.pxd"
  0, /*nb_lshift*/

#line 979 "numpy.pxd"
  0, /*nb_rshift*/

#line 979 "numpy.pxd"
  0, /*nb_and*/

#line 979 "numpy.pxd"
  0, /*nb_xor*/

#line 979 "numpy.pxd"
  0, /*nb_or*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_coerce*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_int*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_long*/

#line 979 "numpy.pxd"
  #else

#line 979 "numpy.pxd"
  0, /*reserved*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_float*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_oct*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_hex*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_inplace_add*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_subtract*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_multiply*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_inplace_divide*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_inplace_remainder*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_power*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_lshift*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_rshift*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_and*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_xor*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_or*/

#line 979 "numpy.pxd"
  0, /*nb_floor_divide*/

#line 979 "numpy.pxd"
  0, /*nb_true_divide*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_floor_divide*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_true_divide*/

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02050000

#line 979 "numpy.pxd"
  0, /*nb_index*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PySequenceMethods __pyx_tp_as_sequence_Att = {

#line 979 "numpy.pxd"
  0, /*sq_length*/

#line 979 "numpy.pxd"
  0, /*sq_concat*/

#line 979 "numpy.pxd"
  0, /*sq_repeat*/

#line 979 "numpy.pxd"
  0, /*sq_item*/

#line 979 "numpy.pxd"
  0, /*sq_slice*/

#line 979 "numpy.pxd"
  0, /*sq_ass_item*/

#line 979 "numpy.pxd"
  0, /*sq_ass_slice*/

#line 979 "numpy.pxd"
  0, /*sq_contains*/

#line 979 "numpy.pxd"
  0, /*sq_inplace_concat*/

#line 979 "numpy.pxd"
  0, /*sq_inplace_repeat*/

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyMappingMethods __pyx_tp_as_mapping_Att = {

#line 979 "numpy.pxd"
  0, /*mp_length*/

#line 979 "numpy.pxd"
  0, /*mp_subscript*/

#line 979 "numpy.pxd"
  0, /*mp_ass_subscript*/

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyBufferProcs __pyx_tp_as_buffer_Att = {

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getreadbuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getwritebuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getsegcount*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getcharbuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02060000

#line 979 "numpy.pxd"
  0, /*bf_getbuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02060000

#line 979 "numpy.pxd"
  0, /*bf_releasebuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyTypeObject __pyx_type_4cds3_4core_Att = {

#line 979 "numpy.pxd"
  PyVarObject_HEAD_INIT(0, 0)

#line 979 "numpy.pxd"
  __Pyx_NAMESTR("cds3.core.Att"), /*tp_name*/

#line 979 "numpy.pxd"
  sizeof(struct __pyx_obj_4cds3_4core_Att), /*tp_basicsize*/

#line 979 "numpy.pxd"
  0, /*tp_itemsize*/

#line 979 "numpy.pxd"
  __pyx_tp_dealloc_4cds3_4core_Att, /*tp_dealloc*/

#line 979 "numpy.pxd"
  0, /*tp_print*/

#line 979 "numpy.pxd"
  0, /*tp_getattr*/

#line 979 "numpy.pxd"
  0, /*tp_setattr*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*tp_compare*/

#line 979 "numpy.pxd"
  #else

#line 979 "numpy.pxd"
  0, /*reserved*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*tp_repr*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_number_Att, /*tp_as_number*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_sequence_Att, /*tp_as_sequence*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_mapping_Att, /*tp_as_mapping*/

#line 979 "numpy.pxd"
  0, /*tp_hash*/

#line 979 "numpy.pxd"
  0, /*tp_call*/

#line 979 "numpy.pxd"
  0, /*tp_str*/

#line 979 "numpy.pxd"
  0, /*tp_getattro*/

#line 979 "numpy.pxd"
  0, /*tp_setattro*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_buffer_Att, /*tp_as_buffer*/

#line 979 "numpy.pxd"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/

#line 979 "numpy.pxd"
  __Pyx_DOCSTR("Att()\nCDSAtt"), /*tp_doc*/

#line 979 "numpy.pxd"
  0, /*tp_traverse*/

#line 979 "numpy.pxd"
  0, /*tp_clear*/

#line 979 "numpy.pxd"
  0, /*tp_richcompare*/

#line 979 "numpy.pxd"
  0, /*tp_weaklistoffset*/

#line 979 "numpy.pxd"
  0, /*tp_iter*/

#line 979 "numpy.pxd"
  0, /*tp_iternext*/

#line 979 "numpy.pxd"
  __pyx_methods_4cds3_4core_Att, /*tp_methods*/

#line 979 "numpy.pxd"
  0, /*tp_members*/

#line 979 "numpy.pxd"
  0, /*tp_getset*/

#line 979 "numpy.pxd"
  0, /*tp_base*/

#line 979 "numpy.pxd"
  0, /*tp_dict*/

#line 979 "numpy.pxd"
  0, /*tp_descr_get*/

#line 979 "numpy.pxd"
  0, /*tp_descr_set*/

#line 979 "numpy.pxd"
  0, /*tp_dictoffset*/

#line 979 "numpy.pxd"
  __pyx_pw_4cds3_4core_3Att_5__init__, /*tp_init*/

#line 979 "numpy.pxd"
  0, /*tp_alloc*/

#line 979 "numpy.pxd"
  __pyx_tp_new_4cds3_4core_Att, /*tp_new*/

#line 979 "numpy.pxd"
  0, /*tp_free*/

#line 979 "numpy.pxd"
  0, /*tp_is_gc*/

#line 979 "numpy.pxd"
  0, /*tp_bases*/

#line 979 "numpy.pxd"
  0, /*tp_mro*/

#line 979 "numpy.pxd"
  0, /*tp_cache*/

#line 979 "numpy.pxd"
  0, /*tp_subclasses*/

#line 979 "numpy.pxd"
  0, /*tp_weaklist*/

#line 979 "numpy.pxd"
  0, /*tp_del*/

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02060000

#line 979 "numpy.pxd"
  0, /*tp_version_tag*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"
static struct __pyx_vtabstruct_4cds3_4core_Var __pyx_vtable_4cds3_4core_Var;

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyObject *__pyx_tp_new_4cds3_4core_Var(PyTypeObject *t, PyObject *a, PyObject *k) {

#line 979 "numpy.pxd"
  struct __pyx_obj_4cds3_4core_Var *p;

#line 979 "numpy.pxd"
  PyObject *o = __pyx_tp_new_4cds3_4core_Object(t, a, k);

#line 979 "numpy.pxd"
  if (!o) return 0;

#line 979 "numpy.pxd"
  p = ((struct __pyx_obj_4cds3_4core_Var *)o);

#line 979 "numpy.pxd"
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_4cds3_4core_Object*)__pyx_vtabptr_4cds3_4core_Var;

#line 979 "numpy.pxd"
  if (__pyx_pw_4cds3_4core_3Var_3__cinit__(o, __pyx_empty_tuple, NULL) < 0) {

#line 979 "numpy.pxd"
    Py_DECREF(o); o = 0;

#line 979 "numpy.pxd"
  }

#line 979 "numpy.pxd"
  return o;

#line 979 "numpy.pxd"
}

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static void __pyx_tp_dealloc_4cds3_4core_Var(PyObject *o) {

#line 979 "numpy.pxd"
  {

#line 979 "numpy.pxd"
    PyObject *etype, *eval, *etb;

#line 979 "numpy.pxd"
    PyErr_Fetch(&etype, &eval, &etb);

#line 979 "numpy.pxd"
    ++Py_REFCNT(o);

#line 979 "numpy.pxd"
    __pyx_pw_4cds3_4core_3Var_7__dealloc__(o);

#line 979 "numpy.pxd"
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);

#line 979 "numpy.pxd"
    --Py_REFCNT(o);

#line 979 "numpy.pxd"
    PyErr_Restore(etype, eval, etb);

#line 979 "numpy.pxd"
  }

#line 979 "numpy.pxd"
  __pyx_tp_dealloc_4cds3_4core_Object(o);

#line 979 "numpy.pxd"
}

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyObject *__pyx_getprop_4cds3_4core_3Var_sample_count(PyObject *o, CYTHON_UNUSED void *x) {

#line 979 "numpy.pxd"
  return __pyx_pw_4cds3_4core_3Var_12sample_count_1__get__(o);

#line 979 "numpy.pxd"
}

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyMethodDef __pyx_methods_4cds3_4core_Var[] = {

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("delete"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_1delete, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_delete)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_type"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_9get_type, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_8get_type)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_ndims"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_11get_ndims, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_10get_ndims)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_dims"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_13get_dims, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_12get_dims)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_natts"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_15get_natts, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_14get_natts)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_atts"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_17get_atts, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_16get_atts)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_sample_count"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_19get_sample_count, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_18get_sample_count)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_alloc_count"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_21get_alloc_count, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_20get_alloc_count)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_default_fill"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_23get_default_fill, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_22get_default_fill)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_coord_var"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_25get_coord_var, METH_O, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_24get_coord_var)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("rename"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_27rename, METH_O, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_26rename)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("is_unlimited"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_29is_unlimited, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_28is_unlimited)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("has_dim"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_31has_dim, METH_O, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_30has_dim)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_sample_size"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_33get_sample_size, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_32get_sample_size)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("alloc_data"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_35alloc_data, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_34alloc_data)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("alloc_data_index"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_37alloc_data_index, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_36alloc_data_index)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("change_type"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_39change_type, METH_O, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_38change_type)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("change_units"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_41change_units, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_40change_units)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("create_data_index"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_43create_data_index, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_42create_data_index)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("delete_data"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_45delete_data, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_44delete_data)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_data"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_47get_data, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_46get_data)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_datap"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_49get_datap, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_48get_datap)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_missing_values"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_51get_missing_values, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_50get_missing_values)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("get_units"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_53get_units, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_52get_units)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("init_data"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_55init_data, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_54init_data)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("init_data_index"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_57init_data_index, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_56init_data_index)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("set_default_fill_value"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_59set_default_fill_value, METH_O, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_58set_default_fill_value)},

#line 979 "numpy.pxd"
  {__Pyx_NAMESTR("set_data"), (PyCFunction)__pyx_pw_4cds3_4core_3Var_61set_data, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4cds3_4core_3Var_60set_data)},

#line 979 "numpy.pxd"
  {0, 0, 0, 0}

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static struct PyGetSetDef __pyx_getsets_4cds3_4core_Var[] = {

#line 979 "numpy.pxd"
  {(char *)"sample_count", __pyx_getprop_4cds3_4core_3Var_sample_count, 0, 0, 0},

#line 979 "numpy.pxd"
  {0, 0, 0, 0, 0}

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyNumberMethods __pyx_tp_as_number_Var = {

#line 979 "numpy.pxd"
  0, /*nb_add*/

#line 979 "numpy.pxd"
  0, /*nb_subtract*/

#line 979 "numpy.pxd"
  0, /*nb_multiply*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_divide*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_remainder*/

#line 979 "numpy.pxd"
  0, /*nb_divmod*/

#line 979 "numpy.pxd"
  0, /*nb_power*/

#line 979 "numpy.pxd"
  0, /*nb_negative*/

#line 979 "numpy.pxd"
  0, /*nb_positive*/

#line 979 "numpy.pxd"
  0, /*nb_absolute*/

#line 979 "numpy.pxd"
  0, /*nb_nonzero*/

#line 979 "numpy.pxd"
  0, /*nb_invert*/

#line 979 "numpy.pxd"
  0, /*nb_lshift*/

#line 979 "numpy.pxd"
  0, /*nb_rshift*/

#line 979 "numpy.pxd"
  0, /*nb_and*/

#line 979 "numpy.pxd"
  0, /*nb_xor*/

#line 979 "numpy.pxd"
  0, /*nb_or*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_coerce*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_int*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_long*/

#line 979 "numpy.pxd"
  #else

#line 979 "numpy.pxd"
  0, /*reserved*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_float*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_oct*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_hex*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_inplace_add*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_subtract*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_multiply*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_inplace_divide*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_inplace_remainder*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_power*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_lshift*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_rshift*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_and*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_xor*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_or*/

#line 979 "numpy.pxd"
  0, /*nb_floor_divide*/

#line 979 "numpy.pxd"
  0, /*nb_true_divide*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_floor_divide*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_true_divide*/

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02050000

#line 979 "numpy.pxd"
  0, /*nb_index*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PySequenceMethods __pyx_tp_as_sequence_Var = {

#line 979 "numpy.pxd"
  0, /*sq_length*/

#line 979 "numpy.pxd"
  0, /*sq_concat*/

#line 979 "numpy.pxd"
  0, /*sq_repeat*/

#line 979 "numpy.pxd"
  0, /*sq_item*/

#line 979 "numpy.pxd"
  0, /*sq_slice*/

#line 979 "numpy.pxd"
  0, /*sq_ass_item*/

#line 979 "numpy.pxd"
  0, /*sq_ass_slice*/

#line 979 "numpy.pxd"
  0, /*sq_contains*/

#line 979 "numpy.pxd"
  0, /*sq_inplace_concat*/

#line 979 "numpy.pxd"
  0, /*sq_inplace_repeat*/

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyMappingMethods __pyx_tp_as_mapping_Var = {

#line 979 "numpy.pxd"
  0, /*mp_length*/

#line 979 "numpy.pxd"
  0, /*mp_subscript*/

#line 979 "numpy.pxd"
  0, /*mp_ass_subscript*/

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyBufferProcs __pyx_tp_as_buffer_Var = {

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getreadbuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getwritebuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getsegcount*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getcharbuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02060000

#line 979 "numpy.pxd"
  0, /*bf_getbuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02060000

#line 979 "numpy.pxd"
  0, /*bf_releasebuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyTypeObject __pyx_type_4cds3_4core_Var = {

#line 979 "numpy.pxd"
  PyVarObject_HEAD_INIT(0, 0)

#line 979 "numpy.pxd"
  __Pyx_NAMESTR("cds3.core.Var"), /*tp_name*/

#line 979 "numpy.pxd"
  sizeof(struct __pyx_obj_4cds3_4core_Var), /*tp_basicsize*/

#line 979 "numpy.pxd"
  0, /*tp_itemsize*/

#line 979 "numpy.pxd"
  __pyx_tp_dealloc_4cds3_4core_Var, /*tp_dealloc*/

#line 979 "numpy.pxd"
  0, /*tp_print*/

#line 979 "numpy.pxd"
  0, /*tp_getattr*/

#line 979 "numpy.pxd"
  0, /*tp_setattr*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*tp_compare*/

#line 979 "numpy.pxd"
  #else

#line 979 "numpy.pxd"
  0, /*reserved*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*tp_repr*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_number_Var, /*tp_as_number*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_sequence_Var, /*tp_as_sequence*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_mapping_Var, /*tp_as_mapping*/

#line 979 "numpy.pxd"
  0, /*tp_hash*/

#line 979 "numpy.pxd"
  0, /*tp_call*/

#line 979 "numpy.pxd"
  0, /*tp_str*/

#line 979 "numpy.pxd"
  0, /*tp_getattro*/

#line 979 "numpy.pxd"
  0, /*tp_setattro*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_buffer_Var, /*tp_as_buffer*/

#line 979 "numpy.pxd"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/

#line 979 "numpy.pxd"
  __Pyx_DOCSTR("Var()\nCDSVar"), /*tp_doc*/

#line 979 "numpy.pxd"
  0, /*tp_traverse*/

#line 979 "numpy.pxd"
  0, /*tp_clear*/

#line 979 "numpy.pxd"
  0, /*tp_richcompare*/

#line 979 "numpy.pxd"
  0, /*tp_weaklistoffset*/

#line 979 "numpy.pxd"
  0, /*tp_iter*/

#line 979 "numpy.pxd"
  0, /*tp_iternext*/

#line 979 "numpy.pxd"
  __pyx_methods_4cds3_4core_Var, /*tp_methods*/

#line 979 "numpy.pxd"
  0, /*tp_members*/

#line 979 "numpy.pxd"
  __pyx_getsets_4cds3_4core_Var, /*tp_getset*/

#line 979 "numpy.pxd"
  0, /*tp_base*/

#line 979 "numpy.pxd"
  0, /*tp_dict*/

#line 979 "numpy.pxd"
  0, /*tp_descr_get*/

#line 979 "numpy.pxd"
  0, /*tp_descr_set*/

#line 979 "numpy.pxd"
  0, /*tp_dictoffset*/

#line 979 "numpy.pxd"
  __pyx_pw_4cds3_4core_3Var_5__init__, /*tp_init*/

#line 979 "numpy.pxd"
  0, /*tp_alloc*/

#line 979 "numpy.pxd"
  __pyx_tp_new_4cds3_4core_Var, /*tp_new*/

#line 979 "numpy.pxd"
  0, /*tp_free*/

#line 979 "numpy.pxd"
  0, /*tp_is_gc*/

#line 979 "numpy.pxd"
  0, /*tp_bases*/

#line 979 "numpy.pxd"
  0, /*tp_mro*/

#line 979 "numpy.pxd"
  0, /*tp_cache*/

#line 979 "numpy.pxd"
  0, /*tp_subclasses*/

#line 979 "numpy.pxd"
  0, /*tp_weaklist*/

#line 979 "numpy.pxd"
  0, /*tp_del*/

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02060000

#line 979 "numpy.pxd"
  0, /*tp_version_tag*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"
static struct __pyx_vtabstruct_4cds3_4core_VarGroup __pyx_vtable_4cds3_4core_VarGroup;

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyObject *__pyx_tp_new_4cds3_4core_VarGroup(PyTypeObject *t, PyObject *a, PyObject *k) {

#line 979 "numpy.pxd"
  struct __pyx_obj_4cds3_4core_VarGroup *p;

#line 979 "numpy.pxd"
  PyObject *o = __pyx_tp_new_4cds3_4core_Object(t, a, k);

#line 979 "numpy.pxd"
  if (!o) return 0;

#line 979 "numpy.pxd"
  p = ((struct __pyx_obj_4cds3_4core_VarGroup *)o);

#line 979 "numpy.pxd"
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_4cds3_4core_Object*)__pyx_vtabptr_4cds3_4core_VarGroup;

#line 979 "numpy.pxd"
  if (__pyx_pw_4cds3_4core_8VarGroup_1__cinit__(o, __pyx_empty_tuple, NULL) < 0) {

#line 979 "numpy.pxd"
    Py_DECREF(o); o = 0;

#line 979 "numpy.pxd"
  }

#line 979 "numpy.pxd"
  return o;

#line 979 "numpy.pxd"
}

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static void __pyx_tp_dealloc_4cds3_4core_VarGroup(PyObject *o) {

#line 979 "numpy.pxd"
  {

#line 979 "numpy.pxd"
    PyObject *etype, *eval, *etb;

#line 979 "numpy.pxd"
    PyErr_Fetch(&etype, &eval, &etb);

#line 979 "numpy.pxd"
    ++Py_REFCNT(o);

#line 979 "numpy.pxd"
    __pyx_pw_4cds3_4core_8VarGroup_5__dealloc__(o);

#line 979 "numpy.pxd"
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);

#line 979 "numpy.pxd"
    --Py_REFCNT(o);

#line 979 "numpy.pxd"
    PyErr_Restore(etype, eval, etb);

#line 979 "numpy.pxd"
  }

#line 979 "numpy.pxd"
  __pyx_tp_dealloc_4cds3_4core_Object(o);

#line 979 "numpy.pxd"
}

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyMethodDef __pyx_methods_4cds3_4core_VarGroup[] = {

#line 979 "numpy.pxd"
  {0, 0, 0, 0}

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyNumberMethods __pyx_tp_as_number_VarGroup = {

#line 979 "numpy.pxd"
  0, /*nb_add*/

#line 979 "numpy.pxd"
  0, /*nb_subtract*/

#line 979 "numpy.pxd"
  0, /*nb_multiply*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_divide*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_remainder*/

#line 979 "numpy.pxd"
  0, /*nb_divmod*/

#line 979 "numpy.pxd"
  0, /*nb_power*/

#line 979 "numpy.pxd"
  0, /*nb_negative*/

#line 979 "numpy.pxd"
  0, /*nb_positive*/

#line 979 "numpy.pxd"
  0, /*nb_absolute*/

#line 979 "numpy.pxd"
  0, /*nb_nonzero*/

#line 979 "numpy.pxd"
  0, /*nb_invert*/

#line 979 "numpy.pxd"
  0, /*nb_lshift*/

#line 979 "numpy.pxd"
  0, /*nb_rshift*/

#line 979 "numpy.pxd"
  0, /*nb_and*/

#line 979 "numpy.pxd"
  0, /*nb_xor*/

#line 979 "numpy.pxd"
  0, /*nb_or*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_coerce*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_int*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_long*/

#line 979 "numpy.pxd"
  #else

#line 979 "numpy.pxd"
  0, /*reserved*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_float*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_oct*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_hex*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_inplace_add*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_subtract*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_multiply*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_inplace_divide*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_inplace_remainder*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_power*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_lshift*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_rshift*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_and*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_xor*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_or*/

#line 979 "numpy.pxd"
  0, /*nb_floor_divide*/

#line 979 "numpy.pxd"
  0, /*nb_true_divide*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_floor_divide*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_true_divide*/

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02050000

#line 979 "numpy.pxd"
  0, /*nb_index*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PySequenceMethods __pyx_tp_as_sequence_VarGroup = {

#line 979 "numpy.pxd"
  0, /*sq_length*/

#line 979 "numpy.pxd"
  0, /*sq_concat*/

#line 979 "numpy.pxd"
  0, /*sq_repeat*/

#line 979 "numpy.pxd"
  0, /*sq_item*/

#line 979 "numpy.pxd"
  0, /*sq_slice*/

#line 979 "numpy.pxd"
  0, /*sq_ass_item*/

#line 979 "numpy.pxd"
  0, /*sq_ass_slice*/

#line 979 "numpy.pxd"
  0, /*sq_contains*/

#line 979 "numpy.pxd"
  0, /*sq_inplace_concat*/

#line 979 "numpy.pxd"
  0, /*sq_inplace_repeat*/

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyMappingMethods __pyx_tp_as_mapping_VarGroup = {

#line 979 "numpy.pxd"
  0, /*mp_length*/

#line 979 "numpy.pxd"
  0, /*mp_subscript*/

#line 979 "numpy.pxd"
  0, /*mp_ass_subscript*/

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyBufferProcs __pyx_tp_as_buffer_VarGroup = {

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getreadbuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getwritebuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getsegcount*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getcharbuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02060000

#line 979 "numpy.pxd"
  0, /*bf_getbuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02060000

#line 979 "numpy.pxd"
  0, /*bf_releasebuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyTypeObject __pyx_type_4cds3_4core_VarGroup = {

#line 979 "numpy.pxd"
  PyVarObject_HEAD_INIT(0, 0)

#line 979 "numpy.pxd"
  __Pyx_NAMESTR("cds3.core.VarGroup"), /*tp_name*/

#line 979 "numpy.pxd"
  sizeof(struct __pyx_obj_4cds3_4core_VarGroup), /*tp_basicsize*/

#line 979 "numpy.pxd"
  0, /*tp_itemsize*/

#line 979 "numpy.pxd"
  __pyx_tp_dealloc_4cds3_4core_VarGroup, /*tp_dealloc*/

#line 979 "numpy.pxd"
  0, /*tp_print*/

#line 979 "numpy.pxd"
  0, /*tp_getattr*/

#line 979 "numpy.pxd"
  0, /*tp_setattr*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*tp_compare*/

#line 979 "numpy.pxd"
  #else

#line 979 "numpy.pxd"
  0, /*reserved*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*tp_repr*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_number_VarGroup, /*tp_as_number*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_sequence_VarGroup, /*tp_as_sequence*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_mapping_VarGroup, /*tp_as_mapping*/

#line 979 "numpy.pxd"
  0, /*tp_hash*/

#line 979 "numpy.pxd"
  0, /*tp_call*/

#line 979 "numpy.pxd"
  0, /*tp_str*/

#line 979 "numpy.pxd"
  0, /*tp_getattro*/

#line 979 "numpy.pxd"
  0, /*tp_setattro*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_buffer_VarGroup, /*tp_as_buffer*/

#line 979 "numpy.pxd"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/

#line 979 "numpy.pxd"
  __Pyx_DOCSTR("VarGroup()\nCDSVarGroup"), /*tp_doc*/

#line 979 "numpy.pxd"
  0, /*tp_traverse*/

#line 979 "numpy.pxd"
  0, /*tp_clear*/

#line 979 "numpy.pxd"
  0, /*tp_richcompare*/

#line 979 "numpy.pxd"
  0, /*tp_weaklistoffset*/

#line 979 "numpy.pxd"
  0, /*tp_iter*/

#line 979 "numpy.pxd"
  0, /*tp_iternext*/

#line 979 "numpy.pxd"
  __pyx_methods_4cds3_4core_VarGroup, /*tp_methods*/

#line 979 "numpy.pxd"
  0, /*tp_members*/

#line 979 "numpy.pxd"
  0, /*tp_getset*/

#line 979 "numpy.pxd"
  0, /*tp_base*/

#line 979 "numpy.pxd"
  0, /*tp_dict*/

#line 979 "numpy.pxd"
  0, /*tp_descr_get*/

#line 979 "numpy.pxd"
  0, /*tp_descr_set*/

#line 979 "numpy.pxd"
  0, /*tp_dictoffset*/

#line 979 "numpy.pxd"
  __pyx_pw_4cds3_4core_8VarGroup_3__init__, /*tp_init*/

#line 979 "numpy.pxd"
  0, /*tp_alloc*/

#line 979 "numpy.pxd"
  __pyx_tp_new_4cds3_4core_VarGroup, /*tp_new*/

#line 979 "numpy.pxd"
  0, /*tp_free*/

#line 979 "numpy.pxd"
  0, /*tp_is_gc*/

#line 979 "numpy.pxd"
  0, /*tp_bases*/

#line 979 "numpy.pxd"
  0, /*tp_mro*/

#line 979 "numpy.pxd"
  0, /*tp_cache*/

#line 979 "numpy.pxd"
  0, /*tp_subclasses*/

#line 979 "numpy.pxd"
  0, /*tp_weaklist*/

#line 979 "numpy.pxd"
  0, /*tp_del*/

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02060000

#line 979 "numpy.pxd"
  0, /*tp_version_tag*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"
static struct __pyx_vtabstruct_4cds3_4core_VarArray __pyx_vtable_4cds3_4core_VarArray;

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyObject *__pyx_tp_new_4cds3_4core_VarArray(PyTypeObject *t, PyObject *a, PyObject *k) {

#line 979 "numpy.pxd"
  struct __pyx_obj_4cds3_4core_VarArray *p;

#line 979 "numpy.pxd"
  PyObject *o = __pyx_tp_new_4cds3_4core_Object(t, a, k);

#line 979 "numpy.pxd"
  if (!o) return 0;

#line 979 "numpy.pxd"
  p = ((struct __pyx_obj_4cds3_4core_VarArray *)o);

#line 979 "numpy.pxd"
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_4cds3_4core_Object*)__pyx_vtabptr_4cds3_4core_VarArray;

#line 979 "numpy.pxd"
  if (__pyx_pw_4cds3_4core_8VarArray_1__cinit__(o, __pyx_empty_tuple, NULL) < 0) {

#line 979 "numpy.pxd"
    Py_DECREF(o); o = 0;

#line 979 "numpy.pxd"
  }

#line 979 "numpy.pxd"
  return o;

#line 979 "numpy.pxd"
}

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static void __pyx_tp_dealloc_4cds3_4core_VarArray(PyObject *o) {

#line 979 "numpy.pxd"
  {

#line 979 "numpy.pxd"
    PyObject *etype, *eval, *etb;

#line 979 "numpy.pxd"
    PyErr_Fetch(&etype, &eval, &etb);

#line 979 "numpy.pxd"
    ++Py_REFCNT(o);

#line 979 "numpy.pxd"
    __pyx_pw_4cds3_4core_8VarArray_5__dealloc__(o);

#line 979 "numpy.pxd"
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);

#line 979 "numpy.pxd"
    --Py_REFCNT(o);

#line 979 "numpy.pxd"
    PyErr_Restore(etype, eval, etb);

#line 979 "numpy.pxd"
  }

#line 979 "numpy.pxd"
  __pyx_tp_dealloc_4cds3_4core_Object(o);

#line 979 "numpy.pxd"
}

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyMethodDef __pyx_methods_4cds3_4core_VarArray[] = {

#line 979 "numpy.pxd"
  {0, 0, 0, 0}

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyNumberMethods __pyx_tp_as_number_VarArray = {

#line 979 "numpy.pxd"
  0, /*nb_add*/

#line 979 "numpy.pxd"
  0, /*nb_subtract*/

#line 979 "numpy.pxd"
  0, /*nb_multiply*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_divide*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_remainder*/

#line 979 "numpy.pxd"
  0, /*nb_divmod*/

#line 979 "numpy.pxd"
  0, /*nb_power*/

#line 979 "numpy.pxd"
  0, /*nb_negative*/

#line 979 "numpy.pxd"
  0, /*nb_positive*/

#line 979 "numpy.pxd"
  0, /*nb_absolute*/

#line 979 "numpy.pxd"
  0, /*nb_nonzero*/

#line 979 "numpy.pxd"
  0, /*nb_invert*/

#line 979 "numpy.pxd"
  0, /*nb_lshift*/

#line 979 "numpy.pxd"
  0, /*nb_rshift*/

#line 979 "numpy.pxd"
  0, /*nb_and*/

#line 979 "numpy.pxd"
  0, /*nb_xor*/

#line 979 "numpy.pxd"
  0, /*nb_or*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_coerce*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_int*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_long*/

#line 979 "numpy.pxd"
  #else

#line 979 "numpy.pxd"
  0, /*reserved*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_float*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_oct*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_hex*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_inplace_add*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_subtract*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_multiply*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_inplace_divide*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_inplace_remainder*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_power*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_lshift*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_rshift*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_and*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_xor*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_or*/

#line 979 "numpy.pxd"
  0, /*nb_floor_divide*/

#line 979 "numpy.pxd"
  0, /*nb_true_divide*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_floor_divide*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_true_divide*/

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02050000

#line 979 "numpy.pxd"
  0, /*nb_index*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PySequenceMethods __pyx_tp_as_sequence_VarArray = {

#line 979 "numpy.pxd"
  0, /*sq_length*/

#line 979 "numpy.pxd"
  0, /*sq_concat*/

#line 979 "numpy.pxd"
  0, /*sq_repeat*/

#line 979 "numpy.pxd"
  0, /*sq_item*/

#line 979 "numpy.pxd"
  0, /*sq_slice*/

#line 979 "numpy.pxd"
  0, /*sq_ass_item*/

#line 979 "numpy.pxd"
  0, /*sq_ass_slice*/

#line 979 "numpy.pxd"
  0, /*sq_contains*/

#line 979 "numpy.pxd"
  0, /*sq_inplace_concat*/

#line 979 "numpy.pxd"
  0, /*sq_inplace_repeat*/

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyMappingMethods __pyx_tp_as_mapping_VarArray = {

#line 979 "numpy.pxd"
  0, /*mp_length*/

#line 979 "numpy.pxd"
  0, /*mp_subscript*/

#line 979 "numpy.pxd"
  0, /*mp_ass_subscript*/

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyBufferProcs __pyx_tp_as_buffer_VarArray = {

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getreadbuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getwritebuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getsegcount*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getcharbuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02060000

#line 979 "numpy.pxd"
  0, /*bf_getbuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02060000

#line 979 "numpy.pxd"
  0, /*bf_releasebuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyTypeObject __pyx_type_4cds3_4core_VarArray = {

#line 979 "numpy.pxd"
  PyVarObject_HEAD_INIT(0, 0)

#line 979 "numpy.pxd"
  __Pyx_NAMESTR("cds3.core.VarArray"), /*tp_name*/

#line 979 "numpy.pxd"
  sizeof(struct __pyx_obj_4cds3_4core_VarArray), /*tp_basicsize*/

#line 979 "numpy.pxd"
  0, /*tp_itemsize*/

#line 979 "numpy.pxd"
  __pyx_tp_dealloc_4cds3_4core_VarArray, /*tp_dealloc*/

#line 979 "numpy.pxd"
  0, /*tp_print*/

#line 979 "numpy.pxd"
  0, /*tp_getattr*/

#line 979 "numpy.pxd"
  0, /*tp_setattr*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*tp_compare*/

#line 979 "numpy.pxd"
  #else

#line 979 "numpy.pxd"
  0, /*reserved*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*tp_repr*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_number_VarArray, /*tp_as_number*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_sequence_VarArray, /*tp_as_sequence*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_mapping_VarArray, /*tp_as_mapping*/

#line 979 "numpy.pxd"
  0, /*tp_hash*/

#line 979 "numpy.pxd"
  0, /*tp_call*/

#line 979 "numpy.pxd"
  0, /*tp_str*/

#line 979 "numpy.pxd"
  0, /*tp_getattro*/

#line 979 "numpy.pxd"
  0, /*tp_setattro*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_buffer_VarArray, /*tp_as_buffer*/

#line 979 "numpy.pxd"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/

#line 979 "numpy.pxd"
  __Pyx_DOCSTR("VarArray()\nCDSVarArray"), /*tp_doc*/

#line 979 "numpy.pxd"
  0, /*tp_traverse*/

#line 979 "numpy.pxd"
  0, /*tp_clear*/

#line 979 "numpy.pxd"
  0, /*tp_richcompare*/

#line 979 "numpy.pxd"
  0, /*tp_weaklistoffset*/

#line 979 "numpy.pxd"
  0, /*tp_iter*/

#line 979 "numpy.pxd"
  0, /*tp_iternext*/

#line 979 "numpy.pxd"
  __pyx_methods_4cds3_4core_VarArray, /*tp_methods*/

#line 979 "numpy.pxd"
  0, /*tp_members*/

#line 979 "numpy.pxd"
  0, /*tp_getset*/

#line 979 "numpy.pxd"
  0, /*tp_base*/

#line 979 "numpy.pxd"
  0, /*tp_dict*/

#line 979 "numpy.pxd"
  0, /*tp_descr_get*/

#line 979 "numpy.pxd"
  0, /*tp_descr_set*/

#line 979 "numpy.pxd"
  0, /*tp_dictoffset*/

#line 979 "numpy.pxd"
  __pyx_pw_4cds3_4core_8VarArray_3__init__, /*tp_init*/

#line 979 "numpy.pxd"
  0, /*tp_alloc*/

#line 979 "numpy.pxd"
  __pyx_tp_new_4cds3_4core_VarArray, /*tp_new*/

#line 979 "numpy.pxd"
  0, /*tp_free*/

#line 979 "numpy.pxd"
  0, /*tp_is_gc*/

#line 979 "numpy.pxd"
  0, /*tp_bases*/

#line 979 "numpy.pxd"
  0, /*tp_mro*/

#line 979 "numpy.pxd"
  0, /*tp_cache*/

#line 979 "numpy.pxd"
  0, /*tp_subclasses*/

#line 979 "numpy.pxd"
  0, /*tp_weaklist*/

#line 979 "numpy.pxd"
  0, /*tp_del*/

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02060000

#line 979 "numpy.pxd"
  0, /*tp_version_tag*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyMethodDef __pyx_methods[] = {

#line 979 "numpy.pxd"
  {0, 0, 0, 0}

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
#if PY_MAJOR_VERSION >= 3

#line 979 "numpy.pxd"
static struct PyModuleDef __pyx_moduledef = {

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX < 0x03020000

#line 979 "numpy.pxd"
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },

#line 979 "numpy.pxd"
  #else

#line 979 "numpy.pxd"
    PyModuleDef_HEAD_INIT,

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
    __Pyx_NAMESTR("core"),

#line 979 "numpy.pxd"
    0, /* m_doc */

#line 979 "numpy.pxd"
    -1, /* m_size */

#line 979 "numpy.pxd"
    __pyx_methods /* m_methods */,

#line 979 "numpy.pxd"
    NULL, /* m_reload */

#line 979 "numpy.pxd"
    NULL, /* m_traverse */

#line 979 "numpy.pxd"
    NULL, /* m_clear */

#line 979 "numpy.pxd"
    NULL /* m_free */

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_u_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 1, 0, 0},
  {&__pyx_kp_u_12, __pyx_k_12, sizeof(__pyx_k_12), 0, 1, 0, 0},
  {&__pyx_kp_u_15, __pyx_k_15, sizeof(__pyx_k_15), 0, 1, 0, 0},
  {&__pyx_kp_s_19, __pyx_k_19, sizeof(__pyx_k_19), 0, 0, 1, 0},
  {&__pyx_kp_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 0},
  {&__pyx_n_s_20, __pyx_k_20, sizeof(__pyx_k_20), 0, 0, 1, 1},
  {&__pyx_kp_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 0},
  {&__pyx_kp_u_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 1, 0, 0},
  {&__pyx_kp_u_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 1, 0, 0},
  {&__pyx_kp_u_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 1, 0, 0},
  {&__pyx_n_s__CDS_NAT, __pyx_k__CDS_NAT, sizeof(__pyx_k__CDS_NAT), 0, 0, 1, 1},
  {&__pyx_n_s__NotImplementedError, __pyx_k__NotImplementedError, sizeof(__pyx_k__NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s__RuntimeError, __pyx_k__RuntimeError, sizeof(__pyx_k__RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s__TODO, __pyx_k__TODO, sizeof(__pyx_k__TODO), 0, 0, 1, 1},
  {&__pyx_n_s__ValueError, __pyx_k__ValueError, sizeof(__pyx_k__ValueError), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__asarray, __pyx_k__asarray, sizeof(__pyx_k__asarray), 0, 0, 1, 1},
  {&__pyx_n_s__att, __pyx_k__att, sizeof(__pyx_k__att), 0, 0, 1, 1},
  {&__pyx_n_s__basestring, __pyx_k__basestring, sizeof(__pyx_k__basestring), 0, 0, 1, 1},
  {&__pyx_n_s__cds_group, __pyx_k__cds_group, sizeof(__pyx_k__cds_group), 0, 0, 1, 1},
  {&__pyx_n_s__data, __pyx_k__data, sizeof(__pyx_k__data), 0, 0, 1, 1},
  {&__pyx_n_s__define, __pyx_k__define, sizeof(__pyx_k__define), 0, 0, 1, 1},
  {&__pyx_n_s__delete, __pyx_k__delete, sizeof(__pyx_k__delete), 0, 0, 1, 1},
  {&__pyx_n_s__dim, __pyx_k__dim, sizeof(__pyx_k__dim), 0, 0, 1, 1},
  {&__pyx_n_s__dim_names, __pyx_k__dim_names, sizeof(__pyx_k__dim_names), 0, 0, 1, 1},
  {&__pyx_n_s__fd, __pyx_k__fd, sizeof(__pyx_k__fd), 0, 0, 1, 1},
  {&__pyx_n_s__file_like, __pyx_k__file_like, sizeof(__pyx_k__file_like), 0, 0, 1, 1},
  {&__pyx_n_s__fileno, __pyx_k__fileno, sizeof(__pyx_k__fileno), 0, 0, 1, 1},
  {&__pyx_n_s__flags, __pyx_k__flags, sizeof(__pyx_k__flags), 0, 0, 1, 1},
  {&__pyx_n_s__float32, __pyx_k__float32, sizeof(__pyx_k__float32), 0, 0, 1, 1},
  {&__pyx_n_s__float64, __pyx_k__float64, sizeof(__pyx_k__float64), 0, 0, 1, 1},
  {&__pyx_n_s__flush, __pyx_k__flush, sizeof(__pyx_k__flush), 0, 0, 1, 1},
  {&__pyx_n_s__fp, __pyx_k__fp, sizeof(__pyx_k__fp), 0, 0, 1, 1},
  {&__pyx_n_s__get, __pyx_k__get, sizeof(__pyx_k__get), 0, 0, 1, 1},
  {&__pyx_n_s__get_datap, __pyx_k__get_datap, sizeof(__pyx_k__get_datap), 0, 0, 1, 1},
  {&__pyx_n_s__group, __pyx_k__group, sizeof(__pyx_k__group), 0, 0, 1, 1},
  {&__pyx_n_s__indent, __pyx_k__indent, sizeof(__pyx_k__indent), 0, 0, 1, 1},
  {&__pyx_n_s__int16, __pyx_k__int16, sizeof(__pyx_k__int16), 0, 0, 1, 1},
  {&__pyx_n_s__int32, __pyx_k__int32, sizeof(__pyx_k__int32), 0, 0, 1, 1},
  {&__pyx_n_s__int8, __pyx_k__int8, sizeof(__pyx_k__int8), 0, 0, 1, 1},
  {&__pyx_n_s__is_unlimited, __pyx_k__is_unlimited, sizeof(__pyx_k__is_unlimited), 0, 0, 1, 1},
  {&__pyx_n_s__key, __pyx_k__key, sizeof(__pyx_k__key), 0, 0, 1, 1},
  {&__pyx_n_s__label, __pyx_k__label, sizeof(__pyx_k__label), 0, 0, 1, 1},
  {&__pyx_n_s__length, __pyx_k__length, sizeof(__pyx_k__length), 0, 0, 1, 1},
  {&__pyx_n_s__min_width, __pyx_k__min_width, sizeof(__pyx_k__min_width), 0, 0, 1, 1},
  {&__pyx_n_s__missing_value, __pyx_k__missing_value, sizeof(__pyx_k__missing_value), 0, 0, 1, 1},
  {&__pyx_n_s__name, __pyx_k__name, sizeof(__pyx_k__name), 0, 0, 1, 1},
  {&__pyx_n_s__np, __pyx_k__np, sizeof(__pyx_k__np), 0, 0, 1, 1},
  {&__pyx_n_s__num, __pyx_k__num, sizeof(__pyx_k__num), 0, 0, 1, 1},
  {&__pyx_n_s__numpy, __pyx_k__numpy, sizeof(__pyx_k__numpy), 0, 0, 1, 1},
  {&__pyx_n_s__overwrite, __pyx_k__overwrite, sizeof(__pyx_k__overwrite), 0, 0, 1, 1},
  {&__pyx_n_s__parent, __pyx_k__parent, sizeof(__pyx_k__parent), 0, 0, 1, 1},
  {&__pyx_n_s__print_all, __pyx_k__print_all, sizeof(__pyx_k__print_all), 0, 0, 1, 1},
  {&__pyx_n_s__print_att, __pyx_k__print_att, sizeof(__pyx_k__print_att), 0, 0, 1, 1},
  {&__pyx_n_s__print_atts, __pyx_k__print_atts, sizeof(__pyx_k__print_atts), 0, 0, 1, 1},
  {&__pyx_n_s__print_data, __pyx_k__print_data, sizeof(__pyx_k__print_data), 0, 0, 1, 1},
  {&__pyx_n_s__print_dim, __pyx_k__print_dim, sizeof(__pyx_k__print_dim), 0, 0, 1, 1},
  {&__pyx_n_s__print_dims, __pyx_k__print_dims, sizeof(__pyx_k__print_dims), 0, 0, 1, 1},
  {&__pyx_n_s__print_group, __pyx_k__print_group, sizeof(__pyx_k__print_group), 0, 0, 1, 1},
  {&__pyx_n_s__print_groups, __pyx_k__print_groups, sizeof(__pyx_k__print_groups), 0, 0, 1, 1},
  {&__pyx_n_s__print_var, __pyx_k__print_var, sizeof(__pyx_k__print_var), 0, 0, 1, 1},
  {&__pyx_n_s__print_var_data, __pyx_k__print_var_data, sizeof(__pyx_k__print_var_data), 0, 0, 1, 1},
  {&__pyx_n_s__print_vararray, __pyx_k__print_vararray, sizeof(__pyx_k__print_vararray), 0, 0, 1, 1},
  {&__pyx_n_s__print_vargroup, __pyx_k__print_vargroup, sizeof(__pyx_k__print_vargroup), 0, 0, 1, 1},
  {&__pyx_n_s__print_vargroups, __pyx_k__print_vargroups, sizeof(__pyx_k__print_vargroups), 0, 0, 1, 1},
  {&__pyx_n_s__print_vars, __pyx_k__print_vars, sizeof(__pyx_k__print_vars), 0, 0, 1, 1},
  {&__pyx_n_s__range, __pyx_k__range, sizeof(__pyx_k__range), 0, 0, 1, 1},
  {&__pyx_n_s__retval, __pyx_k__retval, sizeof(__pyx_k__retval), 0, 0, 1, 1},
  {&__pyx_n_s__sample_count, __pyx_k__sample_count, sizeof(__pyx_k__sample_count), 0, 0, 1, 1},
  {&__pyx_n_s__sample_start, __pyx_k__sample_start, sizeof(__pyx_k__sample_start), 0, 0, 1, 1},
  {&__pyx_n_s__static_vars, __pyx_k__static_vars, sizeof(__pyx_k__static_vars), 0, 0, 1, 1},
  {&__pyx_n_s__staticmethod, __pyx_k__staticmethod, sizeof(__pyx_k__staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s__str, __pyx_k__str, sizeof(__pyx_k__str), 0, 0, 1, 1},
  {&__pyx_n_s__text, __pyx_k__text, sizeof(__pyx_k__text), 0, 0, 1, 1},
  {&__pyx_n_s__type, __pyx_k__type, sizeof(__pyx_k__type), 0, 0, 1, 1},
  {&__pyx_n_s__units, __pyx_k__units, sizeof(__pyx_k__units), 0, 0, 1, 1},
  {&__pyx_n_s__unlim_vars, __pyx_k__unlim_vars, sizeof(__pyx_k__unlim_vars), 0, 0, 1, 1},
  {&__pyx_n_s__use_missing, __pyx_k__use_missing, sizeof(__pyx_k__use_missing), 0, 0, 1, 1},
  {&__pyx_n_s__user_data, __pyx_k__user_data, sizeof(__pyx_k__user_data), 0, 0, 1, 1},
  {&__pyx_n_s__value, __pyx_k__value, sizeof(__pyx_k__value), 0, 0, 1, 1},
  {&__pyx_n_s__var, __pyx_k__var, sizeof(__pyx_k__var), 0, 0, 1, 1},
  {&__pyx_n_s__vararray, __pyx_k__vararray, sizeof(__pyx_k__vararray), 0, 0, 1, 1},
  {&__pyx_n_s__vargroup, __pyx_k__vargroup, sizeof(__pyx_k__vargroup), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetName(__pyx_b, __pyx_n_s__staticmethod); if (!__pyx_builtin_staticmethod) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetName(__pyx_b, __pyx_n_s__ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetName(__pyx_b, __pyx_n_s__range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_basestring = __Pyx_GetName(__pyx_b, __pyx_n_s__basestring); if (!__pyx_builtin_basestring) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_NotImplementedError = __Pyx_GetName(__pyx_b, __pyx_n_s__NotImplementedError); if (!__pyx_builtin_NotImplementedError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetName(__pyx_b, __pyx_n_s__RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "cds3/core.pyx":1516
 *                 missing_ptr, NULL)
 *         if ptr == NULL:
 *             return None,None             # <<<<<<<<<<<<<<
 *         dims = <np.npy_intp*>malloc(sizeof(np.npy_intp) * ndims)
 *         for i in range(ndims):
 */

#line 1516 "cds3/core.pyx"
  __pyx_k_tuple_4 = PyTuple_Pack(2, Py_None, Py_None); if (unlikely(!__pyx_k_tuple_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1516 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_4);

#line 1516 "cds3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_4));

  /* "numpy.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */

#line 215 "numpy.pxd"
  __pyx_k_tuple_6 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_u_5)); if (unlikely(!__pyx_k_tuple_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 215 "numpy.pxd"
  __Pyx_GOTREF(__pyx_k_tuple_6);

#line 215 "numpy.pxd"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_6));

  /* "numpy.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */

#line 219 "numpy.pxd"
  __pyx_k_tuple_8 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_u_7)); if (unlikely(!__pyx_k_tuple_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 219 "numpy.pxd"
  __Pyx_GOTREF(__pyx_k_tuple_8);

#line 219 "numpy.pxd"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_8));

  /* "numpy.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */

#line 257 "numpy.pxd"
  __pyx_k_tuple_10 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_u_9)); if (unlikely(!__pyx_k_tuple_10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 257 "numpy.pxd"
  __Pyx_GOTREF(__pyx_k_tuple_10);

#line 257 "numpy.pxd"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_10));

  /* "numpy.pxd":799
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */

#line 799 "numpy.pxd"
  __pyx_k_tuple_13 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_u_12)); if (unlikely(!__pyx_k_tuple_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 799 "numpy.pxd"
  __Pyx_GOTREF(__pyx_k_tuple_13);

#line 799 "numpy.pxd"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_13));

  /* "numpy.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */

#line 803 "numpy.pxd"
  __pyx_k_tuple_14 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_u_9)); if (unlikely(!__pyx_k_tuple_14)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 803 "numpy.pxd"
  __Pyx_GOTREF(__pyx_k_tuple_14);

#line 803 "numpy.pxd"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_14));

  /* "numpy.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */

#line 823 "numpy.pxd"
  __pyx_k_tuple_16 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_u_15)); if (unlikely(!__pyx_k_tuple_16)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 823 "numpy.pxd"
  __Pyx_GOTREF(__pyx_k_tuple_16);

#line 823 "numpy.pxd"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_16));

  /* "cds3/core.pyx":350
 * 
 *     @staticmethod
 *     def define(Group parent, char *name):             # <<<<<<<<<<<<<<
 *         """Define a CDS Group.
 * 
 */

#line 350 "cds3/core.pyx"
  __pyx_k_tuple_17 = PyTuple_Pack(4, ((PyObject *)__pyx_n_s__parent), ((PyObject *)__pyx_n_s__name), ((PyObject *)__pyx_n_s__cds_group), ((PyObject *)__pyx_n_s__group)); if (unlikely(!__pyx_k_tuple_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 350 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_17);

#line 350 "cds3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_17));

#line 350 "cds3/core.pyx"
  __pyx_k_codeobj_18 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_19, __pyx_n_s__define, 350, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "cds3/core.pyx":382
 * 
 *     @staticmethod
 *     def delete(Group group):             # <<<<<<<<<<<<<<
 *         """Delete a CDS Group.
 * 
 */

#line 382 "cds3/core.pyx"
  __pyx_k_tuple_21 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__group), ((PyObject *)__pyx_n_s__retval)); if (unlikely(!__pyx_k_tuple_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 382 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_21);

#line 382 "cds3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_21));

#line 382 "cds3/core.pyx"
  __pyx_k_codeobj_22 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_19, __pyx_n_s__delete, 382, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "cds3/core.pyx":764
 * 
 *     @staticmethod
 *     def delete(Dim dim):             # <<<<<<<<<<<<<<
 *         """Delete a CDS Dimension.
 * 
 */

#line 764 "cds3/core.pyx"
  __pyx_k_tuple_23 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__dim), ((PyObject *)__pyx_n_s__retval)); if (unlikely(!__pyx_k_tuple_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 764 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_23);

#line 764 "cds3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_23));

#line 764 "cds3/core.pyx"
  __pyx_k_codeobj_24 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_23, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_19, __pyx_n_s__delete, 764, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "cds3/core.pyx":883
 * 
 *     @staticmethod
 *     def delete(Att att):             # <<<<<<<<<<<<<<
 *         """Delete a CDS Attribute.
 * 
 */

#line 883 "cds3/core.pyx"
  __pyx_k_tuple_25 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__att), ((PyObject *)__pyx_n_s__retval)); if (unlikely(!__pyx_k_tuple_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 883 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_25);

#line 883 "cds3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_25));

#line 883 "cds3/core.pyx"
  __pyx_k_codeobj_26 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_19, __pyx_n_s__delete, 883, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "cds3/core.pyx":1095
 *     ###################################################################
 *     @staticmethod
 *     def delete(Var var):             # <<<<<<<<<<<<<<
 *         """Delete a CDS Variable.
 * 
 */

#line 1095 "cds3/core.pyx"
  __pyx_k_tuple_27 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__var), ((PyObject *)__pyx_n_s__retval)); if (unlikely(!__pyx_k_tuple_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1095; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1095 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_27);

#line 1095 "cds3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_27));

#line 1095 "cds3/core.pyx"
  __pyx_k_codeobj_28 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_19, __pyx_n_s__delete, 1095, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1095; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "cds3/core.pyx":1666
 * 
 * 
 * def print_all(object file_like, Group group, int flags):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1666 "cds3/core.pyx"
  __pyx_k_tuple_29 = PyTuple_Pack(5, ((PyObject *)__pyx_n_s__file_like), ((PyObject *)__pyx_n_s__group), ((PyObject *)__pyx_n_s__flags), ((PyObject *)__pyx_n_s__fp), ((PyObject *)__pyx_n_s__fd)); if (unlikely(!__pyx_k_tuple_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1666 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_29);

#line 1666 "cds3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_29));

#line 1666 "cds3/core.pyx"
  __pyx_k_codeobj_30 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_19, __pyx_n_s__print_all, 1666, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "cds3/core.pyx":1676
 *     fflush(fp)
 * 
 * def print_att(object file_like, char *indent, int  min_width, Att att):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1676 "cds3/core.pyx"
  __pyx_k_tuple_31 = PyTuple_Pack(6, ((PyObject *)__pyx_n_s__file_like), ((PyObject *)__pyx_n_s__indent), ((PyObject *)__pyx_n_s__min_width), ((PyObject *)__pyx_n_s__att), ((PyObject *)__pyx_n_s__fp), ((PyObject *)__pyx_n_s__fd)); if (unlikely(!__pyx_k_tuple_31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1676 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_31);

#line 1676 "cds3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_31));

#line 1676 "cds3/core.pyx"
  __pyx_k_codeobj_32 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_19, __pyx_n_s__print_att, 1676, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "cds3/core.pyx":1686
 *     fflush(fp)
 * 
 * def print_atts(object file_like, char *indent, Object parent):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1686 "cds3/core.pyx"
  __pyx_k_tuple_33 = PyTuple_Pack(5, ((PyObject *)__pyx_n_s__file_like), ((PyObject *)__pyx_n_s__indent), ((PyObject *)__pyx_n_s__parent), ((PyObject *)__pyx_n_s__fp), ((PyObject *)__pyx_n_s__fd)); if (unlikely(!__pyx_k_tuple_33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1686 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_33);

#line 1686 "cds3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_33));

#line 1686 "cds3/core.pyx"
  __pyx_k_codeobj_34 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_19, __pyx_n_s__print_atts, 1686, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_34)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "cds3/core.pyx":1696
 *     fflush(fp)
 * 
 * def print_dim(object file_like, char *indent, int min_width, Dim dim):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1696 "cds3/core.pyx"
  __pyx_k_tuple_35 = PyTuple_Pack(6, ((PyObject *)__pyx_n_s__file_like), ((PyObject *)__pyx_n_s__indent), ((PyObject *)__pyx_n_s__min_width), ((PyObject *)__pyx_n_s__dim), ((PyObject *)__pyx_n_s__fp), ((PyObject *)__pyx_n_s__fd)); if (unlikely(!__pyx_k_tuple_35)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1696 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_35);

#line 1696 "cds3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_35));

#line 1696 "cds3/core.pyx"
  __pyx_k_codeobj_36 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_35, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_19, __pyx_n_s__print_dim, 1696, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_36)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "cds3/core.pyx":1706
 *     fflush(fp)
 * 
 * def print_dims(object file_like, char *indent, Group group):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1706 "cds3/core.pyx"
  __pyx_k_tuple_37 = PyTuple_Pack(5, ((PyObject *)__pyx_n_s__file_like), ((PyObject *)__pyx_n_s__indent), ((PyObject *)__pyx_n_s__group), ((PyObject *)__pyx_n_s__fp), ((PyObject *)__pyx_n_s__fd)); if (unlikely(!__pyx_k_tuple_37)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1706 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_37);

#line 1706 "cds3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_37));

#line 1706 "cds3/core.pyx"
  __pyx_k_codeobj_38 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_19, __pyx_n_s__print_dims, 1706, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_38)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "cds3/core.pyx":1716
 *     fflush(fp)
 * 
 * def print_var(object file_like, char *indent, Var var, int flags):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1716 "cds3/core.pyx"
  __pyx_k_tuple_39 = PyTuple_Pack(6, ((PyObject *)__pyx_n_s__file_like), ((PyObject *)__pyx_n_s__indent), ((PyObject *)__pyx_n_s__var), ((PyObject *)__pyx_n_s__flags), ((PyObject *)__pyx_n_s__fp), ((PyObject *)__pyx_n_s__fd)); if (unlikely(!__pyx_k_tuple_39)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1716 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_39);

#line 1716 "cds3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_39));

#line 1716 "cds3/core.pyx"
  __pyx_k_codeobj_40 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_19, __pyx_n_s__print_var, 1716, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_40)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "cds3/core.pyx":1726
 *     fflush(fp)
 * 
 * def print_vars(object file_like, char *indent, Group group, int flags):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1726 "cds3/core.pyx"
  __pyx_k_tuple_41 = PyTuple_Pack(6, ((PyObject *)__pyx_n_s__file_like), ((PyObject *)__pyx_n_s__indent), ((PyObject *)__pyx_n_s__group), ((PyObject *)__pyx_n_s__flags), ((PyObject *)__pyx_n_s__fp), ((PyObject *)__pyx_n_s__fd)); if (unlikely(!__pyx_k_tuple_41)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1726 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_41);

#line 1726 "cds3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_41));

#line 1726 "cds3/core.pyx"
  __pyx_k_codeobj_42 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_19, __pyx_n_s__print_vars, 1726, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_42)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "cds3/core.pyx":1736
 *     fflush(fp)
 * 
 * def print_var_data(object file_like, char *label, char *indent, Var var):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1736 "cds3/core.pyx"
  __pyx_k_tuple_43 = PyTuple_Pack(6, ((PyObject *)__pyx_n_s__file_like), ((PyObject *)__pyx_n_s__label), ((PyObject *)__pyx_n_s__indent), ((PyObject *)__pyx_n_s__var), ((PyObject *)__pyx_n_s__fp), ((PyObject *)__pyx_n_s__fd)); if (unlikely(!__pyx_k_tuple_43)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1736 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_43);

#line 1736 "cds3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_43));

#line 1736 "cds3/core.pyx"
  __pyx_k_codeobj_44 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_43, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_19, __pyx_n_s__print_var_data, 1736, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_44)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "cds3/core.pyx":1746
 *     fflush(fp)
 * 
 * def print_data(object file_like, char *indent, Group group):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1746 "cds3/core.pyx"
  __pyx_k_tuple_45 = PyTuple_Pack(5, ((PyObject *)__pyx_n_s__file_like), ((PyObject *)__pyx_n_s__indent), ((PyObject *)__pyx_n_s__group), ((PyObject *)__pyx_n_s__fp), ((PyObject *)__pyx_n_s__fd)); if (unlikely(!__pyx_k_tuple_45)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1746 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_45);

#line 1746 "cds3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_45));

#line 1746 "cds3/core.pyx"
  __pyx_k_codeobj_46 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_19, __pyx_n_s__print_data, 1746, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_46)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "cds3/core.pyx":1756
 *     fflush(fp)
 * 
 * def print_group(object file_like, char *indent, Group group, int flags):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1756 "cds3/core.pyx"
  __pyx_k_tuple_47 = PyTuple_Pack(6, ((PyObject *)__pyx_n_s__file_like), ((PyObject *)__pyx_n_s__indent), ((PyObject *)__pyx_n_s__group), ((PyObject *)__pyx_n_s__flags), ((PyObject *)__pyx_n_s__fp), ((PyObject *)__pyx_n_s__fd)); if (unlikely(!__pyx_k_tuple_47)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1756; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1756 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_47);

#line 1756 "cds3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_47));

#line 1756 "cds3/core.pyx"
  __pyx_k_codeobj_48 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_47, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_19, __pyx_n_s__print_group, 1756, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_48)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1756; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "cds3/core.pyx":1766
 *     fflush(fp)
 * 
 * def print_groups(object file_like, char *indent, Group group, int flags):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1766 "cds3/core.pyx"
  __pyx_k_tuple_49 = PyTuple_Pack(6, ((PyObject *)__pyx_n_s__file_like), ((PyObject *)__pyx_n_s__indent), ((PyObject *)__pyx_n_s__group), ((PyObject *)__pyx_n_s__flags), ((PyObject *)__pyx_n_s__fp), ((PyObject *)__pyx_n_s__fd)); if (unlikely(!__pyx_k_tuple_49)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1766 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_49);

#line 1766 "cds3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_49));

#line 1766 "cds3/core.pyx"
  __pyx_k_codeobj_50 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_19, __pyx_n_s__print_groups, 1766, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_50)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "cds3/core.pyx":1776
 *     fflush(fp)
 * 
 * def print_vararray(object file_like, char *indent, VarArray vararray, int flags):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1776 "cds3/core.pyx"
  __pyx_k_tuple_51 = PyTuple_Pack(6, ((PyObject *)__pyx_n_s__file_like), ((PyObject *)__pyx_n_s__indent), ((PyObject *)__pyx_n_s__vararray), ((PyObject *)__pyx_n_s__flags), ((PyObject *)__pyx_n_s__fp), ((PyObject *)__pyx_n_s__fd)); if (unlikely(!__pyx_k_tuple_51)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1776; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1776 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_51);

#line 1776 "cds3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_51));

#line 1776 "cds3/core.pyx"
  __pyx_k_codeobj_52 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_19, __pyx_n_s__print_vararray, 1776, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_52)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1776; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "cds3/core.pyx":1786
 *     fflush(fp)
 * 
 * def print_vargroup(object file_like, char *indent, VarGroup vargroup, int flags):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1786 "cds3/core.pyx"
  __pyx_k_tuple_53 = PyTuple_Pack(6, ((PyObject *)__pyx_n_s__file_like), ((PyObject *)__pyx_n_s__indent), ((PyObject *)__pyx_n_s__vargroup), ((PyObject *)__pyx_n_s__flags), ((PyObject *)__pyx_n_s__fp), ((PyObject *)__pyx_n_s__fd)); if (unlikely(!__pyx_k_tuple_53)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1786 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_53);

#line 1786 "cds3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_53));

#line 1786 "cds3/core.pyx"
  __pyx_k_codeobj_54 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_19, __pyx_n_s__print_vargroup, 1786, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_54)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "cds3/core.pyx":1796
 *     fflush(fp)
 * 
 * def print_vargroups(object file_like, char *indent, Group group, int flags):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1796 "cds3/core.pyx"
  __pyx_k_tuple_55 = PyTuple_Pack(6, ((PyObject *)__pyx_n_s__file_like), ((PyObject *)__pyx_n_s__indent), ((PyObject *)__pyx_n_s__group), ((PyObject *)__pyx_n_s__flags), ((PyObject *)__pyx_n_s__fp), ((PyObject *)__pyx_n_s__fd)); if (unlikely(!__pyx_k_tuple_55)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1796 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_55);

#line 1796 "cds3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_55));

#line 1796 "cds3/core.pyx"
  __pyx_k_codeobj_56 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_19, __pyx_n_s__print_vargroups, 1796, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_56)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1796 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1796 "cds3/core.pyx"
  return 0;

#line 1796 "cds3/core.pyx"
  __pyx_L1_error:;

#line 1796 "cds3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1796 "cds3/core.pyx"
  return -1;

#line 1796 "cds3/core.pyx"
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_15 = PyInt_FromLong(15); if (unlikely(!__pyx_int_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initcore(void); /*proto*/
PyMODINIT_FUNC initcore(void)
#else
PyMODINIT_FUNC PyInit_core(void); /*proto*/
PyMODINIT_FUNC PyInit_core(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_core(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("core"), __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "cds3.core")) {
      if (unlikely(PyDict_SetItemString(modules, "cds3.core", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_cds3__core) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_4cds3_4core_Object = &__pyx_vtable_4cds3_4core_Object;
  __pyx_vtable_4cds3_4core_Object.set_object = (PyObject *(*)(struct __pyx_obj_4cds3_4core_Object *, struct CDSObject *))__pyx_f_4cds3_4core_6Object_set_object;
  if (PyType_Ready(&__pyx_type_4cds3_4core_Object) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_4cds3_4core_Object, "__init__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_4cds3_4core_6Object_2__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_4cds3_4core_6Object_2__init__.doc = __pyx_doc_4cds3_4core_6Object_2__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_4cds3_4core_6Object_2__init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_4cds3_4core_Object.tp_dict, __pyx_vtabptr_4cds3_4core_Object) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Object", (PyObject *)&__pyx_type_4cds3_4core_Object) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4cds3_4core_Object = &__pyx_type_4cds3_4core_Object;
  __pyx_vtabptr_4cds3_4core_Group = &__pyx_vtable_4cds3_4core_Group;
  __pyx_vtable_4cds3_4core_Group.__pyx_base = *__pyx_vtabptr_4cds3_4core_Object;
  __pyx_vtable_4cds3_4core_Group.set_group = (PyObject *(*)(struct __pyx_obj_4cds3_4core_Group *, struct CDSGroup *))__pyx_f_4cds3_4core_5Group_set_group;
  __pyx_type_4cds3_4core_Group.tp_base = __pyx_ptype_4cds3_4core_Object;
  if (PyType_Ready(&__pyx_type_4cds3_4core_Group) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_4cds3_4core_Group, "__init__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_4cds3_4core_5Group_6__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_4cds3_4core_5Group_6__init__.doc = __pyx_doc_4cds3_4core_5Group_6__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_4cds3_4core_5Group_6__init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_4cds3_4core_Group.tp_dict, __pyx_vtabptr_4cds3_4core_Group) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Group", (PyObject *)&__pyx_type_4cds3_4core_Group) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4cds3_4core_Group = &__pyx_type_4cds3_4core_Group;
  __pyx_vtabptr_4cds3_4core_Dim = &__pyx_vtable_4cds3_4core_Dim;
  __pyx_vtable_4cds3_4core_Dim.__pyx_base = *__pyx_vtabptr_4cds3_4core_Object;
  __pyx_vtable_4cds3_4core_Dim.set_dim = (PyObject *(*)(struct __pyx_obj_4cds3_4core_Dim *, struct CDSDim *))__pyx_f_4cds3_4core_3Dim_set_dim;
  __pyx_type_4cds3_4core_Dim.tp_base = __pyx_ptype_4cds3_4core_Object;
  if (PyType_Ready(&__pyx_type_4cds3_4core_Dim) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 760; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_4cds3_4core_Dim, "__init__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 760; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_4cds3_4core_3Dim_4__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_4cds3_4core_3Dim_4__init__.doc = __pyx_doc_4cds3_4core_3Dim_4__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_4cds3_4core_3Dim_4__init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_4cds3_4core_Dim.tp_dict, __pyx_vtabptr_4cds3_4core_Dim) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 760; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Dim", (PyObject *)&__pyx_type_4cds3_4core_Dim) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 760; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4cds3_4core_Dim = &__pyx_type_4cds3_4core_Dim;
  __pyx_vtabptr_4cds3_4core_Att = &__pyx_vtable_4cds3_4core_Att;
  __pyx_vtable_4cds3_4core_Att.__pyx_base = *__pyx_vtabptr_4cds3_4core_Object;
  __pyx_vtable_4cds3_4core_Att.set_att = (PyObject *(*)(struct __pyx_obj_4cds3_4core_Att *, struct CDSAtt *))__pyx_f_4cds3_4core_3Att_set_att;
  __pyx_type_4cds3_4core_Att.tp_base = __pyx_ptype_4cds3_4core_Object;
  if (PyType_Ready(&__pyx_type_4cds3_4core_Att) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 879; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_4cds3_4core_Att, "__init__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 879; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_4cds3_4core_3Att_4__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_4cds3_4core_3Att_4__init__.doc = __pyx_doc_4cds3_4core_3Att_4__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_4cds3_4core_3Att_4__init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_4cds3_4core_Att.tp_dict, __pyx_vtabptr_4cds3_4core_Att) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 879; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Att", (PyObject *)&__pyx_type_4cds3_4core_Att) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 879; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4cds3_4core_Att = &__pyx_type_4cds3_4core_Att;
  __pyx_vtabptr_4cds3_4core_Var = &__pyx_vtable_4cds3_4core_Var;
  __pyx_vtable_4cds3_4core_Var.__pyx_base = *__pyx_vtabptr_4cds3_4core_Object;
  __pyx_vtable_4cds3_4core_Var.set_var = (PyObject *(*)(struct __pyx_obj_4cds3_4core_Var *, struct CDSVar *))__pyx_f_4cds3_4core_3Var_set_var;
  __pyx_vtable_4cds3_4core_Var.get_datap = (PyArrayObject *(*)(struct __pyx_obj_4cds3_4core_Var *, int __pyx_skip_dispatch, struct __pyx_opt_args_4cds3_4core_3Var_get_datap *__pyx_optional_args))__pyx_f_4cds3_4core_3Var_get_datap;
  __pyx_type_4cds3_4core_Var.tp_base = __pyx_ptype_4cds3_4core_Object;
  if (PyType_Ready(&__pyx_type_4cds3_4core_Var) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_4cds3_4core_Var, "__init__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_4cds3_4core_3Var_4__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_4cds3_4core_3Var_4__init__.doc = __pyx_doc_4cds3_4core_3Var_4__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_4cds3_4core_3Var_4__init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_4cds3_4core_Var.tp_dict, __pyx_vtabptr_4cds3_4core_Var) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Var", (PyObject *)&__pyx_type_4cds3_4core_Var) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1088; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4cds3_4core_Var = &__pyx_type_4cds3_4core_Var;
  __pyx_vtabptr_4cds3_4core_VarGroup = &__pyx_vtable_4cds3_4core_VarGroup;
  __pyx_vtable_4cds3_4core_VarGroup.__pyx_base = *__pyx_vtabptr_4cds3_4core_Object;
  __pyx_vtable_4cds3_4core_VarGroup.set_vargroup = (PyObject *(*)(struct __pyx_obj_4cds3_4core_VarGroup *, struct CDSVarGroup *))__pyx_f_4cds3_4core_8VarGroup_set_vargroup;
  __pyx_type_4cds3_4core_VarGroup.tp_base = __pyx_ptype_4cds3_4core_Object;
  if (PyType_Ready(&__pyx_type_4cds3_4core_VarGroup) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_4cds3_4core_VarGroup.tp_dict, __pyx_vtabptr_4cds3_4core_VarGroup) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "VarGroup", (PyObject *)&__pyx_type_4cds3_4core_VarGroup) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4cds3_4core_VarGroup = &__pyx_type_4cds3_4core_VarGroup;
  __pyx_vtabptr_4cds3_4core_VarArray = &__pyx_vtable_4cds3_4core_VarArray;
  __pyx_vtable_4cds3_4core_VarArray.__pyx_base = *__pyx_vtabptr_4cds3_4core_Object;
  __pyx_vtable_4cds3_4core_VarArray.set_vararray = (PyObject *(*)(struct __pyx_obj_4cds3_4core_VarArray *, struct CDSVarArray *))__pyx_f_4cds3_4core_8VarArray_set_vararray;
  __pyx_type_4cds3_4core_VarArray.tp_base = __pyx_ptype_4cds3_4core_Object;
  if (PyType_Ready(&__pyx_type_4cds3_4core_VarArray) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_4cds3_4core_VarArray.tp_dict, __pyx_vtabptr_4cds3_4core_VarArray) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "VarArray", (PyObject *)&__pyx_type_4cds3_4core_VarArray) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4cds3_4core_VarArray = &__pyx_type_4cds3_4core_VarArray;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "cds3/core.pyx":21
 * 
 * # numpy
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * np.import_array()
 */

#line 21 "cds3/core.pyx"
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__numpy), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 21 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 21 "cds3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__np, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 21 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cds3/core.pyx":23
 * import numpy as np
 * cimport numpy as np
 * np.import_array()             # <<<<<<<<<<<<<<
 * 
 * cdef inline int cds_type_to_dtype(CDSDataType type):
 */

#line 23 "cds3/core.pyx"
  import_array();

  /* "cds3/core.pyx":350
 * 
 *     @staticmethod
 *     def define(Group parent, char *name):             # <<<<<<<<<<<<<<
 *         """Define a CDS Group.
 * 
 */

#line 350 "cds3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4cds3_4core_5Group_1define, NULL, __pyx_n_s_20); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 350 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 350 "cds3/core.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 350 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 350 "cds3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 350 "cds3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 350 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 350 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_builtin_staticmethod, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 350 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 350 "cds3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 350 "cds3/core.pyx"
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cds3_4core_Group->tp_dict, __pyx_n_s__define, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 350 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 350 "cds3/core.pyx"
  PyType_Modified(__pyx_ptype_4cds3_4core_Group);

  /* "cds3/core.pyx":349
 *     ###################################################################
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def define(Group parent, char *name):
 *         """Define a CDS Group.
 */

#line 349 "cds3/core.pyx"
  __pyx_t_1 = __Pyx_GetName((PyObject *)__pyx_ptype_4cds3_4core_Group, __pyx_n_s__define); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 349 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 349 "cds3/core.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 349 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 349 "cds3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 349 "cds3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 349 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 349 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_builtin_staticmethod, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 349 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 349 "cds3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 349 "cds3/core.pyx"
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cds3_4core_Group->tp_dict, __pyx_n_s__define, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 349 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 349 "cds3/core.pyx"
  PyType_Modified(__pyx_ptype_4cds3_4core_Group);

  /* "cds3/core.pyx":382
 * 
 *     @staticmethod
 *     def delete(Group group):             # <<<<<<<<<<<<<<
 *         """Delete a CDS Group.
 * 
 */

#line 382 "cds3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4cds3_4core_5Group_3delete, NULL, __pyx_n_s_20); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 382 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 382 "cds3/core.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 382 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 382 "cds3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 382 "cds3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 382 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 382 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_builtin_staticmethod, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 382 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 382 "cds3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 382 "cds3/core.pyx"
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cds3_4core_Group->tp_dict, __pyx_n_s__delete, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 382 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 382 "cds3/core.pyx"
  PyType_Modified(__pyx_ptype_4cds3_4core_Group);

  /* "cds3/core.pyx":381
 *         return group
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def delete(Group group):
 *         """Delete a CDS Group.
 */

#line 381 "cds3/core.pyx"
  __pyx_t_1 = __Pyx_GetName((PyObject *)__pyx_ptype_4cds3_4core_Group, __pyx_n_s__delete); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 381 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 381 "cds3/core.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 381 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 381 "cds3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 381 "cds3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 381 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 381 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_builtin_staticmethod, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 381 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 381 "cds3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 381 "cds3/core.pyx"
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cds3_4core_Group->tp_dict, __pyx_n_s__delete, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 381 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 381 "cds3/core.pyx"
  PyType_Modified(__pyx_ptype_4cds3_4core_Group);

  /* "cds3/core.pyx":764
 * 
 *     @staticmethod
 *     def delete(Dim dim):             # <<<<<<<<<<<<<<
 *         """Delete a CDS Dimension.
 * 
 */

#line 764 "cds3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4cds3_4core_3Dim_1delete, NULL, __pyx_n_s_20); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 764 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 764 "cds3/core.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 764 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 764 "cds3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 764 "cds3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 764 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 764 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_builtin_staticmethod, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 764 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 764 "cds3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 764 "cds3/core.pyx"
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cds3_4core_Dim->tp_dict, __pyx_n_s__delete, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 764 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 764 "cds3/core.pyx"
  PyType_Modified(__pyx_ptype_4cds3_4core_Dim);

  /* "cds3/core.pyx":763
 *     """CDSDim"""
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def delete(Dim dim):
 *         """Delete a CDS Dimension.
 */

#line 763 "cds3/core.pyx"
  __pyx_t_1 = __Pyx_GetName((PyObject *)__pyx_ptype_4cds3_4core_Dim, __pyx_n_s__delete); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 763 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 763 "cds3/core.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 763 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 763 "cds3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 763 "cds3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 763 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 763 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_builtin_staticmethod, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 763 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 763 "cds3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 763 "cds3/core.pyx"
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cds3_4core_Dim->tp_dict, __pyx_n_s__delete, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 763 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 763 "cds3/core.pyx"
  PyType_Modified(__pyx_ptype_4cds3_4core_Dim);

  /* "cds3/core.pyx":883
 * 
 *     @staticmethod
 *     def delete(Att att):             # <<<<<<<<<<<<<<
 *         """Delete a CDS Attribute.
 * 
 */

#line 883 "cds3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4cds3_4core_3Att_1delete, NULL, __pyx_n_s_20); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 883 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 883 "cds3/core.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 882; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 883 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 883 "cds3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 883 "cds3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 883 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 883 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_builtin_staticmethod, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 882; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 883 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 883 "cds3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 883 "cds3/core.pyx"
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cds3_4core_Att->tp_dict, __pyx_n_s__delete, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 883 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 883 "cds3/core.pyx"
  PyType_Modified(__pyx_ptype_4cds3_4core_Att);

  /* "cds3/core.pyx":882
 *     """CDSAtt"""
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def delete(Att att):
 *         """Delete a CDS Attribute.
 */

#line 882 "cds3/core.pyx"
  __pyx_t_1 = __Pyx_GetName((PyObject *)__pyx_ptype_4cds3_4core_Att, __pyx_n_s__delete); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 882 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 882 "cds3/core.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 882; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 882 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 882 "cds3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 882 "cds3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 882 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 882 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_builtin_staticmethod, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 882; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 882 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 882 "cds3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 882 "cds3/core.pyx"
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cds3_4core_Att->tp_dict, __pyx_n_s__delete, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 882 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 882 "cds3/core.pyx"
  PyType_Modified(__pyx_ptype_4cds3_4core_Att);

  /* "cds3/core.pyx":1095
 *     ###################################################################
 *     @staticmethod
 *     def delete(Var var):             # <<<<<<<<<<<<<<
 *         """Delete a CDS Variable.
 * 
 */

#line 1095 "cds3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4cds3_4core_3Var_1delete, NULL, __pyx_n_s_20); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1095; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1095 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1095 "cds3/core.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1095 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1095 "cds3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 1095 "cds3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 1095 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 1095 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_builtin_staticmethod, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1095 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1095 "cds3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 1095 "cds3/core.pyx"
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cds3_4core_Var->tp_dict, __pyx_n_s__delete, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1095; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1095 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1095 "cds3/core.pyx"
  PyType_Modified(__pyx_ptype_4cds3_4core_Var);

  /* "cds3/core.pyx":1094
 *     # Factory (static) methods
 *     ###################################################################
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def delete(Var var):
 *         """Delete a CDS Variable.
 */

#line 1094 "cds3/core.pyx"
  __pyx_t_1 = __Pyx_GetName((PyObject *)__pyx_ptype_4cds3_4core_Var, __pyx_n_s__delete); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1095; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1094 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1094 "cds3/core.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1094 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1094 "cds3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 1094 "cds3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 1094 "cds3/core.pyx"
  __pyx_t_1 = 0;

#line 1094 "cds3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_builtin_staticmethod, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1094 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1094 "cds3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 1094 "cds3/core.pyx"
  if (PyDict_SetItem((PyObject *)__pyx_ptype_4cds3_4core_Var->tp_dict, __pyx_n_s__delete, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1095; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1094 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1094 "cds3/core.pyx"
  PyType_Modified(__pyx_ptype_4cds3_4core_Var);

  /* "cds3/core.pyx":1666
 * 
 * 
 * def print_all(object file_like, Group group, int flags):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1666 "cds3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4cds3_4core_1print_all, NULL, __pyx_n_s_20); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1666 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1666 "cds3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__print_all, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1666 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cds3/core.pyx":1676
 *     fflush(fp)
 * 
 * def print_att(object file_like, char *indent, int  min_width, Att att):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1676 "cds3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4cds3_4core_3print_att, NULL, __pyx_n_s_20); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1676 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1676 "cds3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__print_att, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1676 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cds3/core.pyx":1686
 *     fflush(fp)
 * 
 * def print_atts(object file_like, char *indent, Object parent):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1686 "cds3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4cds3_4core_5print_atts, NULL, __pyx_n_s_20); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1686 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1686 "cds3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__print_atts, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1686; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1686 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cds3/core.pyx":1696
 *     fflush(fp)
 * 
 * def print_dim(object file_like, char *indent, int min_width, Dim dim):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1696 "cds3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4cds3_4core_7print_dim, NULL, __pyx_n_s_20); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1696 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1696 "cds3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__print_dim, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1696 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cds3/core.pyx":1706
 *     fflush(fp)
 * 
 * def print_dims(object file_like, char *indent, Group group):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1706 "cds3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4cds3_4core_9print_dims, NULL, __pyx_n_s_20); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1706 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1706 "cds3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__print_dims, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1706 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cds3/core.pyx":1716
 *     fflush(fp)
 * 
 * def print_var(object file_like, char *indent, Var var, int flags):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1716 "cds3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4cds3_4core_11print_var, NULL, __pyx_n_s_20); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1716 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1716 "cds3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__print_var, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1716 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cds3/core.pyx":1726
 *     fflush(fp)
 * 
 * def print_vars(object file_like, char *indent, Group group, int flags):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1726 "cds3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4cds3_4core_13print_vars, NULL, __pyx_n_s_20); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1726 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1726 "cds3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__print_vars, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1726 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cds3/core.pyx":1736
 *     fflush(fp)
 * 
 * def print_var_data(object file_like, char *label, char *indent, Var var):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1736 "cds3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4cds3_4core_15print_var_data, NULL, __pyx_n_s_20); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1736 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1736 "cds3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__print_var_data, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1736 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cds3/core.pyx":1746
 *     fflush(fp)
 * 
 * def print_data(object file_like, char *indent, Group group):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1746 "cds3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4cds3_4core_17print_data, NULL, __pyx_n_s_20); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1746 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1746 "cds3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__print_data, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1746 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cds3/core.pyx":1756
 *     fflush(fp)
 * 
 * def print_group(object file_like, char *indent, Group group, int flags):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1756 "cds3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4cds3_4core_19print_group, NULL, __pyx_n_s_20); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1756; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1756 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1756 "cds3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__print_group, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1756; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1756 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cds3/core.pyx":1766
 *     fflush(fp)
 * 
 * def print_groups(object file_like, char *indent, Group group, int flags):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1766 "cds3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4cds3_4core_21print_groups, NULL, __pyx_n_s_20); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1766 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1766 "cds3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__print_groups, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1766 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cds3/core.pyx":1776
 *     fflush(fp)
 * 
 * def print_vararray(object file_like, char *indent, VarArray vararray, int flags):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1776 "cds3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4cds3_4core_23print_vararray, NULL, __pyx_n_s_20); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1776; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1776 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1776 "cds3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__print_vararray, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1776; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1776 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cds3/core.pyx":1786
 *     fflush(fp)
 * 
 * def print_vargroup(object file_like, char *indent, VarGroup vargroup, int flags):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1786 "cds3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4cds3_4core_25print_vargroup, NULL, __pyx_n_s_20); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1786 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1786 "cds3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__print_vargroup, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1786 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cds3/core.pyx":1796
 *     fflush(fp)
 * 
 * def print_vargroups(object file_like, char *indent, Group group, int flags):             # <<<<<<<<<<<<<<
 *     cdef FILE *fp
 *     cdef int fd
 */

#line 1796 "cds3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4cds3_4core_27print_vargroups, NULL, __pyx_n_s_20); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1796 "cds3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1796 "cds3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__print_vargroups, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1796 "cds3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "cds3/core.pyx":1
 * #cython: embedsignature=True             # <<<<<<<<<<<<<<
 * # file cds3.pyx
 * 
 */

#line 1 "cds3/core.pyx"
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1 "cds3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 1 "cds3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1 "cds3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "numpy.pxd":975
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

#line 975 "numpy.pxd"
  goto __pyx_L0;

#line 975 "numpy.pxd"
  __pyx_L1_error:;

#line 975 "numpy.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 975 "numpy.pxd"
  __Pyx_XDECREF(__pyx_t_2);

#line 975 "numpy.pxd"
  if (__pyx_m) {

#line 975 "numpy.pxd"
    __Pyx_AddTraceback("init cds3.core", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 975 "numpy.pxd"
    Py_DECREF(__pyx_m); __pyx_m = 0;

#line 975 "numpy.pxd"
  } else if (!PyErr_Occurred()) {

#line 975 "numpy.pxd"
    PyErr_SetString(PyExc_ImportError, "init cds3.core");

#line 975 "numpy.pxd"
  }

#line 975 "numpy.pxd"
  __pyx_L0:;

#line 975 "numpy.pxd"
  __Pyx_RefNannyFinishContext();

#line 975 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 975 "numpy.pxd"
  return;

#line 975 "numpy.pxd"
  #else

#line 975 "numpy.pxd"
  return __pyx_m;

#line 975 "numpy.pxd"
  #endif

#line 975 "numpy.pxd"
}

#line 1 "cython_utility"

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result) {
        if (dict != __pyx_b) {
            PyErr_Clear();
            result = PyObject_GetAttr(__pyx_b, name);
        }
        if (!result) {
            PyErr_SetObject(PyExc_NameError, name);
        }
    }
    return result;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    #if PY_VERSION_HEX < 0x02050000
    if (PyClass_Check(type)) {
    #else
    if (PyType_Check(type)) {
    #endif
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else /* Python 3+ */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *args;
        if (!value)
            args = PyTuple_New(0);
        else if (PyTuple_Check(value)) {
            Py_INCREF(value);
            args = value;
        }
        else
            args = PyTuple_Pack(1, value);
        if (!args)
            goto bad;
        owned_instance = PyEval_CallObject(type, args);
        Py_DECREF(args);
        if (!owned_instance)
            goto bad;
        value = owned_instance;
        if (!PyExceptionInstance_Check(value)) {
            PyErr_Format(PyExc_TypeError,
                         "calling %R should have returned an instance of "
                         "BaseException, not %R",
                         type, Py_TYPE(value));
            goto bad;
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause && cause != Py_None) {
        PyObject *fixed_cause;
        if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        }
        else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        }
        else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %" CYTHON_FORMAT_SSIZE_T "d positional argument%s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CPYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import = 0;
    py_import = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0; /* try absolute import on failure */
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItemString(dict, "__pyx_vtable__", ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%s.%s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        if (PyErr_Warn(NULL, warning) < 0) goto bad;
        #else
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
        #endif
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%s.%s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
