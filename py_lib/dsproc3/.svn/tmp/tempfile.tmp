/* Generated by Cython 0.18 on Wed Dec  4 01:16:42 2013 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define __Pyx_PyIndex_Check(o) (PyNumber_Check(o) && !PyFloat_Check(o) && \
                                  !PyComplex_Check(o))
  #define PyIndex_Check __Pyx_PyIndex_Check
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
  #define __Pyx_PyIndex_Check PyIndex_Check
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#if PY_MAJOR_VERSION < 3 && PY_MINOR_VERSION < 6
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((k=k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__dsproc3__enums
#define __PYX_HAVE_API__dsproc3__enums
#include "dsproc3.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "enums.pyx",
};

/*--- Type declarations ---*/
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static int __Pyx_check_binary_version(void);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'dsproc3.cdsproc3_enums' */

/* Module declarations from 'dsproc3.enums' */
#define __Pyx_MODULE_NAME "dsproc3.enums"
int __pyx_module_is_main_dsproc3__enums = 0;

/* Implementation of 'dsproc3.enums' */
static char __pyx_k_1[] = "DSP_RETRIEVER_REQUIRED";
static char __pyx_k__ENODOD[] = "ENODOD";
static char __pyx_k__ENOMEM[] = "ENOMEM";
static char __pyx_k__DSF_JPG[] = "DSF_JPG";
static char __pyx_k__DSF_PNG[] = "DSF_PNG";
static char __pyx_k__DSF_RAW[] = "DSF_RAW";
static char __pyx_k__EDSPATH[] = "EDSPATH";
static char __pyx_k__ENCOPEN[] = "ENCOPEN";
static char __pyx_k__ENCREAD[] = "ENCREAD";
static char __pyx_k__ENODATA[] = "ENODATA";
static char __pyx_k__EREQVAR[] = "EREQVAR";
static char __pyx_k__EUNLINK[] = "EUNLINK";
static char __pyx_k__EVARMAP[] = "EVARMAP";
static char __pyx_k__SUCCESS[] = "SUCCESS";
static char __pyx_k__EBADDSID[] = "EBADDSID";
static char __pyx_k__ECDSCOPY[] = "ECDSCOPY";
static char __pyx_k__EDBERROR[] = "EDBERROR";
static char __pyx_k__EDIRLIST[] = "EDIRLIST";
static char __pyx_k__EFILEMD5[] = "EFILEMD5";
static char __pyx_k__ELOGOPEN[] = "ELOGOPEN";
static char __pyx_k__EMINTIME[] = "EMINTIME";
static char __pyx_k__ERUNTIME[] = "ERUNTIME";
static char __pyx_k__LIB_NAME[] = "LIB_NAME";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__DSR_INPUT[] = "DSR_INPUT";
static char __pyx_k__EBADINDSC[] = "EBADINDSC";
static char __pyx_k__ECLONEVAR[] = "ECLONEVAR";
static char __pyx_k__EFILECOPY[] = "EFILECOPY";
static char __pyx_k__EFILEMOVE[] = "EFILEMOVE";
static char __pyx_k__EFILEOPEN[] = "EFILEOPEN";
static char __pyx_k__EINITSIGS[] = "EINITSIGS";
static char __pyx_k__ELOGSPATH[] = "ELOGSPATH";
static char __pyx_k__EMAILINIT[] = "EMAILINIT";
static char __pyx_k__EMD5CHECK[] = "EMD5CHECK";
static char __pyx_k__EPROVOPEN[] = "EPROVOPEN";
static char __pyx_k__ETIMECALC[] = "ETIMECALC";
static char __pyx_k__PM_INGEST[] = "PM_INGEST";
static char __pyx_k__DSF_NETCDF[] = "DSF_NETCDF";
static char __pyx_k__DSP_INGEST[] = "DSP_INGEST";
static char __pyx_k__DSR_OUTPUT[] = "DSR_OUTPUT";
static char __pyx_k__EBADOUTDSC[] = "EBADOUTDSC";
static char __pyx_k__ECDSDEFVAR[] = "ECDSDEFVAR";
static char __pyx_k__ECDSDELVAR[] = "ECDSDELVAR";
static char __pyx_k__ECDSSETATT[] = "ECDSSETATT";
static char __pyx_k__ECDSSETDIM[] = "ECDSSETDIM";
static char __pyx_k__EDBCONNECT[] = "EDBCONNECT";
static char __pyx_k__EFILESTATS[] = "EFILESTATS";
static char __pyx_k__ENOSRCFILE[] = "ENOSRCFILE";
static char __pyx_k__ERETRIEVER[] = "ERETRIEVER";
static char __pyx_k__ETIMEORDER[] = "ETIMEORDER";
static char __pyx_k__ETRANSFORM[] = "ETRANSFORM";
static char __pyx_k__PM_GENERIC[] = "PM_GENERIC";
static char __pyx_k__ECDSCOPYVAR[] = "ECDSCOPYVAR";
static char __pyx_k__ECDSGETTIME[] = "ECDSGETTIME";
static char __pyx_k__ECDSSETDATA[] = "ECDSSETDATA";
static char __pyx_k__ECDSSETTIME[] = "ECDSSETTIME";
static char __pyx_k__EDQRDBERROR[] = "EDQRDBERROR";
static char __pyx_k__EFUTURETIME[] = "EFUTURETIME";
static char __pyx_k__ENOFILETIME[] = "ENOFILETIME";
static char __pyx_k__ECDSALLOCVAR[] = "ECDSALLOCVAR";
static char __pyx_k__EDESTDIRMAKE[] = "EDESTDIRMAKE";
static char __pyx_k__ENORETRIEVER[] = "ENORETRIEVER";
static char __pyx_k__ENOTRANSFORM[] = "ENOTRANSFORM";
static char __pyx_k__ETIMEOVERLAP[] = "ETIMEOVERLAP";
static char __pyx_k__DSP_RETRIEVER[] = "DSP_RETRIEVER";
static char __pyx_k__DSP_TRANSFORM[] = "DSP_TRANSFORM";
static char __pyx_k__EBADRETRIEVER[] = "EBADRETRIEVER";
static char __pyx_k__ECDSCHANGEATT[] = "ECDSCHANGEATT";
static char __pyx_k__EDQRDBCONNECT[] = "EDQRDBCONNECT";
static char __pyx_k__DS_FILTER_NANS[] = "DS_FILTER_NANS";
static char __pyx_k__DS_STANDARD_QC[] = "DS_STANDARD_QC";
static char __pyx_k__DS_PRESERVE_OBS[] = "DS_PRESERVE_OBS";
static char __pyx_k__ETRANSPARAMLOAD[] = "ETRANSPARAMLOAD";
static char __pyx_k__DS_DISABLE_MERGE[] = "DS_DISABLE_MERGE";
static char __pyx_k__DS_OVERLAP_CHECK[] = "DS_OVERLAP_CHECK";
static char __pyx_k__PM_RETRIEVER_VAP[] = "PM_RETRIEVER_VAP";
static char __pyx_k__PM_TRANSFORM_VAP[] = "PM_TRANSFORM_VAP";
static char __pyx_k__DS_SKIP_TRANSFORM[] = "DS_SKIP_TRANSFORM";
static char __pyx_k__VAR_SKIP_TRANSFORM[] = "VAR_SKIP_TRANSFORM";
static PyObject *__pyx_n_s_1;
static PyObject *__pyx_n_s__DSF_JPG;
static PyObject *__pyx_n_s__DSF_NETCDF;
static PyObject *__pyx_n_s__DSF_PNG;
static PyObject *__pyx_n_s__DSF_RAW;
static PyObject *__pyx_n_s__DSP_INGEST;
static PyObject *__pyx_n_s__DSP_RETRIEVER;
static PyObject *__pyx_n_s__DSP_TRANSFORM;
static PyObject *__pyx_n_s__DSR_INPUT;
static PyObject *__pyx_n_s__DSR_OUTPUT;
static PyObject *__pyx_n_s__DS_DISABLE_MERGE;
static PyObject *__pyx_n_s__DS_FILTER_NANS;
static PyObject *__pyx_n_s__DS_OVERLAP_CHECK;
static PyObject *__pyx_n_s__DS_PRESERVE_OBS;
static PyObject *__pyx_n_s__DS_SKIP_TRANSFORM;
static PyObject *__pyx_n_s__DS_STANDARD_QC;
static PyObject *__pyx_n_s__EBADDSID;
static PyObject *__pyx_n_s__EBADINDSC;
static PyObject *__pyx_n_s__EBADOUTDSC;
static PyObject *__pyx_n_s__EBADRETRIEVER;
static PyObject *__pyx_n_s__ECDSALLOCVAR;
static PyObject *__pyx_n_s__ECDSCHANGEATT;
static PyObject *__pyx_n_s__ECDSCOPY;
static PyObject *__pyx_n_s__ECDSCOPYVAR;
static PyObject *__pyx_n_s__ECDSDEFVAR;
static PyObject *__pyx_n_s__ECDSDELVAR;
static PyObject *__pyx_n_s__ECDSGETTIME;
static PyObject *__pyx_n_s__ECDSSETATT;
static PyObject *__pyx_n_s__ECDSSETDATA;
static PyObject *__pyx_n_s__ECDSSETDIM;
static PyObject *__pyx_n_s__ECDSSETTIME;
static PyObject *__pyx_n_s__ECLONEVAR;
static PyObject *__pyx_n_s__EDBCONNECT;
static PyObject *__pyx_n_s__EDBERROR;
static PyObject *__pyx_n_s__EDESTDIRMAKE;
static PyObject *__pyx_n_s__EDIRLIST;
static PyObject *__pyx_n_s__EDQRDBCONNECT;
static PyObject *__pyx_n_s__EDQRDBERROR;
static PyObject *__pyx_n_s__EDSPATH;
static PyObject *__pyx_n_s__EFILECOPY;
static PyObject *__pyx_n_s__EFILEMD5;
static PyObject *__pyx_n_s__EFILEMOVE;
static PyObject *__pyx_n_s__EFILEOPEN;
static PyObject *__pyx_n_s__EFILESTATS;
static PyObject *__pyx_n_s__EFUTURETIME;
static PyObject *__pyx_n_s__EINITSIGS;
static PyObject *__pyx_n_s__ELOGOPEN;
static PyObject *__pyx_n_s__ELOGSPATH;
static PyObject *__pyx_n_s__EMAILINIT;
static PyObject *__pyx_n_s__EMD5CHECK;
static PyObject *__pyx_n_s__EMINTIME;
static PyObject *__pyx_n_s__ENCOPEN;
static PyObject *__pyx_n_s__ENCREAD;
static PyObject *__pyx_n_s__ENODATA;
static PyObject *__pyx_n_s__ENODOD;
static PyObject *__pyx_n_s__ENOFILETIME;
static PyObject *__pyx_n_s__ENOMEM;
static PyObject *__pyx_n_s__ENORETRIEVER;
static PyObject *__pyx_n_s__ENOSRCFILE;
static PyObject *__pyx_n_s__ENOTRANSFORM;
static PyObject *__pyx_n_s__EPROVOPEN;
static PyObject *__pyx_n_s__EREQVAR;
static PyObject *__pyx_n_s__ERETRIEVER;
static PyObject *__pyx_n_s__ERUNTIME;
static PyObject *__pyx_n_s__ETIMECALC;
static PyObject *__pyx_n_s__ETIMEORDER;
static PyObject *__pyx_n_s__ETIMEOVERLAP;
static PyObject *__pyx_n_s__ETRANSFORM;
static PyObject *__pyx_n_s__ETRANSPARAMLOAD;
static PyObject *__pyx_n_s__EUNLINK;
static PyObject *__pyx_n_s__EVARMAP;
static PyObject *__pyx_n_s__LIB_NAME;
static PyObject *__pyx_n_s__PM_GENERIC;
static PyObject *__pyx_n_s__PM_INGEST;
static PyObject *__pyx_n_s__PM_RETRIEVER_VAP;
static PyObject *__pyx_n_s__PM_TRANSFORM_VAP;
static PyObject *__pyx_n_s__SUCCESS;
static PyObject *__pyx_n_s__VAR_SKIP_TRANSFORM;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    __Pyx_NAMESTR("enums"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 1},
  {&__pyx_n_s__DSF_JPG, __pyx_k__DSF_JPG, sizeof(__pyx_k__DSF_JPG), 0, 0, 1, 1},
  {&__pyx_n_s__DSF_NETCDF, __pyx_k__DSF_NETCDF, sizeof(__pyx_k__DSF_NETCDF), 0, 0, 1, 1},
  {&__pyx_n_s__DSF_PNG, __pyx_k__DSF_PNG, sizeof(__pyx_k__DSF_PNG), 0, 0, 1, 1},
  {&__pyx_n_s__DSF_RAW, __pyx_k__DSF_RAW, sizeof(__pyx_k__DSF_RAW), 0, 0, 1, 1},
  {&__pyx_n_s__DSP_INGEST, __pyx_k__DSP_INGEST, sizeof(__pyx_k__DSP_INGEST), 0, 0, 1, 1},
  {&__pyx_n_s__DSP_RETRIEVER, __pyx_k__DSP_RETRIEVER, sizeof(__pyx_k__DSP_RETRIEVER), 0, 0, 1, 1},
  {&__pyx_n_s__DSP_TRANSFORM, __pyx_k__DSP_TRANSFORM, sizeof(__pyx_k__DSP_TRANSFORM), 0, 0, 1, 1},
  {&__pyx_n_s__DSR_INPUT, __pyx_k__DSR_INPUT, sizeof(__pyx_k__DSR_INPUT), 0, 0, 1, 1},
  {&__pyx_n_s__DSR_OUTPUT, __pyx_k__DSR_OUTPUT, sizeof(__pyx_k__DSR_OUTPUT), 0, 0, 1, 1},
  {&__pyx_n_s__DS_DISABLE_MERGE, __pyx_k__DS_DISABLE_MERGE, sizeof(__pyx_k__DS_DISABLE_MERGE), 0, 0, 1, 1},
  {&__pyx_n_s__DS_FILTER_NANS, __pyx_k__DS_FILTER_NANS, sizeof(__pyx_k__DS_FILTER_NANS), 0, 0, 1, 1},
  {&__pyx_n_s__DS_OVERLAP_CHECK, __pyx_k__DS_OVERLAP_CHECK, sizeof(__pyx_k__DS_OVERLAP_CHECK), 0, 0, 1, 1},
  {&__pyx_n_s__DS_PRESERVE_OBS, __pyx_k__DS_PRESERVE_OBS, sizeof(__pyx_k__DS_PRESERVE_OBS), 0, 0, 1, 1},
  {&__pyx_n_s__DS_SKIP_TRANSFORM, __pyx_k__DS_SKIP_TRANSFORM, sizeof(__pyx_k__DS_SKIP_TRANSFORM), 0, 0, 1, 1},
  {&__pyx_n_s__DS_STANDARD_QC, __pyx_k__DS_STANDARD_QC, sizeof(__pyx_k__DS_STANDARD_QC), 0, 0, 1, 1},
  {&__pyx_n_s__EBADDSID, __pyx_k__EBADDSID, sizeof(__pyx_k__EBADDSID), 0, 0, 1, 1},
  {&__pyx_n_s__EBADINDSC, __pyx_k__EBADINDSC, sizeof(__pyx_k__EBADINDSC), 0, 0, 1, 1},
  {&__pyx_n_s__EBADOUTDSC, __pyx_k__EBADOUTDSC, sizeof(__pyx_k__EBADOUTDSC), 0, 0, 1, 1},
  {&__pyx_n_s__EBADRETRIEVER, __pyx_k__EBADRETRIEVER, sizeof(__pyx_k__EBADRETRIEVER), 0, 0, 1, 1},
  {&__pyx_n_s__ECDSALLOCVAR, __pyx_k__ECDSALLOCVAR, sizeof(__pyx_k__ECDSALLOCVAR), 0, 0, 1, 1},
  {&__pyx_n_s__ECDSCHANGEATT, __pyx_k__ECDSCHANGEATT, sizeof(__pyx_k__ECDSCHANGEATT), 0, 0, 1, 1},
  {&__pyx_n_s__ECDSCOPY, __pyx_k__ECDSCOPY, sizeof(__pyx_k__ECDSCOPY), 0, 0, 1, 1},
  {&__pyx_n_s__ECDSCOPYVAR, __pyx_k__ECDSCOPYVAR, sizeof(__pyx_k__ECDSCOPYVAR), 0, 0, 1, 1},
  {&__pyx_n_s__ECDSDEFVAR, __pyx_k__ECDSDEFVAR, sizeof(__pyx_k__ECDSDEFVAR), 0, 0, 1, 1},
  {&__pyx_n_s__ECDSDELVAR, __pyx_k__ECDSDELVAR, sizeof(__pyx_k__ECDSDELVAR), 0, 0, 1, 1},
  {&__pyx_n_s__ECDSGETTIME, __pyx_k__ECDSGETTIME, sizeof(__pyx_k__ECDSGETTIME), 0, 0, 1, 1},
  {&__pyx_n_s__ECDSSETATT, __pyx_k__ECDSSETATT, sizeof(__pyx_k__ECDSSETATT), 0, 0, 1, 1},
  {&__pyx_n_s__ECDSSETDATA, __pyx_k__ECDSSETDATA, sizeof(__pyx_k__ECDSSETDATA), 0, 0, 1, 1},
  {&__pyx_n_s__ECDSSETDIM, __pyx_k__ECDSSETDIM, sizeof(__pyx_k__ECDSSETDIM), 0, 0, 1, 1},
  {&__pyx_n_s__ECDSSETTIME, __pyx_k__ECDSSETTIME, sizeof(__pyx_k__ECDSSETTIME), 0, 0, 1, 1},
  {&__pyx_n_s__ECLONEVAR, __pyx_k__ECLONEVAR, sizeof(__pyx_k__ECLONEVAR), 0, 0, 1, 1},
  {&__pyx_n_s__EDBCONNECT, __pyx_k__EDBCONNECT, sizeof(__pyx_k__EDBCONNECT), 0, 0, 1, 1},
  {&__pyx_n_s__EDBERROR, __pyx_k__EDBERROR, sizeof(__pyx_k__EDBERROR), 0, 0, 1, 1},
  {&__pyx_n_s__EDESTDIRMAKE, __pyx_k__EDESTDIRMAKE, sizeof(__pyx_k__EDESTDIRMAKE), 0, 0, 1, 1},
  {&__pyx_n_s__EDIRLIST, __pyx_k__EDIRLIST, sizeof(__pyx_k__EDIRLIST), 0, 0, 1, 1},
  {&__pyx_n_s__EDQRDBCONNECT, __pyx_k__EDQRDBCONNECT, sizeof(__pyx_k__EDQRDBCONNECT), 0, 0, 1, 1},
  {&__pyx_n_s__EDQRDBERROR, __pyx_k__EDQRDBERROR, sizeof(__pyx_k__EDQRDBERROR), 0, 0, 1, 1},
  {&__pyx_n_s__EDSPATH, __pyx_k__EDSPATH, sizeof(__pyx_k__EDSPATH), 0, 0, 1, 1},
  {&__pyx_n_s__EFILECOPY, __pyx_k__EFILECOPY, sizeof(__pyx_k__EFILECOPY), 0, 0, 1, 1},
  {&__pyx_n_s__EFILEMD5, __pyx_k__EFILEMD5, sizeof(__pyx_k__EFILEMD5), 0, 0, 1, 1},
  {&__pyx_n_s__EFILEMOVE, __pyx_k__EFILEMOVE, sizeof(__pyx_k__EFILEMOVE), 0, 0, 1, 1},
  {&__pyx_n_s__EFILEOPEN, __pyx_k__EFILEOPEN, sizeof(__pyx_k__EFILEOPEN), 0, 0, 1, 1},
  {&__pyx_n_s__EFILESTATS, __pyx_k__EFILESTATS, sizeof(__pyx_k__EFILESTATS), 0, 0, 1, 1},
  {&__pyx_n_s__EFUTURETIME, __pyx_k__EFUTURETIME, sizeof(__pyx_k__EFUTURETIME), 0, 0, 1, 1},
  {&__pyx_n_s__EINITSIGS, __pyx_k__EINITSIGS, sizeof(__pyx_k__EINITSIGS), 0, 0, 1, 1},
  {&__pyx_n_s__ELOGOPEN, __pyx_k__ELOGOPEN, sizeof(__pyx_k__ELOGOPEN), 0, 0, 1, 1},
  {&__pyx_n_s__ELOGSPATH, __pyx_k__ELOGSPATH, sizeof(__pyx_k__ELOGSPATH), 0, 0, 1, 1},
  {&__pyx_n_s__EMAILINIT, __pyx_k__EMAILINIT, sizeof(__pyx_k__EMAILINIT), 0, 0, 1, 1},
  {&__pyx_n_s__EMD5CHECK, __pyx_k__EMD5CHECK, sizeof(__pyx_k__EMD5CHECK), 0, 0, 1, 1},
  {&__pyx_n_s__EMINTIME, __pyx_k__EMINTIME, sizeof(__pyx_k__EMINTIME), 0, 0, 1, 1},
  {&__pyx_n_s__ENCOPEN, __pyx_k__ENCOPEN, sizeof(__pyx_k__ENCOPEN), 0, 0, 1, 1},
  {&__pyx_n_s__ENCREAD, __pyx_k__ENCREAD, sizeof(__pyx_k__ENCREAD), 0, 0, 1, 1},
  {&__pyx_n_s__ENODATA, __pyx_k__ENODATA, sizeof(__pyx_k__ENODATA), 0, 0, 1, 1},
  {&__pyx_n_s__ENODOD, __pyx_k__ENODOD, sizeof(__pyx_k__ENODOD), 0, 0, 1, 1},
  {&__pyx_n_s__ENOFILETIME, __pyx_k__ENOFILETIME, sizeof(__pyx_k__ENOFILETIME), 0, 0, 1, 1},
  {&__pyx_n_s__ENOMEM, __pyx_k__ENOMEM, sizeof(__pyx_k__ENOMEM), 0, 0, 1, 1},
  {&__pyx_n_s__ENORETRIEVER, __pyx_k__ENORETRIEVER, sizeof(__pyx_k__ENORETRIEVER), 0, 0, 1, 1},
  {&__pyx_n_s__ENOSRCFILE, __pyx_k__ENOSRCFILE, sizeof(__pyx_k__ENOSRCFILE), 0, 0, 1, 1},
  {&__pyx_n_s__ENOTRANSFORM, __pyx_k__ENOTRANSFORM, sizeof(__pyx_k__ENOTRANSFORM), 0, 0, 1, 1},
  {&__pyx_n_s__EPROVOPEN, __pyx_k__EPROVOPEN, sizeof(__pyx_k__EPROVOPEN), 0, 0, 1, 1},
  {&__pyx_n_s__EREQVAR, __pyx_k__EREQVAR, sizeof(__pyx_k__EREQVAR), 0, 0, 1, 1},
  {&__pyx_n_s__ERETRIEVER, __pyx_k__ERETRIEVER, sizeof(__pyx_k__ERETRIEVER), 0, 0, 1, 1},
  {&__pyx_n_s__ERUNTIME, __pyx_k__ERUNTIME, sizeof(__pyx_k__ERUNTIME), 0, 0, 1, 1},
  {&__pyx_n_s__ETIMECALC, __pyx_k__ETIMECALC, sizeof(__pyx_k__ETIMECALC), 0, 0, 1, 1},
  {&__pyx_n_s__ETIMEORDER, __pyx_k__ETIMEORDER, sizeof(__pyx_k__ETIMEORDER), 0, 0, 1, 1},
  {&__pyx_n_s__ETIMEOVERLAP, __pyx_k__ETIMEOVERLAP, sizeof(__pyx_k__ETIMEOVERLAP), 0, 0, 1, 1},
  {&__pyx_n_s__ETRANSFORM, __pyx_k__ETRANSFORM, sizeof(__pyx_k__ETRANSFORM), 0, 0, 1, 1},
  {&__pyx_n_s__ETRANSPARAMLOAD, __pyx_k__ETRANSPARAMLOAD, sizeof(__pyx_k__ETRANSPARAMLOAD), 0, 0, 1, 1},
  {&__pyx_n_s__EUNLINK, __pyx_k__EUNLINK, sizeof(__pyx_k__EUNLINK), 0, 0, 1, 1},
  {&__pyx_n_s__EVARMAP, __pyx_k__EVARMAP, sizeof(__pyx_k__EVARMAP), 0, 0, 1, 1},
  {&__pyx_n_s__LIB_NAME, __pyx_k__LIB_NAME, sizeof(__pyx_k__LIB_NAME), 0, 0, 1, 1},
  {&__pyx_n_s__PM_GENERIC, __pyx_k__PM_GENERIC, sizeof(__pyx_k__PM_GENERIC), 0, 0, 1, 1},
  {&__pyx_n_s__PM_INGEST, __pyx_k__PM_INGEST, sizeof(__pyx_k__PM_INGEST), 0, 0, 1, 1},
  {&__pyx_n_s__PM_RETRIEVER_VAP, __pyx_k__PM_RETRIEVER_VAP, sizeof(__pyx_k__PM_RETRIEVER_VAP), 0, 0, 1, 1},
  {&__pyx_n_s__PM_TRANSFORM_VAP, __pyx_k__PM_TRANSFORM_VAP, sizeof(__pyx_k__PM_TRANSFORM_VAP), 0, 0, 1, 1},
  {&__pyx_n_s__SUCCESS, __pyx_k__SUCCESS, sizeof(__pyx_k__SUCCESS), 0, 0, 1, 1},
  {&__pyx_n_s__VAR_SKIP_TRANSFORM, __pyx_k__VAR_SKIP_TRANSFORM, sizeof(__pyx_k__VAR_SKIP_TRANSFORM), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  return 0;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initenums(void); /*proto*/
PyMODINIT_FUNC initenums(void)
#else
PyMODINIT_FUNC PyInit_enums(void); /*proto*/
PyMODINIT_FUNC PyInit_enums(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_enums(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("enums"), __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "dsproc3.enums")) {
      if (unlikely(PyDict_SetItemString(modules, "dsproc3.enums", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_dsproc3__enums) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "dsproc3/enums.pyx":15
 * cimport cdsproc3_enums
 * 
 * DSP_RETRIEVER = cdsproc3_enums.DSP_RETRIEVER             # <<<<<<<<<<<<<<
 * DSP_RETRIEVER_REQUIRED = cdsproc3_enums.DSP_RETRIEVER_REQUIRED
 * DSP_TRANSFORM = cdsproc3_enums.DSP_TRANSFORM
 */

#line 15 "dsproc3/enums.pyx"
  __pyx_t_1 = PyInt_FromLong(DSP_RETRIEVER); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 15 "dsproc3/enums.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 15 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__DSP_RETRIEVER, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 15 "dsproc3/enums.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":16
 * 
 * DSP_RETRIEVER = cdsproc3_enums.DSP_RETRIEVER
 * DSP_RETRIEVER_REQUIRED = cdsproc3_enums.DSP_RETRIEVER_REQUIRED             # <<<<<<<<<<<<<<
 * DSP_TRANSFORM = cdsproc3_enums.DSP_TRANSFORM
 * DSP_INGEST = cdsproc3_enums.DSP_INGEST
 */

#line 16 "dsproc3/enums.pyx"
  __pyx_t_1 = PyInt_FromLong(DSP_RETRIEVER_REQUIRED); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 16 "dsproc3/enums.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 16 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_1, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 16 "dsproc3/enums.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":17
 * DSP_RETRIEVER = cdsproc3_enums.DSP_RETRIEVER
 * DSP_RETRIEVER_REQUIRED = cdsproc3_enums.DSP_RETRIEVER_REQUIRED
 * DSP_TRANSFORM = cdsproc3_enums.DSP_TRANSFORM             # <<<<<<<<<<<<<<
 * DSP_INGEST = cdsproc3_enums.DSP_INGEST
 * 
 */

#line 17 "dsproc3/enums.pyx"
  __pyx_t_1 = PyInt_FromLong(DSP_TRANSFORM); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 17 "dsproc3/enums.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 17 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__DSP_TRANSFORM, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 17 "dsproc3/enums.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":18
 * DSP_RETRIEVER_REQUIRED = cdsproc3_enums.DSP_RETRIEVER_REQUIRED
 * DSP_TRANSFORM = cdsproc3_enums.DSP_TRANSFORM
 * DSP_INGEST = cdsproc3_enums.DSP_INGEST             # <<<<<<<<<<<<<<
 * 
 * PM_GENERIC = cdsproc3_enums.PM_GENERIC
 */

#line 18 "dsproc3/enums.pyx"
  __pyx_t_1 = PyInt_FromLong(DSP_INGEST); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 18 "dsproc3/enums.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 18 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__DSP_INGEST, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 18 "dsproc3/enums.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":20
 * DSP_INGEST = cdsproc3_enums.DSP_INGEST
 * 
 * PM_GENERIC = cdsproc3_enums.PM_GENERIC             # <<<<<<<<<<<<<<
 * PM_RETRIEVER_VAP = cdsproc3_enums.PM_RETRIEVER_VAP
 * PM_TRANSFORM_VAP = cdsproc3_enums.PM_TRANSFORM_VAP
 */

#line 20 "dsproc3/enums.pyx"
  __pyx_t_1 = PyInt_FromLong(PM_GENERIC); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 20 "dsproc3/enums.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 20 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PM_GENERIC, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 20 "dsproc3/enums.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":21
 * 
 * PM_GENERIC = cdsproc3_enums.PM_GENERIC
 * PM_RETRIEVER_VAP = cdsproc3_enums.PM_RETRIEVER_VAP             # <<<<<<<<<<<<<<
 * PM_TRANSFORM_VAP = cdsproc3_enums.PM_TRANSFORM_VAP
 * PM_INGEST = cdsproc3_enums.PM_INGEST
 */

#line 21 "dsproc3/enums.pyx"
  __pyx_t_1 = PyInt_FromLong(PM_RETRIEVER_VAP); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 21 "dsproc3/enums.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 21 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PM_RETRIEVER_VAP, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 21 "dsproc3/enums.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":22
 * PM_GENERIC = cdsproc3_enums.PM_GENERIC
 * PM_RETRIEVER_VAP = cdsproc3_enums.PM_RETRIEVER_VAP
 * PM_TRANSFORM_VAP = cdsproc3_enums.PM_TRANSFORM_VAP             # <<<<<<<<<<<<<<
 * PM_INGEST = cdsproc3_enums.PM_INGEST
 * 
 */

#line 22 "dsproc3/enums.pyx"
  __pyx_t_1 = PyInt_FromLong(PM_TRANSFORM_VAP); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 22 "dsproc3/enums.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 22 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PM_TRANSFORM_VAP, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 22 "dsproc3/enums.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":23
 * PM_RETRIEVER_VAP = cdsproc3_enums.PM_RETRIEVER_VAP
 * PM_TRANSFORM_VAP = cdsproc3_enums.PM_TRANSFORM_VAP
 * PM_INGEST = cdsproc3_enums.PM_INGEST             # <<<<<<<<<<<<<<
 * 
 * DSR_INPUT = cdsproc3_enums.DSR_INPUT
 */

#line 23 "dsproc3/enums.pyx"
  __pyx_t_1 = PyInt_FromLong(PM_INGEST); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 23 "dsproc3/enums.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 23 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__PM_INGEST, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 23 "dsproc3/enums.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":25
 * PM_INGEST = cdsproc3_enums.PM_INGEST
 * 
 * DSR_INPUT = cdsproc3_enums.DSR_INPUT             # <<<<<<<<<<<<<<
 * DSR_OUTPUT = cdsproc3_enums.DSR_OUTPUT
 * 
 */

#line 25 "dsproc3/enums.pyx"
  __pyx_t_1 = PyInt_FromLong(DSR_INPUT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 25 "dsproc3/enums.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 25 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__DSR_INPUT, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 25 "dsproc3/enums.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":26
 * 
 * DSR_INPUT = cdsproc3_enums.DSR_INPUT
 * DSR_OUTPUT = cdsproc3_enums.DSR_OUTPUT             # <<<<<<<<<<<<<<
 * 
 * VAR_SKIP_TRANSFORM = cdsproc3_enums.VAR_SKIP_TRANSFORM
 */

#line 26 "dsproc3/enums.pyx"
  __pyx_t_1 = PyInt_FromLong(DSR_OUTPUT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 26 "dsproc3/enums.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 26 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__DSR_OUTPUT, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 26 "dsproc3/enums.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":28
 * DSR_OUTPUT = cdsproc3_enums.DSR_OUTPUT
 * 
 * VAR_SKIP_TRANSFORM = cdsproc3_enums.VAR_SKIP_TRANSFORM             # <<<<<<<<<<<<<<
 * 
 * SUCCESS = cdsproc3_enums.DSPROC_SUCCESS
 */

#line 28 "dsproc3/enums.pyx"
  __pyx_t_1 = PyInt_FromLong(VAR_SKIP_TRANSFORM); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 28 "dsproc3/enums.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 28 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__VAR_SKIP_TRANSFORM, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 28 "dsproc3/enums.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":30
 * VAR_SKIP_TRANSFORM = cdsproc3_enums.VAR_SKIP_TRANSFORM
 * 
 * SUCCESS = cdsproc3_enums.DSPROC_SUCCESS             # <<<<<<<<<<<<<<
 * ENOMEM = cdsproc3_enums.DSPROC_ENOMEM
 * ENODATA = cdsproc3_enums.DSPROC_ENODATA
 */

#line 30 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_SUCCESS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 30 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 30 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__SUCCESS, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 30 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":31
 * 
 * SUCCESS = cdsproc3_enums.DSPROC_SUCCESS
 * ENOMEM = cdsproc3_enums.DSPROC_ENOMEM             # <<<<<<<<<<<<<<
 * ENODATA = cdsproc3_enums.DSPROC_ENODATA
 * EINITSIGS = cdsproc3_enums.DSPROC_EINITSIGS
 */

#line 31 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ENOMEM); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 31 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 31 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ENOMEM, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 31 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":32
 * SUCCESS = cdsproc3_enums.DSPROC_SUCCESS
 * ENOMEM = cdsproc3_enums.DSPROC_ENOMEM
 * ENODATA = cdsproc3_enums.DSPROC_ENODATA             # <<<<<<<<<<<<<<
 * EINITSIGS = cdsproc3_enums.DSPROC_EINITSIGS
 * ERUNTIME = cdsproc3_enums.DSPROC_ERUNTIME
 */

#line 32 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ENODATA); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 32 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ENODATA, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":33
 * ENOMEM = cdsproc3_enums.DSPROC_ENOMEM
 * ENODATA = cdsproc3_enums.DSPROC_ENODATA
 * EINITSIGS = cdsproc3_enums.DSPROC_EINITSIGS             # <<<<<<<<<<<<<<
 * ERUNTIME = cdsproc3_enums.DSPROC_ERUNTIME
 * EDSPATH = cdsproc3_enums.DSPROC_EDSPATH
 */

#line 33 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_EINITSIGS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 33 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 33 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EINITSIGS, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 33 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":34
 * ENODATA = cdsproc3_enums.DSPROC_ENODATA
 * EINITSIGS = cdsproc3_enums.DSPROC_EINITSIGS
 * ERUNTIME = cdsproc3_enums.DSPROC_ERUNTIME             # <<<<<<<<<<<<<<
 * EDSPATH = cdsproc3_enums.DSPROC_EDSPATH
 * ELOGSPATH = cdsproc3_enums.DSPROC_ELOGSPATH
 */

#line 34 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ERUNTIME); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 34 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 34 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ERUNTIME, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 34 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":35
 * EINITSIGS = cdsproc3_enums.DSPROC_EINITSIGS
 * ERUNTIME = cdsproc3_enums.DSPROC_ERUNTIME
 * EDSPATH = cdsproc3_enums.DSPROC_EDSPATH             # <<<<<<<<<<<<<<
 * ELOGSPATH = cdsproc3_enums.DSPROC_ELOGSPATH
 * ELOGOPEN = cdsproc3_enums.DSPROC_ELOGOPEN
 */

#line 35 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_EDSPATH); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 35 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 35 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EDSPATH, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 35 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":36
 * ERUNTIME = cdsproc3_enums.DSPROC_ERUNTIME
 * EDSPATH = cdsproc3_enums.DSPROC_EDSPATH
 * ELOGSPATH = cdsproc3_enums.DSPROC_ELOGSPATH             # <<<<<<<<<<<<<<
 * ELOGOPEN = cdsproc3_enums.DSPROC_ELOGOPEN
 * EPROVOPEN = cdsproc3_enums.DSPROC_EPROVOPEN
 */

#line 36 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ELOGSPATH); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 36 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 36 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ELOGSPATH, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 36 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":37
 * EDSPATH = cdsproc3_enums.DSPROC_EDSPATH
 * ELOGSPATH = cdsproc3_enums.DSPROC_ELOGSPATH
 * ELOGOPEN = cdsproc3_enums.DSPROC_ELOGOPEN             # <<<<<<<<<<<<<<
 * EPROVOPEN = cdsproc3_enums.DSPROC_EPROVOPEN
 * EMAILINIT = cdsproc3_enums.DSPROC_EMAILINIT
 */

#line 37 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ELOGOPEN); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 37 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 37 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ELOGOPEN, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 37 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":38
 * ELOGSPATH = cdsproc3_enums.DSPROC_ELOGSPATH
 * ELOGOPEN = cdsproc3_enums.DSPROC_ELOGOPEN
 * EPROVOPEN = cdsproc3_enums.DSPROC_EPROVOPEN             # <<<<<<<<<<<<<<
 * EMAILINIT = cdsproc3_enums.DSPROC_EMAILINIT
 * EDBERROR = cdsproc3_enums.DSPROC_EDBERROR
 */

#line 38 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_EPROVOPEN); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 38 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EPROVOPEN, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":39
 * ELOGOPEN = cdsproc3_enums.DSPROC_ELOGOPEN
 * EPROVOPEN = cdsproc3_enums.DSPROC_EPROVOPEN
 * EMAILINIT = cdsproc3_enums.DSPROC_EMAILINIT             # <<<<<<<<<<<<<<
 * EDBERROR = cdsproc3_enums.DSPROC_EDBERROR
 * EDBCONNECT = cdsproc3_enums.DSPROC_EDBCONNECT
 */

#line 39 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_EMAILINIT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 39 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 39 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EMAILINIT, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 39 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":40
 * EPROVOPEN = cdsproc3_enums.DSPROC_EPROVOPEN
 * EMAILINIT = cdsproc3_enums.DSPROC_EMAILINIT
 * EDBERROR = cdsproc3_enums.DSPROC_EDBERROR             # <<<<<<<<<<<<<<
 * EDBCONNECT = cdsproc3_enums.DSPROC_EDBCONNECT
 * EDQRDBERROR = cdsproc3_enums.DSPROC_EDQRDBERROR
 */

#line 40 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_EDBERROR); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 40 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 40 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EDBERROR, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 40 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":41
 * EMAILINIT = cdsproc3_enums.DSPROC_EMAILINIT
 * EDBERROR = cdsproc3_enums.DSPROC_EDBERROR
 * EDBCONNECT = cdsproc3_enums.DSPROC_EDBCONNECT             # <<<<<<<<<<<<<<
 * EDQRDBERROR = cdsproc3_enums.DSPROC_EDQRDBERROR
 * EDQRDBCONNECT = cdsproc3_enums.DSPROC_EDQRDBCONNECT
 */

#line 41 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_EDBCONNECT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 41 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EDBCONNECT, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":42
 * EDBERROR = cdsproc3_enums.DSPROC_EDBERROR
 * EDBCONNECT = cdsproc3_enums.DSPROC_EDBCONNECT
 * EDQRDBERROR = cdsproc3_enums.DSPROC_EDQRDBERROR             # <<<<<<<<<<<<<<
 * EDQRDBCONNECT = cdsproc3_enums.DSPROC_EDQRDBCONNECT
 * EDIRLIST = cdsproc3_enums.DSPROC_EDIRLIST
 */

#line 42 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_EDQRDBERROR); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 42 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 42 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EDQRDBERROR, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 42 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":43
 * EDBCONNECT = cdsproc3_enums.DSPROC_EDBCONNECT
 * EDQRDBERROR = cdsproc3_enums.DSPROC_EDQRDBERROR
 * EDQRDBCONNECT = cdsproc3_enums.DSPROC_EDQRDBCONNECT             # <<<<<<<<<<<<<<
 * EDIRLIST = cdsproc3_enums.DSPROC_EDIRLIST
 * EBADINDSC = cdsproc3_enums.DSPROC_EBADINDSC
 */

#line 43 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_EDQRDBCONNECT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 43 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 43 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EDQRDBCONNECT, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 43 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":44
 * EDQRDBERROR = cdsproc3_enums.DSPROC_EDQRDBERROR
 * EDQRDBCONNECT = cdsproc3_enums.DSPROC_EDQRDBCONNECT
 * EDIRLIST = cdsproc3_enums.DSPROC_EDIRLIST             # <<<<<<<<<<<<<<
 * EBADINDSC = cdsproc3_enums.DSPROC_EBADINDSC
 * EBADOUTDSC = cdsproc3_enums.DSPROC_EBADOUTDSC
 */

#line 44 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_EDIRLIST); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 44 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 44 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EDIRLIST, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 44 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":45
 * EDQRDBCONNECT = cdsproc3_enums.DSPROC_EDQRDBCONNECT
 * EDIRLIST = cdsproc3_enums.DSPROC_EDIRLIST
 * EBADINDSC = cdsproc3_enums.DSPROC_EBADINDSC             # <<<<<<<<<<<<<<
 * EBADOUTDSC = cdsproc3_enums.DSPROC_EBADOUTDSC
 * EBADDSID = cdsproc3_enums.DSPROC_EBADDSID
 */

#line 45 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_EBADINDSC); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 45 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 45 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EBADINDSC, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 45 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":46
 * EDIRLIST = cdsproc3_enums.DSPROC_EDIRLIST
 * EBADINDSC = cdsproc3_enums.DSPROC_EBADINDSC
 * EBADOUTDSC = cdsproc3_enums.DSPROC_EBADOUTDSC             # <<<<<<<<<<<<<<
 * EBADDSID = cdsproc3_enums.DSPROC_EBADDSID
 * EMINTIME = cdsproc3_enums.DSPROC_EMINTIME
 */

#line 46 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_EBADOUTDSC); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 46 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 46 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EBADOUTDSC, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 46 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":47
 * EBADINDSC = cdsproc3_enums.DSPROC_EBADINDSC
 * EBADOUTDSC = cdsproc3_enums.DSPROC_EBADOUTDSC
 * EBADDSID = cdsproc3_enums.DSPROC_EBADDSID             # <<<<<<<<<<<<<<
 * EMINTIME = cdsproc3_enums.DSPROC_EMINTIME
 * EFUTURETIME = cdsproc3_enums.DSPROC_EFUTURETIME
 */

#line 47 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_EBADDSID); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 47 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 47 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EBADDSID, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 47 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":48
 * EBADOUTDSC = cdsproc3_enums.DSPROC_EBADOUTDSC
 * EBADDSID = cdsproc3_enums.DSPROC_EBADDSID
 * EMINTIME = cdsproc3_enums.DSPROC_EMINTIME             # <<<<<<<<<<<<<<
 * EFUTURETIME = cdsproc3_enums.DSPROC_EFUTURETIME
 * ETIMEORDER = cdsproc3_enums.DSPROC_ETIMEORDER
 */

#line 48 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_EMINTIME); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 48 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 48 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EMINTIME, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 48 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":49
 * EBADDSID = cdsproc3_enums.DSPROC_EBADDSID
 * EMINTIME = cdsproc3_enums.DSPROC_EMINTIME
 * EFUTURETIME = cdsproc3_enums.DSPROC_EFUTURETIME             # <<<<<<<<<<<<<<
 * ETIMEORDER = cdsproc3_enums.DSPROC_ETIMEORDER
 * ETIMEOVERLAP = cdsproc3_enums.DSPROC_ETIMEOVERLAP
 */

#line 49 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_EFUTURETIME); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 49 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 49 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EFUTURETIME, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 49 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":50
 * EMINTIME = cdsproc3_enums.DSPROC_EMINTIME
 * EFUTURETIME = cdsproc3_enums.DSPROC_EFUTURETIME
 * ETIMEORDER = cdsproc3_enums.DSPROC_ETIMEORDER             # <<<<<<<<<<<<<<
 * ETIMEOVERLAP = cdsproc3_enums.DSPROC_ETIMEOVERLAP
 * EFILECOPY = cdsproc3_enums.DSPROC_EFILECOPY
 */

#line 50 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ETIMEORDER); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 50 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 50 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ETIMEORDER, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 50 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":51
 * EFUTURETIME = cdsproc3_enums.DSPROC_EFUTURETIME
 * ETIMEORDER = cdsproc3_enums.DSPROC_ETIMEORDER
 * ETIMEOVERLAP = cdsproc3_enums.DSPROC_ETIMEOVERLAP             # <<<<<<<<<<<<<<
 * EFILECOPY = cdsproc3_enums.DSPROC_EFILECOPY
 * EFILEMOVE = cdsproc3_enums.DSPROC_EFILEMOVE
 */

#line 51 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ETIMEOVERLAP); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 51 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 51 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ETIMEOVERLAP, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 51 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":52
 * ETIMEORDER = cdsproc3_enums.DSPROC_ETIMEORDER
 * ETIMEOVERLAP = cdsproc3_enums.DSPROC_ETIMEOVERLAP
 * EFILECOPY = cdsproc3_enums.DSPROC_EFILECOPY             # <<<<<<<<<<<<<<
 * EFILEMOVE = cdsproc3_enums.DSPROC_EFILEMOVE
 * EFILEOPEN = cdsproc3_enums.DSPROC_EFILEOPEN
 */

#line 52 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_EFILECOPY); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 52 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 52 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EFILECOPY, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 52 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":53
 * ETIMEOVERLAP = cdsproc3_enums.DSPROC_ETIMEOVERLAP
 * EFILECOPY = cdsproc3_enums.DSPROC_EFILECOPY
 * EFILEMOVE = cdsproc3_enums.DSPROC_EFILEMOVE             # <<<<<<<<<<<<<<
 * EFILEOPEN = cdsproc3_enums.DSPROC_EFILEOPEN
 * EFILESTATS = cdsproc3_enums.DSPROC_EFILESTATS
 */

#line 53 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_EFILEMOVE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 53 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 53 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EFILEMOVE, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 53 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":54
 * EFILECOPY = cdsproc3_enums.DSPROC_EFILECOPY
 * EFILEMOVE = cdsproc3_enums.DSPROC_EFILEMOVE
 * EFILEOPEN = cdsproc3_enums.DSPROC_EFILEOPEN             # <<<<<<<<<<<<<<
 * EFILESTATS = cdsproc3_enums.DSPROC_EFILESTATS
 * EUNLINK = cdsproc3_enums.DSPROC_EUNLINK
 */

#line 54 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_EFILEOPEN); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 54 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 54 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EFILEOPEN, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 54 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":55
 * EFILEMOVE = cdsproc3_enums.DSPROC_EFILEMOVE
 * EFILEOPEN = cdsproc3_enums.DSPROC_EFILEOPEN
 * EFILESTATS = cdsproc3_enums.DSPROC_EFILESTATS             # <<<<<<<<<<<<<<
 * EUNLINK = cdsproc3_enums.DSPROC_EUNLINK
 * ENOSRCFILE = cdsproc3_enums.DSPROC_ENOSRCFILE
 */

#line 55 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_EFILESTATS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 55 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 55 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EFILESTATS, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 55 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":56
 * EFILEOPEN = cdsproc3_enums.DSPROC_EFILEOPEN
 * EFILESTATS = cdsproc3_enums.DSPROC_EFILESTATS
 * EUNLINK = cdsproc3_enums.DSPROC_EUNLINK             # <<<<<<<<<<<<<<
 * ENOSRCFILE = cdsproc3_enums.DSPROC_ENOSRCFILE
 * ENOFILETIME = cdsproc3_enums.DSPROC_ENOFILETIME
 */

#line 56 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_EUNLINK); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 56 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 56 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EUNLINK, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 56 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":57
 * EFILESTATS = cdsproc3_enums.DSPROC_EFILESTATS
 * EUNLINK = cdsproc3_enums.DSPROC_EUNLINK
 * ENOSRCFILE = cdsproc3_enums.DSPROC_ENOSRCFILE             # <<<<<<<<<<<<<<
 * ENOFILETIME = cdsproc3_enums.DSPROC_ENOFILETIME
 * EDESTDIRMAKE = cdsproc3_enums.DSPROC_EDESTDIRMAKE
 */

#line 57 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ENOSRCFILE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 57 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 57 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ENOSRCFILE, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 57 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":58
 * EUNLINK = cdsproc3_enums.DSPROC_EUNLINK
 * ENOSRCFILE = cdsproc3_enums.DSPROC_ENOSRCFILE
 * ENOFILETIME = cdsproc3_enums.DSPROC_ENOFILETIME             # <<<<<<<<<<<<<<
 * EDESTDIRMAKE = cdsproc3_enums.DSPROC_EDESTDIRMAKE
 * ETIMECALC = cdsproc3_enums.DSPROC_ETIMECALC
 */

#line 58 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ENOFILETIME); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 58 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 58 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ENOFILETIME, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 58 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":59
 * ENOSRCFILE = cdsproc3_enums.DSPROC_ENOSRCFILE
 * ENOFILETIME = cdsproc3_enums.DSPROC_ENOFILETIME
 * EDESTDIRMAKE = cdsproc3_enums.DSPROC_EDESTDIRMAKE             # <<<<<<<<<<<<<<
 * ETIMECALC = cdsproc3_enums.DSPROC_ETIMECALC
 * EFILEMD5 = cdsproc3_enums.DSPROC_EFILEMD5
 */

#line 59 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_EDESTDIRMAKE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 59 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 59 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EDESTDIRMAKE, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 59 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":60
 * ENOFILETIME = cdsproc3_enums.DSPROC_ENOFILETIME
 * EDESTDIRMAKE = cdsproc3_enums.DSPROC_EDESTDIRMAKE
 * ETIMECALC = cdsproc3_enums.DSPROC_ETIMECALC             # <<<<<<<<<<<<<<
 * EFILEMD5 = cdsproc3_enums.DSPROC_EFILEMD5
 * EMD5CHECK = cdsproc3_enums.DSPROC_EMD5CHECK
 */

#line 60 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ETIMECALC); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 60 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 60 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ETIMECALC, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 60 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":61
 * EDESTDIRMAKE = cdsproc3_enums.DSPROC_EDESTDIRMAKE
 * ETIMECALC = cdsproc3_enums.DSPROC_ETIMECALC
 * EFILEMD5 = cdsproc3_enums.DSPROC_EFILEMD5             # <<<<<<<<<<<<<<
 * EMD5CHECK = cdsproc3_enums.DSPROC_EMD5CHECK
 * ECDSALLOCVAR = cdsproc3_enums.DSPROC_ECDSALLOCVAR
 */

#line 61 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_EFILEMD5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 61 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 61 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EFILEMD5, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 61 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":62
 * ETIMECALC = cdsproc3_enums.DSPROC_ETIMECALC
 * EFILEMD5 = cdsproc3_enums.DSPROC_EFILEMD5
 * EMD5CHECK = cdsproc3_enums.DSPROC_EMD5CHECK             # <<<<<<<<<<<<<<
 * ECDSALLOCVAR = cdsproc3_enums.DSPROC_ECDSALLOCVAR
 * ECDSCOPYVAR = cdsproc3_enums.DSPROC_ECDSCOPYVAR
 */

#line 62 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_EMD5CHECK); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 62 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 62 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EMD5CHECK, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 62 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":63
 * EFILEMD5 = cdsproc3_enums.DSPROC_EFILEMD5
 * EMD5CHECK = cdsproc3_enums.DSPROC_EMD5CHECK
 * ECDSALLOCVAR = cdsproc3_enums.DSPROC_ECDSALLOCVAR             # <<<<<<<<<<<<<<
 * ECDSCOPYVAR = cdsproc3_enums.DSPROC_ECDSCOPYVAR
 * ECLONEVAR = cdsproc3_enums.DSPROC_ECLONEVAR
 */

#line 63 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ECDSALLOCVAR); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 63 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 63 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ECDSALLOCVAR, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 63 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":64
 * EMD5CHECK = cdsproc3_enums.DSPROC_EMD5CHECK
 * ECDSALLOCVAR = cdsproc3_enums.DSPROC_ECDSALLOCVAR
 * ECDSCOPYVAR = cdsproc3_enums.DSPROC_ECDSCOPYVAR             # <<<<<<<<<<<<<<
 * ECLONEVAR = cdsproc3_enums.DSPROC_ECLONEVAR
 * ECDSDEFVAR = cdsproc3_enums.DSPROC_ECDSDEFVAR
 */

#line 64 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ECDSCOPYVAR); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 64 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 64 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ECDSCOPYVAR, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 64 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":65
 * ECDSALLOCVAR = cdsproc3_enums.DSPROC_ECDSALLOCVAR
 * ECDSCOPYVAR = cdsproc3_enums.DSPROC_ECDSCOPYVAR
 * ECLONEVAR = cdsproc3_enums.DSPROC_ECLONEVAR             # <<<<<<<<<<<<<<
 * ECDSDEFVAR = cdsproc3_enums.DSPROC_ECDSDEFVAR
 * ECDSDELVAR = cdsproc3_enums.DSPROC_ECDSDELVAR
 */

#line 65 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ECLONEVAR); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 65 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 65 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ECLONEVAR, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 65 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":66
 * ECDSCOPYVAR = cdsproc3_enums.DSPROC_ECDSCOPYVAR
 * ECLONEVAR = cdsproc3_enums.DSPROC_ECLONEVAR
 * ECDSDEFVAR = cdsproc3_enums.DSPROC_ECDSDEFVAR             # <<<<<<<<<<<<<<
 * ECDSDELVAR = cdsproc3_enums.DSPROC_ECDSDELVAR
 * ECDSCOPY = cdsproc3_enums.DSPROC_ECDSCOPY
 */

#line 66 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ECDSDEFVAR); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 66 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 66 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ECDSDEFVAR, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 66 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":67
 * ECLONEVAR = cdsproc3_enums.DSPROC_ECLONEVAR
 * ECDSDEFVAR = cdsproc3_enums.DSPROC_ECDSDEFVAR
 * ECDSDELVAR = cdsproc3_enums.DSPROC_ECDSDELVAR             # <<<<<<<<<<<<<<
 * ECDSCOPY = cdsproc3_enums.DSPROC_ECDSCOPY
 * ECDSCHANGEATT = cdsproc3_enums.DSPROC_ECDSCHANGEATT
 */

#line 67 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ECDSDELVAR); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 67 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 67 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ECDSDELVAR, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 67 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":68
 * ECDSDEFVAR = cdsproc3_enums.DSPROC_ECDSDEFVAR
 * ECDSDELVAR = cdsproc3_enums.DSPROC_ECDSDELVAR
 * ECDSCOPY = cdsproc3_enums.DSPROC_ECDSCOPY             # <<<<<<<<<<<<<<
 * ECDSCHANGEATT = cdsproc3_enums.DSPROC_ECDSCHANGEATT
 * ECDSSETATT = cdsproc3_enums.DSPROC_ECDSSETATT
 */

#line 68 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ECDSCOPY); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 68 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 68 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ECDSCOPY, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 68 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":69
 * ECDSDELVAR = cdsproc3_enums.DSPROC_ECDSDELVAR
 * ECDSCOPY = cdsproc3_enums.DSPROC_ECDSCOPY
 * ECDSCHANGEATT = cdsproc3_enums.DSPROC_ECDSCHANGEATT             # <<<<<<<<<<<<<<
 * ECDSSETATT = cdsproc3_enums.DSPROC_ECDSSETATT
 * ECDSSETDIM = cdsproc3_enums.DSPROC_ECDSSETDIM
 */

#line 69 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ECDSCHANGEATT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 69 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 69 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ECDSCHANGEATT, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 69 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":70
 * ECDSCOPY = cdsproc3_enums.DSPROC_ECDSCOPY
 * ECDSCHANGEATT = cdsproc3_enums.DSPROC_ECDSCHANGEATT
 * ECDSSETATT = cdsproc3_enums.DSPROC_ECDSSETATT             # <<<<<<<<<<<<<<
 * ECDSSETDIM = cdsproc3_enums.DSPROC_ECDSSETDIM
 * ECDSSETDATA = cdsproc3_enums.DSPROC_ECDSSETDATA
 */

#line 70 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ECDSSETATT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 70 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 70 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ECDSSETATT, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 70 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":71
 * ECDSCHANGEATT = cdsproc3_enums.DSPROC_ECDSCHANGEATT
 * ECDSSETATT = cdsproc3_enums.DSPROC_ECDSSETATT
 * ECDSSETDIM = cdsproc3_enums.DSPROC_ECDSSETDIM             # <<<<<<<<<<<<<<
 * ECDSSETDATA = cdsproc3_enums.DSPROC_ECDSSETDATA
 * ECDSSETTIME = cdsproc3_enums.DSPROC_ECDSSETTIME
 */

#line 71 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ECDSSETDIM); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 71 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 71 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ECDSSETDIM, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 71 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":72
 * ECDSSETATT = cdsproc3_enums.DSPROC_ECDSSETATT
 * ECDSSETDIM = cdsproc3_enums.DSPROC_ECDSSETDIM
 * ECDSSETDATA = cdsproc3_enums.DSPROC_ECDSSETDATA             # <<<<<<<<<<<<<<
 * ECDSSETTIME = cdsproc3_enums.DSPROC_ECDSSETTIME
 * ECDSGETTIME = cdsproc3_enums.DSPROC_ECDSGETTIME
 */

#line 72 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ECDSSETDATA); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 72 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 72 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ECDSSETDATA, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 72 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":73
 * ECDSSETDIM = cdsproc3_enums.DSPROC_ECDSSETDIM
 * ECDSSETDATA = cdsproc3_enums.DSPROC_ECDSSETDATA
 * ECDSSETTIME = cdsproc3_enums.DSPROC_ECDSSETTIME             # <<<<<<<<<<<<<<
 * ECDSGETTIME = cdsproc3_enums.DSPROC_ECDSGETTIME
 * ENODOD = cdsproc3_enums.DSPROC_ENODOD
 */

#line 73 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ECDSSETTIME); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 73 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 73 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ECDSSETTIME, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 73 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":74
 * ECDSSETDATA = cdsproc3_enums.DSPROC_ECDSSETDATA
 * ECDSSETTIME = cdsproc3_enums.DSPROC_ECDSSETTIME
 * ECDSGETTIME = cdsproc3_enums.DSPROC_ECDSGETTIME             # <<<<<<<<<<<<<<
 * ENODOD = cdsproc3_enums.DSPROC_ENODOD
 * ENORETRIEVER = cdsproc3_enums.DSPROC_ENORETRIEVER
 */

#line 74 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ECDSGETTIME); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 74 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 74 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ECDSGETTIME, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 74 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":75
 * ECDSSETTIME = cdsproc3_enums.DSPROC_ECDSSETTIME
 * ECDSGETTIME = cdsproc3_enums.DSPROC_ECDSGETTIME
 * ENODOD = cdsproc3_enums.DSPROC_ENODOD             # <<<<<<<<<<<<<<
 * ENORETRIEVER = cdsproc3_enums.DSPROC_ENORETRIEVER
 * EBADRETRIEVER = cdsproc3_enums.DSPROC_EBADRETRIEVER
 */

#line 75 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ENODOD); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 75 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 75 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ENODOD, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 75 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":76
 * ECDSGETTIME = cdsproc3_enums.DSPROC_ECDSGETTIME
 * ENODOD = cdsproc3_enums.DSPROC_ENODOD
 * ENORETRIEVER = cdsproc3_enums.DSPROC_ENORETRIEVER             # <<<<<<<<<<<<<<
 * EBADRETRIEVER = cdsproc3_enums.DSPROC_EBADRETRIEVER
 * EREQVAR = cdsproc3_enums.DSPROC_EREQVAR
 */

#line 76 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ENORETRIEVER); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 76 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 76 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ENORETRIEVER, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 76 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":77
 * ENODOD = cdsproc3_enums.DSPROC_ENODOD
 * ENORETRIEVER = cdsproc3_enums.DSPROC_ENORETRIEVER
 * EBADRETRIEVER = cdsproc3_enums.DSPROC_EBADRETRIEVER             # <<<<<<<<<<<<<<
 * EREQVAR = cdsproc3_enums.DSPROC_EREQVAR
 * ERETRIEVER = cdsproc3_enums.DSPROC_ERETRIEVER
 */

#line 77 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_EBADRETRIEVER); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 77 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 77 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EBADRETRIEVER, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 77 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":78
 * ENORETRIEVER = cdsproc3_enums.DSPROC_ENORETRIEVER
 * EBADRETRIEVER = cdsproc3_enums.DSPROC_EBADRETRIEVER
 * EREQVAR = cdsproc3_enums.DSPROC_EREQVAR             # <<<<<<<<<<<<<<
 * ERETRIEVER = cdsproc3_enums.DSPROC_ERETRIEVER
 * ENCOPEN = cdsproc3_enums.DSPROC_ENCOPEN
 */

#line 78 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_EREQVAR); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 78 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 78 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EREQVAR, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 78 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":79
 * EBADRETRIEVER = cdsproc3_enums.DSPROC_EBADRETRIEVER
 * EREQVAR = cdsproc3_enums.DSPROC_EREQVAR
 * ERETRIEVER = cdsproc3_enums.DSPROC_ERETRIEVER             # <<<<<<<<<<<<<<
 * ENCOPEN = cdsproc3_enums.DSPROC_ENCOPEN
 * ENCREAD = cdsproc3_enums.DSPROC_ENCREAD
 */

#line 79 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ERETRIEVER); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 79 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 79 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ERETRIEVER, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 79 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":80
 * EREQVAR = cdsproc3_enums.DSPROC_EREQVAR
 * ERETRIEVER = cdsproc3_enums.DSPROC_ERETRIEVER
 * ENCOPEN = cdsproc3_enums.DSPROC_ENCOPEN             # <<<<<<<<<<<<<<
 * ENCREAD = cdsproc3_enums.DSPROC_ENCREAD
 * ENOTRANSFORM = cdsproc3_enums.DSPROC_ENOTRANSFORM
 */

#line 80 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ENCOPEN); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 80 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 80 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ENCOPEN, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 80 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":81
 * ERETRIEVER = cdsproc3_enums.DSPROC_ERETRIEVER
 * ENCOPEN = cdsproc3_enums.DSPROC_ENCOPEN
 * ENCREAD = cdsproc3_enums.DSPROC_ENCREAD             # <<<<<<<<<<<<<<
 * ENOTRANSFORM = cdsproc3_enums.DSPROC_ENOTRANSFORM
 * ETRANSFORM = cdsproc3_enums.DSPROC_ETRANSFORM
 */

#line 81 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ENCREAD); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 81 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 81 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ENCREAD, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 81 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":82
 * ENCOPEN = cdsproc3_enums.DSPROC_ENCOPEN
 * ENCREAD = cdsproc3_enums.DSPROC_ENCREAD
 * ENOTRANSFORM = cdsproc3_enums.DSPROC_ENOTRANSFORM             # <<<<<<<<<<<<<<
 * ETRANSFORM = cdsproc3_enums.DSPROC_ETRANSFORM
 * ETRANSPARAMLOAD = cdsproc3_enums.DSPROC_ETRANSPARAMLOAD
 */

#line 82 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ENOTRANSFORM); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 82 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 82 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ENOTRANSFORM, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 82 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":83
 * ENCREAD = cdsproc3_enums.DSPROC_ENCREAD
 * ENOTRANSFORM = cdsproc3_enums.DSPROC_ENOTRANSFORM
 * ETRANSFORM = cdsproc3_enums.DSPROC_ETRANSFORM             # <<<<<<<<<<<<<<
 * ETRANSPARAMLOAD = cdsproc3_enums.DSPROC_ETRANSPARAMLOAD
 * EVARMAP = cdsproc3_enums.DSPROC_EVARMAP
 */

#line 83 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ETRANSFORM); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 83 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 83 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ETRANSFORM, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 83 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":84
 * ENOTRANSFORM = cdsproc3_enums.DSPROC_ENOTRANSFORM
 * ETRANSFORM = cdsproc3_enums.DSPROC_ETRANSFORM
 * ETRANSPARAMLOAD = cdsproc3_enums.DSPROC_ETRANSPARAMLOAD             # <<<<<<<<<<<<<<
 * EVARMAP = cdsproc3_enums.DSPROC_EVARMAP
 * 
 */

#line 84 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_ETRANSPARAMLOAD); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 84 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 84 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__ETRANSPARAMLOAD, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 84 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":85
 * ETRANSFORM = cdsproc3_enums.DSPROC_ETRANSFORM
 * ETRANSPARAMLOAD = cdsproc3_enums.DSPROC_ETRANSPARAMLOAD
 * EVARMAP = cdsproc3_enums.DSPROC_EVARMAP             # <<<<<<<<<<<<<<
 * 
 * LIB_NAME = cdsproc3_enums.DSPROC_LIB_NAME
 */

#line 85 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_EVARMAP); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 85 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 85 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__EVARMAP, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 85 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":87
 * EVARMAP = cdsproc3_enums.DSPROC_EVARMAP
 * 
 * LIB_NAME = cdsproc3_enums.DSPROC_LIB_NAME             # <<<<<<<<<<<<<<
 * 
 * DS_STANDARD_QC = cdsproc3_enums.DS_STANDARD_QC
 */

#line 87 "dsproc3/enums.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_LIB_NAME); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 87 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 87 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__LIB_NAME, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 87 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":89
 * LIB_NAME = cdsproc3_enums.DSPROC_LIB_NAME
 * 
 * DS_STANDARD_QC = cdsproc3_enums.DS_STANDARD_QC             # <<<<<<<<<<<<<<
 * DS_FILTER_NANS = cdsproc3_enums.DS_FILTER_NANS
 * DS_OVERLAP_CHECK = cdsproc3_enums.DS_OVERLAP_CHECK
 */

#line 89 "dsproc3/enums.pyx"
  __pyx_t_1 = PyInt_FromLong(DS_STANDARD_QC); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 89 "dsproc3/enums.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 89 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__DS_STANDARD_QC, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 89 "dsproc3/enums.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":90
 * 
 * DS_STANDARD_QC = cdsproc3_enums.DS_STANDARD_QC
 * DS_FILTER_NANS = cdsproc3_enums.DS_FILTER_NANS             # <<<<<<<<<<<<<<
 * DS_OVERLAP_CHECK = cdsproc3_enums.DS_OVERLAP_CHECK
 * DS_PRESERVE_OBS = cdsproc3_enums.DS_PRESERVE_OBS
 */

#line 90 "dsproc3/enums.pyx"
  __pyx_t_1 = PyInt_FromLong(DS_FILTER_NANS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 90 "dsproc3/enums.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 90 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__DS_FILTER_NANS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 90 "dsproc3/enums.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":91
 * DS_STANDARD_QC = cdsproc3_enums.DS_STANDARD_QC
 * DS_FILTER_NANS = cdsproc3_enums.DS_FILTER_NANS
 * DS_OVERLAP_CHECK = cdsproc3_enums.DS_OVERLAP_CHECK             # <<<<<<<<<<<<<<
 * DS_PRESERVE_OBS = cdsproc3_enums.DS_PRESERVE_OBS
 * DS_DISABLE_MERGE = cdsproc3_enums.DS_DISABLE_MERGE
 */

#line 91 "dsproc3/enums.pyx"
  __pyx_t_1 = PyInt_FromLong(DS_OVERLAP_CHECK); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 91 "dsproc3/enums.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 91 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__DS_OVERLAP_CHECK, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 91 "dsproc3/enums.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":92
 * DS_FILTER_NANS = cdsproc3_enums.DS_FILTER_NANS
 * DS_OVERLAP_CHECK = cdsproc3_enums.DS_OVERLAP_CHECK
 * DS_PRESERVE_OBS = cdsproc3_enums.DS_PRESERVE_OBS             # <<<<<<<<<<<<<<
 * DS_DISABLE_MERGE = cdsproc3_enums.DS_DISABLE_MERGE
 * DS_SKIP_TRANSFORM = cdsproc3_enums.DS_SKIP_TRANSFORM
 */

#line 92 "dsproc3/enums.pyx"
  __pyx_t_1 = PyInt_FromLong(DS_PRESERVE_OBS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 92 "dsproc3/enums.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 92 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__DS_PRESERVE_OBS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 92 "dsproc3/enums.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":93
 * DS_OVERLAP_CHECK = cdsproc3_enums.DS_OVERLAP_CHECK
 * DS_PRESERVE_OBS = cdsproc3_enums.DS_PRESERVE_OBS
 * DS_DISABLE_MERGE = cdsproc3_enums.DS_DISABLE_MERGE             # <<<<<<<<<<<<<<
 * DS_SKIP_TRANSFORM = cdsproc3_enums.DS_SKIP_TRANSFORM
 * 
 */

#line 93 "dsproc3/enums.pyx"
  __pyx_t_1 = PyInt_FromLong(DS_DISABLE_MERGE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 92 "dsproc3/enums.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 93 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__DS_DISABLE_MERGE, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 92 "dsproc3/enums.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":94
 * DS_PRESERVE_OBS = cdsproc3_enums.DS_PRESERVE_OBS
 * DS_DISABLE_MERGE = cdsproc3_enums.DS_DISABLE_MERGE
 * DS_SKIP_TRANSFORM = cdsproc3_enums.DS_SKIP_TRANSFORM             # <<<<<<<<<<<<<<
 * 
 * DSF_NETCDF = cdsproc3_enums.DSF_NETCDF
 */

#line 94 "dsproc3/enums.pyx"
  __pyx_t_1 = PyInt_FromLong(DS_SKIP_TRANSFORM); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 94 "dsproc3/enums.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 94 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__DS_SKIP_TRANSFORM, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 94 "dsproc3/enums.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":96
 * DS_SKIP_TRANSFORM = cdsproc3_enums.DS_SKIP_TRANSFORM
 * 
 * DSF_NETCDF = cdsproc3_enums.DSF_NETCDF             # <<<<<<<<<<<<<<
 * DSF_RAW = cdsproc3_enums.DSF_RAW
 * DSF_PNG = cdsproc3_enums.DSF_PNG
 */

#line 96 "dsproc3/enums.pyx"
  __pyx_t_1 = PyInt_FromLong(DSF_NETCDF); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 96 "dsproc3/enums.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 96 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__DSF_NETCDF, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 96 "dsproc3/enums.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":97
 * 
 * 
 * DSF_NETCDF = cdsproc3_enums.DSF_NETCDF
 * DSF_RAW = cdsproc3_enums.DSF_RAW             # <<<<<<<<<<<<<<
 * DSF_PNG = cdsproc3_enums.DSF_PNG
 * DSF_JPG = cdsproc3_enums.DSF_JPG
 */

#line 97 "dsproc3/enums.pyx"
  __pyx_t_1 = PyInt_FromLong(DSF_RAW); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "dsproc3/enums.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 97 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__DSF_RAW, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "dsproc3/enums.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":98
 * DSF_NETCDF = cdsproc3_enums.DSF_NETCDF
 * DSF_RAW = cdsproc3_enums.DSF_RAW
 * DSF_PNG = cdsproc3_enums.DSF_PNG             # <<<<<<<<<<<<<<
 * DSF_JPG = cdsproc3_enums.DSF_JPG
 */

#line 98 "dsproc3/enums.pyx"
  __pyx_t_1 = PyInt_FromLong(DSF_PNG); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 98 "dsproc3/enums.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 98 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__DSF_PNG, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 98 "dsproc3/enums.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":99
 * DSF_NETCDF = cdsproc3_enums.DSF_NETCDF
 * DSF_RAW = cdsproc3_enums.DSF_RAW
 * DSF_PNG = cdsproc3_enums.DSF_PNG             # <<<<<<<<<<<<<<
 * DSF_JPG = cdsproc3_enums.DSF_JPG
 */

#line 99 "dsproc3/enums.pyx"
  __pyx_t_1 = PyInt_FromLong(DSF_JPG); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 99 "dsproc3/enums.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 99 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__DSF_JPG, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 99 "dsproc3/enums.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":97
 * DSF_RAW = cdsproc3_enums.DSF_RAW
 * DSF_PNG = cdsproc3_enums.DSF_PNG
 * DSF_JPG = cdsproc3_enums.DSF_JPG             # <<<<<<<<<<<<<<
 */

#line 97 "dsproc3/enums.pyx"
  __pyx_t_1 = PyInt_FromLong(DSF_JPG); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "dsproc3/enums.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 97 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__DSF_JPG, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "dsproc3/enums.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/enums.pyx":1
 * #******************************************************************************             # <<<<<<<<<<<<<<
 * #
 * #  COPYRIGHT (C) 2012 Battelle Memorial Institute.  All Rights Reserved.
 */

#line 1 "dsproc3/enums.pyx"
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1 "dsproc3/enums.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 1 "dsproc3/enums.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1 "dsproc3/enums.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

#line 1 "dsproc3/enums.pyx"
  goto __pyx_L0;

#line 1 "dsproc3/enums.pyx"
  __pyx_L1_error:;

#line 1 "dsproc3/enums.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1 "dsproc3/enums.pyx"
  if (__pyx_m) {

#line 1 "dsproc3/enums.pyx"
    __Pyx_AddTraceback("init dsproc3.enums", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "dsproc3/enums.pyx"
    Py_DECREF(__pyx_m); __pyx_m = 0;

#line 1 "dsproc3/enums.pyx"
  } else if (!PyErr_Occurred()) {

#line 1 "dsproc3/enums.pyx"
    PyErr_SetString(PyExc_ImportError, "init dsproc3.enums");

#line 1 "dsproc3/enums.pyx"
  }

#line 1 "dsproc3/enums.pyx"
  __pyx_L0:;

#line 1 "dsproc3/enums.pyx"
  __Pyx_RefNannyFinishContext();

#line 1 "dsproc3/enums.pyx"
  #if PY_MAJOR_VERSION < 3

#line 1 "dsproc3/enums.pyx"
  return;

#line 1 "dsproc3/enums.pyx"
  #else

#line 1 "dsproc3/enums.pyx"
  return __pyx_m;

#line 1 "dsproc3/enums.pyx"
  #endif

#line 1 "dsproc3/enums.pyx"
}

#line 1 "cython_utility"

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
