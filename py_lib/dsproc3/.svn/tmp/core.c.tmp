<<<<<<< .mine
/* Generated by Cython 0.18 on Wed Dec  4 01:16:42 2013 */
=======
/* Generated by Cython 0.18 on Tue Dec  3 01:32:20 2013 */
>>>>>>> .r50302

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_AsInt(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define __Pyx_PyIndex_Check(o) (PyNumber_Check(o) && !PyFloat_Check(o) && \
                                  !PyComplex_Check(o))
  #define PyIndex_Check __Pyx_PyIndex_Check
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
  #define __Pyx_PyIndex_Check PyIndex_Check
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#if PY_MAJOR_VERSION < 3 && PY_MINOR_VERSION < 6
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((k=k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x03020000
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__dsproc3__core
#define __PYX_HAVE_API__dsproc3__core
#include "string.h"
#include "stdio.h"
#include "stddef.h"
#include "stdarg.h"
#include "sys/types.h"
#include "sys/time.h"
#include "cds3.h"
#include "dsdb3.h"
#include "dsproc3.h"
#include "dsproc3_internal.h"
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "messenger.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))


#ifdef __GNUC__
  /* Test for GCC > 2.95 */
  #if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
    #define likely(x)   __builtin_expect(!!(x), 1)
    #define unlikely(x) __builtin_expect(!!(x), 0)
  #else /* __GNUC__ > 2 ... */
    #define likely(x)   (x)
    #define unlikely(x) (x)
  #endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "core.pyx",
  "numpy.pxd",
  "type.pxd",
  "core.pxd",
};
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name; /* for error messages only */
  struct __Pyx_StructField_* fields;
  size_t size;     /* sizeof(type) */
  size_t arraysize[8]; /* length of array in each dimension */
  int ndim;
  char typegroup; /* _R_eal, _C_omplex, Signed _I_nt, _U_nsigned int, _S_truct, _P_ointer, _O_bject, c_H_ar */
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "numpy.pxd":723
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */

#line 723 "numpy.pxd"
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "numpy.pxd":724
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */

#line 724 "numpy.pxd"
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "numpy.pxd":725
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */

#line 725 "numpy.pxd"
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "numpy.pxd":726
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */

#line 726 "numpy.pxd"
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "numpy.pxd":730
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */

#line 730 "numpy.pxd"
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "numpy.pxd":731
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */

#line 731 "numpy.pxd"
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "numpy.pxd":732
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */

#line 732 "numpy.pxd"
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "numpy.pxd":733
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */

#line 733 "numpy.pxd"
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "numpy.pxd":737
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */

#line 737 "numpy.pxd"
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "numpy.pxd":738
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */

#line 738 "numpy.pxd"
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "numpy.pxd":747
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */

#line 747 "numpy.pxd"
typedef npy_long __pyx_t_5numpy_int_t;

/* "numpy.pxd":748
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */

#line 748 "numpy.pxd"
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "numpy.pxd":749
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */

#line 749 "numpy.pxd"
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "numpy.pxd":751
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */

#line 751 "numpy.pxd"
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "numpy.pxd":752
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */

#line 752 "numpy.pxd"
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "numpy.pxd":753
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */

#line 753 "numpy.pxd"
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "numpy.pxd":755
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */

#line 755 "numpy.pxd"
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "numpy.pxd":756
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */

#line 756 "numpy.pxd"
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "numpy.pxd":758
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */

#line 758 "numpy.pxd"
typedef npy_double __pyx_t_5numpy_float_t;

/* "numpy.pxd":759
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */

#line 759 "numpy.pxd"
typedef npy_double __pyx_t_5numpy_double_t;

/* "numpy.pxd":760
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */

#line 760 "numpy.pxd"
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif


/*--- Type declarations ---*/
struct __pyx_obj_4cds3_4core_Object;
struct __pyx_obj_4cds3_4core_Dim;
struct __pyx_obj_4cds3_4core_Var;
struct __pyx_obj_4cds3_4core_Att;
struct __pyx_obj_4cds3_4core_Group;
struct __pyx_obj_7dsproc3_4core_PyVarTarget;
struct __pyx_obj_4cds3_4core_VarArray;
struct __pyx_obj_4cds3_4core_VarGroup;

/* "numpy.pxd":762
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */

#line 762 "numpy.pxd"
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "numpy.pxd":763
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */

#line 763 "numpy.pxd"
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "numpy.pxd":764
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */

#line 764 "numpy.pxd"
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "numpy.pxd":766
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */

#line 766 "numpy.pxd"
typedef npy_cdouble __pyx_t_5numpy_complex_t;

#line 766 "numpy.pxd"
struct __pyx_opt_args_4cds3_4core_3Var_get_datap;

/* "cds3/core.pxd":25
 *     cdef CDSVar *c_ob
 *     cdef set_var(self, CDSVar *obj)
 *     cpdef np.ndarray get_datap(self, size_t sample_start=*)             # <<<<<<<<<<<<<<
 * 
 * cdef class VarGroup(Object):
 */

#line 25 "cds3/core.pxd"
struct __pyx_opt_args_4cds3_4core_3Var_get_datap {

#line 25 "cds3/core.pxd"
  int __pyx_n;

#line 25 "cds3/core.pxd"
  size_t sample_start;

#line 25 "cds3/core.pxd"
};

#line 25 "cds3/core.pxd"
struct __pyx_opt_args_7dsproc3_4core__alloc_single;

/* "dsproc3/core.pyx":642
 *     free(address)
 * 
 * cdef inline void* _alloc_single(CDSDataType type, object initial_value=None):             # <<<<<<<<<<<<<<
 *     """Allocates a single value of the given type and return its address."""
 *     cdef void *retval = NULL
 */

#line 642 "dsproc3/core.pyx"
struct __pyx_opt_args_7dsproc3_4core__alloc_single {

#line 642 "dsproc3/core.pyx"
  int __pyx_n;

#line 642 "dsproc3/core.pyx"
  PyObject *initial_value;

#line 642 "dsproc3/core.pyx"
};

/* "cds3/core.pxd":6
 * cimport numpy as np
 * 
 * cdef class Object:             # <<<<<<<<<<<<<<
 *     cdef CDSObject *cds_object
 *     cdef set_object(self, CDSObject *obj)
 */

#line 6 "cds3/core.pxd"
struct __pyx_obj_4cds3_4core_Object {

#line 6 "cds3/core.pxd"
  PyObject_HEAD

#line 6 "cds3/core.pxd"
  struct __pyx_vtabstruct_4cds3_4core_Object *__pyx_vtab;

#line 6 "cds3/core.pxd"
  struct CDSObject *cds_object;

#line 6 "cds3/core.pxd"
};

#line 6 "cds3/core.pxd"


/* "cds3/core.pxd":14
 *     cdef set_group(self, CDSGroup *obj)
 * 
 * cdef class Dim(Object):             # <<<<<<<<<<<<<<
 *     cdef CDSDim *c_ob
 *     cdef set_dim(self, CDSDim *obj)
 */

#line 14 "cds3/core.pxd"
struct __pyx_obj_4cds3_4core_Dim {

#line 14 "cds3/core.pxd"
  struct __pyx_obj_4cds3_4core_Object __pyx_base;

#line 14 "cds3/core.pxd"
  struct CDSDim *c_ob;

#line 14 "cds3/core.pxd"
};

#line 14 "cds3/core.pxd"


/* "cds3/core.pxd":22
 *     cdef set_att(self, CDSAtt *obj)
 * 
 * cdef class Var(Object):             # <<<<<<<<<<<<<<
 *     cdef CDSVar *c_ob
 *     cdef set_var(self, CDSVar *obj)
 */

#line 22 "cds3/core.pxd"
struct __pyx_obj_4cds3_4core_Var {

#line 22 "cds3/core.pxd"
  struct __pyx_obj_4cds3_4core_Object __pyx_base;

#line 22 "cds3/core.pxd"
  struct CDSVar *c_ob;

#line 22 "cds3/core.pxd"
};

#line 22 "cds3/core.pxd"


/* "cds3/core.pxd":18
 *     cdef set_dim(self, CDSDim *obj)
 * 
 * cdef class Att(Object):             # <<<<<<<<<<<<<<
 *     cdef CDSAtt *c_ob
 *     cdef set_att(self, CDSAtt *obj)
 */

#line 18 "cds3/core.pxd"
struct __pyx_obj_4cds3_4core_Att {

#line 18 "cds3/core.pxd"
  struct __pyx_obj_4cds3_4core_Object __pyx_base;

#line 18 "cds3/core.pxd"
  struct CDSAtt *c_ob;

#line 18 "cds3/core.pxd"
};

#line 18 "cds3/core.pxd"


/* "cds3/core.pxd":10
 *     cdef set_object(self, CDSObject *obj)
 * 
 * cdef class Group(Object):             # <<<<<<<<<<<<<<
 *     cdef CDSGroup *c_ob
 *     cdef set_group(self, CDSGroup *obj)
 */

#line 10 "cds3/core.pxd"
struct __pyx_obj_4cds3_4core_Group {

#line 10 "cds3/core.pxd"
  struct __pyx_obj_4cds3_4core_Object __pyx_base;

#line 10 "cds3/core.pxd"
  struct CDSGroup *c_ob;

#line 10 "cds3/core.pxd"
};

#line 10 "cds3/core.pxd"


/* "dsproc3/core.pxd":5
 * cimport cdsproc3
 * 
 * cdef class PyVarTarget:             # <<<<<<<<<<<<<<
 *     cdef cdsproc3.VarTarget *cobj
 *     cdef set_vartarget(self, cdsproc3.VarTarget *obj)
 */

#line 5 "dsproc3/core.pxd"
struct __pyx_obj_7dsproc3_4core_PyVarTarget {

#line 5 "dsproc3/core.pxd"
  PyObject_HEAD

#line 5 "dsproc3/core.pxd"
  struct __pyx_vtabstruct_7dsproc3_4core_PyVarTarget *__pyx_vtab;

#line 5 "dsproc3/core.pxd"
  VarTarget *cobj;

#line 5 "dsproc3/core.pxd"
};

#line 5 "dsproc3/core.pxd"


/* "cds3/core.pxd":31
 *     cdef set_vargroup(self, CDSVarGroup *obj)
 * 
 * cdef class VarArray(Object):             # <<<<<<<<<<<<<<
 *     cdef CDSVarArray *c_ob
 *     cdef set_vararray(self, CDSVarArray *obj)
 */

#line 31 "cds3/core.pxd"
struct __pyx_obj_4cds3_4core_VarArray {

#line 31 "cds3/core.pxd"
  struct __pyx_obj_4cds3_4core_Object __pyx_base;

#line 31 "cds3/core.pxd"
  struct CDSVarArray *c_ob;

#line 31 "cds3/core.pxd"
};

#line 31 "cds3/core.pxd"


/* "cds3/core.pxd":27
 *     cpdef np.ndarray get_datap(self, size_t sample_start=*)
 * 
 * cdef class VarGroup(Object):             # <<<<<<<<<<<<<<
 *     cdef CDSVarGroup *c_ob
 *     cdef set_vargroup(self, CDSVarGroup *obj)
 */

#line 27 "cds3/core.pxd"
struct __pyx_obj_4cds3_4core_VarGroup {

#line 27 "cds3/core.pxd"
  struct __pyx_obj_4cds3_4core_Object __pyx_base;

#line 27 "cds3/core.pxd"
  struct CDSVarGroup *c_ob;

#line 27 "cds3/core.pxd"
};

#line 27 "cds3/core.pxd"


#line 27 "cds3/core.pxd"


/* "cds3/core.pxd":6
 * cimport numpy as np
 * 
 * cdef class Object:             # <<<<<<<<<<<<<<
 *     cdef CDSObject *cds_object
 *     cdef set_object(self, CDSObject *obj)
 */

#line 6 "cds3/core.pxd"


#line 6 "cds3/core.pxd"
struct __pyx_vtabstruct_4cds3_4core_Object {

#line 6 "cds3/core.pxd"
  PyObject *(*set_object)(struct __pyx_obj_4cds3_4core_Object *, struct CDSObject *);

#line 6 "cds3/core.pxd"
};

#line 6 "cds3/core.pxd"
static struct __pyx_vtabstruct_4cds3_4core_Object *__pyx_vtabptr_4cds3_4core_Object;

#line 6 "cds3/core.pxd"


/* "cds3/core.pxd":10
 *     cdef set_object(self, CDSObject *obj)
 * 
 * cdef class Group(Object):             # <<<<<<<<<<<<<<
 *     cdef CDSGroup *c_ob
 *     cdef set_group(self, CDSGroup *obj)
 */

#line 10 "cds3/core.pxd"


#line 10 "cds3/core.pxd"
struct __pyx_vtabstruct_4cds3_4core_Group {

#line 10 "cds3/core.pxd"
  struct __pyx_vtabstruct_4cds3_4core_Object __pyx_base;

#line 10 "cds3/core.pxd"
  PyObject *(*set_group)(struct __pyx_obj_4cds3_4core_Group *, struct CDSGroup *);

#line 10 "cds3/core.pxd"
};

#line 10 "cds3/core.pxd"
static struct __pyx_vtabstruct_4cds3_4core_Group *__pyx_vtabptr_4cds3_4core_Group;

#line 10 "cds3/core.pxd"


/* "cds3/core.pxd":22
 *     cdef set_att(self, CDSAtt *obj)
 * 
 * cdef class Var(Object):             # <<<<<<<<<<<<<<
 *     cdef CDSVar *c_ob
 *     cdef set_var(self, CDSVar *obj)
 */

#line 22 "cds3/core.pxd"


#line 22 "cds3/core.pxd"
struct __pyx_vtabstruct_4cds3_4core_Var {

#line 22 "cds3/core.pxd"
  struct __pyx_vtabstruct_4cds3_4core_Object __pyx_base;

#line 22 "cds3/core.pxd"
  PyObject *(*set_var)(struct __pyx_obj_4cds3_4core_Var *, struct CDSVar *);

#line 22 "cds3/core.pxd"
  PyArrayObject *(*get_datap)(struct __pyx_obj_4cds3_4core_Var *, int __pyx_skip_dispatch, struct __pyx_opt_args_4cds3_4core_3Var_get_datap *__pyx_optional_args);

#line 22 "cds3/core.pxd"
};

#line 22 "cds3/core.pxd"
static struct __pyx_vtabstruct_4cds3_4core_Var *__pyx_vtabptr_4cds3_4core_Var;

#line 22 "cds3/core.pxd"


/* "cds3/core.pxd":18
 *     cdef set_dim(self, CDSDim *obj)
 * 
 * cdef class Att(Object):             # <<<<<<<<<<<<<<
 *     cdef CDSAtt *c_ob
 *     cdef set_att(self, CDSAtt *obj)
 */

#line 18 "cds3/core.pxd"


#line 18 "cds3/core.pxd"
struct __pyx_vtabstruct_4cds3_4core_Att {

#line 18 "cds3/core.pxd"
  struct __pyx_vtabstruct_4cds3_4core_Object __pyx_base;

#line 18 "cds3/core.pxd"
  PyObject *(*set_att)(struct __pyx_obj_4cds3_4core_Att *, struct CDSAtt *);

#line 18 "cds3/core.pxd"
};

#line 18 "cds3/core.pxd"
static struct __pyx_vtabstruct_4cds3_4core_Att *__pyx_vtabptr_4cds3_4core_Att;

#line 18 "cds3/core.pxd"


/* "dsproc3/core.pyx":48
 * LIB_NAME = enums.DSPROC_LIB_NAME
 * 
 * cdef class PyVarTarget:             # <<<<<<<<<<<<<<
 *     """PyVarTarget"""
 * 
 */

#line 48 "dsproc3/core.pyx"


#line 48 "dsproc3/core.pyx"
struct __pyx_vtabstruct_7dsproc3_4core_PyVarTarget {

#line 48 "dsproc3/core.pyx"
  PyObject *(*set_vartarget)(struct __pyx_obj_7dsproc3_4core_PyVarTarget *, VarTarget *);

#line 48 "dsproc3/core.pyx"
};

#line 48 "dsproc3/core.pyx"
static struct __pyx_vtabstruct_7dsproc3_4core_PyVarTarget *__pyx_vtabptr_7dsproc3_4core_PyVarTarget;

#line 48 "dsproc3/core.pyx"


/* "cds3/core.pxd":14
 *     cdef set_group(self, CDSGroup *obj)
 * 
 * cdef class Dim(Object):             # <<<<<<<<<<<<<<
 *     cdef CDSDim *c_ob
 *     cdef set_dim(self, CDSDim *obj)
 */

#line 14 "cds3/core.pxd"


#line 14 "cds3/core.pxd"
struct __pyx_vtabstruct_4cds3_4core_Dim {

#line 14 "cds3/core.pxd"
  struct __pyx_vtabstruct_4cds3_4core_Object __pyx_base;

#line 14 "cds3/core.pxd"
  PyObject *(*set_dim)(struct __pyx_obj_4cds3_4core_Dim *, struct CDSDim *);

#line 14 "cds3/core.pxd"
};

#line 14 "cds3/core.pxd"
static struct __pyx_vtabstruct_4cds3_4core_Dim *__pyx_vtabptr_4cds3_4core_Dim;

#line 14 "cds3/core.pxd"


/* "cds3/core.pxd":31
 *     cdef set_vargroup(self, CDSVarGroup *obj)
 * 
 * cdef class VarArray(Object):             # <<<<<<<<<<<<<<
 *     cdef CDSVarArray *c_ob
 *     cdef set_vararray(self, CDSVarArray *obj)
 */

#line 31 "cds3/core.pxd"


#line 31 "cds3/core.pxd"
struct __pyx_vtabstruct_4cds3_4core_VarArray {

#line 31 "cds3/core.pxd"
  struct __pyx_vtabstruct_4cds3_4core_Object __pyx_base;

#line 31 "cds3/core.pxd"
  PyObject *(*set_vararray)(struct __pyx_obj_4cds3_4core_VarArray *, struct CDSVarArray *);

#line 31 "cds3/core.pxd"
};

#line 31 "cds3/core.pxd"
static struct __pyx_vtabstruct_4cds3_4core_VarArray *__pyx_vtabptr_4cds3_4core_VarArray;

#line 31 "cds3/core.pxd"


/* "cds3/core.pxd":27
 *     cpdef np.ndarray get_datap(self, size_t sample_start=*)
 * 
 * cdef class VarGroup(Object):             # <<<<<<<<<<<<<<
 *     cdef CDSVarGroup *c_ob
 *     cdef set_vargroup(self, CDSVarGroup *obj)
 */

#line 27 "cds3/core.pxd"


#line 27 "cds3/core.pxd"
struct __pyx_vtabstruct_4cds3_4core_VarGroup {

#line 27 "cds3/core.pxd"
  struct __pyx_vtabstruct_4cds3_4core_Object __pyx_base;

#line 27 "cds3/core.pxd"
  PyObject *(*set_vargroup)(struct __pyx_obj_4cds3_4core_VarGroup *, struct CDSVarGroup *);

#line 27 "cds3/core.pxd"
};

#line 27 "cds3/core.pxd"
static struct __pyx_vtabstruct_4cds3_4core_VarGroup *__pyx_vtabptr_4cds3_4core_VarGroup;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void); /*proto*/

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected); /*proto*/

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static CYTHON_INLINE int  __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);

static void __Pyx_RaiseBufferFallbackError(void); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

#include <string.h>

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb); /*proto*/
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


static Py_ssize_t __Pyx_zeros[] = {0, 0, 0, 0, 0, 0, 0, 0};
static Py_ssize_t __Pyx_minusones[] = {-1, -1, -1, -1, -1, -1, -1, -1};

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level); /*proto*/

static CYTHON_INLINE time_t __Pyx_PyInt_from_py_time_t(PyObject *);

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_time_t(time_t);

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_suseconds_t(suseconds_t);

static CYTHON_INLINE suseconds_t __Pyx_PyInt_from_py_suseconds_t(PyObject *);

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(_WIN32) && defined(__cplusplus) && CYTHON_CCOMPLEX
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename); /*proto*/

static int __Pyx_check_binary_version(void);

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);  /*proto*/

static void* __Pyx_GetVtable(PyObject *dict); /*proto*/

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'libc.stddef' */

/* Module declarations from 'cds3.ccds3_enums' */

/* Module declarations from 'cds3.ccds3' */

/* Module declarations from 'dsproc3.cdsproc3_enums' */

/* Module declarations from 'dsproc3.cdsproc3' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.object' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'cds3.core' */
static PyTypeObject *__pyx_ptype_4cds3_4core_Object = 0;
static PyTypeObject *__pyx_ptype_4cds3_4core_Group = 0;
static PyTypeObject *__pyx_ptype_4cds3_4core_Dim = 0;
static PyTypeObject *__pyx_ptype_4cds3_4core_Att = 0;
static PyTypeObject *__pyx_ptype_4cds3_4core_Var = 0;
static PyTypeObject *__pyx_ptype_4cds3_4core_VarGroup = 0;
static PyTypeObject *__pyx_ptype_4cds3_4core_VarArray = 0;

/* Module declarations from 'cds3' */

/* Module declarations from 'dsproc3.core' */
static PyTypeObject *__pyx_ptype_7dsproc3_4core_PyVarTarget = 0;
static CYTHON_INLINE PyObject *__pyx_f_7dsproc3_4core___line(void); /*proto*/
static void __pyx_f_7dsproc3_4core__free(void *); /*proto*/
static CYTHON_INLINE void *__pyx_f_7dsproc3_4core__alloc_single(CDSDataType, struct __pyx_opt_args_7dsproc3_4core__alloc_single *__pyx_optional_args); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_7dsproc3_4core__convert_single(CDSDataType, void *); /*proto*/
static CYTHON_INLINE int __pyx_f_7dsproc3_4core_cds_type_to_dtype(CDSDataType); /*proto*/
static CYTHON_INLINE PyArray_Descr *__pyx_f_7dsproc3_4core_cds_type_to_dtype_obj(CDSDataType); /*proto*/
static CYTHON_INLINE int __pyx_f_7dsproc3_4core_dtype_to_cds_type(PyArray_Descr *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t = { "int32_t", NULL, sizeof(__pyx_t_5numpy_int32_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int32_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int32_t), 0 };
#define __Pyx_MODULE_NAME "dsproc3.core"
int __pyx_module_is_main_dsproc3__core = 0;

/* Implementation of 'dsproc3.core' */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_RuntimeError;
static int __pyx_pf_7dsproc3_4core_11PyVarTarget___cinit__(struct __pyx_obj_7dsproc3_4core_PyVarTarget *__pyx_v_self); /* proto */
static int __pyx_pf_7dsproc3_4core_11PyVarTarget_2__init__(CYTHON_UNUSED struct __pyx_obj_7dsproc3_4core_PyVarTarget *__pyx_v_self); /* proto */
static void __pyx_pf_7dsproc3_4core_11PyVarTarget_4__dealloc__(CYTHON_UNUSED struct __pyx_obj_7dsproc3_4core_PyVarTarget *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_log(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_format, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_2warning(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_format, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_4error(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_status, char *__pyx_v_format, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_6mentor_mail(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_format, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_8debug_lv1(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_format, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_10debug_lv2(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_format, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_12debug_lv3(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_format, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_14debug_lv4(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_format, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_16debug_lv5(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_format, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_18set_init_process_hook(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hook); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_20set_finish_process_hook(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hook); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_22set_process_data_hook(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hook); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_24set_pre_retrieval_hook(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hook); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_26set_post_retrieval_hook(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hook); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_28set_pre_transform_hook(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hook); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_30set_post_transform_hook(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hook); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_32set_process_file_hook(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hook); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_34_run_init_process_hook(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_36_run_finish_process_hook(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_38_run_process_data_hook(CYTHON_UNUSED PyObject *__pyx_self, time_t __pyx_v_begin_date, time_t __pyx_v_end_date, PyObject *__pyx_v_input_data); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_40_run_pre_retrieval_hook(CYTHON_UNUSED PyObject *__pyx_self, time_t __pyx_v_begin_date, time_t __pyx_v_end_date); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_42_run_post_retrieval_hook(CYTHON_UNUSED PyObject *__pyx_self, time_t __pyx_v_begin_date, time_t __pyx_v_end_date, PyObject *__pyx_v_ret_data); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_44_run_pre_transform_hook(CYTHON_UNUSED PyObject *__pyx_self, time_t __pyx_v_begin_date, time_t __pyx_v_end_date, PyObject *__pyx_v_ret_data); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_46_run_post_transform_hook(CYTHON_UNUSED PyObject *__pyx_self, time_t __pyx_v_begin_date, time_t __pyx_v_end_date, PyObject *__pyx_v_trans_data); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_48_run_process_file_hook(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_input_dir, char *__pyx_v_file_name); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_50get_debug_level(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_52get_site(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_54get_facility(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_56get_name(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_58get_datastream_id(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_site, char *__pyx_v_facility, char *__pyx_v_dsc_name, char *__pyx_v_dsc_level, DSRole __pyx_v_role); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_60get_input_datastream_id(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_dsc_name, char *__pyx_v_dsc_level); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_62get_input_datastream_ids(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_64get_output_datastream_id(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_dsc_name, char *__pyx_v_dsc_level); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_66get_output_datastream_ids(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_68datastream_name(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_70datastream_path(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_72datastream_site(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_74datastream_facility(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_76datastream_class_name(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_78datastream_class_level(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_80dataset_name(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Group *__pyx_v_dataset); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_82get_output_dataset(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id, int __pyx_v_obs_index); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_84get_retrieved_dataset(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id, int __pyx_v_obs_index); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_86get_transformed_dataset(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_coordsys_name, int __pyx_v_ds_id, int __pyx_v_obs_index); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_88get_dim(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Group *__pyx_v_dataset, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_90get_dim_length(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Group *__pyx_v_dataset, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_92set_dim_length(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Group *__pyx_v_dataset, char *__pyx_v_name, size_t __pyx_v_length); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_94change_att(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_parent, int __pyx_v_overwrite, char *__pyx_v_name, CDSDataType __pyx_v_type, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_96get_att(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_parent, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_98get_att_text(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_parent, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_100get_att_value(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_parent, char *__pyx_v_name, CDSDataType __pyx_v_type); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_102set_att(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_parent, int __pyx_v_overwrite, char *__pyx_v_name, CDSDataType __pyx_v_type, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_104set_att_text(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_parent, char *__pyx_v_name, char *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_106set_att_value(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_parent, char *__pyx_v_name, CDSDataType __pyx_v_type, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_108clone_var(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_src_var, struct __pyx_obj_4cds3_4core_Group *__pyx_v_dataset, char *__pyx_v_var_name, CDSDataType __pyx_v_data_type, PyObject *__pyx_v_dim_names, int __pyx_v_copy_data); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_110define_var(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Group *__pyx_v_dataset, char *__pyx_v_name, CDSDataType __pyx_v_type, PyObject *__pyx_v_dim_names, char *__pyx_v_long_name, char *__pyx_v_standard_name, char *__pyx_v_units, PyObject *__pyx_v_valid_min, PyObject *__pyx_v_valid_max, PyObject *__pyx_v_missing_value, PyObject *__pyx_v_fill_value); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_112delete_var(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_114get_coord_var(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v__var, int __pyx_v_dim_index); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_116get_dataset_vars(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Group *__pyx_v_dataset, PyObject *__pyx_v_var_names, int __pyx_v_required, int __pyx_v_qc_vars, int __pyx_v_aqc_vars); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_118get_metric_var(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var, char *__pyx_v_metric); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_120get_output_var(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id, char *__pyx_v_var_name, int __pyx_v_obs_index); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_122get_qc_var(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v__var); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_124get_retrieved_var(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_var_name, int __pyx_v_obs_index); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_126get_transformed_var(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_var_name, int __pyx_v_obs_index); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_128get_trans_coordsys_var(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_coordsys_name, char *__pyx_v_var_name, int __pyx_v_obs_index); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_130get_var(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Group *__pyx_v_dataset, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_132var_name(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_134var_sample_count(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_136var_sample_size(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_138alloc_var_data(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var, size_t __pyx_v_sample_start, size_t __pyx_v_sample_count); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_140alloc_var_data_index(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var, size_t __pyx_v_sample_start, size_t __pyx_v_sample_count); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_142get_var_data_index(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_144get_var_data(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var, CDSDataType __pyx_v_type, size_t __pyx_v_sample_start, size_t __pyx_v_sample_count, PyArrayObject *__pyx_v_data); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_146get_var_missing_values(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_148init_var_data(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var, size_t __pyx_v_sample_start, size_t __pyx_v_sample_count, int __pyx_v_use_missing); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_150init_var_data_index(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var, size_t __pyx_v_sample_start, size_t __pyx_v_sample_count, int __pyx_v_use_missing); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_152set_var_data(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var, size_t __pyx_v_sample_start, size_t __pyx_v_sample_count, PyObject *__pyx_v_missing_value, PyArrayObject *__pyx_v_data_nd); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_154get_base_time(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_cds_object); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_156get_time_range(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_cds_object); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_158get_time_var(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_cds_object); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_160get_sample_times(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_cds_object, size_t __pyx_v_sample_start); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_162get_sample_timevals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_cds_object, size_t __pyx_v_sample_start); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_164set_sample_times(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_obj, size_t __pyx_v_sample_start, PyObject *__pyx_v_sample_times); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_166set_sample_timevals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_obj, size_t __pyx_v_sample_start, PyObject *__pyx_v_sample_times); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_168add_var_output_target(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var, int __pyx_v_ds_id, char *__pyx_v_var_name); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_170copy_var_tag(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_src_var, struct __pyx_obj_4cds3_4core_Var *__pyx_v_dest_var); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_172delete_var_tag(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_174get_var_output_targets(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_176set_var_coordsys_name(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var, char *__pyx_v_coordsys_name); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_178set_var_flags(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_180set_var_output_target(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var, int __pyx_v_ds_id, char *__pyx_v_var_name); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_182unset_var_flags(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_184dump_dataset(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Group *__pyx_v_dataset, char *__pyx_v_outdir, char *__pyx_v_prefix, time_t __pyx_v_file_time, char *__pyx_v_suffix, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_186dump_output_datasets(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_outdir, char *__pyx_v_suffix, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_188dump_retrieved_datasets(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_outdir, char *__pyx_v_suffix, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_190dump_transformed_datasets(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_outdir, char *__pyx_v_suffix, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_192copy_file(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_src_file, char *__pyx_v_dest_file); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_194move_file(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_src_file, char *__pyx_v_dest_file); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_196add_datastream_file_patterns(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id, PyObject *__pyx_v_patterns, int __pyx_v_ignore_case); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_198get_datastream_files(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_200rename(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id, char *__pyx_v_file_path, char *__pyx_v_file_name, time_t __pyx_v_begin_time, time_t __pyx_v_end_time); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_202rename_bad(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id, char *__pyx_v_file_path, char *__pyx_v_file_name, time_t __pyx_v_file_time); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_204set_rename_preserve_dots(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id, int __pyx_v_preserve_dots); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_206initialize(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_argv, PyObject *__pyx_v_proc_model, PyObject *__pyx_v_proc_version, PyObject *__pyx_v_proc_names); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_208finish(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_210get_status(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_212set_status(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_status); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_214set_datastream_flags(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_216create_output_dataset(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id, time_t __pyx_v_data_time, int __pyx_v_set_location); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_218store_dataset(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id, int __pyx_v_newfile); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_220set_input_source(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_status); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_222db_disconnect(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_224_ingest_main_loop(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_226_vap_main_loop(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_proc_model); /* proto */
static PyObject *__pyx_pf_7dsproc3_4core_228main(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_argv, PyObject *__pyx_v_proc_model, PyObject *__pyx_v_proc_version, PyObject *__pyx_v_proc_names); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static char __pyx_k_1[] = "_finish_process_hook";
static char __pyx_k_2[] = "_post_retrieval_hook";
static char __pyx_k_3[] = "_post_transform_hook";
static char __pyx_k_4[] = "\n----- ENTERING INIT PROCESS HOOK -------\n";
static char __pyx_k_6[] = "Unknown Data Processing Error (check logs)";
static char __pyx_k_7[] = "Error message not set by init_process_hook function\n";
static char __pyx_k_9[] = "----- EXITING INIT PROCESS HOOK --------\n\n";
static char __pyx_k_11[] = "\n----- ENTERING FINISH PROCESS HOOK -----\n";
static char __pyx_k_13[] = "----- EXITING FINISH PROCESS HOOK ------\n\n";
static char __pyx_k_15[] = "\n----- ENTERING PROCESS DATA HOOK -------\n";
static char __pyx_k_17[] = "Error message not set by process_data_hook function\n";
static char __pyx_k_19[] = "----- EXITING PROCESS DATA HOOK --------\n\n";
static char __pyx_k_21[] = "\n----- ENTERING PRE-RETRIEVAL HOOK ------\n";
static char __pyx_k_23[] = "Error message not set by pre_retrieval_hook function\n";
static char __pyx_k_25[] = "----- EXITING PRE-RETRIEVAL HOOK -------\n";
static char __pyx_k_27[] = "\n----- ENTERING POST-RETRIEVAL HOOK -----\n";
static char __pyx_k_29[] = "Error message not set by post_retrieval_hook function\n";
static char __pyx_k_31[] = "----- EXITING POST-RETRIEVAL HOOK ------\n\n";
static char __pyx_k_33[] = "\n----- ENTERING PRE-TRANSFORM HOOK ------\n";
static char __pyx_k_35[] = "Error message not set by pre_transform_hook function\n";
static char __pyx_k_37[] = "----- EXITING PRE-TRANSFORM HOOK -------\n\n";
static char __pyx_k_39[] = "\n----- ENTERING POST-TRANSFORM HOOK -----\n";
static char __pyx_k_41[] = "Error message not set by post_transform_hook function\n";
static char __pyx_k_43[] = "----- EXITING POST-TRANSFORM HOOK ------\n\n";
static char __pyx_k_45[] = "\n----- ENTERING PROCESS FILE HOOK -----\n";
static char __pyx_k_47[] = "Error message not set by process_file_hook function\n";
static char __pyx_k_49[] = "----- EXITING PROCESS FILE HOOK ------\n\n";
static char __pyx_k_51[] = "Unknown CDSDataType %s";
static char __pyx_k_53[] = "Unknown dtype for CDSDataType %s";
static char __pyx_k_54[] = "";
static char __pyx_k_56[] = "invalid CDSType";
static char __pyx_k_61[] = "KLG FILL in with text for dsproc_enoindsc\n";
static char __pyx_k_62[] = "Could not find an input datastream defined in the database\n";
static char __pyx_k_64[] = "KLG fill in with text for dsproc_etoomanyindsc\n";
static char __pyx_k_65[] = "Too many level 0 input datastreams defined in database\n  -> ingests only support one level 0 input datastream\n";
static char __pyx_k_67[] = "No data files found to process in: %s\n";
static char __pyx_k_68[] = "\nStopping ingest before max run time of %d seconds is exceeded\n";
static char __pyx_k_69[] = "KLG replace with text for dsproc_eruntime";
static char __pyx_k_70[] = "PROCESSING FILE #%d: %s\n";
static char __pyx_k_71[] = "\nProcessing: %s/%s\n";
static char __pyx_k_72[] = "_run_process_file_hook";
static char __pyx_k_73[] = "_run_pre_retrieval_hook";
static char __pyx_k_74[] = "_run_post_retrieval_hook";
static char __pyx_k_75[] = "_run_pre_transform_hook";
static char __pyx_k_76[] = "_run_post_transform_hook";
static char __pyx_k_77[] = "_run_process_data_hook";
static char __pyx_k_78[] = "_run_init_process_hook";
static char __pyx_k_79[] = "_run_finish_process_hook";
static char __pyx_k_80[] = "ndarray is not C contiguous";
static char __pyx_k_82[] = "ndarray is not Fortran contiguous";
static char __pyx_k_84[] = "Non-native byte order not supported";
static char __pyx_k_86[] = "unknown dtype code in numpy.pxd (%d)";
static char __pyx_k_87[] = "Format string allocated too short, see comment in numpy.pxd";
static char __pyx_k_90[] = "Format string allocated too short.";
static char __pyx_k_94[] = "/home/gaustad/dev/dslib/src/py_lib/dsproc3/core.pyx";
static char __pyx_k_95[] = "dsproc3.core";
static char __pyx_k__B[] = "B";
static char __pyx_k__H[] = "H";
static char __pyx_k__I[] = "I";
static char __pyx_k__L[] = "L";
static char __pyx_k__O[] = "O";
static char __pyx_k__Q[] = "Q";
static char __pyx_k__b[] = "b";
static char __pyx_k__d[] = "d";
static char __pyx_k__f[] = "f";
static char __pyx_k__g[] = "g";
static char __pyx_k__h[] = "h";
static char __pyx_k__i[] = "i";
static char __pyx_k__l[] = "l";
static char __pyx_k__q[] = "q";
static char __pyx_k__s[] = "s";
static char __pyx_k_114[] = "set_init_process_hook";
static char __pyx_k_117[] = "set_finish_process_hook";
static char __pyx_k_120[] = "set_process_data_hook";
static char __pyx_k_123[] = "set_pre_retrieval_hook";
static char __pyx_k_126[] = "set_post_retrieval_hook";
static char __pyx_k_129[] = "set_pre_transform_hook";
static char __pyx_k_132[] = "set_post_transform_hook";
static char __pyx_k_135[] = "set_process_file_hook";
static char __pyx_k_159[] = "get_input_datastream_id";
static char __pyx_k_162[] = "get_input_datastream_ids";
static char __pyx_k_165[] = "get_output_datastream_id";
static char __pyx_k_168[] = "get_output_datastream_ids";
static char __pyx_k_179[] = "datastream_class_name";
static char __pyx_k_182[] = "datastream_class_level";
static char __pyx_k_189[] = "get_retrieved_dataset";
static char __pyx_k_192[] = "get_transformed_dataset";
static char __pyx_k_235[] = "get_trans_coordsys_var";
static char __pyx_k_248[] = "alloc_var_data_index";
static char __pyx_k_255[] = "get_var_missing_values";
static char __pyx_k_278[] = "add_var_output_target";
static char __pyx_k_285[] = "get_var_output_targets";
static char __pyx_k_288[] = "set_var_coordsys_name";
static char __pyx_k_293[] = "set_var_output_target";
static char __pyx_k_300[] = "dump_output_datasets";
static char __pyx_k_303[] = "dump_retrieved_datasets";
static char __pyx_k_306[] = "dump_transformed_datasets";
static char __pyx_k_313[] = "add_datastream_file_patterns";
static char __pyx_k_316[] = "get_datastream_files";
static char __pyx_k_323[] = "set_rename_preserve_dots";
static char __pyx_k_332[] = "set_datastream_flags";
static char __pyx_k_335[] = "create_output_dataset";
static char __pyx_k__S1[] = "S1";
static char __pyx_k__Zd[] = "Zd";
static char __pyx_k__Zf[] = "Zf";
static char __pyx_k__Zg[] = "Zg";
static char __pyx_k__fi[] = "fi";
static char __pyx_k__np[] = "np";
static char __pyx_k__att[] = "att";
static char __pyx_k__dim[] = "dim";
static char __pyx_k__dsi[] = "dsi";
static char __pyx_k__end[] = "end";
static char __pyx_k__ids[] = "ids";
static char __pyx_k__idx[] = "idx";
static char __pyx_k__log[] = "log";
static char __pyx_k__num[] = "num";
static char __pyx_k__obj[] = "obj";
static char __pyx_k__str[] = "str";
static char __pyx_k__sys[] = "sys";
static char __pyx_k__val[] = "val";
static char __pyx_k__var[] = "var";
static char __pyx_k___var[] = "_var";
static char __pyx_k__args[] = "args";
static char __pyx_k__argv[] = "argv";
static char __pyx_k__data[] = "data";
static char __pyx_k__dims[] = "dims";
static char __pyx_k__dsid[] = "dsid";
static char __pyx_k__exit[] = "exit";
static char __pyx_k__file[] = "file";
static char __pyx_k__func[] = "func";
static char __pyx_k__hook[] = "hook";
static char __pyx_k__int8[] = "int8";
static char __pyx_k__line[] = "line";
static char __pyx_k__list[] = "list";
static char __pyx_k__main[] = "main";
static char __pyx_k__name[] = "name";
static char __pyx_k__role[] = "role";
static char __pyx_k__site[] = "site";
static char __pyx_k__size[] = "size";
static char __pyx_k__text[] = "text";
static char __pyx_k__time[] = "time";
static char __pyx_k__type[] = "type";
static char __pyx_k___vars[] = "_vars";
static char __pyx_k__array[] = "array";
static char __pyx_k__count[] = "count";
static char __pyx_k__datap[] = "datap";
static char __pyx_k__ds_id[] = "ds_id";
static char __pyx_k__dsids[] = "dsids";
static char __pyx_k__dtype[] = "dtype";
static char __pyx_k__error[] = "error";
static char __pyx_k__files[] = "files";
static char __pyx_k__flags[] = "flags";
static char __pyx_k__group[] = "group";
static char __pyx_k__int16[] = "int16";
static char __pyx_k__int32[] = "int32";
static char __pyx_k__level[] = "level";
static char __pyx_k__ndims[] = "ndims";
static char __pyx_k__ndsid[] = "ndsid";
static char __pyx_k__numpy[] = "numpy";
static char __pyx_k__range[] = "range";
static char __pyx_k__start[] = "start";
static char __pyx_k__uint8[] = "uint8";
static char __pyx_k__units[] = "units";
static char __pyx_k__value[] = "value";
static char __pyx_k__c_argv[] = "c_argv";
static char __pyx_k__f_code[] = "f_code";
static char __pyx_k__finish[] = "finish";
static char __pyx_k__format[] = "format";
static char __pyx_k__ids_nd[] = "ids_nd";
static char __pyx_k__length[] = "length";
static char __pyx_k__metric[] = "metric";
static char __pyx_k__ndsids[] = "ndsids";
static char __pyx_k__nfiles[] = "nfiles";
static char __pyx_k__outdir[] = "outdir";
static char __pyx_k__parent[] = "parent";
static char __pyx_k__prefix[] = "prefix";
static char __pyx_k__rename[] = "rename";
static char __pyx_k__retval[] = "retval";
static char __pyx_k__status[] = "status";
static char __pyx_k__suffix[] = "suffix";
static char __pyx_k__target[] = "target";
static char __pyx_k__values[] = "values";
static char __pyx_k__CDS_NAT[] = "CDS_NAT";
static char __pyx_k__asarray[] = "asarray";
static char __pyx_k__c_units[] = "c_units";
static char __pyx_k__cds_att[] = "cds_att";
static char __pyx_k__cds_dim[] = "cds_dim";
static char __pyx_k__cds_var[] = "cds_var";
static char __pyx_k__co_name[] = "co_name";
static char __pyx_k__data_nd[] = "data_nd";
static char __pyx_k__dataset[] = "dataset";
static char __pyx_k__float32[] = "float32";
static char __pyx_k__float64[] = "float64";
static char __pyx_k__get_att[] = "get_att";
static char __pyx_k__get_dim[] = "get_dim";
static char __pyx_k__get_var[] = "get_var";
static char __pyx_k__inspect[] = "inspect";
static char __pyx_k__max_int[] = "max_int";
static char __pyx_k__max_ptr[] = "max_ptr";
static char __pyx_k__min_int[] = "min_int";
static char __pyx_k__min_ptr[] = "min_ptr";
static char __pyx_k__newfile[] = "newfile";
static char __pyx_k__qc_vars[] = "qc_vars";
static char __pyx_k__set_att[] = "set_att";
static char __pyx_k__src_var[] = "src_var";
static char __pyx_k__targets[] = "targets";
static char __pyx_k__var_tmp[] = "var_tmp";
static char __pyx_k__warning[] = "warning";
static char __pyx_k__LIB_NAME[] = "LIB_NAME";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k___qc_vars[] = "_qc_vars";
static char __pyx_k__aqc_vars[] = "aqc_vars";
static char __pyx_k__dest_var[] = "dest_var";
static char __pyx_k__dsc_name[] = "dsc_name";
static char __pyx_k__end_date[] = "end_date";
static char __pyx_k__end_time[] = "end_time";
static char __pyx_k__f_lineno[] = "f_lineno";
static char __pyx_k__facility[] = "facility";
static char __pyx_k__fill_int[] = "fill_int";
static char __pyx_k__fill_ptr[] = "fill_ptr";
static char __pyx_k__get_name[] = "get_name";
static char __pyx_k__get_site[] = "get_site";
static char __pyx_k__loop_end[] = "loop_end";
static char __pyx_k__max_byte[] = "max_byte";
static char __pyx_k__max_char[] = "max_char";
static char __pyx_k__min_byte[] = "min_byte";
static char __pyx_k__min_char[] = "min_char";
static char __pyx_k__patterns[] = "patterns";
static char __pyx_k__required[] = "required";
static char __pyx_k__ret_data[] = "ret_data";
static char __pyx_k__ret_vars[] = "ret_vars";
static char __pyx_k__src_file[] = "src_file";
static char __pyx_k__value_nd[] = "value_nd";
static char __pyx_k__var_name[] = "var_name";
static char __pyx_k__TypeError[] = "TypeError";
static char __pyx_k___aqc_vars[] = "_aqc_vars";
static char __pyx_k__cds_group[] = "cds_group";
static char __pyx_k__clone_var[] = "clone_var";
static char __pyx_k__copy_data[] = "copy_data";
static char __pyx_k__copy_file[] = "copy_file";
static char __pyx_k__data_time[] = "data_time";
static char __pyx_k__data_type[] = "data_type";
static char __pyx_k__debug_lv1[] = "debug_lv1";
static char __pyx_k__debug_lv2[] = "debug_lv2";
static char __pyx_k__debug_lv3[] = "debug_lv3";
static char __pyx_k__debug_lv4[] = "debug_lv4";
static char __pyx_k__debug_lv5[] = "debug_lv5";
static char __pyx_k__dest_file[] = "dest_file";
static char __pyx_k__dim_index[] = "dim_index";
static char __pyx_k__dim_names[] = "dim_names";
static char __pyx_k__dsc_level[] = "dsc_level";
static char __pyx_k__enumerate[] = "enumerate";
static char __pyx_k__file_list[] = "file_list";
static char __pyx_k__file_name[] = "file_name";
static char __pyx_k__file_path[] = "file_path";
static char __pyx_k__file_time[] = "file_time";
static char __pyx_k__fill_byte[] = "fill_byte";
static char __pyx_k__fill_char[] = "fill_char";
static char __pyx_k__input_dir[] = "input_dir";
static char __pyx_k__long_name[] = "long_name";
static char __pyx_k__max_float[] = "max_float";
static char __pyx_k__max_short[] = "max_short";
static char __pyx_k__min_float[] = "min_float";
static char __pyx_k__min_short[] = "min_short";
static char __pyx_k__missing_c[] = "missing_c";
static char __pyx_k__move_file[] = "move_file";
static char __pyx_k__num_times[] = "num_times";
static char __pyx_k__obs_index[] = "obs_index";
static char __pyx_k__overwrite[] = "overwrite";
static char __pyx_k__valid_max[] = "valid_max";
static char __pyx_k__valid_min[] = "valid_min";
static char __pyx_k__var_names[] = "var_names";
static char __pyx_k__ValueError[] = "ValueError";
static char __pyx_k___user_data[] = "_user_data";
static char __pyx_k__begin_date[] = "begin_date";
static char __pyx_k__begin_time[] = "begin_time";
static char __pyx_k__c_patterns[] = "c_patterns";
static char __pyx_k__cds_object[] = "cds_object";
static char __pyx_k__change_att[] = "change_att";
static char __pyx_k__define_var[] = "define_var";
static char __pyx_k__delete_var[] = "delete_var";
static char __pyx_k__exit_value[] = "exit_value";
static char __pyx_k__fill_float[] = "fill_float";
static char __pyx_k__fill_short[] = "fill_short";
static char __pyx_k__fill_value[] = "fill_value";
static char __pyx_k__get_qc_var[] = "get_qc_var";
static char __pyx_k__get_status[] = "get_status";
static char __pyx_k__initialize[] = "initialize";
static char __pyx_k__input_data[] = "input_data";
static char __pyx_k__loop_start[] = "loop_start";
static char __pyx_k__max_double[] = "max_double";
static char __pyx_k__metric_var[] = "metric_var";
static char __pyx_k__min_double[] = "min_double";
static char __pyx_k__proc_model[] = "proc_model";
static char __pyx_k__proc_names[] = "proc_names";
static char __pyx_k__rename_bad[] = "rename_bad";
static char __pyx_k__set_status[] = "set_status";
static char __pyx_k__trans_data[] = "trans_data";
static char __pyx_k__MemoryError[] = "MemoryError";
static char __pyx_k__c_dim_names[] = "c_dim_names";
static char __pyx_k__c_long_name[] = "c_long_name";
static char __pyx_k__c_var_names[] = "c_var_names";
static char __pyx_k__co_filename[] = "co_filename";
static char __pyx_k__fill_double[] = "fill_double";
static char __pyx_k__ignore_case[] = "ignore_case";
static char __pyx_k__mentor_mail[] = "mentor_mail";
static char __pyx_k__missing_int[] = "missing_int";
static char __pyx_k__missing_ptr[] = "missing_ptr";
static char __pyx_k__ret_qc_vars[] = "ret_qc_vars";
static char __pyx_k__sample_size[] = "sample_size";
static char __pyx_k__status_text[] = "status_text";
static char __pyx_k__use_missing[] = "use_missing";
static char __pyx_k__C_CONTIGUOUS[] = "C_CONTIGUOUS";
static char __pyx_k__RuntimeError[] = "RuntimeError";
static char __pyx_k__c_proc_names[] = "c_proc_names";
static char __pyx_k__copy_var_tag[] = "copy_var_tag";
static char __pyx_k__currentframe[] = "currentframe";
static char __pyx_k__dataset_name[] = "dataset_name";
static char __pyx_k__dump_dataset[] = "dump_dataset";
static char __pyx_k__get_att_text[] = "get_att_text";
static char __pyx_k__get_facility[] = "get_facility";
static char __pyx_k__get_time_var[] = "get_time_var";
static char __pyx_k__get_var_data[] = "get_var_data";
static char __pyx_k__interval_end[] = "interval_end";
static char __pyx_k__missing_byte[] = "missing_byte";
static char __pyx_k__missing_char[] = "missing_char";
static char __pyx_k__proc_version[] = "proc_version";
static char __pyx_k__ret_aqc_vars[] = "ret_aqc_vars";
static char __pyx_k__return_value[] = "return_value";
static char __pyx_k__sample_count[] = "sample_count";
static char __pyx_k__sample_start[] = "sample_start";
static char __pyx_k__sample_times[] = "sample_times";
static char __pyx_k__set_att_text[] = "set_att_text";
static char __pyx_k__set_location[] = "set_location";
static char __pyx_k__set_var_data[] = "set_var_data";
static char __pyx_k__coordsys_name[] = "coordsys_name";
static char __pyx_k__db_disconnect[] = "db_disconnect";
static char __pyx_k__get_att_value[] = "get_att_value";
static char __pyx_k__get_base_time[] = "get_base_time";
static char __pyx_k__get_coord_var[] = "get_coord_var";
static char __pyx_k__init_var_data[] = "init_var_data";
static char __pyx_k__missing_float[] = "missing_float";
static char __pyx_k__missing_short[] = "missing_short";
static char __pyx_k__missing_value[] = "missing_value";
static char __pyx_k__preserve_dots[] = "preserve_dots";
static char __pyx_k__set_att_value[] = "set_att_value";
static char __pyx_k__set_var_flags[] = "set_var_flags";
static char __pyx_k__standard_name[] = "standard_name";
static char __pyx_k__store_dataset[] = "store_dataset";
static char __pyx_k___vap_main_loop[] = "_vap_main_loop";
static char __pyx_k__alloc_var_data[] = "alloc_var_data";
static char __pyx_k__delete_var_tag[] = "delete_var_tag";
static char __pyx_k__get_dim_length[] = "get_dim_length";
static char __pyx_k__get_metric_var[] = "get_metric_var";
static char __pyx_k__get_output_var[] = "get_output_var";
static char __pyx_k__get_time_range[] = "get_time_range";
static char __pyx_k__interval_begin[] = "interval_begin";
static char __pyx_k__missing_double[] = "missing_double";
static char __pyx_k__sample_times_c[] = "sample_times_c";
static char __pyx_k__set_dim_length[] = "set_dim_length";
static char __pyx_k__time_remaining[] = "time_remaining";
static char __pyx_k__c_standard_name[] = "c_standard_name";
static char __pyx_k__datastream_name[] = "datastream_name";
static char __pyx_k__datastream_path[] = "datastream_path";
static char __pyx_k__datastream_site[] = "datastream_site";
static char __pyx_k__get_debug_level[] = "get_debug_level";
static char __pyx_k__unset_var_flags[] = "unset_var_flags";
static char __pyx_k__var_sample_size[] = "var_sample_size";
static char __pyx_k__get_dataset_vars[] = "get_dataset_vars";
static char __pyx_k__get_sample_times[] = "get_sample_times";
static char __pyx_k__set_input_source[] = "set_input_source";
static char __pyx_k__set_sample_times[] = "set_sample_times";
static char __pyx_k__var_sample_count[] = "var_sample_count";
static char __pyx_k___ingest_main_loop[] = "_ingest_main_loop";
static char __pyx_k__get_datastream_id[] = "get_datastream_id";
static char __pyx_k__get_retrieved_var[] = "get_retrieved_var";
static char __pyx_k___init_process_hook[] = "_init_process_hook";
static char __pyx_k___process_data_hook[] = "_process_data_hook";
static char __pyx_k___process_file_hook[] = "_process_file_hook";
static char __pyx_k__get_output_dataset[] = "get_output_dataset";
static char __pyx_k__get_var_data_index[] = "get_var_data_index";
static char __pyx_k___pre_retrieval_hook[] = "_pre_retrieval_hook";
static char __pyx_k___pre_transform_hook[] = "_pre_transform_hook";
static char __pyx_k__datastream_facility[] = "datastream_facility";
static char __pyx_k__get_sample_timevals[] = "get_sample_timevals";
static char __pyx_k__get_transformed_var[] = "get_transformed_var";
static char __pyx_k__init_var_data_index[] = "init_var_data_index";
static char __pyx_k__set_sample_timevals[] = "set_sample_timevals";
static PyObject *__pyx_n_s_1;
static PyObject *__pyx_kp_s_11;
static PyObject *__pyx_n_s_114;
static PyObject *__pyx_n_s_117;
static PyObject *__pyx_n_s_120;
static PyObject *__pyx_n_s_123;
static PyObject *__pyx_n_s_126;
static PyObject *__pyx_n_s_129;
static PyObject *__pyx_kp_s_13;
static PyObject *__pyx_n_s_132;
static PyObject *__pyx_n_s_135;
static PyObject *__pyx_kp_s_15;
static PyObject *__pyx_n_s_159;
static PyObject *__pyx_n_s_162;
static PyObject *__pyx_n_s_165;
static PyObject *__pyx_n_s_168;
static PyObject *__pyx_kp_s_17;
static PyObject *__pyx_n_s_179;
static PyObject *__pyx_n_s_182;
static PyObject *__pyx_n_s_189;
static PyObject *__pyx_kp_s_19;
static PyObject *__pyx_n_s_192;
static PyObject *__pyx_n_s_2;
static PyObject *__pyx_kp_s_21;
static PyObject *__pyx_kp_s_23;
static PyObject *__pyx_n_s_235;
static PyObject *__pyx_n_s_248;
static PyObject *__pyx_kp_s_25;
static PyObject *__pyx_n_s_255;
static PyObject *__pyx_kp_s_27;
static PyObject *__pyx_n_s_278;
static PyObject *__pyx_n_s_285;
static PyObject *__pyx_n_s_288;
static PyObject *__pyx_kp_s_29;
static PyObject *__pyx_n_s_293;
static PyObject *__pyx_n_s_3;
static PyObject *__pyx_n_s_300;
static PyObject *__pyx_n_s_303;
static PyObject *__pyx_n_s_306;
static PyObject *__pyx_kp_s_31;
static PyObject *__pyx_n_s_313;
static PyObject *__pyx_n_s_316;
static PyObject *__pyx_n_s_323;
static PyObject *__pyx_kp_s_33;
static PyObject *__pyx_n_s_332;
static PyObject *__pyx_n_s_335;
static PyObject *__pyx_kp_s_35;
static PyObject *__pyx_kp_s_37;
static PyObject *__pyx_kp_s_39;
static PyObject *__pyx_kp_s_4;
static PyObject *__pyx_kp_s_41;
static PyObject *__pyx_kp_s_43;
static PyObject *__pyx_kp_s_45;
static PyObject *__pyx_kp_s_47;
static PyObject *__pyx_kp_s_49;
static PyObject *__pyx_kp_s_51;
static PyObject *__pyx_kp_s_53;
static PyObject *__pyx_kp_s_56;
static PyObject *__pyx_kp_s_6;
static PyObject *__pyx_kp_s_61;
static PyObject *__pyx_kp_s_62;
static PyObject *__pyx_kp_s_64;
static PyObject *__pyx_kp_s_65;
static PyObject *__pyx_kp_s_67;
static PyObject *__pyx_kp_s_68;
static PyObject *__pyx_kp_s_7;
static PyObject *__pyx_kp_s_70;
static PyObject *__pyx_kp_s_71;
static PyObject *__pyx_n_s_72;
static PyObject *__pyx_n_s_73;
static PyObject *__pyx_n_s_74;
static PyObject *__pyx_n_s_75;
static PyObject *__pyx_n_s_76;
static PyObject *__pyx_n_s_77;
static PyObject *__pyx_n_s_78;
static PyObject *__pyx_n_s_79;
static PyObject *__pyx_kp_u_80;
static PyObject *__pyx_kp_u_82;
static PyObject *__pyx_kp_u_84;
static PyObject *__pyx_kp_u_86;
static PyObject *__pyx_kp_u_87;
static PyObject *__pyx_kp_s_9;
static PyObject *__pyx_kp_u_90;
static PyObject *__pyx_kp_s_94;
static PyObject *__pyx_n_s_95;
static PyObject *__pyx_n_s__CDS_NAT;
static PyObject *__pyx_n_s__C_CONTIGUOUS;
static PyObject *__pyx_n_s__LIB_NAME;
static PyObject *__pyx_n_s__MemoryError;
static PyObject *__pyx_n_s__RuntimeError;
static PyObject *__pyx_n_s__S1;
static PyObject *__pyx_n_s__TypeError;
static PyObject *__pyx_n_s__ValueError;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s___aqc_vars;
static PyObject *__pyx_n_s___ingest_main_loop;
static PyObject *__pyx_n_s___init_process_hook;
static PyObject *__pyx_n_s___pre_retrieval_hook;
static PyObject *__pyx_n_s___pre_transform_hook;
static PyObject *__pyx_n_s___process_data_hook;
static PyObject *__pyx_n_s___process_file_hook;
static PyObject *__pyx_n_s___qc_vars;
static PyObject *__pyx_n_s___user_data;
static PyObject *__pyx_n_s___vap_main_loop;
static PyObject *__pyx_n_s___var;
static PyObject *__pyx_n_s___vars;
static PyObject *__pyx_n_s__alloc_var_data;
static PyObject *__pyx_n_s__aqc_vars;
static PyObject *__pyx_n_s__args;
static PyObject *__pyx_n_s__argv;
static PyObject *__pyx_n_s__array;
static PyObject *__pyx_n_s__asarray;
static PyObject *__pyx_n_s__att;
static PyObject *__pyx_n_s__begin_date;
static PyObject *__pyx_n_s__begin_time;
static PyObject *__pyx_n_s__c_argv;
static PyObject *__pyx_n_s__c_dim_names;
static PyObject *__pyx_n_s__c_long_name;
static PyObject *__pyx_n_s__c_patterns;
static PyObject *__pyx_n_s__c_proc_names;
static PyObject *__pyx_n_s__c_standard_name;
static PyObject *__pyx_n_s__c_units;
static PyObject *__pyx_n_s__c_var_names;
static PyObject *__pyx_n_s__cds_att;
static PyObject *__pyx_n_s__cds_dim;
static PyObject *__pyx_n_s__cds_group;
static PyObject *__pyx_n_s__cds_object;
static PyObject *__pyx_n_s__cds_var;
static PyObject *__pyx_n_s__change_att;
static PyObject *__pyx_n_s__clone_var;
static PyObject *__pyx_n_s__co_filename;
static PyObject *__pyx_n_s__co_name;
static PyObject *__pyx_n_s__coordsys_name;
static PyObject *__pyx_n_s__copy_data;
static PyObject *__pyx_n_s__copy_file;
static PyObject *__pyx_n_s__copy_var_tag;
static PyObject *__pyx_n_s__count;
static PyObject *__pyx_n_s__currentframe;
static PyObject *__pyx_n_s__data;
static PyObject *__pyx_n_s__data_nd;
static PyObject *__pyx_n_s__data_time;
static PyObject *__pyx_n_s__data_type;
static PyObject *__pyx_n_s__datap;
static PyObject *__pyx_n_s__dataset;
static PyObject *__pyx_n_s__dataset_name;
static PyObject *__pyx_n_s__datastream_facility;
static PyObject *__pyx_n_s__datastream_name;
static PyObject *__pyx_n_s__datastream_path;
static PyObject *__pyx_n_s__datastream_site;
static PyObject *__pyx_n_s__db_disconnect;
static PyObject *__pyx_n_s__debug_lv1;
static PyObject *__pyx_n_s__debug_lv2;
static PyObject *__pyx_n_s__debug_lv3;
static PyObject *__pyx_n_s__debug_lv4;
static PyObject *__pyx_n_s__debug_lv5;
static PyObject *__pyx_n_s__define_var;
static PyObject *__pyx_n_s__delete_var;
static PyObject *__pyx_n_s__delete_var_tag;
static PyObject *__pyx_n_s__dest_file;
static PyObject *__pyx_n_s__dest_var;
static PyObject *__pyx_n_s__dim;
static PyObject *__pyx_n_s__dim_index;
static PyObject *__pyx_n_s__dim_names;
static PyObject *__pyx_n_s__dims;
static PyObject *__pyx_n_s__ds_id;
static PyObject *__pyx_n_s__dsc_level;
static PyObject *__pyx_n_s__dsc_name;
static PyObject *__pyx_n_s__dsi;
static PyObject *__pyx_n_s__dsid;
static PyObject *__pyx_n_s__dsids;
static PyObject *__pyx_n_s__dtype;
static PyObject *__pyx_n_s__dump_dataset;
static PyObject *__pyx_n_s__end;
static PyObject *__pyx_n_s__end_date;
static PyObject *__pyx_n_s__end_time;
static PyObject *__pyx_n_s__enumerate;
static PyObject *__pyx_n_s__error;
static PyObject *__pyx_n_s__exit;
static PyObject *__pyx_n_s__exit_value;
static PyObject *__pyx_n_s__f_code;
static PyObject *__pyx_n_s__f_lineno;
static PyObject *__pyx_n_s__facility;
static PyObject *__pyx_n_s__fi;
static PyObject *__pyx_n_s__file;
static PyObject *__pyx_n_s__file_list;
static PyObject *__pyx_n_s__file_name;
static PyObject *__pyx_n_s__file_path;
static PyObject *__pyx_n_s__file_time;
static PyObject *__pyx_n_s__files;
static PyObject *__pyx_n_s__fill_byte;
static PyObject *__pyx_n_s__fill_char;
static PyObject *__pyx_n_s__fill_double;
static PyObject *__pyx_n_s__fill_float;
static PyObject *__pyx_n_s__fill_int;
static PyObject *__pyx_n_s__fill_ptr;
static PyObject *__pyx_n_s__fill_short;
static PyObject *__pyx_n_s__fill_value;
static PyObject *__pyx_n_s__finish;
static PyObject *__pyx_n_s__flags;
static PyObject *__pyx_n_s__float32;
static PyObject *__pyx_n_s__float64;
static PyObject *__pyx_n_s__format;
static PyObject *__pyx_n_s__func;
static PyObject *__pyx_n_s__get_att;
static PyObject *__pyx_n_s__get_att_text;
static PyObject *__pyx_n_s__get_att_value;
static PyObject *__pyx_n_s__get_base_time;
static PyObject *__pyx_n_s__get_coord_var;
static PyObject *__pyx_n_s__get_dataset_vars;
static PyObject *__pyx_n_s__get_datastream_id;
static PyObject *__pyx_n_s__get_debug_level;
static PyObject *__pyx_n_s__get_dim;
static PyObject *__pyx_n_s__get_dim_length;
static PyObject *__pyx_n_s__get_facility;
static PyObject *__pyx_n_s__get_metric_var;
static PyObject *__pyx_n_s__get_name;
static PyObject *__pyx_n_s__get_output_dataset;
static PyObject *__pyx_n_s__get_output_var;
static PyObject *__pyx_n_s__get_qc_var;
static PyObject *__pyx_n_s__get_retrieved_var;
static PyObject *__pyx_n_s__get_sample_times;
static PyObject *__pyx_n_s__get_sample_timevals;
static PyObject *__pyx_n_s__get_site;
static PyObject *__pyx_n_s__get_status;
static PyObject *__pyx_n_s__get_time_range;
static PyObject *__pyx_n_s__get_time_var;
static PyObject *__pyx_n_s__get_transformed_var;
static PyObject *__pyx_n_s__get_var;
static PyObject *__pyx_n_s__get_var_data;
static PyObject *__pyx_n_s__get_var_data_index;
static PyObject *__pyx_n_s__group;
static PyObject *__pyx_n_s__hook;
static PyObject *__pyx_n_s__i;
static PyObject *__pyx_n_s__ids;
static PyObject *__pyx_n_s__ids_nd;
static PyObject *__pyx_n_s__idx;
static PyObject *__pyx_n_s__ignore_case;
static PyObject *__pyx_n_s__init_var_data;
static PyObject *__pyx_n_s__init_var_data_index;
static PyObject *__pyx_n_s__initialize;
static PyObject *__pyx_n_s__input_data;
static PyObject *__pyx_n_s__input_dir;
static PyObject *__pyx_n_s__inspect;
static PyObject *__pyx_n_s__int16;
static PyObject *__pyx_n_s__int32;
static PyObject *__pyx_n_s__int8;
static PyObject *__pyx_n_s__interval_begin;
static PyObject *__pyx_n_s__interval_end;
static PyObject *__pyx_n_s__length;
static PyObject *__pyx_n_s__level;
static PyObject *__pyx_n_s__line;
static PyObject *__pyx_n_s__list;
static PyObject *__pyx_n_s__log;
static PyObject *__pyx_n_s__long_name;
static PyObject *__pyx_n_s__loop_end;
static PyObject *__pyx_n_s__loop_start;
static PyObject *__pyx_n_s__main;
static PyObject *__pyx_n_s__max_byte;
static PyObject *__pyx_n_s__max_char;
static PyObject *__pyx_n_s__max_double;
static PyObject *__pyx_n_s__max_float;
static PyObject *__pyx_n_s__max_int;
static PyObject *__pyx_n_s__max_ptr;
static PyObject *__pyx_n_s__max_short;
static PyObject *__pyx_n_s__mentor_mail;
static PyObject *__pyx_n_s__metric;
static PyObject *__pyx_n_s__metric_var;
static PyObject *__pyx_n_s__min_byte;
static PyObject *__pyx_n_s__min_char;
static PyObject *__pyx_n_s__min_double;
static PyObject *__pyx_n_s__min_float;
static PyObject *__pyx_n_s__min_int;
static PyObject *__pyx_n_s__min_ptr;
static PyObject *__pyx_n_s__min_short;
static PyObject *__pyx_n_s__missing_byte;
static PyObject *__pyx_n_s__missing_c;
static PyObject *__pyx_n_s__missing_char;
static PyObject *__pyx_n_s__missing_double;
static PyObject *__pyx_n_s__missing_float;
static PyObject *__pyx_n_s__missing_int;
static PyObject *__pyx_n_s__missing_ptr;
static PyObject *__pyx_n_s__missing_short;
static PyObject *__pyx_n_s__missing_value;
static PyObject *__pyx_n_s__move_file;
static PyObject *__pyx_n_s__name;
static PyObject *__pyx_n_s__ndims;
static PyObject *__pyx_n_s__ndsid;
static PyObject *__pyx_n_s__ndsids;
static PyObject *__pyx_n_s__newfile;
static PyObject *__pyx_n_s__nfiles;
static PyObject *__pyx_n_s__np;
static PyObject *__pyx_n_s__num;
static PyObject *__pyx_n_s__num_times;
static PyObject *__pyx_n_s__numpy;
static PyObject *__pyx_n_s__obj;
static PyObject *__pyx_n_s__obs_index;
static PyObject *__pyx_n_s__outdir;
static PyObject *__pyx_n_s__overwrite;
static PyObject *__pyx_n_s__parent;
static PyObject *__pyx_n_s__patterns;
static PyObject *__pyx_n_s__prefix;
static PyObject *__pyx_n_s__preserve_dots;
static PyObject *__pyx_n_s__proc_model;
static PyObject *__pyx_n_s__proc_names;
static PyObject *__pyx_n_s__proc_version;
static PyObject *__pyx_n_s__qc_vars;
static PyObject *__pyx_n_s__range;
static PyObject *__pyx_n_s__rename;
static PyObject *__pyx_n_s__rename_bad;
static PyObject *__pyx_n_s__required;
static PyObject *__pyx_n_s__ret_aqc_vars;
static PyObject *__pyx_n_s__ret_data;
static PyObject *__pyx_n_s__ret_qc_vars;
static PyObject *__pyx_n_s__ret_vars;
static PyObject *__pyx_n_s__return_value;
static PyObject *__pyx_n_s__retval;
static PyObject *__pyx_n_s__role;
static PyObject *__pyx_n_s__s;
static PyObject *__pyx_n_s__sample_count;
static PyObject *__pyx_n_s__sample_size;
static PyObject *__pyx_n_s__sample_start;
static PyObject *__pyx_n_s__sample_times;
static PyObject *__pyx_n_s__sample_times_c;
static PyObject *__pyx_n_s__set_att;
static PyObject *__pyx_n_s__set_att_text;
static PyObject *__pyx_n_s__set_att_value;
static PyObject *__pyx_n_s__set_dim_length;
static PyObject *__pyx_n_s__set_input_source;
static PyObject *__pyx_n_s__set_location;
static PyObject *__pyx_n_s__set_sample_times;
static PyObject *__pyx_n_s__set_sample_timevals;
static PyObject *__pyx_n_s__set_status;
static PyObject *__pyx_n_s__set_var_data;
static PyObject *__pyx_n_s__set_var_flags;
static PyObject *__pyx_n_s__site;
static PyObject *__pyx_n_s__size;
static PyObject *__pyx_n_s__src_file;
static PyObject *__pyx_n_s__src_var;
static PyObject *__pyx_n_s__standard_name;
static PyObject *__pyx_n_s__start;
static PyObject *__pyx_n_s__status;
static PyObject *__pyx_n_s__status_text;
static PyObject *__pyx_n_s__store_dataset;
static PyObject *__pyx_n_s__str;
static PyObject *__pyx_n_s__suffix;
static PyObject *__pyx_n_s__sys;
static PyObject *__pyx_n_s__target;
static PyObject *__pyx_n_s__targets;
static PyObject *__pyx_n_s__text;
static PyObject *__pyx_n_s__time;
static PyObject *__pyx_n_s__time_remaining;
static PyObject *__pyx_n_s__trans_data;
static PyObject *__pyx_n_s__type;
static PyObject *__pyx_n_s__uint8;
static PyObject *__pyx_n_s__units;
static PyObject *__pyx_n_s__unset_var_flags;
static PyObject *__pyx_n_s__use_missing;
static PyObject *__pyx_n_s__val;
static PyObject *__pyx_n_s__valid_max;
static PyObject *__pyx_n_s__valid_min;
static PyObject *__pyx_n_s__value;
static PyObject *__pyx_n_s__value_nd;
static PyObject *__pyx_n_s__values;
static PyObject *__pyx_n_s__var;
static PyObject *__pyx_n_s__var_name;
static PyObject *__pyx_n_s__var_names;
static PyObject *__pyx_n_s__var_sample_count;
static PyObject *__pyx_n_s__var_sample_size;
static PyObject *__pyx_n_s__var_tmp;
static PyObject *__pyx_n_s__warning;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_15;
static CDSDataType __pyx_k_55;
static PyObject *__pyx_k_tuple_5;
static PyObject *__pyx_k_tuple_8;
static PyObject *__pyx_k_tuple_10;
static PyObject *__pyx_k_tuple_12;
static PyObject *__pyx_k_tuple_14;
static PyObject *__pyx_k_tuple_16;
static PyObject *__pyx_k_tuple_18;
static PyObject *__pyx_k_tuple_20;
static PyObject *__pyx_k_tuple_22;
static PyObject *__pyx_k_tuple_24;
static PyObject *__pyx_k_tuple_26;
static PyObject *__pyx_k_tuple_28;
static PyObject *__pyx_k_tuple_30;
static PyObject *__pyx_k_tuple_32;
static PyObject *__pyx_k_tuple_34;
static PyObject *__pyx_k_tuple_36;
static PyObject *__pyx_k_tuple_38;
static PyObject *__pyx_k_tuple_40;
static PyObject *__pyx_k_tuple_42;
static PyObject *__pyx_k_tuple_44;
static PyObject *__pyx_k_tuple_46;
static PyObject *__pyx_k_tuple_48;
static PyObject *__pyx_k_tuple_50;
static PyObject *__pyx_k_tuple_52;
static PyObject *__pyx_k_tuple_57;
static PyObject *__pyx_k_tuple_58;
static PyObject *__pyx_k_tuple_59;
static PyObject *__pyx_k_tuple_60;
static PyObject *__pyx_k_tuple_63;
static PyObject *__pyx_k_tuple_66;
static PyObject *__pyx_k_tuple_81;
static PyObject *__pyx_k_tuple_83;
static PyObject *__pyx_k_tuple_85;
static PyObject *__pyx_k_tuple_88;
static PyObject *__pyx_k_tuple_89;
static PyObject *__pyx_k_tuple_91;
static PyObject *__pyx_k_tuple_92;
static PyObject *__pyx_k_tuple_96;
static PyObject *__pyx_k_tuple_98;
static PyObject *__pyx_k_tuple_100;
static PyObject *__pyx_k_tuple_102;
static PyObject *__pyx_k_tuple_104;
static PyObject *__pyx_k_tuple_106;
static PyObject *__pyx_k_tuple_108;
static PyObject *__pyx_k_tuple_110;
static PyObject *__pyx_k_tuple_112;
static PyObject *__pyx_k_tuple_115;
static PyObject *__pyx_k_tuple_118;
static PyObject *__pyx_k_tuple_121;
static PyObject *__pyx_k_tuple_124;
static PyObject *__pyx_k_tuple_127;
static PyObject *__pyx_k_tuple_130;
static PyObject *__pyx_k_tuple_133;
static PyObject *__pyx_k_tuple_136;
static PyObject *__pyx_k_tuple_139;
static PyObject *__pyx_k_tuple_141;
static PyObject *__pyx_k_tuple_143;
static PyObject *__pyx_k_tuple_145;
static PyObject *__pyx_k_tuple_147;
static PyObject *__pyx_k_tuple_149;
static PyObject *__pyx_k_tuple_155;
static PyObject *__pyx_k_tuple_157;
static PyObject *__pyx_k_tuple_160;
static PyObject *__pyx_k_tuple_163;
static PyObject *__pyx_k_tuple_166;
static PyObject *__pyx_k_tuple_169;
static PyObject *__pyx_k_tuple_171;
static PyObject *__pyx_k_tuple_173;
static PyObject *__pyx_k_tuple_175;
static PyObject *__pyx_k_tuple_177;
static PyObject *__pyx_k_tuple_180;
static PyObject *__pyx_k_tuple_183;
static PyObject *__pyx_k_tuple_185;
static PyObject *__pyx_k_tuple_187;
static PyObject *__pyx_k_tuple_190;
static PyObject *__pyx_k_tuple_193;
static PyObject *__pyx_k_tuple_195;
static PyObject *__pyx_k_tuple_197;
static PyObject *__pyx_k_tuple_199;
static PyObject *__pyx_k_tuple_201;
static PyObject *__pyx_k_tuple_203;
static PyObject *__pyx_k_tuple_205;
static PyObject *__pyx_k_tuple_207;
static PyObject *__pyx_k_tuple_209;
static PyObject *__pyx_k_tuple_211;
static PyObject *__pyx_k_tuple_213;
static PyObject *__pyx_k_tuple_215;
static PyObject *__pyx_k_tuple_217;
static PyObject *__pyx_k_tuple_219;
static PyObject *__pyx_k_tuple_221;
static PyObject *__pyx_k_tuple_223;
static PyObject *__pyx_k_tuple_225;
static PyObject *__pyx_k_tuple_227;
static PyObject *__pyx_k_tuple_229;
static PyObject *__pyx_k_tuple_231;
static PyObject *__pyx_k_tuple_233;
static PyObject *__pyx_k_tuple_236;
static PyObject *__pyx_k_tuple_238;
static PyObject *__pyx_k_tuple_240;
static PyObject *__pyx_k_tuple_242;
static PyObject *__pyx_k_tuple_244;
static PyObject *__pyx_k_tuple_246;
static PyObject *__pyx_k_tuple_249;
static PyObject *__pyx_k_tuple_251;
static PyObject *__pyx_k_tuple_253;
static PyObject *__pyx_k_tuple_256;
static PyObject *__pyx_k_tuple_258;
static PyObject *__pyx_k_tuple_260;
static PyObject *__pyx_k_tuple_262;
static PyObject *__pyx_k_tuple_264;
static PyObject *__pyx_k_tuple_266;
static PyObject *__pyx_k_tuple_268;
static PyObject *__pyx_k_tuple_270;
static PyObject *__pyx_k_tuple_272;
static PyObject *__pyx_k_tuple_274;
static PyObject *__pyx_k_tuple_276;
static PyObject *__pyx_k_tuple_279;
static PyObject *__pyx_k_tuple_281;
static PyObject *__pyx_k_tuple_283;
static PyObject *__pyx_k_tuple_286;
static PyObject *__pyx_k_tuple_289;
static PyObject *__pyx_k_tuple_291;
static PyObject *__pyx_k_tuple_294;
static PyObject *__pyx_k_tuple_296;
static PyObject *__pyx_k_tuple_298;
static PyObject *__pyx_k_tuple_301;
static PyObject *__pyx_k_tuple_304;
static PyObject *__pyx_k_tuple_307;
static PyObject *__pyx_k_tuple_309;
static PyObject *__pyx_k_tuple_311;
static PyObject *__pyx_k_tuple_314;
static PyObject *__pyx_k_tuple_317;
static PyObject *__pyx_k_tuple_319;
static PyObject *__pyx_k_tuple_321;
static PyObject *__pyx_k_tuple_324;
static PyObject *__pyx_k_tuple_328;
static PyObject *__pyx_k_tuple_330;
static PyObject *__pyx_k_tuple_333;
static PyObject *__pyx_k_tuple_336;
static PyObject *__pyx_k_tuple_338;
static PyObject *__pyx_k_tuple_341;
static PyObject *__pyx_k_tuple_343;
static PyObject *__pyx_k_tuple_345;
static PyObject *__pyx_k_codeobj_93;
static PyObject *__pyx_k_codeobj_97;
static PyObject *__pyx_k_codeobj_99;
static PyObject *__pyx_k_codeobj_101;
static PyObject *__pyx_k_codeobj_103;
static PyObject *__pyx_k_codeobj_105;
static PyObject *__pyx_k_codeobj_107;
static PyObject *__pyx_k_codeobj_109;
static PyObject *__pyx_k_codeobj_111;
static PyObject *__pyx_k_codeobj_113;
static PyObject *__pyx_k_codeobj_116;
static PyObject *__pyx_k_codeobj_119;
static PyObject *__pyx_k_codeobj_122;
static PyObject *__pyx_k_codeobj_125;
static PyObject *__pyx_k_codeobj_128;
static PyObject *__pyx_k_codeobj_131;
static PyObject *__pyx_k_codeobj_134;
static PyObject *__pyx_k_codeobj_137;
static PyObject *__pyx_k_codeobj_138;
static PyObject *__pyx_k_codeobj_140;
static PyObject *__pyx_k_codeobj_142;
static PyObject *__pyx_k_codeobj_144;
static PyObject *__pyx_k_codeobj_146;
static PyObject *__pyx_k_codeobj_148;
static PyObject *__pyx_k_codeobj_150;
static PyObject *__pyx_k_codeobj_151;
static PyObject *__pyx_k_codeobj_152;
static PyObject *__pyx_k_codeobj_153;
static PyObject *__pyx_k_codeobj_154;
static PyObject *__pyx_k_codeobj_156;
static PyObject *__pyx_k_codeobj_158;
static PyObject *__pyx_k_codeobj_161;
static PyObject *__pyx_k_codeobj_164;
static PyObject *__pyx_k_codeobj_167;
static PyObject *__pyx_k_codeobj_170;
static PyObject *__pyx_k_codeobj_172;
static PyObject *__pyx_k_codeobj_174;
static PyObject *__pyx_k_codeobj_176;
static PyObject *__pyx_k_codeobj_178;
static PyObject *__pyx_k_codeobj_181;
static PyObject *__pyx_k_codeobj_184;
static PyObject *__pyx_k_codeobj_186;
static PyObject *__pyx_k_codeobj_188;
static PyObject *__pyx_k_codeobj_191;
static PyObject *__pyx_k_codeobj_194;
static PyObject *__pyx_k_codeobj_196;
static PyObject *__pyx_k_codeobj_198;
static PyObject *__pyx_k_codeobj_200;
static PyObject *__pyx_k_codeobj_202;
static PyObject *__pyx_k_codeobj_204;
static PyObject *__pyx_k_codeobj_206;
static PyObject *__pyx_k_codeobj_208;
static PyObject *__pyx_k_codeobj_210;
static PyObject *__pyx_k_codeobj_212;
static PyObject *__pyx_k_codeobj_214;
static PyObject *__pyx_k_codeobj_216;
static PyObject *__pyx_k_codeobj_218;
static PyObject *__pyx_k_codeobj_220;
static PyObject *__pyx_k_codeobj_222;
static PyObject *__pyx_k_codeobj_224;
static PyObject *__pyx_k_codeobj_226;
static PyObject *__pyx_k_codeobj_228;
static PyObject *__pyx_k_codeobj_230;
static PyObject *__pyx_k_codeobj_232;
static PyObject *__pyx_k_codeobj_234;
static PyObject *__pyx_k_codeobj_237;
static PyObject *__pyx_k_codeobj_239;
static PyObject *__pyx_k_codeobj_241;
static PyObject *__pyx_k_codeobj_243;
static PyObject *__pyx_k_codeobj_245;
static PyObject *__pyx_k_codeobj_247;
static PyObject *__pyx_k_codeobj_250;
static PyObject *__pyx_k_codeobj_252;
static PyObject *__pyx_k_codeobj_254;
static PyObject *__pyx_k_codeobj_257;
static PyObject *__pyx_k_codeobj_259;
static PyObject *__pyx_k_codeobj_261;
static PyObject *__pyx_k_codeobj_263;
static PyObject *__pyx_k_codeobj_265;
static PyObject *__pyx_k_codeobj_267;
static PyObject *__pyx_k_codeobj_269;
static PyObject *__pyx_k_codeobj_271;
static PyObject *__pyx_k_codeobj_273;
static PyObject *__pyx_k_codeobj_275;
static PyObject *__pyx_k_codeobj_277;
static PyObject *__pyx_k_codeobj_280;
static PyObject *__pyx_k_codeobj_282;
static PyObject *__pyx_k_codeobj_284;
static PyObject *__pyx_k_codeobj_287;
static PyObject *__pyx_k_codeobj_290;
static PyObject *__pyx_k_codeobj_292;
static PyObject *__pyx_k_codeobj_295;
static PyObject *__pyx_k_codeobj_297;
static PyObject *__pyx_k_codeobj_299;
static PyObject *__pyx_k_codeobj_302;
static PyObject *__pyx_k_codeobj_305;
static PyObject *__pyx_k_codeobj_308;
static PyObject *__pyx_k_codeobj_310;
static PyObject *__pyx_k_codeobj_312;
static PyObject *__pyx_k_codeobj_315;
static PyObject *__pyx_k_codeobj_318;
static PyObject *__pyx_k_codeobj_320;
static PyObject *__pyx_k_codeobj_322;
static PyObject *__pyx_k_codeobj_325;
static PyObject *__pyx_k_codeobj_326;
static PyObject *__pyx_k_codeobj_327;
static PyObject *__pyx_k_codeobj_329;
static PyObject *__pyx_k_codeobj_331;
static PyObject *__pyx_k_codeobj_334;
static PyObject *__pyx_k_codeobj_337;
static PyObject *__pyx_k_codeobj_339;
static PyObject *__pyx_k_codeobj_340;
static PyObject *__pyx_k_codeobj_342;
static PyObject *__pyx_k_codeobj_344;
static PyObject *__pyx_k_codeobj_346;

/* Python wrapper */
static int __pyx_pw_7dsproc3_4core_11PyVarTarget_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7dsproc3_4core_11PyVarTarget_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_7dsproc3_4core_11PyVarTarget___cinit__(((struct __pyx_obj_7dsproc3_4core_PyVarTarget *)__pyx_v_self));
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "dsproc3/core.pyx":51
 *     """PyVarTarget"""
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         """TODO"""
 *         self.cobj = NULL
 */

#line 51 "dsproc3/core.pyx"


#line 51 "dsproc3/core.pyx"
static int __pyx_pf_7dsproc3_4core_11PyVarTarget___cinit__(struct __pyx_obj_7dsproc3_4core_PyVarTarget *__pyx_v_self) {

#line 51 "dsproc3/core.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations

#line 51 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "dsproc3/core.pyx":53
 *     def __cinit__(self):
 *         """TODO"""
 *         self.cobj = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */

#line 53 "dsproc3/core.pyx"
  __pyx_v_self->cobj = NULL;

#line 53 "dsproc3/core.pyx"


#line 53 "dsproc3/core.pyx"
  __pyx_r = 0;

#line 53 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 53 "dsproc3/core.pyx"
  return __pyx_r;

#line 53 "dsproc3/core.pyx"
}

#line 53 "dsproc3/core.pyx"


#line 53 "dsproc3/core.pyx"
/* Python wrapper */

#line 53 "dsproc3/core.pyx"
static int __pyx_pw_7dsproc3_4core_11PyVarTarget_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 53 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_11PyVarTarget_2__init__[] = "TODO";

#line 53 "dsproc3/core.pyx"
#if CYTHON_COMPILING_IN_CPYTHON

#line 53 "dsproc3/core.pyx"
struct wrapperbase __pyx_wrapperbase_7dsproc3_4core_11PyVarTarget_2__init__;

#line 53 "dsproc3/core.pyx"
#endif

#line 53 "dsproc3/core.pyx"
static int __pyx_pw_7dsproc3_4core_11PyVarTarget_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {

#line 53 "dsproc3/core.pyx"
  int __pyx_r;

#line 53 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 53 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);

#line 53 "dsproc3/core.pyx"
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;
#line 53 "dsproc3/core.pyx"
}

#line 53 "dsproc3/core.pyx"
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = 
#line 53 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_11PyVarTarget_2__init__(((struct __pyx_obj_7dsproc3_4core_PyVarTarget *)__pyx_v_self));

#line 53 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 53 "dsproc3/core.pyx"
  return __pyx_r;

#line 53 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":55
 *         self.cobj = NULL
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """TODO"""
 *         pass
 */

#line 55 "dsproc3/core.pyx"


#line 55 "dsproc3/core.pyx"
static int __pyx_pf_7dsproc3_4core_11PyVarTarget_2__init__(CYTHON_UNUSED struct __pyx_obj_7dsproc3_4core_PyVarTarget *__pyx_v_self) {

#line 55 "dsproc3/core.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations

#line 55 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("__init__", 0);

#line 55 "dsproc3/core.pyx"


#line 55 "dsproc3/core.pyx"
  __pyx_r = 0;

#line 55 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 55 "dsproc3/core.pyx"
  return __pyx_r;

#line 55 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":59
 *         pass
 * 
 *     cdef set_vartarget(self, VarTarget *obj):             # <<<<<<<<<<<<<<
 *         """TODO"""
 *         self.cobj = obj
 */

#line 59 "dsproc3/core.pyx"


#line 59 "dsproc3/core.pyx"
static PyObject *__pyx_f_7dsproc3_4core_11PyVarTarget_set_vartarget(struct __pyx_obj_7dsproc3_4core_PyVarTarget *__pyx_v_self, VarTarget *__pyx_v_obj) {

#line 59 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations

#line 59 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_vartarget", 0);

  /* "dsproc3/core.pyx":61
 *     cdef set_vartarget(self, VarTarget *obj):
 *         """TODO"""
 *         self.cobj = obj             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */

#line 61 "dsproc3/core.pyx"
  __pyx_v_self->cobj = __pyx_v_obj;

#line 61 "dsproc3/core.pyx"


#line 61 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 61 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 61 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 61 "dsproc3/core.pyx"
  return __pyx_r;

#line 61 "dsproc3/core.pyx"
}

#line 61 "dsproc3/core.pyx"


#line 61 "dsproc3/core.pyx"
/* Python wrapper */

#line 61 "dsproc3/core.pyx"
static void __pyx_pw_7dsproc3_4core_11PyVarTarget_5__dealloc__(PyObject *__pyx_v_self); /*proto*/

#line 61 "dsproc3/core.pyx"
static void __pyx_pw_7dsproc3_4core_11PyVarTarget_5__dealloc__(PyObject *__pyx_v_self) {

#line 61 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 61 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);

#line 61 "dsproc3/core.pyx"
  __pyx_pf_7dsproc3_4core_11PyVarTarget_4__dealloc__(((struct __pyx_obj_7dsproc3_4core_PyVarTarget *)__pyx_v_self));

#line 61 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 61 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":63
 *         self.cobj = obj
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """TODO"""
 *         pass
 */

#line 63 "dsproc3/core.pyx"


#line 63 "dsproc3/core.pyx"
static void __pyx_pf_7dsproc3_4core_11PyVarTarget_4__dealloc__(CYTHON_UNUSED struct __pyx_obj_7dsproc3_4core_PyVarTarget *__pyx_v_self) {
  __Pyx_RefNannyDeclarations

#line 63 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("__dealloc__", 0);

#line 63 "dsproc3/core.pyx"


#line 63 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 63 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":67
 *         pass
 * 
 * cdef inline __line():             # <<<<<<<<<<<<<<
 *     """Returns caller's (filename,lineno,function)."""
 *     cdef char *filename
 */

#line 67 "dsproc3/core.pyx"


#line 67 "dsproc3/core.pyx"
static CYTHON_INLINE PyObject *__pyx_f_7dsproc3_4core___line(void) {
  char *__pyx_v_filename
#line 67 "dsproc3/core.pyx"
;
  char *__pyx_v_function
#line 67 "dsproc3/core.pyx"
;
  int __pyx_v_lineno
#line 67 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_frame = NULL
#line 67 "dsproc3/core.pyx"
;

#line 67 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 67 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("__line", 0);

  /* "dsproc3/core.pyx":72
 *     cdef char *function
 *     cdef int lineno
 *     frame = inspect.currentframe()             # <<<<<<<<<<<<<<
 *     #if frame.f_back:
 *     #    frame = frame.f_back
 */

#line 72 "dsproc3/core.pyx"
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__inspect); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 72 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 72 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__currentframe); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 72 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 72 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 72 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 72 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 72 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 72 "dsproc3/core.pyx"
  __pyx_v_frame = __pyx_t_1;

#line 72 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":79
 *     #if frame.f_back:
 *     #    frame = frame.f_back
 *     filename = frame.f_code.co_filename             # <<<<<<<<<<<<<<
 *     lineno = frame.f_lineno
 *     function = frame.f_code.co_name
 */

#line 79 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_frame, __pyx_n_s__f_code); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 79 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 79 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__co_filename); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 79 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 79 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 79 "dsproc3/core.pyx"
  __pyx_t_3 = PyBytes_AsString(__pyx_t_2); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 79 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 79 "dsproc3/core.pyx"
  __pyx_v_filename = __pyx_t_3;

  /* "dsproc3/core.pyx":80
 *     #    frame = frame.f_back
 *     filename = frame.f_code.co_filename
 *     lineno = frame.f_lineno             # <<<<<<<<<<<<<<
 *     function = frame.f_code.co_name
 *     del frame
 */

#line 80 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_frame, __pyx_n_s__f_lineno); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 80 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 80 "dsproc3/core.pyx"
  __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 80 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 80 "dsproc3/core.pyx"
  __pyx_v_lineno = __pyx_t_4;

  /* "dsproc3/core.pyx":81
 *     filename = frame.f_code.co_filename
 *     lineno = frame.f_lineno
 *     function = frame.f_code.co_name             # <<<<<<<<<<<<<<
 *     del frame
 *     return filename, lineno, function
 */

#line 81 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_frame, __pyx_n_s__f_code); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 81 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 81 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__co_name); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 81 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 81 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 81 "dsproc3/core.pyx"
  __pyx_t_3 = PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 81 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 81 "dsproc3/core.pyx"
  __pyx_v_function = __pyx_t_3;

  /* "dsproc3/core.pyx":82
 *     lineno = frame.f_lineno
 *     function = frame.f_code.co_name
 *     del frame             # <<<<<<<<<<<<<<
 *     return filename, lineno, function
 * 
 */

#line 82 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_v_frame);

#line 82 "dsproc3/core.pyx"
  __pyx_v_frame = NULL;

  /* "dsproc3/core.pyx":83
 *     function = frame.f_code.co_name
 *     del frame
 *     return filename, lineno, function             # <<<<<<<<<<<<<<
 * 
 * #def LOG(char *format, *args, char *_file="", int _line=0):
 */

#line 83 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 83 "dsproc3/core.pyx"
  __pyx_t_1 = PyBytes_FromString(__pyx_v_filename); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 83 "dsproc3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 83 "dsproc3/core.pyx"
  __pyx_t_2 = PyInt_FromLong(__pyx_v_lineno); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 83 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 83 "dsproc3/core.pyx"
  __pyx_t_5 = PyBytes_FromString(__pyx_v_function); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 83 "dsproc3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_5));

#line 83 "dsproc3/core.pyx"
  __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 83 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 83 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_t_1));

#line 83 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));

#line 83 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);

#line 83 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 83 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_6, 2, ((PyObject *)__pyx_t_5));

#line 83 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_t_5));

#line 83 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 83 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 83 "dsproc3/core.pyx"
  __pyx_t_5 = 0;

#line 83 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_t_6);

#line 83 "dsproc3/core.pyx"
  __pyx_t_6 = 0;

#line 83 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 83 "dsproc3/core.pyx"


#line 83 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 83 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 83 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 83 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 83 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 83 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 83 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 83 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.__line", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 83 "dsproc3/core.pyx"
  __pyx_r = 0;

#line 83 "dsproc3/core.pyx"
  __pyx_L0:;

#line 83 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_frame);

#line 83 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 83 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 83 "dsproc3/core.pyx"
  return __pyx_r;

#line 83 "dsproc3/core.pyx"
}

#line 83 "dsproc3/core.pyx"


#line 83 "dsproc3/core.pyx"
/* Python wrapper */

#line 83 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_1log(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 83 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_log[] = "log(char *format, *args)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_1log = 
#line 83 "dsproc3/core.pyx"
{__Pyx_NAMESTR("log"), (PyCFunction)__pyx_pw_7dsproc3_4core_1log, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_log)};

#line 83 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_1log(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_format
#line 83 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_args = 0
#line 83 "dsproc3/core.pyx"
;

#line 83 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 83 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 83 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("log (wrapper)", 0);

#line 83 "dsproc3/core.pyx"
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {

#line 83 "dsproc3/core.pyx"
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));

#line 83 "dsproc3/core.pyx"
    if (unlikely(!__pyx_v_args)) {

#line 83 "dsproc3/core.pyx"
      __Pyx_RefNannyFinishContext();

#line 83 "dsproc3/core.pyx"
      return NULL;

#line 83 "dsproc3/core.pyx"
    }

#line 83 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_v_args);

#line 83 "dsproc3/core.pyx"
  } else {
    __pyx_v_args = __pyx_empty_tuple; 
#line 83 "dsproc3/core.pyx"
__Pyx_INCREF(__pyx_empty_tuple);

#line 83 "dsproc3/core.pyx"
  }

#line 83 "dsproc3/core.pyx"
  {

#line 83 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__format,0};

#line 83 "dsproc3/core.pyx"
    PyObject* values[1] = {0};

#line 83 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 83 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 83 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 83 "dsproc3/core.pyx"
      switch (pos_args) {

#line 83 "dsproc3/core.pyx"
        default:
        case  1: 
#line 83 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 83 "dsproc3/core.pyx"
        case  0: break;

#line 83 "dsproc3/core.pyx"
      }

#line 83 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 83 "dsproc3/core.pyx"
      switch (pos_args) {

#line 83 "dsproc3/core.pyx"
        case  0:

#line 83 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__format)) != 0)) kw_args--;
        else 
#line 83 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 83 "dsproc3/core.pyx"
      }

#line 83 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 83 "dsproc3/core.pyx"
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;

#line 83 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "log") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 83 "dsproc3/core.pyx"
      }

#line 83 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {

#line 83 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 83 "dsproc3/core.pyx"
    } else {

#line 83 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 83 "dsproc3/core.pyx"
    }

#line 83 "dsproc3/core.pyx"
    __pyx_v_format = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_format) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 83 "dsproc3/core.pyx"
  }

#line 83 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 83 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("log", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); 
#line 83 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 83 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 83 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;

#line 83 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.log", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 83 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 83 "dsproc3/core.pyx"
  return NULL;

#line 83 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 83 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_log(__pyx_self, __pyx_v_format, __pyx_v_args);

#line 83 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_args);

#line 83 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 83 "dsproc3/core.pyx"
  return __pyx_r;

#line 83 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":86
 * 
 * #def LOG(char *format, *args, char *_file="", int _line=0):
 * def log(char *format, *args):             # <<<<<<<<<<<<<<
 *     s=format
 *     file,line,func=__line()
 */

#line 86 "dsproc3/core.pyx"


#line 86 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_log(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_format, PyObject *__pyx_v_args) {
  PyObject *__pyx_v_s = NULL
#line 86 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_file = NULL
#line 86 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_line = NULL
#line 86 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_func = NULL
#line 86 "dsproc3/core.pyx"
;

#line 86 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 86 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("log", 0);

  /* "dsproc3/core.pyx":87
 * #def LOG(char *format, *args, char *_file="", int _line=0):
 * def log(char *format, *args):
 *     s=format             # <<<<<<<<<<<<<<
 *     file,line,func=__line()
 *     if args:
 */

#line 87 "dsproc3/core.pyx"
  __pyx_t_1 = PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 87 "dsproc3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 87 "dsproc3/core.pyx"
  __pyx_v_s = ((PyObject *)__pyx_t_1);

#line 87 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":88
 * def log(char *format, *args):
 *     s=format
 *     file,line,func=__line()             # <<<<<<<<<<<<<<
 *     if args:
 *         try:
 */

#line 88 "dsproc3/core.pyx"
  __pyx_t_1 = __pyx_f_7dsproc3_4core___line(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 88 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 88 "dsproc3/core.pyx"
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {

#line 88 "dsproc3/core.pyx"
    PyObject* sequence = __pyx_t_1;

#line 88 "dsproc3/core.pyx"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 88 "dsproc3/core.pyx"
    Py_ssize_t size = Py_SIZE(sequence);

#line 88 "dsproc3/core.pyx"
    #else

#line 88 "dsproc3/core.pyx"
    Py_ssize_t size = PySequence_Size(sequence);

#line 88 "dsproc3/core.pyx"
    #endif

#line 88 "dsproc3/core.pyx"
    if (unlikely(size != 3)) {

#line 88 "dsproc3/core.pyx"
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);

#line 88 "dsproc3/core.pyx"
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 88 "dsproc3/core.pyx"
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 88 "dsproc3/core.pyx"
    }

#line 88 "dsproc3/core.pyx"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 88 "dsproc3/core.pyx"
    if (likely(PyTuple_CheckExact(sequence))) {

#line 88 "dsproc3/core.pyx"
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 

#line 88 "dsproc3/core.pyx"
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 

#line 88 "dsproc3/core.pyx"
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 

#line 88 "dsproc3/core.pyx"
    } else {

#line 88 "dsproc3/core.pyx"
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 

#line 88 "dsproc3/core.pyx"
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 

#line 88 "dsproc3/core.pyx"
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 

#line 88 "dsproc3/core.pyx"
    }

#line 88 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_t_2);

#line 88 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_t_3);

#line 88 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_t_4);

#line 88 "dsproc3/core.pyx"
    #else

#line 88 "dsproc3/core.pyx"
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 88 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 88 "dsproc3/core.pyx"
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 88 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 88 "dsproc3/core.pyx"
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 88 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 88 "dsproc3/core.pyx"
    #endif

#line 88 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 88 "dsproc3/core.pyx"
  } else

#line 88 "dsproc3/core.pyx"
  {

#line 88 "dsproc3/core.pyx"
    Py_ssize_t index = -1;

#line 88 "dsproc3/core.pyx"
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 88 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 88 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 88 "dsproc3/core.pyx"
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) 
#line 88 "dsproc3/core.pyx"
goto __pyx_L3_unpacking_failed;

#line 88 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) 
#line 88 "dsproc3/core.pyx"
goto __pyx_L3_unpacking_failed;

#line 88 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);
    index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) 
#line 88 "dsproc3/core.pyx"
goto __pyx_L3_unpacking_failed;

#line 88 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 88 "dsproc3/core.pyx"
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 88 "dsproc3/core.pyx"
    __pyx_t_6 = NULL;

#line 88 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 88 "dsproc3/core.pyx"
    goto __pyx_L4_unpacking_done;

#line 88 "dsproc3/core.pyx"
    __pyx_L3_unpacking_failed:;

#line 88 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 88 "dsproc3/core.pyx"
    __pyx_t_6 = NULL;

#line 88 "dsproc3/core.pyx"
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 88 "dsproc3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 88 "dsproc3/core.pyx"
    __pyx_L4_unpacking_done:;

#line 88 "dsproc3/core.pyx"
  }

#line 88 "dsproc3/core.pyx"
  __pyx_v_file = __pyx_t_2;

#line 88 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 88 "dsproc3/core.pyx"
  __pyx_v_line = __pyx_t_3;

#line 88 "dsproc3/core.pyx"
  __pyx_t_3 = 0;

#line 88 "dsproc3/core.pyx"
  __pyx_v_func = __pyx_t_4;

#line 88 "dsproc3/core.pyx"
  __pyx_t_4 = 0;

  /* "dsproc3/core.pyx":89
 *     s=format
 *     file,line,func=__line()
 *     if args:             # <<<<<<<<<<<<<<
 *         try:
 *             s = format % args
 */

#line 89 "dsproc3/core.pyx"
  __pyx_t_7 = (((PyObject *)__pyx_v_args) != Py_None) && (PyTuple_GET_SIZE(((PyObject *)__pyx_v_args)) != 0);

#line 89 "dsproc3/core.pyx"
  if (__pyx_t_7) {

    /* "dsproc3/core.pyx":90
 *     file,line,func=__line()
 *     if args:
 *         try:             # <<<<<<<<<<<<<<
 *             s = format % args
 *         except TypeError:
 */

#line 90 "dsproc3/core.pyx"
    {

#line 90 "dsproc3/core.pyx"
      __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);

#line 90 "dsproc3/core.pyx"
      __Pyx_XGOTREF(__pyx_t_8);

#line 90 "dsproc3/core.pyx"
      __Pyx_XGOTREF(__pyx_t_9);

#line 90 "dsproc3/core.pyx"
      __Pyx_XGOTREF(__pyx_t_10);

#line 90 "dsproc3/core.pyx"
      /*try:*/ {

        /* "dsproc3/core.pyx":91
 *     if args:
 *         try:
 *             s = format % args             # <<<<<<<<<<<<<<
 *         except TypeError:
 *             s = str((format,args))
 */

#line 91 "dsproc3/core.pyx"
        __pyx_t_1 = PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 91 "dsproc3/core.pyx"
        __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 91 "dsproc3/core.pyx"
        __pyx_t_4 = PyNumber_Remainder(((PyObject *)__pyx_t_1), ((PyObject *)__pyx_v_args)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 91 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 91 "dsproc3/core.pyx"
        __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

#line 91 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_v_s);

#line 91 "dsproc3/core.pyx"
        __pyx_v_s = __pyx_t_4;

#line 91 "dsproc3/core.pyx"
        __pyx_t_4 = 0;

#line 91 "dsproc3/core.pyx"
      }

#line 91 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 91 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 91 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 91 "dsproc3/core.pyx"
      goto __pyx_L13_try_end;

#line 91 "dsproc3/core.pyx"
      __pyx_L6_error:;

#line 91 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 91 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 91 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 91 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 91 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "dsproc3/core.pyx":92
 *         try:
 *             s = format % args
 *         except TypeError:             # <<<<<<<<<<<<<<
 *             s = str((format,args))
 *     dsproc_log(func, file, line, s)
 */

#line 92 "dsproc3/core.pyx"
      __pyx_t_11 = PyErr_ExceptionMatches(__pyx_builtin_TypeError);

#line 92 "dsproc3/core.pyx"
      if (__pyx_t_11) {

#line 92 "dsproc3/core.pyx"
        __Pyx_AddTraceback("dsproc3.core.log", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 92 "dsproc3/core.pyx"
        if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_1, &__pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 92 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 92 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 92 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_3);

        /* "dsproc3/core.pyx":93
 *             s = format % args
 *         except TypeError:
 *             s = str((format,args))             # <<<<<<<<<<<<<<
 *     dsproc_log(func, file, line, s)
 * 
 */

#line 93 "dsproc3/core.pyx"
        __pyx_t_2 = PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 93 "dsproc3/core.pyx"
        __Pyx_GOTREF(((PyObject *)__pyx_t_2));

#line 93 "dsproc3/core.pyx"
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 93 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 93 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_t_2));

#line 93 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_t_2));

#line 93 "dsproc3/core.pyx"
        __Pyx_INCREF(((PyObject *)__pyx_v_args));

#line 93 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_args));

#line 93 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_v_args));

#line 93 "dsproc3/core.pyx"
        __pyx_t_2 = 0;

#line 93 "dsproc3/core.pyx"
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 93 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 93 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_5));

#line 93 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_t_5));

#line 93 "dsproc3/core.pyx"
        __pyx_t_5 = 0;

#line 93 "dsproc3/core.pyx"
        __pyx_t_5 = PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 93 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 93 "dsproc3/core.pyx"
        __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 93 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_v_s);

#line 93 "dsproc3/core.pyx"
        __pyx_v_s = __pyx_t_5;

#line 93 "dsproc3/core.pyx"
        __pyx_t_5 = 0;

#line 93 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 93 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 93 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 93 "dsproc3/core.pyx"
        goto __pyx_L7_exception_handled;

#line 93 "dsproc3/core.pyx"
      }

#line 93 "dsproc3/core.pyx"
      __pyx_L8_except_error:;

#line 93 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_8);

#line 93 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_9);

#line 93 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_10);

#line 93 "dsproc3/core.pyx"
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);

#line 93 "dsproc3/core.pyx"
      goto __pyx_L1_error;

#line 93 "dsproc3/core.pyx"
      __pyx_L7_exception_handled:;

#line 93 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_8);

#line 93 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_9);

#line 93 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_10);

#line 93 "dsproc3/core.pyx"
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);

#line 93 "dsproc3/core.pyx"
      __pyx_L13_try_end:;

#line 93 "dsproc3/core.pyx"
    }

#line 93 "dsproc3/core.pyx"
    goto __pyx_L5;

#line 93 "dsproc3/core.pyx"
  }

#line 93 "dsproc3/core.pyx"
  __pyx_L5:;

  /* "dsproc3/core.pyx":94
 *         except TypeError:
 *             s = str((format,args))
 *     dsproc_log(func, file, line, s)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 94 "dsproc3/core.pyx"
  __pyx_t_12 = PyBytes_AsString(__pyx_v_func); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 94 "dsproc3/core.pyx"
  __pyx_t_13 = PyBytes_AsString(__pyx_v_file); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 94 "dsproc3/core.pyx"
  __pyx_t_11 = __Pyx_PyInt_AsInt(__pyx_v_line); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 94 "dsproc3/core.pyx"
  __pyx_t_14 = PyBytes_AsString(__pyx_v_s); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 94 "dsproc3/core.pyx"
  dsproc_log(__pyx_t_12, __pyx_t_13, __pyx_t_11, __pyx_t_14);

#line 94 "dsproc3/core.pyx"


#line 94 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 94 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 94 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 94 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 94 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 94 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 94 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 94 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 94 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.log", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 94 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 94 "dsproc3/core.pyx"
  __pyx_L0:;

#line 94 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_s);

#line 94 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_file);

#line 94 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_line);

#line 94 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_func);

#line 94 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 94 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 94 "dsproc3/core.pyx"
  return __pyx_r;

#line 94 "dsproc3/core.pyx"
}

#line 94 "dsproc3/core.pyx"


#line 94 "dsproc3/core.pyx"
/* Python wrapper */

#line 94 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_3warning(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 94 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_2warning[] = "warning(char *format, *args)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_3warning = 
#line 94 "dsproc3/core.pyx"
{__Pyx_NAMESTR("warning"), (PyCFunction)__pyx_pw_7dsproc3_4core_3warning, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_2warning)};

#line 94 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_3warning(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_format
#line 94 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_args = 0
#line 94 "dsproc3/core.pyx"
;

#line 94 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 94 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 94 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("warning (wrapper)", 0);

#line 94 "dsproc3/core.pyx"
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {

#line 94 "dsproc3/core.pyx"
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));

#line 94 "dsproc3/core.pyx"
    if (unlikely(!__pyx_v_args)) {

#line 94 "dsproc3/core.pyx"
      __Pyx_RefNannyFinishContext();

#line 94 "dsproc3/core.pyx"
      return NULL;

#line 94 "dsproc3/core.pyx"
    }

#line 94 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_v_args);

#line 94 "dsproc3/core.pyx"
  } else {
    __pyx_v_args = __pyx_empty_tuple; 
#line 94 "dsproc3/core.pyx"
__Pyx_INCREF(__pyx_empty_tuple);

#line 94 "dsproc3/core.pyx"
  }

#line 94 "dsproc3/core.pyx"
  {

#line 94 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__format,0};

#line 94 "dsproc3/core.pyx"
    PyObject* values[1] = {0};

#line 94 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 94 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 94 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 94 "dsproc3/core.pyx"
      switch (pos_args) {

#line 94 "dsproc3/core.pyx"
        default:
        case  1: 
#line 94 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 94 "dsproc3/core.pyx"
        case  0: break;

#line 94 "dsproc3/core.pyx"
      }

#line 94 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 94 "dsproc3/core.pyx"
      switch (pos_args) {

#line 94 "dsproc3/core.pyx"
        case  0:

#line 94 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__format)) != 0)) kw_args--;
        else 
#line 94 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 94 "dsproc3/core.pyx"
      }

#line 94 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 94 "dsproc3/core.pyx"
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;

#line 94 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "warning") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 94 "dsproc3/core.pyx"
      }

#line 94 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {

#line 94 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 94 "dsproc3/core.pyx"
    } else {

#line 94 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 94 "dsproc3/core.pyx"
    }

#line 94 "dsproc3/core.pyx"
    __pyx_v_format = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_format) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 94 "dsproc3/core.pyx"
  }

#line 94 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 94 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("warning", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); 
#line 94 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 94 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 94 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;

#line 94 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.warning", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 94 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 94 "dsproc3/core.pyx"
  return NULL;

#line 94 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 94 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_2warning(__pyx_self, __pyx_v_format, __pyx_v_args);

#line 94 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_args);

#line 94 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 94 "dsproc3/core.pyx"
  return __pyx_r;

#line 94 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":98
 * 
 * #def WARNING(char *format, *args, char *_file="", int _line=0):
 * def warning(char *format, *args):             # <<<<<<<<<<<<<<
 *     s=format
 *     file,line,func=__line()
 */

#line 98 "dsproc3/core.pyx"


#line 98 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_2warning(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_format, PyObject *__pyx_v_args) {
  PyObject *__pyx_v_s = NULL
#line 98 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_file = NULL
#line 98 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_line = NULL
#line 98 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_func = NULL
#line 98 "dsproc3/core.pyx"
;

#line 98 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 98 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("warning", 0);

  /* "dsproc3/core.pyx":99
 * #def WARNING(char *format, *args, char *_file="", int _line=0):
 * def warning(char *format, *args):
 *     s=format             # <<<<<<<<<<<<<<
 *     file,line,func=__line()
 *     if args:
 */

#line 99 "dsproc3/core.pyx"
  __pyx_t_1 = PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 99 "dsproc3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 99 "dsproc3/core.pyx"
  __pyx_v_s = ((PyObject *)__pyx_t_1);

#line 99 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":100
 * def warning(char *format, *args):
 *     s=format
 *     file,line,func=__line()             # <<<<<<<<<<<<<<
 *     if args:
 *         try:
 */

#line 100 "dsproc3/core.pyx"
  __pyx_t_1 = __pyx_f_7dsproc3_4core___line(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 100 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 100 "dsproc3/core.pyx"
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {

#line 100 "dsproc3/core.pyx"
    PyObject* sequence = __pyx_t_1;

#line 100 "dsproc3/core.pyx"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 100 "dsproc3/core.pyx"
    Py_ssize_t size = Py_SIZE(sequence);

#line 100 "dsproc3/core.pyx"
    #else

#line 100 "dsproc3/core.pyx"
    Py_ssize_t size = PySequence_Size(sequence);

#line 100 "dsproc3/core.pyx"
    #endif

#line 100 "dsproc3/core.pyx"
    if (unlikely(size != 3)) {

#line 100 "dsproc3/core.pyx"
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);

#line 100 "dsproc3/core.pyx"
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 100 "dsproc3/core.pyx"
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 100 "dsproc3/core.pyx"
    }

#line 100 "dsproc3/core.pyx"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 100 "dsproc3/core.pyx"
    if (likely(PyTuple_CheckExact(sequence))) {

#line 100 "dsproc3/core.pyx"
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 

#line 100 "dsproc3/core.pyx"
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 

#line 100 "dsproc3/core.pyx"
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 

#line 100 "dsproc3/core.pyx"
    } else {

#line 100 "dsproc3/core.pyx"
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 

#line 100 "dsproc3/core.pyx"
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 

#line 100 "dsproc3/core.pyx"
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 

#line 100 "dsproc3/core.pyx"
    }

#line 100 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_t_2);

#line 100 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_t_3);

#line 100 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_t_4);

#line 100 "dsproc3/core.pyx"
    #else

#line 100 "dsproc3/core.pyx"
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 100 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 100 "dsproc3/core.pyx"
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 100 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 100 "dsproc3/core.pyx"
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 100 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 100 "dsproc3/core.pyx"
    #endif

#line 100 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 100 "dsproc3/core.pyx"
  } else

#line 100 "dsproc3/core.pyx"
  {

#line 100 "dsproc3/core.pyx"
    Py_ssize_t index = -1;

#line 100 "dsproc3/core.pyx"
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 100 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 100 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 100 "dsproc3/core.pyx"
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) 
#line 100 "dsproc3/core.pyx"
goto __pyx_L3_unpacking_failed;

#line 100 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) 
#line 100 "dsproc3/core.pyx"
goto __pyx_L3_unpacking_failed;

#line 100 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);
    index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) 
#line 100 "dsproc3/core.pyx"
goto __pyx_L3_unpacking_failed;

#line 100 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 100 "dsproc3/core.pyx"
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 100 "dsproc3/core.pyx"
    __pyx_t_6 = NULL;

#line 100 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 100 "dsproc3/core.pyx"
    goto __pyx_L4_unpacking_done;

#line 100 "dsproc3/core.pyx"
    __pyx_L3_unpacking_failed:;

#line 100 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 100 "dsproc3/core.pyx"
    __pyx_t_6 = NULL;

#line 100 "dsproc3/core.pyx"
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 100 "dsproc3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 100 "dsproc3/core.pyx"
    __pyx_L4_unpacking_done:;

#line 100 "dsproc3/core.pyx"
  }

#line 100 "dsproc3/core.pyx"
  __pyx_v_file = __pyx_t_2;

#line 100 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 100 "dsproc3/core.pyx"
  __pyx_v_line = __pyx_t_3;

#line 100 "dsproc3/core.pyx"
  __pyx_t_3 = 0;

#line 100 "dsproc3/core.pyx"
  __pyx_v_func = __pyx_t_4;

#line 100 "dsproc3/core.pyx"
  __pyx_t_4 = 0;

  /* "dsproc3/core.pyx":101
 *     s=format
 *     file,line,func=__line()
 *     if args:             # <<<<<<<<<<<<<<
 *         try:
 *             s = format % args
 */

#line 101 "dsproc3/core.pyx"
  __pyx_t_7 = (((PyObject *)__pyx_v_args) != Py_None) && (PyTuple_GET_SIZE(((PyObject *)__pyx_v_args)) != 0);

#line 101 "dsproc3/core.pyx"
  if (__pyx_t_7) {

    /* "dsproc3/core.pyx":102
 *     file,line,func=__line()
 *     if args:
 *         try:             # <<<<<<<<<<<<<<
 *             s = format % args
 *         except TypeError:
 */

#line 102 "dsproc3/core.pyx"
    {

#line 102 "dsproc3/core.pyx"
      __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);

#line 102 "dsproc3/core.pyx"
      __Pyx_XGOTREF(__pyx_t_8);

#line 102 "dsproc3/core.pyx"
      __Pyx_XGOTREF(__pyx_t_9);

#line 102 "dsproc3/core.pyx"
      __Pyx_XGOTREF(__pyx_t_10);

#line 102 "dsproc3/core.pyx"
      /*try:*/ {

        /* "dsproc3/core.pyx":103
 *     if args:
 *         try:
 *             s = format % args             # <<<<<<<<<<<<<<
 *         except TypeError:
 *             s = str((format,args))
 */

#line 103 "dsproc3/core.pyx"
        __pyx_t_1 = PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 103 "dsproc3/core.pyx"
        __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 103 "dsproc3/core.pyx"
        __pyx_t_4 = PyNumber_Remainder(((PyObject *)__pyx_t_1), ((PyObject *)__pyx_v_args)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 103 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 103 "dsproc3/core.pyx"
        __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

#line 103 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_v_s);

#line 103 "dsproc3/core.pyx"
        __pyx_v_s = __pyx_t_4;

#line 103 "dsproc3/core.pyx"
        __pyx_t_4 = 0;

#line 103 "dsproc3/core.pyx"
      }

#line 103 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 103 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 103 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 103 "dsproc3/core.pyx"
      goto __pyx_L13_try_end;

#line 103 "dsproc3/core.pyx"
      __pyx_L6_error:;

#line 103 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 103 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 103 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 103 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 103 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "dsproc3/core.pyx":104
 *         try:
 *             s = format % args
 *         except TypeError:             # <<<<<<<<<<<<<<
 *             s = str((format,args))
 *     dsproc_warning(func, file, line, s)
 */

#line 104 "dsproc3/core.pyx"
      __pyx_t_11 = PyErr_ExceptionMatches(__pyx_builtin_TypeError);

#line 104 "dsproc3/core.pyx"
      if (__pyx_t_11) {

#line 104 "dsproc3/core.pyx"
        __Pyx_AddTraceback("dsproc3.core.warning", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 104 "dsproc3/core.pyx"
        if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_1, &__pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 104 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 104 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 104 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_3);

        /* "dsproc3/core.pyx":105
 *             s = format % args
 *         except TypeError:
 *             s = str((format,args))             # <<<<<<<<<<<<<<
 *     dsproc_warning(func, file, line, s)
 * 
 */

#line 105 "dsproc3/core.pyx"
        __pyx_t_2 = PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 105 "dsproc3/core.pyx"
        __Pyx_GOTREF(((PyObject *)__pyx_t_2));

#line 105 "dsproc3/core.pyx"
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 105 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 105 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_t_2));

#line 105 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_t_2));

#line 105 "dsproc3/core.pyx"
        __Pyx_INCREF(((PyObject *)__pyx_v_args));

#line 105 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_args));

#line 105 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_v_args));

#line 105 "dsproc3/core.pyx"
        __pyx_t_2 = 0;

#line 105 "dsproc3/core.pyx"
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 105 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 105 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_5));

#line 105 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_t_5));

#line 105 "dsproc3/core.pyx"
        __pyx_t_5 = 0;

#line 105 "dsproc3/core.pyx"
        __pyx_t_5 = PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 105 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 105 "dsproc3/core.pyx"
        __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 105 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_v_s);

#line 105 "dsproc3/core.pyx"
        __pyx_v_s = __pyx_t_5;

#line 105 "dsproc3/core.pyx"
        __pyx_t_5 = 0;

#line 105 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 105 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 105 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 105 "dsproc3/core.pyx"
        goto __pyx_L7_exception_handled;

#line 105 "dsproc3/core.pyx"
      }

#line 105 "dsproc3/core.pyx"
      __pyx_L8_except_error:;

#line 105 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_8);

#line 105 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_9);

#line 105 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_10);

#line 105 "dsproc3/core.pyx"
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);

#line 105 "dsproc3/core.pyx"
      goto __pyx_L1_error;

#line 105 "dsproc3/core.pyx"
      __pyx_L7_exception_handled:;

#line 105 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_8);

#line 105 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_9);

#line 105 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_10);

#line 105 "dsproc3/core.pyx"
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);

#line 105 "dsproc3/core.pyx"
      __pyx_L13_try_end:;

#line 105 "dsproc3/core.pyx"
    }

#line 105 "dsproc3/core.pyx"
    goto __pyx_L5;

#line 105 "dsproc3/core.pyx"
  }

#line 105 "dsproc3/core.pyx"
  __pyx_L5:;

  /* "dsproc3/core.pyx":106
 *         except TypeError:
 *             s = str((format,args))
 *     dsproc_warning(func, file, line, s)             # <<<<<<<<<<<<<<
 * 
 * #def ERROR(char *status, char *format, *args, char *_file="", int _line=0):
 */

#line 106 "dsproc3/core.pyx"
  __pyx_t_12 = PyBytes_AsString(__pyx_v_func); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 106 "dsproc3/core.pyx"
  __pyx_t_13 = PyBytes_AsString(__pyx_v_file); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 106 "dsproc3/core.pyx"
  __pyx_t_11 = __Pyx_PyInt_AsInt(__pyx_v_line); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 106 "dsproc3/core.pyx"
  __pyx_t_14 = PyBytes_AsString(__pyx_v_s); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 106 "dsproc3/core.pyx"
  dsproc_warning(__pyx_t_12, __pyx_t_13, __pyx_t_11, __pyx_t_14);

#line 106 "dsproc3/core.pyx"


#line 106 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 106 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 106 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 106 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 106 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 106 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 106 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 106 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 106 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.warning", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 106 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 106 "dsproc3/core.pyx"
  __pyx_L0:;

#line 106 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_s);

#line 106 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_file);

#line 106 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_line);

#line 106 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_func);

#line 106 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 106 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 106 "dsproc3/core.pyx"
  return __pyx_r;

#line 106 "dsproc3/core.pyx"
}

#line 106 "dsproc3/core.pyx"


#line 106 "dsproc3/core.pyx"
/* Python wrapper */

#line 106 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_5error(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 106 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_4error[] = "error(char *status, char *format, *args)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_5error = 
#line 106 "dsproc3/core.pyx"
{__Pyx_NAMESTR("error"), (PyCFunction)__pyx_pw_7dsproc3_4core_5error, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_4error)};

#line 106 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_5error(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_status
#line 106 "dsproc3/core.pyx"
;
  char *__pyx_v_format
#line 106 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_args = 0
#line 106 "dsproc3/core.pyx"
;

#line 106 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 106 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 106 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("error (wrapper)", 0);

#line 106 "dsproc3/core.pyx"
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {

#line 106 "dsproc3/core.pyx"
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));

#line 106 "dsproc3/core.pyx"
    if (unlikely(!__pyx_v_args)) {

#line 106 "dsproc3/core.pyx"
      __Pyx_RefNannyFinishContext();

#line 106 "dsproc3/core.pyx"
      return NULL;

#line 106 "dsproc3/core.pyx"
    }

#line 106 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_v_args);

#line 106 "dsproc3/core.pyx"
  } else {
    __pyx_v_args = __pyx_empty_tuple; 
#line 106 "dsproc3/core.pyx"
__Pyx_INCREF(__pyx_empty_tuple);

#line 106 "dsproc3/core.pyx"
  }

#line 106 "dsproc3/core.pyx"
  {

#line 106 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__status,&__pyx_n_s__format,0};

#line 106 "dsproc3/core.pyx"
    PyObject* values[2] = {0,0};

#line 106 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 106 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 106 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 106 "dsproc3/core.pyx"
      switch (pos_args) {

#line 106 "dsproc3/core.pyx"
        default:
        case  2: 
#line 106 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 106 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 106 "dsproc3/core.pyx"
        case  0: break;

#line 106 "dsproc3/core.pyx"
      }

#line 106 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 106 "dsproc3/core.pyx"
      switch (pos_args) {

#line 106 "dsproc3/core.pyx"
        case  0:

#line 106 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__status)) != 0)) kw_args--;
        else 
#line 106 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 106 "dsproc3/core.pyx"
        case  1:

#line 106 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__format)) != 0)) kw_args--;

#line 106 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("error", 0, 2, 2, 1); 
#line 106 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 106 "dsproc3/core.pyx"
        }

#line 106 "dsproc3/core.pyx"
      }

#line 106 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 106 "dsproc3/core.pyx"
        const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;

#line 106 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "error") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 106 "dsproc3/core.pyx"
      }

#line 106 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) < 2) {

#line 106 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 106 "dsproc3/core.pyx"
    } else {

#line 106 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 106 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 106 "dsproc3/core.pyx"
    }

#line 106 "dsproc3/core.pyx"
    __pyx_v_status = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_status) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 106 "dsproc3/core.pyx"
    __pyx_v_format = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_format) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 106 "dsproc3/core.pyx"
  }

#line 106 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 106 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("error", 0, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 106 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 106 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 106 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;

#line 106 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.error", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 106 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 106 "dsproc3/core.pyx"
  return NULL;

#line 106 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 106 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_4error(__pyx_self, __pyx_v_status, __pyx_v_format, __pyx_v_args);

#line 106 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_args);

#line 106 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 106 "dsproc3/core.pyx"
  return __pyx_r;

#line 106 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":109
 * 
 * #def ERROR(char *status, char *format, *args, char *_file="", int _line=0):
 * def error(char *status, char *format, *args):             # <<<<<<<<<<<<<<
 *     s=format
 *     file,line,func=__line()
 */

#line 109 "dsproc3/core.pyx"


#line 109 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_4error(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_status, char *__pyx_v_format, PyObject *__pyx_v_args) {
  PyObject *__pyx_v_s = NULL
#line 109 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_file = NULL
#line 109 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_line = NULL
#line 109 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_func = NULL
#line 109 "dsproc3/core.pyx"
;

#line 109 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 109 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("error", 0);

  /* "dsproc3/core.pyx":110
 * #def ERROR(char *status, char *format, *args, char *_file="", int _line=0):
 * def error(char *status, char *format, *args):
 *     s=format             # <<<<<<<<<<<<<<
 *     file,line,func=__line()
 *     if args:
 */

#line 110 "dsproc3/core.pyx"
  __pyx_t_1 = PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 110 "dsproc3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 110 "dsproc3/core.pyx"
  __pyx_v_s = ((PyObject *)__pyx_t_1);

#line 110 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":111
 * def error(char *status, char *format, *args):
 *     s=format
 *     file,line,func=__line()             # <<<<<<<<<<<<<<
 *     if args:
 *         try:
 */

#line 111 "dsproc3/core.pyx"
  __pyx_t_1 = __pyx_f_7dsproc3_4core___line(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 111 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 111 "dsproc3/core.pyx"
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {

#line 111 "dsproc3/core.pyx"
    PyObject* sequence = __pyx_t_1;

#line 111 "dsproc3/core.pyx"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 111 "dsproc3/core.pyx"
    Py_ssize_t size = Py_SIZE(sequence);

#line 111 "dsproc3/core.pyx"
    #else

#line 111 "dsproc3/core.pyx"
    Py_ssize_t size = PySequence_Size(sequence);

#line 111 "dsproc3/core.pyx"
    #endif

#line 111 "dsproc3/core.pyx"
    if (unlikely(size != 3)) {

#line 111 "dsproc3/core.pyx"
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);

#line 111 "dsproc3/core.pyx"
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 111 "dsproc3/core.pyx"
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 111 "dsproc3/core.pyx"
    }

#line 111 "dsproc3/core.pyx"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 111 "dsproc3/core.pyx"
    if (likely(PyTuple_CheckExact(sequence))) {

#line 111 "dsproc3/core.pyx"
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 

#line 111 "dsproc3/core.pyx"
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 

#line 111 "dsproc3/core.pyx"
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 

#line 111 "dsproc3/core.pyx"
    } else {

#line 111 "dsproc3/core.pyx"
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 

#line 111 "dsproc3/core.pyx"
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 

#line 111 "dsproc3/core.pyx"
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 

#line 111 "dsproc3/core.pyx"
    }

#line 111 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_t_2);

#line 111 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_t_3);

#line 111 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_t_4);

#line 111 "dsproc3/core.pyx"
    #else

#line 111 "dsproc3/core.pyx"
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 111 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 111 "dsproc3/core.pyx"
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 111 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 111 "dsproc3/core.pyx"
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 111 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 111 "dsproc3/core.pyx"
    #endif

#line 111 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 111 "dsproc3/core.pyx"
  } else

#line 111 "dsproc3/core.pyx"
  {

#line 111 "dsproc3/core.pyx"
    Py_ssize_t index = -1;

#line 111 "dsproc3/core.pyx"
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 111 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 111 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 111 "dsproc3/core.pyx"
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) 
#line 111 "dsproc3/core.pyx"
goto __pyx_L3_unpacking_failed;

#line 111 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) 
#line 111 "dsproc3/core.pyx"
goto __pyx_L3_unpacking_failed;

#line 111 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);
    index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) 
#line 111 "dsproc3/core.pyx"
goto __pyx_L3_unpacking_failed;

#line 111 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 111 "dsproc3/core.pyx"
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 111 "dsproc3/core.pyx"
    __pyx_t_6 = NULL;

#line 111 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 111 "dsproc3/core.pyx"
    goto __pyx_L4_unpacking_done;

#line 111 "dsproc3/core.pyx"
    __pyx_L3_unpacking_failed:;

#line 111 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 111 "dsproc3/core.pyx"
    __pyx_t_6 = NULL;

#line 111 "dsproc3/core.pyx"
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 111 "dsproc3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 111 "dsproc3/core.pyx"
    __pyx_L4_unpacking_done:;

#line 111 "dsproc3/core.pyx"
  }

#line 111 "dsproc3/core.pyx"
  __pyx_v_file = __pyx_t_2;

#line 111 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 111 "dsproc3/core.pyx"
  __pyx_v_line = __pyx_t_3;

#line 111 "dsproc3/core.pyx"
  __pyx_t_3 = 0;

#line 111 "dsproc3/core.pyx"
  __pyx_v_func = __pyx_t_4;

#line 111 "dsproc3/core.pyx"
  __pyx_t_4 = 0;

  /* "dsproc3/core.pyx":112
 *     s=format
 *     file,line,func=__line()
 *     if args:             # <<<<<<<<<<<<<<
 *         try:
 *             s = format % args
 */

#line 112 "dsproc3/core.pyx"
  __pyx_t_7 = (((PyObject *)__pyx_v_args) != Py_None) && (PyTuple_GET_SIZE(((PyObject *)__pyx_v_args)) != 0);

#line 112 "dsproc3/core.pyx"
  if (__pyx_t_7) {

    /* "dsproc3/core.pyx":113
 *     file,line,func=__line()
 *     if args:
 *         try:             # <<<<<<<<<<<<<<
 *             s = format % args
 *         except TypeError:
 */

#line 113 "dsproc3/core.pyx"
    {

#line 113 "dsproc3/core.pyx"
      __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);

#line 113 "dsproc3/core.pyx"
      __Pyx_XGOTREF(__pyx_t_8);

#line 113 "dsproc3/core.pyx"
      __Pyx_XGOTREF(__pyx_t_9);

#line 113 "dsproc3/core.pyx"
      __Pyx_XGOTREF(__pyx_t_10);

#line 113 "dsproc3/core.pyx"
      /*try:*/ {

        /* "dsproc3/core.pyx":114
 *     if args:
 *         try:
 *             s = format % args             # <<<<<<<<<<<<<<
 *         except TypeError:
 *             s = str((format,args))
 */

#line 114 "dsproc3/core.pyx"
        __pyx_t_1 = PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 114 "dsproc3/core.pyx"
        __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 114 "dsproc3/core.pyx"
        __pyx_t_4 = PyNumber_Remainder(((PyObject *)__pyx_t_1), ((PyObject *)__pyx_v_args)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 114 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 114 "dsproc3/core.pyx"
        __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

#line 114 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_v_s);

#line 114 "dsproc3/core.pyx"
        __pyx_v_s = __pyx_t_4;

#line 114 "dsproc3/core.pyx"
        __pyx_t_4 = 0;

#line 114 "dsproc3/core.pyx"
      }

#line 114 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 114 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 114 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 114 "dsproc3/core.pyx"
      goto __pyx_L13_try_end;

#line 114 "dsproc3/core.pyx"
      __pyx_L6_error:;

#line 114 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 114 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 114 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 114 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 114 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "dsproc3/core.pyx":115
 *         try:
 *             s = format % args
 *         except TypeError:             # <<<<<<<<<<<<<<
 *             s = str((format,args))
 *     dsproc_error(func, file, line, status, s)
 */

#line 115 "dsproc3/core.pyx"
      __pyx_t_11 = PyErr_ExceptionMatches(__pyx_builtin_TypeError);

#line 115 "dsproc3/core.pyx"
      if (__pyx_t_11) {

#line 115 "dsproc3/core.pyx"
        __Pyx_AddTraceback("dsproc3.core.error", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 115 "dsproc3/core.pyx"
        if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_1, &__pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 115 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 115 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 115 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_3);

        /* "dsproc3/core.pyx":116
 *             s = format % args
 *         except TypeError:
 *             s = str((format,args))             # <<<<<<<<<<<<<<
 *     dsproc_error(func, file, line, status, s)
 * 
 */

#line 116 "dsproc3/core.pyx"
        __pyx_t_2 = PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 116 "dsproc3/core.pyx"
        __Pyx_GOTREF(((PyObject *)__pyx_t_2));

#line 116 "dsproc3/core.pyx"
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 116 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 116 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_t_2));

#line 116 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_t_2));

#line 116 "dsproc3/core.pyx"
        __Pyx_INCREF(((PyObject *)__pyx_v_args));

#line 116 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_args));

#line 116 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_v_args));

#line 116 "dsproc3/core.pyx"
        __pyx_t_2 = 0;

#line 116 "dsproc3/core.pyx"
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 116 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 116 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_5));

#line 116 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_t_5));

#line 116 "dsproc3/core.pyx"
        __pyx_t_5 = 0;

#line 116 "dsproc3/core.pyx"
        __pyx_t_5 = PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 116 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 116 "dsproc3/core.pyx"
        __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 116 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_v_s);

#line 116 "dsproc3/core.pyx"
        __pyx_v_s = __pyx_t_5;

#line 116 "dsproc3/core.pyx"
        __pyx_t_5 = 0;

#line 116 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 116 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 116 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 116 "dsproc3/core.pyx"
        goto __pyx_L7_exception_handled;

#line 116 "dsproc3/core.pyx"
      }

#line 116 "dsproc3/core.pyx"
      __pyx_L8_except_error:;

#line 116 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_8);

#line 116 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_9);

#line 116 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_10);

#line 116 "dsproc3/core.pyx"
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);

#line 116 "dsproc3/core.pyx"
      goto __pyx_L1_error;

#line 116 "dsproc3/core.pyx"
      __pyx_L7_exception_handled:;

#line 116 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_8);

#line 116 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_9);

#line 116 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_10);

#line 116 "dsproc3/core.pyx"
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);

#line 116 "dsproc3/core.pyx"
      __pyx_L13_try_end:;

#line 116 "dsproc3/core.pyx"
    }

#line 116 "dsproc3/core.pyx"
    goto __pyx_L5;

#line 116 "dsproc3/core.pyx"
  }

#line 116 "dsproc3/core.pyx"
  __pyx_L5:;

  /* "dsproc3/core.pyx":117
 *         except TypeError:
 *             s = str((format,args))
 *     dsproc_error(func, file, line, status, s)             # <<<<<<<<<<<<<<
 * 
 * def mentor_mail(char *format, *args):
 */

#line 117 "dsproc3/core.pyx"
  __pyx_t_12 = PyBytes_AsString(__pyx_v_func); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 117 "dsproc3/core.pyx"
  __pyx_t_13 = PyBytes_AsString(__pyx_v_file); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 117 "dsproc3/core.pyx"
  __pyx_t_11 = __Pyx_PyInt_AsInt(__pyx_v_line); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 117 "dsproc3/core.pyx"
  __pyx_t_14 = PyBytes_AsString(__pyx_v_s); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 117 "dsproc3/core.pyx"
  dsproc_error(__pyx_t_12, __pyx_t_13, __pyx_t_11, __pyx_v_status, __pyx_t_14);

#line 117 "dsproc3/core.pyx"


#line 117 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 117 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 117 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 117 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 117 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 117 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 117 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 117 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 117 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.error", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 117 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 117 "dsproc3/core.pyx"
  __pyx_L0:;

#line 117 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_s);

#line 117 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_file);

#line 117 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_line);

#line 117 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_func);

#line 117 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 117 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 117 "dsproc3/core.pyx"
  return __pyx_r;

#line 117 "dsproc3/core.pyx"
}

#line 117 "dsproc3/core.pyx"


#line 117 "dsproc3/core.pyx"
/* Python wrapper */

#line 117 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_7mentor_mail(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 117 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_6mentor_mail[] = "mentor_mail(char *format, *args)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_7mentor_mail = 
#line 117 "dsproc3/core.pyx"
{__Pyx_NAMESTR("mentor_mail"), (PyCFunction)__pyx_pw_7dsproc3_4core_7mentor_mail, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_6mentor_mail)};

#line 117 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_7mentor_mail(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_format
#line 117 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_args = 0
#line 117 "dsproc3/core.pyx"
;

#line 117 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 117 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 117 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("mentor_mail (wrapper)", 0);

#line 117 "dsproc3/core.pyx"
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {

#line 117 "dsproc3/core.pyx"
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));

#line 117 "dsproc3/core.pyx"
    if (unlikely(!__pyx_v_args)) {

#line 117 "dsproc3/core.pyx"
      __Pyx_RefNannyFinishContext();

#line 117 "dsproc3/core.pyx"
      return NULL;

#line 117 "dsproc3/core.pyx"
    }

#line 117 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_v_args);

#line 117 "dsproc3/core.pyx"
  } else {
    __pyx_v_args = __pyx_empty_tuple; 
#line 117 "dsproc3/core.pyx"
__Pyx_INCREF(__pyx_empty_tuple);

#line 117 "dsproc3/core.pyx"
  }

#line 117 "dsproc3/core.pyx"
  {

#line 117 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__format,0};

#line 117 "dsproc3/core.pyx"
    PyObject* values[1] = {0};

#line 117 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 117 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 117 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 117 "dsproc3/core.pyx"
      switch (pos_args) {

#line 117 "dsproc3/core.pyx"
        default:
        case  1: 
#line 117 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 117 "dsproc3/core.pyx"
        case  0: break;

#line 117 "dsproc3/core.pyx"
      }

#line 117 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 117 "dsproc3/core.pyx"
      switch (pos_args) {

#line 117 "dsproc3/core.pyx"
        case  0:

#line 117 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__format)) != 0)) kw_args--;
        else 
#line 117 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 117 "dsproc3/core.pyx"
      }

#line 117 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 117 "dsproc3/core.pyx"
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;

#line 117 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "mentor_mail") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 117 "dsproc3/core.pyx"
      }

#line 117 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {

#line 117 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 117 "dsproc3/core.pyx"
    } else {

#line 117 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 117 "dsproc3/core.pyx"
    }

#line 117 "dsproc3/core.pyx"
    __pyx_v_format = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_format) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 117 "dsproc3/core.pyx"
  }

#line 117 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 117 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mentor_mail", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); 
#line 117 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 117 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 117 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;

#line 117 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.mentor_mail", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 117 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 117 "dsproc3/core.pyx"
  return NULL;

#line 117 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 117 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_6mentor_mail(__pyx_self, __pyx_v_format, __pyx_v_args);

#line 117 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_args);

#line 117 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 117 "dsproc3/core.pyx"
  return __pyx_r;

#line 117 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":119
 *     dsproc_error(func, file, line, status, s)
 * 
 * def mentor_mail(char *format, *args):             # <<<<<<<<<<<<<<
 *     s=format
 *     file,line,func=__line()
 */

#line 119 "dsproc3/core.pyx"


#line 119 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_6mentor_mail(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_format, PyObject *__pyx_v_args) {
  PyObject *__pyx_v_s = NULL
#line 119 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_file = NULL
#line 119 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_line = NULL
#line 119 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_func = NULL
#line 119 "dsproc3/core.pyx"
;

#line 119 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 119 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("mentor_mail", 0);

  /* "dsproc3/core.pyx":120
 * 
 * def mentor_mail(char *format, *args):
 *     s=format             # <<<<<<<<<<<<<<
 *     file,line,func=__line()
 *     if args:
 */

#line 120 "dsproc3/core.pyx"
  __pyx_t_1 = PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 120 "dsproc3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 120 "dsproc3/core.pyx"
  __pyx_v_s = ((PyObject *)__pyx_t_1);

#line 120 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":121
 * def mentor_mail(char *format, *args):
 *     s=format
 *     file,line,func=__line()             # <<<<<<<<<<<<<<
 *     if args:
 *         try:
 */

#line 121 "dsproc3/core.pyx"
  __pyx_t_1 = __pyx_f_7dsproc3_4core___line(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 121 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 121 "dsproc3/core.pyx"
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {

#line 121 "dsproc3/core.pyx"
    PyObject* sequence = __pyx_t_1;

#line 121 "dsproc3/core.pyx"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 121 "dsproc3/core.pyx"
    Py_ssize_t size = Py_SIZE(sequence);

#line 121 "dsproc3/core.pyx"
    #else

#line 121 "dsproc3/core.pyx"
    Py_ssize_t size = PySequence_Size(sequence);

#line 121 "dsproc3/core.pyx"
    #endif

#line 121 "dsproc3/core.pyx"
    if (unlikely(size != 3)) {

#line 121 "dsproc3/core.pyx"
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);

#line 121 "dsproc3/core.pyx"
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 121 "dsproc3/core.pyx"
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 121 "dsproc3/core.pyx"
    }

#line 121 "dsproc3/core.pyx"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 121 "dsproc3/core.pyx"
    if (likely(PyTuple_CheckExact(sequence))) {

#line 121 "dsproc3/core.pyx"
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 

#line 121 "dsproc3/core.pyx"
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 

#line 121 "dsproc3/core.pyx"
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 

#line 121 "dsproc3/core.pyx"
    } else {

#line 121 "dsproc3/core.pyx"
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 

#line 121 "dsproc3/core.pyx"
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 

#line 121 "dsproc3/core.pyx"
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 

#line 121 "dsproc3/core.pyx"
    }

#line 121 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_t_2);

#line 121 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_t_3);

#line 121 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_t_4);

#line 121 "dsproc3/core.pyx"
    #else

#line 121 "dsproc3/core.pyx"
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 121 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 121 "dsproc3/core.pyx"
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 121 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 121 "dsproc3/core.pyx"
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 121 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 121 "dsproc3/core.pyx"
    #endif

#line 121 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 121 "dsproc3/core.pyx"
  } else

#line 121 "dsproc3/core.pyx"
  {

#line 121 "dsproc3/core.pyx"
    Py_ssize_t index = -1;

#line 121 "dsproc3/core.pyx"
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 121 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 121 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 121 "dsproc3/core.pyx"
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) 
#line 121 "dsproc3/core.pyx"
goto __pyx_L3_unpacking_failed;

#line 121 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) 
#line 121 "dsproc3/core.pyx"
goto __pyx_L3_unpacking_failed;

#line 121 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);
    index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) 
#line 121 "dsproc3/core.pyx"
goto __pyx_L3_unpacking_failed;

#line 121 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 121 "dsproc3/core.pyx"
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 121 "dsproc3/core.pyx"
    __pyx_t_6 = NULL;

#line 121 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 121 "dsproc3/core.pyx"
    goto __pyx_L4_unpacking_done;

#line 121 "dsproc3/core.pyx"
    __pyx_L3_unpacking_failed:;

#line 121 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 121 "dsproc3/core.pyx"
    __pyx_t_6 = NULL;

#line 121 "dsproc3/core.pyx"
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 121 "dsproc3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 121 "dsproc3/core.pyx"
    __pyx_L4_unpacking_done:;

#line 121 "dsproc3/core.pyx"
  }

#line 121 "dsproc3/core.pyx"
  __pyx_v_file = __pyx_t_2;

#line 121 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 121 "dsproc3/core.pyx"
  __pyx_v_line = __pyx_t_3;

#line 121 "dsproc3/core.pyx"
  __pyx_t_3 = 0;

#line 121 "dsproc3/core.pyx"
  __pyx_v_func = __pyx_t_4;

#line 121 "dsproc3/core.pyx"
  __pyx_t_4 = 0;

  /* "dsproc3/core.pyx":122
 *     s=format
 *     file,line,func=__line()
 *     if args:             # <<<<<<<<<<<<<<
 *         try:
 *             s = format % args
 */

#line 122 "dsproc3/core.pyx"
  __pyx_t_7 = (((PyObject *)__pyx_v_args) != Py_None) && (PyTuple_GET_SIZE(((PyObject *)__pyx_v_args)) != 0);

#line 122 "dsproc3/core.pyx"
  if (__pyx_t_7) {

    /* "dsproc3/core.pyx":123
 *     file,line,func=__line()
 *     if args:
 *         try:             # <<<<<<<<<<<<<<
 *             s = format % args
 *         except TypeError:
 */

#line 123 "dsproc3/core.pyx"
    {

#line 123 "dsproc3/core.pyx"
      __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);

#line 123 "dsproc3/core.pyx"
      __Pyx_XGOTREF(__pyx_t_8);

#line 123 "dsproc3/core.pyx"
      __Pyx_XGOTREF(__pyx_t_9);

#line 123 "dsproc3/core.pyx"
      __Pyx_XGOTREF(__pyx_t_10);

#line 123 "dsproc3/core.pyx"
      /*try:*/ {

        /* "dsproc3/core.pyx":124
 *     if args:
 *         try:
 *             s = format % args             # <<<<<<<<<<<<<<
 *         except TypeError:
 *             s = str((format,args))
 */

#line 124 "dsproc3/core.pyx"
        __pyx_t_1 = PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 124 "dsproc3/core.pyx"
        __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 124 "dsproc3/core.pyx"
        __pyx_t_4 = PyNumber_Remainder(((PyObject *)__pyx_t_1), ((PyObject *)__pyx_v_args)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 124 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 124 "dsproc3/core.pyx"
        __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

#line 124 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_v_s);

#line 124 "dsproc3/core.pyx"
        __pyx_v_s = __pyx_t_4;

#line 124 "dsproc3/core.pyx"
        __pyx_t_4 = 0;

#line 124 "dsproc3/core.pyx"
      }

#line 124 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 124 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 124 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 124 "dsproc3/core.pyx"
      goto __pyx_L13_try_end;

#line 124 "dsproc3/core.pyx"
      __pyx_L6_error:;

#line 124 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 124 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 124 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 124 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 124 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "dsproc3/core.pyx":125
 *         try:
 *             s = format % args
 *         except TypeError:             # <<<<<<<<<<<<<<
 *             s = str((format,args))
 *     dsproc_mentor_mail(func, file, line, s)
 */

#line 125 "dsproc3/core.pyx"
      __pyx_t_11 = PyErr_ExceptionMatches(__pyx_builtin_TypeError);

#line 125 "dsproc3/core.pyx"
      if (__pyx_t_11) {

#line 125 "dsproc3/core.pyx"
        __Pyx_AddTraceback("dsproc3.core.mentor_mail", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 125 "dsproc3/core.pyx"
        if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_1, &__pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 125 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 125 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 125 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_3);

        /* "dsproc3/core.pyx":126
 *             s = format % args
 *         except TypeError:
 *             s = str((format,args))             # <<<<<<<<<<<<<<
 *     dsproc_mentor_mail(func, file, line, s)
 * 
 */

#line 126 "dsproc3/core.pyx"
        __pyx_t_2 = PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 126 "dsproc3/core.pyx"
        __Pyx_GOTREF(((PyObject *)__pyx_t_2));

#line 126 "dsproc3/core.pyx"
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 126 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 126 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_t_2));

#line 126 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_t_2));

#line 126 "dsproc3/core.pyx"
        __Pyx_INCREF(((PyObject *)__pyx_v_args));

#line 126 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_args));

#line 126 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_v_args));

#line 126 "dsproc3/core.pyx"
        __pyx_t_2 = 0;

#line 126 "dsproc3/core.pyx"
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 126 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 126 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_5));

#line 126 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_t_5));

#line 126 "dsproc3/core.pyx"
        __pyx_t_5 = 0;

#line 126 "dsproc3/core.pyx"
        __pyx_t_5 = PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 126 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 126 "dsproc3/core.pyx"
        __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 126 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_v_s);

#line 126 "dsproc3/core.pyx"
        __pyx_v_s = __pyx_t_5;

#line 126 "dsproc3/core.pyx"
        __pyx_t_5 = 0;

#line 126 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 126 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 126 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 126 "dsproc3/core.pyx"
        goto __pyx_L7_exception_handled;

#line 126 "dsproc3/core.pyx"
      }

#line 126 "dsproc3/core.pyx"
      __pyx_L8_except_error:;

#line 126 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_8);

#line 126 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_9);

#line 126 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_10);

#line 126 "dsproc3/core.pyx"
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);

#line 126 "dsproc3/core.pyx"
      goto __pyx_L1_error;

#line 126 "dsproc3/core.pyx"
      __pyx_L7_exception_handled:;

#line 126 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_8);

#line 126 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_9);

#line 126 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_10);

#line 126 "dsproc3/core.pyx"
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);

#line 126 "dsproc3/core.pyx"
      __pyx_L13_try_end:;

#line 126 "dsproc3/core.pyx"
    }

#line 126 "dsproc3/core.pyx"
    goto __pyx_L5;

#line 126 "dsproc3/core.pyx"
  }

#line 126 "dsproc3/core.pyx"
  __pyx_L5:;

  /* "dsproc3/core.pyx":127
 *         except TypeError:
 *             s = str((format,args))
 *     dsproc_mentor_mail(func, file, line, s)             # <<<<<<<<<<<<<<
 * 
 * #def debug_lv1(char *format, *args, char *_file="", int _line=0):
 */

#line 127 "dsproc3/core.pyx"
  __pyx_t_12 = PyBytes_AsString(__pyx_v_func); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 127 "dsproc3/core.pyx"
  __pyx_t_13 = PyBytes_AsString(__pyx_v_file); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 127 "dsproc3/core.pyx"
  __pyx_t_11 = __Pyx_PyInt_AsInt(__pyx_v_line); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 127 "dsproc3/core.pyx"
  __pyx_t_14 = PyBytes_AsString(__pyx_v_s); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 127 "dsproc3/core.pyx"
  dsproc_mentor_mail(__pyx_t_12, __pyx_t_13, __pyx_t_11, __pyx_t_14);

#line 127 "dsproc3/core.pyx"


#line 127 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 127 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 127 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 127 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 127 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 127 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 127 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 127 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 127 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.mentor_mail", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 127 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 127 "dsproc3/core.pyx"
  __pyx_L0:;

#line 127 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_s);

#line 127 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_file);

#line 127 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_line);

#line 127 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_func);

#line 127 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 127 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 127 "dsproc3/core.pyx"
  return __pyx_r;

#line 127 "dsproc3/core.pyx"
}

#line 127 "dsproc3/core.pyx"


#line 127 "dsproc3/core.pyx"
/* Python wrapper */

#line 127 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_9debug_lv1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 127 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_8debug_lv1[] = "debug_lv1(char *format, *args)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_9debug_lv1 = 
#line 127 "dsproc3/core.pyx"
{__Pyx_NAMESTR("debug_lv1"), (PyCFunction)__pyx_pw_7dsproc3_4core_9debug_lv1, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_8debug_lv1)};

#line 127 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_9debug_lv1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_format
#line 127 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_args = 0
#line 127 "dsproc3/core.pyx"
;

#line 127 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 127 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 127 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("debug_lv1 (wrapper)", 0);

#line 127 "dsproc3/core.pyx"
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {

#line 127 "dsproc3/core.pyx"
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));

#line 127 "dsproc3/core.pyx"
    if (unlikely(!__pyx_v_args)) {

#line 127 "dsproc3/core.pyx"
      __Pyx_RefNannyFinishContext();

#line 127 "dsproc3/core.pyx"
      return NULL;

#line 127 "dsproc3/core.pyx"
    }

#line 127 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_v_args);

#line 127 "dsproc3/core.pyx"
  } else {
    __pyx_v_args = __pyx_empty_tuple; 
#line 127 "dsproc3/core.pyx"
__Pyx_INCREF(__pyx_empty_tuple);

#line 127 "dsproc3/core.pyx"
  }

#line 127 "dsproc3/core.pyx"
  {

#line 127 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__format,0};

#line 127 "dsproc3/core.pyx"
    PyObject* values[1] = {0};

#line 127 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 127 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 127 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 127 "dsproc3/core.pyx"
      switch (pos_args) {

#line 127 "dsproc3/core.pyx"
        default:
        case  1: 
#line 127 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 127 "dsproc3/core.pyx"
        case  0: break;

#line 127 "dsproc3/core.pyx"
      }

#line 127 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 127 "dsproc3/core.pyx"
      switch (pos_args) {

#line 127 "dsproc3/core.pyx"
        case  0:

#line 127 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__format)) != 0)) kw_args--;
        else 
#line 127 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 127 "dsproc3/core.pyx"
      }

#line 127 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 127 "dsproc3/core.pyx"
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;

#line 127 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "debug_lv1") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 127 "dsproc3/core.pyx"
      }

#line 127 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {

#line 127 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 127 "dsproc3/core.pyx"
    } else {

#line 127 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 127 "dsproc3/core.pyx"
    }

#line 127 "dsproc3/core.pyx"
    __pyx_v_format = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_format) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 127 "dsproc3/core.pyx"
  }

#line 127 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 127 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("debug_lv1", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); 
#line 127 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 127 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 127 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;

#line 127 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.debug_lv1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 127 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 127 "dsproc3/core.pyx"
  return NULL;

#line 127 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 127 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_8debug_lv1(__pyx_self, __pyx_v_format, __pyx_v_args);

#line 127 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_args);

#line 127 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 127 "dsproc3/core.pyx"
  return __pyx_r;

#line 127 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":130
 * 
 * #def debug_lv1(char *format, *args, char *_file="", int _line=0):
 * def debug_lv1(char *format, *args):             # <<<<<<<<<<<<<<
 *     s=format
 *     file,line,func=__line()
 */

#line 130 "dsproc3/core.pyx"


#line 130 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_8debug_lv1(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_format, PyObject *__pyx_v_args) {
  PyObject *__pyx_v_s = NULL
#line 130 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_file = NULL
#line 130 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_line = NULL
#line 130 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_func = NULL
#line 130 "dsproc3/core.pyx"
;

#line 130 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 130 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("debug_lv1", 0);

  /* "dsproc3/core.pyx":131
 * #def debug_lv1(char *format, *args, char *_file="", int _line=0):
 * def debug_lv1(char *format, *args):
 *     s=format             # <<<<<<<<<<<<<<
 *     file,line,func=__line()
 *     #if _file:
 */

#line 131 "dsproc3/core.pyx"
  __pyx_t_1 = PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 131 "dsproc3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 131 "dsproc3/core.pyx"
  __pyx_v_s = ((PyObject *)__pyx_t_1);

#line 131 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":132
 * def debug_lv1(char *format, *args):
 *     s=format
 *     file,line,func=__line()             # <<<<<<<<<<<<<<
 *     #if _file:
 *     #    file = _file
 */

#line 132 "dsproc3/core.pyx"
  __pyx_t_1 = __pyx_f_7dsproc3_4core___line(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 132 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 132 "dsproc3/core.pyx"
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {

#line 132 "dsproc3/core.pyx"
    PyObject* sequence = __pyx_t_1;

#line 132 "dsproc3/core.pyx"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 132 "dsproc3/core.pyx"
    Py_ssize_t size = Py_SIZE(sequence);

#line 132 "dsproc3/core.pyx"
    #else

#line 132 "dsproc3/core.pyx"
    Py_ssize_t size = PySequence_Size(sequence);

#line 132 "dsproc3/core.pyx"
    #endif

#line 132 "dsproc3/core.pyx"
    if (unlikely(size != 3)) {

#line 132 "dsproc3/core.pyx"
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);

#line 132 "dsproc3/core.pyx"
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 132 "dsproc3/core.pyx"
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 132 "dsproc3/core.pyx"
    }

#line 132 "dsproc3/core.pyx"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 132 "dsproc3/core.pyx"
    if (likely(PyTuple_CheckExact(sequence))) {

#line 132 "dsproc3/core.pyx"
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 

#line 132 "dsproc3/core.pyx"
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 

#line 132 "dsproc3/core.pyx"
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 

#line 132 "dsproc3/core.pyx"
    } else {

#line 132 "dsproc3/core.pyx"
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 

#line 132 "dsproc3/core.pyx"
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 

#line 132 "dsproc3/core.pyx"
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 

#line 132 "dsproc3/core.pyx"
    }

#line 132 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_t_2);

#line 132 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_t_3);

#line 132 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_t_4);

#line 132 "dsproc3/core.pyx"
    #else

#line 132 "dsproc3/core.pyx"
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 132 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 132 "dsproc3/core.pyx"
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 132 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 132 "dsproc3/core.pyx"
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 132 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 132 "dsproc3/core.pyx"
    #endif

#line 132 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 132 "dsproc3/core.pyx"
  } else

#line 132 "dsproc3/core.pyx"
  {

#line 132 "dsproc3/core.pyx"
    Py_ssize_t index = -1;

#line 132 "dsproc3/core.pyx"
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 132 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 132 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 132 "dsproc3/core.pyx"
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) 
#line 132 "dsproc3/core.pyx"
goto __pyx_L3_unpacking_failed;

#line 132 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) 
#line 132 "dsproc3/core.pyx"
goto __pyx_L3_unpacking_failed;

#line 132 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);
    index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) 
#line 132 "dsproc3/core.pyx"
goto __pyx_L3_unpacking_failed;

#line 132 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 132 "dsproc3/core.pyx"
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 132 "dsproc3/core.pyx"
    __pyx_t_6 = NULL;

#line 132 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 132 "dsproc3/core.pyx"
    goto __pyx_L4_unpacking_done;

#line 132 "dsproc3/core.pyx"
    __pyx_L3_unpacking_failed:;

#line 132 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 132 "dsproc3/core.pyx"
    __pyx_t_6 = NULL;

#line 132 "dsproc3/core.pyx"
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 132 "dsproc3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 132 "dsproc3/core.pyx"
    __pyx_L4_unpacking_done:;

#line 132 "dsproc3/core.pyx"
  }

#line 132 "dsproc3/core.pyx"
  __pyx_v_file = __pyx_t_2;

#line 132 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 132 "dsproc3/core.pyx"
  __pyx_v_line = __pyx_t_3;

#line 132 "dsproc3/core.pyx"
  __pyx_t_3 = 0;

#line 132 "dsproc3/core.pyx"
  __pyx_v_func = __pyx_t_4;

#line 132 "dsproc3/core.pyx"
  __pyx_t_4 = 0;

  /* "dsproc3/core.pyx":137
 *     #if _line:
 *     #    line = _line
 *     if args:             # <<<<<<<<<<<<<<
 *         try:
 *             s = format % args
 */

#line 137 "dsproc3/core.pyx"
  __pyx_t_7 = (((PyObject *)__pyx_v_args) != Py_None) && (PyTuple_GET_SIZE(((PyObject *)__pyx_v_args)) != 0);

#line 137 "dsproc3/core.pyx"
  if (__pyx_t_7) {

    /* "dsproc3/core.pyx":138
 *     #    line = _line
 *     if args:
 *         try:             # <<<<<<<<<<<<<<
 *             s = format % args
 *         except TypeError:
 */

#line 138 "dsproc3/core.pyx"
    {

#line 138 "dsproc3/core.pyx"
      __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);

#line 138 "dsproc3/core.pyx"
      __Pyx_XGOTREF(__pyx_t_8);

#line 138 "dsproc3/core.pyx"
      __Pyx_XGOTREF(__pyx_t_9);

#line 138 "dsproc3/core.pyx"
      __Pyx_XGOTREF(__pyx_t_10);

#line 138 "dsproc3/core.pyx"
      /*try:*/ {

        /* "dsproc3/core.pyx":139
 *     if args:
 *         try:
 *             s = format % args             # <<<<<<<<<<<<<<
 *         except TypeError:
 *             s = str((format,args))
 */

#line 139 "dsproc3/core.pyx"
        __pyx_t_1 = PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 139 "dsproc3/core.pyx"
        __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 139 "dsproc3/core.pyx"
        __pyx_t_4 = PyNumber_Remainder(((PyObject *)__pyx_t_1), ((PyObject *)__pyx_v_args)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 139 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 139 "dsproc3/core.pyx"
        __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

#line 139 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_v_s);

#line 139 "dsproc3/core.pyx"
        __pyx_v_s = __pyx_t_4;

#line 139 "dsproc3/core.pyx"
        __pyx_t_4 = 0;

#line 139 "dsproc3/core.pyx"
      }

#line 139 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 139 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 139 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 139 "dsproc3/core.pyx"
      goto __pyx_L13_try_end;

#line 139 "dsproc3/core.pyx"
      __pyx_L6_error:;

#line 139 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 139 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 139 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 139 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 139 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "dsproc3/core.pyx":140
 *         try:
 *             s = format % args
 *         except TypeError:             # <<<<<<<<<<<<<<
 *             s = str((format,args))
 *     if msngr_debug_level or msngr_provenance_level:
 */

#line 140 "dsproc3/core.pyx"
      __pyx_t_11 = PyErr_ExceptionMatches(__pyx_builtin_TypeError);

#line 140 "dsproc3/core.pyx"
      if (__pyx_t_11) {

#line 140 "dsproc3/core.pyx"
        __Pyx_AddTraceback("dsproc3.core.debug_lv1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 140 "dsproc3/core.pyx"
        if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_1, &__pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 140 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 140 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 140 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_3);

        /* "dsproc3/core.pyx":141
 *             s = format % args
 *         except TypeError:
 *             s = str((format,args))             # <<<<<<<<<<<<<<
 *     if msngr_debug_level or msngr_provenance_level:
 *         dsproc_debug(func, file, line, 1, s)
 */

#line 141 "dsproc3/core.pyx"
        __pyx_t_2 = PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 141 "dsproc3/core.pyx"
        __Pyx_GOTREF(((PyObject *)__pyx_t_2));

#line 141 "dsproc3/core.pyx"
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 141 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 141 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_t_2));

#line 141 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_t_2));

#line 141 "dsproc3/core.pyx"
        __Pyx_INCREF(((PyObject *)__pyx_v_args));

#line 141 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_args));

#line 141 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_v_args));

#line 141 "dsproc3/core.pyx"
        __pyx_t_2 = 0;

#line 141 "dsproc3/core.pyx"
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 141 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 141 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_5));

#line 141 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_t_5));

#line 141 "dsproc3/core.pyx"
        __pyx_t_5 = 0;

#line 141 "dsproc3/core.pyx"
        __pyx_t_5 = PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 141 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 141 "dsproc3/core.pyx"
        __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 141 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_v_s);

#line 141 "dsproc3/core.pyx"
        __pyx_v_s = __pyx_t_5;

#line 141 "dsproc3/core.pyx"
        __pyx_t_5 = 0;

#line 141 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 141 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 141 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 141 "dsproc3/core.pyx"
        goto __pyx_L7_exception_handled;

#line 141 "dsproc3/core.pyx"
      }

#line 141 "dsproc3/core.pyx"
      __pyx_L8_except_error:;

#line 141 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_8);

#line 141 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_9);

#line 141 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_10);

#line 141 "dsproc3/core.pyx"
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);

#line 141 "dsproc3/core.pyx"
      goto __pyx_L1_error;

#line 141 "dsproc3/core.pyx"
      __pyx_L7_exception_handled:;

#line 141 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_8);

#line 141 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_9);

#line 141 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_10);

#line 141 "dsproc3/core.pyx"
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);

#line 141 "dsproc3/core.pyx"
      __pyx_L13_try_end:;

#line 141 "dsproc3/core.pyx"
    }

#line 141 "dsproc3/core.pyx"
    goto __pyx_L5;

#line 141 "dsproc3/core.pyx"
  }

#line 141 "dsproc3/core.pyx"
  __pyx_L5:;

  /* "dsproc3/core.pyx":142
 *         except TypeError:
 *             s = str((format,args))
 *     if msngr_debug_level or msngr_provenance_level:             # <<<<<<<<<<<<<<
 *         dsproc_debug(func, file, line, 1, s)
 * 
 */

#line 142 "dsproc3/core.pyx"
  if (!msngr_debug_level) {

#line 142 "dsproc3/core.pyx"
    __pyx_t_7 = msngr_provenance_level;

#line 142 "dsproc3/core.pyx"
  } else {

#line 142 "dsproc3/core.pyx"
    __pyx_t_7 = msngr_debug_level;

#line 142 "dsproc3/core.pyx"
  }

#line 142 "dsproc3/core.pyx"
  if (__pyx_t_7) {

    /* "dsproc3/core.pyx":143
 *             s = str((format,args))
 *     if msngr_debug_level or msngr_provenance_level:
 *         dsproc_debug(func, file, line, 1, s)             # <<<<<<<<<<<<<<
 * 
 * def debug_lv2(char *format, *args):
 */

#line 143 "dsproc3/core.pyx"
    __pyx_t_12 = PyBytes_AsString(__pyx_v_func); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 143 "dsproc3/core.pyx"
    __pyx_t_13 = PyBytes_AsString(__pyx_v_file); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 143 "dsproc3/core.pyx"
    __pyx_t_11 = __Pyx_PyInt_AsInt(__pyx_v_line); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 143 "dsproc3/core.pyx"
    __pyx_t_14 = PyBytes_AsString(__pyx_v_s); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 143 "dsproc3/core.pyx"
    dsproc_debug(__pyx_t_12, __pyx_t_13, __pyx_t_11, 1, __pyx_t_14);

#line 143 "dsproc3/core.pyx"
    goto __pyx_L16;

#line 143 "dsproc3/core.pyx"
  }

#line 143 "dsproc3/core.pyx"
  __pyx_L16:;

#line 143 "dsproc3/core.pyx"


#line 143 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 143 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 143 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 143 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 143 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 143 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 143 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 143 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 143 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.debug_lv1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 143 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 143 "dsproc3/core.pyx"
  __pyx_L0:;

#line 143 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_s);

#line 143 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_file);

#line 143 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_line);

#line 143 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_func);

#line 143 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 143 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 143 "dsproc3/core.pyx"
  return __pyx_r;

#line 143 "dsproc3/core.pyx"
}

#line 143 "dsproc3/core.pyx"


#line 143 "dsproc3/core.pyx"
/* Python wrapper */

#line 143 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_11debug_lv2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 143 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_10debug_lv2[] = "debug_lv2(char *format, *args)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_11debug_lv2 = 
#line 143 "dsproc3/core.pyx"
{__Pyx_NAMESTR("debug_lv2"), (PyCFunction)__pyx_pw_7dsproc3_4core_11debug_lv2, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_10debug_lv2)};

#line 143 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_11debug_lv2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_format
#line 143 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_args = 0
#line 143 "dsproc3/core.pyx"
;

#line 143 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 143 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 143 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("debug_lv2 (wrapper)", 0);

#line 143 "dsproc3/core.pyx"
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {

#line 143 "dsproc3/core.pyx"
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));

#line 143 "dsproc3/core.pyx"
    if (unlikely(!__pyx_v_args)) {

#line 143 "dsproc3/core.pyx"
      __Pyx_RefNannyFinishContext();

#line 143 "dsproc3/core.pyx"
      return NULL;

#line 143 "dsproc3/core.pyx"
    }

#line 143 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_v_args);

#line 143 "dsproc3/core.pyx"
  } else {
    __pyx_v_args = __pyx_empty_tuple; 
#line 143 "dsproc3/core.pyx"
__Pyx_INCREF(__pyx_empty_tuple);

#line 143 "dsproc3/core.pyx"
  }

#line 143 "dsproc3/core.pyx"
  {

#line 143 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__format,0};

#line 143 "dsproc3/core.pyx"
    PyObject* values[1] = {0};

#line 143 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 143 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 143 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 143 "dsproc3/core.pyx"
      switch (pos_args) {

#line 143 "dsproc3/core.pyx"
        default:
        case  1: 
#line 143 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 143 "dsproc3/core.pyx"
        case  0: break;

#line 143 "dsproc3/core.pyx"
      }

#line 143 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 143 "dsproc3/core.pyx"
      switch (pos_args) {

#line 143 "dsproc3/core.pyx"
        case  0:

#line 143 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__format)) != 0)) kw_args--;
        else 
#line 143 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 143 "dsproc3/core.pyx"
      }

#line 143 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 143 "dsproc3/core.pyx"
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;

#line 143 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "debug_lv2") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 143 "dsproc3/core.pyx"
      }

#line 143 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {

#line 143 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 143 "dsproc3/core.pyx"
    } else {

#line 143 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 143 "dsproc3/core.pyx"
    }

#line 143 "dsproc3/core.pyx"
    __pyx_v_format = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_format) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 143 "dsproc3/core.pyx"
  }

#line 143 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 143 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("debug_lv2", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); 
#line 143 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 143 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 143 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;

#line 143 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.debug_lv2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 143 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 143 "dsproc3/core.pyx"
  return NULL;

#line 143 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 143 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_10debug_lv2(__pyx_self, __pyx_v_format, __pyx_v_args);

#line 143 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_args);

#line 143 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 143 "dsproc3/core.pyx"
  return __pyx_r;

#line 143 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":145
 *         dsproc_debug(func, file, line, 1, s)
 * 
 * def debug_lv2(char *format, *args):             # <<<<<<<<<<<<<<
 *     s=format
 *     file,line,func=__line()
 */

#line 145 "dsproc3/core.pyx"


#line 145 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_10debug_lv2(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_format, PyObject *__pyx_v_args) {
  PyObject *__pyx_v_s = NULL
#line 145 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_file = NULL
#line 145 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_line = NULL
#line 145 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_func = NULL
#line 145 "dsproc3/core.pyx"
;

#line 145 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 145 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("debug_lv2", 0);

  /* "dsproc3/core.pyx":146
 * 
 * def debug_lv2(char *format, *args):
 *     s=format             # <<<<<<<<<<<<<<
 *     file,line,func=__line()
 *     if args:
 */

#line 146 "dsproc3/core.pyx"
  __pyx_t_1 = PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 146 "dsproc3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 146 "dsproc3/core.pyx"
  __pyx_v_s = ((PyObject *)__pyx_t_1);

#line 146 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":147
 * def debug_lv2(char *format, *args):
 *     s=format
 *     file,line,func=__line()             # <<<<<<<<<<<<<<
 *     if args:
 *         try:
 */

#line 147 "dsproc3/core.pyx"
  __pyx_t_1 = __pyx_f_7dsproc3_4core___line(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 147 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 147 "dsproc3/core.pyx"
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {

#line 147 "dsproc3/core.pyx"
    PyObject* sequence = __pyx_t_1;

#line 147 "dsproc3/core.pyx"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 147 "dsproc3/core.pyx"
    Py_ssize_t size = Py_SIZE(sequence);

#line 147 "dsproc3/core.pyx"
    #else

#line 147 "dsproc3/core.pyx"
    Py_ssize_t size = PySequence_Size(sequence);

#line 147 "dsproc3/core.pyx"
    #endif

#line 147 "dsproc3/core.pyx"
    if (unlikely(size != 3)) {

#line 147 "dsproc3/core.pyx"
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);

#line 147 "dsproc3/core.pyx"
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 147 "dsproc3/core.pyx"
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 147 "dsproc3/core.pyx"
    }

#line 147 "dsproc3/core.pyx"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 147 "dsproc3/core.pyx"
    if (likely(PyTuple_CheckExact(sequence))) {

#line 147 "dsproc3/core.pyx"
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 

#line 147 "dsproc3/core.pyx"
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 

#line 147 "dsproc3/core.pyx"
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 

#line 147 "dsproc3/core.pyx"
    } else {

#line 147 "dsproc3/core.pyx"
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 

#line 147 "dsproc3/core.pyx"
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 

#line 147 "dsproc3/core.pyx"
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 

#line 147 "dsproc3/core.pyx"
    }

#line 147 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_t_2);

#line 147 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_t_3);

#line 147 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_t_4);

#line 147 "dsproc3/core.pyx"
    #else

#line 147 "dsproc3/core.pyx"
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 147 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 147 "dsproc3/core.pyx"
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 147 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 147 "dsproc3/core.pyx"
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 147 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 147 "dsproc3/core.pyx"
    #endif

#line 147 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 147 "dsproc3/core.pyx"
  } else

#line 147 "dsproc3/core.pyx"
  {

#line 147 "dsproc3/core.pyx"
    Py_ssize_t index = -1;

#line 147 "dsproc3/core.pyx"
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 147 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 147 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 147 "dsproc3/core.pyx"
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) 
#line 147 "dsproc3/core.pyx"
goto __pyx_L3_unpacking_failed;

#line 147 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) 
#line 147 "dsproc3/core.pyx"
goto __pyx_L3_unpacking_failed;

#line 147 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);
    index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) 
#line 147 "dsproc3/core.pyx"
goto __pyx_L3_unpacking_failed;

#line 147 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 147 "dsproc3/core.pyx"
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 147 "dsproc3/core.pyx"
    __pyx_t_6 = NULL;

#line 147 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 147 "dsproc3/core.pyx"
    goto __pyx_L4_unpacking_done;

#line 147 "dsproc3/core.pyx"
    __pyx_L3_unpacking_failed:;

#line 147 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 147 "dsproc3/core.pyx"
    __pyx_t_6 = NULL;

#line 147 "dsproc3/core.pyx"
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 147 "dsproc3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 147 "dsproc3/core.pyx"
    __pyx_L4_unpacking_done:;

#line 147 "dsproc3/core.pyx"
  }

#line 147 "dsproc3/core.pyx"
  __pyx_v_file = __pyx_t_2;

#line 147 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 147 "dsproc3/core.pyx"
  __pyx_v_line = __pyx_t_3;

#line 147 "dsproc3/core.pyx"
  __pyx_t_3 = 0;

#line 147 "dsproc3/core.pyx"
  __pyx_v_func = __pyx_t_4;

#line 147 "dsproc3/core.pyx"
  __pyx_t_4 = 0;

  /* "dsproc3/core.pyx":148
 *     s=format
 *     file,line,func=__line()
 *     if args:             # <<<<<<<<<<<<<<
 *         try:
 *             s = format % args
 */

#line 148 "dsproc3/core.pyx"
  __pyx_t_7 = (((PyObject *)__pyx_v_args) != Py_None) && (PyTuple_GET_SIZE(((PyObject *)__pyx_v_args)) != 0);

#line 148 "dsproc3/core.pyx"
  if (__pyx_t_7) {

    /* "dsproc3/core.pyx":149
 *     file,line,func=__line()
 *     if args:
 *         try:             # <<<<<<<<<<<<<<
 *             s = format % args
 *         except TypeError:
 */

#line 149 "dsproc3/core.pyx"
    {

#line 149 "dsproc3/core.pyx"
      __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);

#line 149 "dsproc3/core.pyx"
      __Pyx_XGOTREF(__pyx_t_8);

#line 149 "dsproc3/core.pyx"
      __Pyx_XGOTREF(__pyx_t_9);

#line 149 "dsproc3/core.pyx"
      __Pyx_XGOTREF(__pyx_t_10);

#line 149 "dsproc3/core.pyx"
      /*try:*/ {

        /* "dsproc3/core.pyx":150
 *     if args:
 *         try:
 *             s = format % args             # <<<<<<<<<<<<<<
 *         except TypeError:
 *             s = str((format,args))
 */

#line 150 "dsproc3/core.pyx"
        __pyx_t_1 = PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 150 "dsproc3/core.pyx"
        __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 150 "dsproc3/core.pyx"
        __pyx_t_4 = PyNumber_Remainder(((PyObject *)__pyx_t_1), ((PyObject *)__pyx_v_args)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 150 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 150 "dsproc3/core.pyx"
        __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

#line 150 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_v_s);

#line 150 "dsproc3/core.pyx"
        __pyx_v_s = __pyx_t_4;

#line 150 "dsproc3/core.pyx"
        __pyx_t_4 = 0;

#line 150 "dsproc3/core.pyx"
      }

#line 150 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 150 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 150 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 150 "dsproc3/core.pyx"
      goto __pyx_L13_try_end;

#line 150 "dsproc3/core.pyx"
      __pyx_L6_error:;

#line 150 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 150 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 150 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 150 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 150 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "dsproc3/core.pyx":151
 *         try:
 *             s = format % args
 *         except TypeError:             # <<<<<<<<<<<<<<
 *             s = str((format,args))
 *     if msngr_debug_level or msngr_provenance_level:
 */

#line 151 "dsproc3/core.pyx"
      __pyx_t_11 = PyErr_ExceptionMatches(__pyx_builtin_TypeError);

#line 151 "dsproc3/core.pyx"
      if (__pyx_t_11) {

#line 151 "dsproc3/core.pyx"
        __Pyx_AddTraceback("dsproc3.core.debug_lv2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 151 "dsproc3/core.pyx"
        if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_1, &__pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 151 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 151 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 151 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_3);

        /* "dsproc3/core.pyx":152
 *             s = format % args
 *         except TypeError:
 *             s = str((format,args))             # <<<<<<<<<<<<<<
 *     if msngr_debug_level or msngr_provenance_level:
 *         dsproc_debug(func, file, line, 2, s)
 */

#line 152 "dsproc3/core.pyx"
        __pyx_t_2 = PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 152 "dsproc3/core.pyx"
        __Pyx_GOTREF(((PyObject *)__pyx_t_2));

#line 152 "dsproc3/core.pyx"
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 152 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 152 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_t_2));

#line 152 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_t_2));

#line 152 "dsproc3/core.pyx"
        __Pyx_INCREF(((PyObject *)__pyx_v_args));

#line 152 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_args));

#line 152 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_v_args));

#line 152 "dsproc3/core.pyx"
        __pyx_t_2 = 0;

#line 152 "dsproc3/core.pyx"
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 152 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 152 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_5));

#line 152 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_t_5));

#line 152 "dsproc3/core.pyx"
        __pyx_t_5 = 0;

#line 152 "dsproc3/core.pyx"
        __pyx_t_5 = PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 152 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 152 "dsproc3/core.pyx"
        __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 152 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_v_s);

#line 152 "dsproc3/core.pyx"
        __pyx_v_s = __pyx_t_5;

#line 152 "dsproc3/core.pyx"
        __pyx_t_5 = 0;

#line 152 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 152 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 152 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 152 "dsproc3/core.pyx"
        goto __pyx_L7_exception_handled;

#line 152 "dsproc3/core.pyx"
      }

#line 152 "dsproc3/core.pyx"
      __pyx_L8_except_error:;

#line 152 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_8);

#line 152 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_9);

#line 152 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_10);

#line 152 "dsproc3/core.pyx"
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);

#line 152 "dsproc3/core.pyx"
      goto __pyx_L1_error;

#line 152 "dsproc3/core.pyx"
      __pyx_L7_exception_handled:;

#line 152 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_8);

#line 152 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_9);

#line 152 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_10);

#line 152 "dsproc3/core.pyx"
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);

#line 152 "dsproc3/core.pyx"
      __pyx_L13_try_end:;

#line 152 "dsproc3/core.pyx"
    }

#line 152 "dsproc3/core.pyx"
    goto __pyx_L5;

#line 152 "dsproc3/core.pyx"
  }

#line 152 "dsproc3/core.pyx"
  __pyx_L5:;

  /* "dsproc3/core.pyx":153
 *         except TypeError:
 *             s = str((format,args))
 *     if msngr_debug_level or msngr_provenance_level:             # <<<<<<<<<<<<<<
 *         dsproc_debug(func, file, line, 2, s)
 * 
 */

#line 153 "dsproc3/core.pyx"
  if (!msngr_debug_level) {

#line 153 "dsproc3/core.pyx"
    __pyx_t_7 = msngr_provenance_level;

#line 153 "dsproc3/core.pyx"
  } else {

#line 153 "dsproc3/core.pyx"
    __pyx_t_7 = msngr_debug_level;

#line 153 "dsproc3/core.pyx"
  }

#line 153 "dsproc3/core.pyx"
  if (__pyx_t_7) {

    /* "dsproc3/core.pyx":154
 *             s = str((format,args))
 *     if msngr_debug_level or msngr_provenance_level:
 *         dsproc_debug(func, file, line, 2, s)             # <<<<<<<<<<<<<<
 * 
 * def debug_lv3(char *format, *args):
 */

#line 154 "dsproc3/core.pyx"
    __pyx_t_12 = PyBytes_AsString(__pyx_v_func); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 154 "dsproc3/core.pyx"
    __pyx_t_13 = PyBytes_AsString(__pyx_v_file); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 154 "dsproc3/core.pyx"
    __pyx_t_11 = __Pyx_PyInt_AsInt(__pyx_v_line); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 154 "dsproc3/core.pyx"
    __pyx_t_14 = PyBytes_AsString(__pyx_v_s); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 154 "dsproc3/core.pyx"
    dsproc_debug(__pyx_t_12, __pyx_t_13, __pyx_t_11, 2, __pyx_t_14);

#line 154 "dsproc3/core.pyx"
    goto __pyx_L16;

#line 154 "dsproc3/core.pyx"
  }

#line 154 "dsproc3/core.pyx"
  __pyx_L16:;

#line 154 "dsproc3/core.pyx"


#line 154 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 154 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 154 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 154 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 154 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 154 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 154 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 154 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 154 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.debug_lv2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 154 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 154 "dsproc3/core.pyx"
  __pyx_L0:;

#line 154 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_s);

#line 154 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_file);

#line 154 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_line);

#line 154 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_func);

#line 154 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 154 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 154 "dsproc3/core.pyx"
  return __pyx_r;

#line 154 "dsproc3/core.pyx"
}

#line 154 "dsproc3/core.pyx"


#line 154 "dsproc3/core.pyx"
/* Python wrapper */

#line 154 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_13debug_lv3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 154 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_12debug_lv3[] = "debug_lv3(char *format, *args)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_13debug_lv3 = 
#line 154 "dsproc3/core.pyx"
{__Pyx_NAMESTR("debug_lv3"), (PyCFunction)__pyx_pw_7dsproc3_4core_13debug_lv3, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_12debug_lv3)};

#line 154 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_13debug_lv3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_format
#line 154 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_args = 0
#line 154 "dsproc3/core.pyx"
;

#line 154 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 154 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 154 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("debug_lv3 (wrapper)", 0);

#line 154 "dsproc3/core.pyx"
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {

#line 154 "dsproc3/core.pyx"
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));

#line 154 "dsproc3/core.pyx"
    if (unlikely(!__pyx_v_args)) {

#line 154 "dsproc3/core.pyx"
      __Pyx_RefNannyFinishContext();

#line 154 "dsproc3/core.pyx"
      return NULL;

#line 154 "dsproc3/core.pyx"
    }

#line 154 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_v_args);

#line 154 "dsproc3/core.pyx"
  } else {
    __pyx_v_args = __pyx_empty_tuple; 
#line 154 "dsproc3/core.pyx"
__Pyx_INCREF(__pyx_empty_tuple);

#line 154 "dsproc3/core.pyx"
  }

#line 154 "dsproc3/core.pyx"
  {

#line 154 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__format,0};

#line 154 "dsproc3/core.pyx"
    PyObject* values[1] = {0};

#line 154 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 154 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 154 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 154 "dsproc3/core.pyx"
      switch (pos_args) {

#line 154 "dsproc3/core.pyx"
        default:
        case  1: 
#line 154 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 154 "dsproc3/core.pyx"
        case  0: break;

#line 154 "dsproc3/core.pyx"
      }

#line 154 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 154 "dsproc3/core.pyx"
      switch (pos_args) {

#line 154 "dsproc3/core.pyx"
        case  0:

#line 154 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__format)) != 0)) kw_args--;
        else 
#line 154 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 154 "dsproc3/core.pyx"
      }

#line 154 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 154 "dsproc3/core.pyx"
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;

#line 154 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "debug_lv3") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 154 "dsproc3/core.pyx"
      }

#line 154 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {

#line 154 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 154 "dsproc3/core.pyx"
    } else {

#line 154 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 154 "dsproc3/core.pyx"
    }

#line 154 "dsproc3/core.pyx"
    __pyx_v_format = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_format) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 154 "dsproc3/core.pyx"
  }

#line 154 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 154 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("debug_lv3", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); 
#line 154 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 154 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 154 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;

#line 154 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.debug_lv3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 154 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 154 "dsproc3/core.pyx"
  return NULL;

#line 154 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 154 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_12debug_lv3(__pyx_self, __pyx_v_format, __pyx_v_args);

#line 154 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_args);

#line 154 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 154 "dsproc3/core.pyx"
  return __pyx_r;

#line 154 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":156
 *         dsproc_debug(func, file, line, 2, s)
 * 
 * def debug_lv3(char *format, *args):             # <<<<<<<<<<<<<<
 *     s=format
 *     file,line,func=__line()
 */

#line 156 "dsproc3/core.pyx"


#line 156 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_12debug_lv3(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_format, PyObject *__pyx_v_args) {
  PyObject *__pyx_v_s = NULL
#line 156 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_file = NULL
#line 156 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_line = NULL
#line 156 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_func = NULL
#line 156 "dsproc3/core.pyx"
;

#line 156 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 156 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("debug_lv3", 0);

  /* "dsproc3/core.pyx":157
 * 
 * def debug_lv3(char *format, *args):
 *     s=format             # <<<<<<<<<<<<<<
 *     file,line,func=__line()
 *     if args:
 */

#line 157 "dsproc3/core.pyx"
  __pyx_t_1 = PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 157 "dsproc3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 157 "dsproc3/core.pyx"
  __pyx_v_s = ((PyObject *)__pyx_t_1);

#line 157 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":158
 * def debug_lv3(char *format, *args):
 *     s=format
 *     file,line,func=__line()             # <<<<<<<<<<<<<<
 *     if args:
 *         try:
 */

#line 158 "dsproc3/core.pyx"
  __pyx_t_1 = __pyx_f_7dsproc3_4core___line(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 158 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 158 "dsproc3/core.pyx"
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {

#line 158 "dsproc3/core.pyx"
    PyObject* sequence = __pyx_t_1;

#line 158 "dsproc3/core.pyx"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 158 "dsproc3/core.pyx"
    Py_ssize_t size = Py_SIZE(sequence);

#line 158 "dsproc3/core.pyx"
    #else

#line 158 "dsproc3/core.pyx"
    Py_ssize_t size = PySequence_Size(sequence);

#line 158 "dsproc3/core.pyx"
    #endif

#line 158 "dsproc3/core.pyx"
    if (unlikely(size != 3)) {

#line 158 "dsproc3/core.pyx"
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);

#line 158 "dsproc3/core.pyx"
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 158 "dsproc3/core.pyx"
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 158 "dsproc3/core.pyx"
    }

#line 158 "dsproc3/core.pyx"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 158 "dsproc3/core.pyx"
    if (likely(PyTuple_CheckExact(sequence))) {

#line 158 "dsproc3/core.pyx"
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 

#line 158 "dsproc3/core.pyx"
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 

#line 158 "dsproc3/core.pyx"
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 

#line 158 "dsproc3/core.pyx"
    } else {

#line 158 "dsproc3/core.pyx"
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 

#line 158 "dsproc3/core.pyx"
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 

#line 158 "dsproc3/core.pyx"
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 

#line 158 "dsproc3/core.pyx"
    }

#line 158 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_t_2);

#line 158 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_t_3);

#line 158 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_t_4);

#line 158 "dsproc3/core.pyx"
    #else

#line 158 "dsproc3/core.pyx"
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 158 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 158 "dsproc3/core.pyx"
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 158 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 158 "dsproc3/core.pyx"
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 158 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 158 "dsproc3/core.pyx"
    #endif

#line 158 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 158 "dsproc3/core.pyx"
  } else

#line 158 "dsproc3/core.pyx"
  {

#line 158 "dsproc3/core.pyx"
    Py_ssize_t index = -1;

#line 158 "dsproc3/core.pyx"
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 158 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 158 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 158 "dsproc3/core.pyx"
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) 
#line 158 "dsproc3/core.pyx"
goto __pyx_L3_unpacking_failed;

#line 158 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) 
#line 158 "dsproc3/core.pyx"
goto __pyx_L3_unpacking_failed;

#line 158 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);
    index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) 
#line 158 "dsproc3/core.pyx"
goto __pyx_L3_unpacking_failed;

#line 158 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 158 "dsproc3/core.pyx"
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 158 "dsproc3/core.pyx"
    __pyx_t_6 = NULL;

#line 158 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 158 "dsproc3/core.pyx"
    goto __pyx_L4_unpacking_done;

#line 158 "dsproc3/core.pyx"
    __pyx_L3_unpacking_failed:;

#line 158 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 158 "dsproc3/core.pyx"
    __pyx_t_6 = NULL;

#line 158 "dsproc3/core.pyx"
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 158 "dsproc3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 158 "dsproc3/core.pyx"
    __pyx_L4_unpacking_done:;

#line 158 "dsproc3/core.pyx"
  }

#line 158 "dsproc3/core.pyx"
  __pyx_v_file = __pyx_t_2;

#line 158 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 158 "dsproc3/core.pyx"
  __pyx_v_line = __pyx_t_3;

#line 158 "dsproc3/core.pyx"
  __pyx_t_3 = 0;

#line 158 "dsproc3/core.pyx"
  __pyx_v_func = __pyx_t_4;

#line 158 "dsproc3/core.pyx"
  __pyx_t_4 = 0;

  /* "dsproc3/core.pyx":159
 *     s=format
 *     file,line,func=__line()
 *     if args:             # <<<<<<<<<<<<<<
 *         try:
 *             s = format % args
 */

#line 159 "dsproc3/core.pyx"
  __pyx_t_7 = (((PyObject *)__pyx_v_args) != Py_None) && (PyTuple_GET_SIZE(((PyObject *)__pyx_v_args)) != 0);

#line 159 "dsproc3/core.pyx"
  if (__pyx_t_7) {

    /* "dsproc3/core.pyx":160
 *     file,line,func=__line()
 *     if args:
 *         try:             # <<<<<<<<<<<<<<
 *             s = format % args
 *         except TypeError:
 */

#line 160 "dsproc3/core.pyx"
    {

#line 160 "dsproc3/core.pyx"
      __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);

#line 160 "dsproc3/core.pyx"
      __Pyx_XGOTREF(__pyx_t_8);

#line 160 "dsproc3/core.pyx"
      __Pyx_XGOTREF(__pyx_t_9);

#line 160 "dsproc3/core.pyx"
      __Pyx_XGOTREF(__pyx_t_10);

#line 160 "dsproc3/core.pyx"
      /*try:*/ {

        /* "dsproc3/core.pyx":161
 *     if args:
 *         try:
 *             s = format % args             # <<<<<<<<<<<<<<
 *         except TypeError:
 *             s = str((format,args))
 */

#line 161 "dsproc3/core.pyx"
        __pyx_t_1 = PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 161 "dsproc3/core.pyx"
        __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 161 "dsproc3/core.pyx"
        __pyx_t_4 = PyNumber_Remainder(((PyObject *)__pyx_t_1), ((PyObject *)__pyx_v_args)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 161 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 161 "dsproc3/core.pyx"
        __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

#line 161 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_v_s);

#line 161 "dsproc3/core.pyx"
        __pyx_v_s = __pyx_t_4;

#line 161 "dsproc3/core.pyx"
        __pyx_t_4 = 0;

#line 161 "dsproc3/core.pyx"
      }

#line 161 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 161 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 161 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 161 "dsproc3/core.pyx"
      goto __pyx_L13_try_end;

#line 161 "dsproc3/core.pyx"
      __pyx_L6_error:;

#line 161 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 161 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 161 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 161 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 161 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "dsproc3/core.pyx":162
 *         try:
 *             s = format % args
 *         except TypeError:             # <<<<<<<<<<<<<<
 *             s = str((format,args))
 *     if msngr_debug_level or msngr_provenance_level:
 */

#line 162 "dsproc3/core.pyx"
      __pyx_t_11 = PyErr_ExceptionMatches(__pyx_builtin_TypeError);

#line 162 "dsproc3/core.pyx"
      if (__pyx_t_11) {

#line 162 "dsproc3/core.pyx"
        __Pyx_AddTraceback("dsproc3.core.debug_lv3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 162 "dsproc3/core.pyx"
        if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_1, &__pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 162 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 162 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 162 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_3);

        /* "dsproc3/core.pyx":163
 *             s = format % args
 *         except TypeError:
 *             s = str((format,args))             # <<<<<<<<<<<<<<
 *     if msngr_debug_level or msngr_provenance_level:
 *         dsproc_debug(func, file, line, 3, s)
 */

#line 163 "dsproc3/core.pyx"
        __pyx_t_2 = PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 163 "dsproc3/core.pyx"
        __Pyx_GOTREF(((PyObject *)__pyx_t_2));

#line 163 "dsproc3/core.pyx"
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 163 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 163 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_t_2));

#line 163 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_t_2));

#line 163 "dsproc3/core.pyx"
        __Pyx_INCREF(((PyObject *)__pyx_v_args));

#line 163 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_args));

#line 163 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_v_args));

#line 163 "dsproc3/core.pyx"
        __pyx_t_2 = 0;

#line 163 "dsproc3/core.pyx"
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 163 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 163 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_5));

#line 163 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_t_5));

#line 163 "dsproc3/core.pyx"
        __pyx_t_5 = 0;

#line 163 "dsproc3/core.pyx"
        __pyx_t_5 = PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 163 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 163 "dsproc3/core.pyx"
        __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 163 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_v_s);

#line 163 "dsproc3/core.pyx"
        __pyx_v_s = __pyx_t_5;

#line 163 "dsproc3/core.pyx"
        __pyx_t_5 = 0;

#line 163 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 163 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 163 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 163 "dsproc3/core.pyx"
        goto __pyx_L7_exception_handled;

#line 163 "dsproc3/core.pyx"
      }

#line 163 "dsproc3/core.pyx"
      __pyx_L8_except_error:;

#line 163 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_8);

#line 163 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_9);

#line 163 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_10);

#line 163 "dsproc3/core.pyx"
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);

#line 163 "dsproc3/core.pyx"
      goto __pyx_L1_error;

#line 163 "dsproc3/core.pyx"
      __pyx_L7_exception_handled:;

#line 163 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_8);

#line 163 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_9);

#line 163 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_10);

#line 163 "dsproc3/core.pyx"
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);

#line 163 "dsproc3/core.pyx"
      __pyx_L13_try_end:;

#line 163 "dsproc3/core.pyx"
    }

#line 163 "dsproc3/core.pyx"
    goto __pyx_L5;

#line 163 "dsproc3/core.pyx"
  }

#line 163 "dsproc3/core.pyx"
  __pyx_L5:;

  /* "dsproc3/core.pyx":164
 *         except TypeError:
 *             s = str((format,args))
 *     if msngr_debug_level or msngr_provenance_level:             # <<<<<<<<<<<<<<
 *         dsproc_debug(func, file, line, 3, s)
 * 
 */

#line 164 "dsproc3/core.pyx"
  if (!msngr_debug_level) {

#line 164 "dsproc3/core.pyx"
    __pyx_t_7 = msngr_provenance_level;

#line 164 "dsproc3/core.pyx"
  } else {

#line 164 "dsproc3/core.pyx"
    __pyx_t_7 = msngr_debug_level;

#line 164 "dsproc3/core.pyx"
  }

#line 164 "dsproc3/core.pyx"
  if (__pyx_t_7) {

    /* "dsproc3/core.pyx":165
 *             s = str((format,args))
 *     if msngr_debug_level or msngr_provenance_level:
 *         dsproc_debug(func, file, line, 3, s)             # <<<<<<<<<<<<<<
 * 
 * def debug_lv4(char *format, *args):
 */

#line 165 "dsproc3/core.pyx"
    __pyx_t_12 = PyBytes_AsString(__pyx_v_func); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 165 "dsproc3/core.pyx"
    __pyx_t_13 = PyBytes_AsString(__pyx_v_file); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 165 "dsproc3/core.pyx"
    __pyx_t_11 = __Pyx_PyInt_AsInt(__pyx_v_line); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 165 "dsproc3/core.pyx"
    __pyx_t_14 = PyBytes_AsString(__pyx_v_s); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 165 "dsproc3/core.pyx"
    dsproc_debug(__pyx_t_12, __pyx_t_13, __pyx_t_11, 3, __pyx_t_14);

#line 165 "dsproc3/core.pyx"
    goto __pyx_L16;

#line 165 "dsproc3/core.pyx"
  }

#line 165 "dsproc3/core.pyx"
  __pyx_L16:;

#line 165 "dsproc3/core.pyx"


#line 165 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 165 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 165 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 165 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 165 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 165 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 165 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 165 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 165 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.debug_lv3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 165 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 165 "dsproc3/core.pyx"
  __pyx_L0:;

#line 165 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_s);

#line 165 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_file);

#line 165 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_line);

#line 165 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_func);

#line 165 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 165 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 165 "dsproc3/core.pyx"
  return __pyx_r;

#line 165 "dsproc3/core.pyx"
}

#line 165 "dsproc3/core.pyx"


#line 165 "dsproc3/core.pyx"
/* Python wrapper */

#line 165 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_15debug_lv4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 165 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_14debug_lv4[] = "debug_lv4(char *format, *args)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_15debug_lv4 = 
#line 165 "dsproc3/core.pyx"
{__Pyx_NAMESTR("debug_lv4"), (PyCFunction)__pyx_pw_7dsproc3_4core_15debug_lv4, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_14debug_lv4)};

#line 165 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_15debug_lv4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_format
#line 165 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_args = 0
#line 165 "dsproc3/core.pyx"
;

#line 165 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 165 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 165 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("debug_lv4 (wrapper)", 0);

#line 165 "dsproc3/core.pyx"
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {

#line 165 "dsproc3/core.pyx"
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));

#line 165 "dsproc3/core.pyx"
    if (unlikely(!__pyx_v_args)) {

#line 165 "dsproc3/core.pyx"
      __Pyx_RefNannyFinishContext();

#line 165 "dsproc3/core.pyx"
      return NULL;

#line 165 "dsproc3/core.pyx"
    }

#line 165 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_v_args);

#line 165 "dsproc3/core.pyx"
  } else {
    __pyx_v_args = __pyx_empty_tuple; 
#line 165 "dsproc3/core.pyx"
__Pyx_INCREF(__pyx_empty_tuple);

#line 165 "dsproc3/core.pyx"
  }

#line 165 "dsproc3/core.pyx"
  {

#line 165 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__format,0};

#line 165 "dsproc3/core.pyx"
    PyObject* values[1] = {0};

#line 165 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 165 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 165 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 165 "dsproc3/core.pyx"
      switch (pos_args) {

#line 165 "dsproc3/core.pyx"
        default:
        case  1: 
#line 165 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 165 "dsproc3/core.pyx"
        case  0: break;

#line 165 "dsproc3/core.pyx"
      }

#line 165 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 165 "dsproc3/core.pyx"
      switch (pos_args) {

#line 165 "dsproc3/core.pyx"
        case  0:

#line 165 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__format)) != 0)) kw_args--;
        else 
#line 165 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 165 "dsproc3/core.pyx"
      }

#line 165 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 165 "dsproc3/core.pyx"
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;

#line 165 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "debug_lv4") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 165 "dsproc3/core.pyx"
      }

#line 165 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {

#line 165 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 165 "dsproc3/core.pyx"
    } else {

#line 165 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 165 "dsproc3/core.pyx"
    }

#line 165 "dsproc3/core.pyx"
    __pyx_v_format = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_format) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 165 "dsproc3/core.pyx"
  }

#line 165 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 165 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("debug_lv4", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); 
#line 165 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 165 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 165 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;

#line 165 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.debug_lv4", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 165 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 165 "dsproc3/core.pyx"
  return NULL;

#line 165 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 165 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_14debug_lv4(__pyx_self, __pyx_v_format, __pyx_v_args);

#line 165 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_args);

#line 165 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 165 "dsproc3/core.pyx"
  return __pyx_r;

#line 165 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":167
 *         dsproc_debug(func, file, line, 3, s)
 * 
 * def debug_lv4(char *format, *args):             # <<<<<<<<<<<<<<
 *     s=format
 *     file,line,func=__line()
 */

#line 167 "dsproc3/core.pyx"


#line 167 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_14debug_lv4(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_format, PyObject *__pyx_v_args) {
  PyObject *__pyx_v_s = NULL
#line 167 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_file = NULL
#line 167 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_line = NULL
#line 167 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_func = NULL
#line 167 "dsproc3/core.pyx"
;

#line 167 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 167 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("debug_lv4", 0);

  /* "dsproc3/core.pyx":168
 * 
 * def debug_lv4(char *format, *args):
 *     s=format             # <<<<<<<<<<<<<<
 *     file,line,func=__line()
 *     if args:
 */

#line 168 "dsproc3/core.pyx"
  __pyx_t_1 = PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 168 "dsproc3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 168 "dsproc3/core.pyx"
  __pyx_v_s = ((PyObject *)__pyx_t_1);

#line 168 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":169
 * def debug_lv4(char *format, *args):
 *     s=format
 *     file,line,func=__line()             # <<<<<<<<<<<<<<
 *     if args:
 *         try:
 */

#line 169 "dsproc3/core.pyx"
  __pyx_t_1 = __pyx_f_7dsproc3_4core___line(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 169 "dsproc3/core.pyx"
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {

#line 169 "dsproc3/core.pyx"
    PyObject* sequence = __pyx_t_1;

#line 169 "dsproc3/core.pyx"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 169 "dsproc3/core.pyx"
    Py_ssize_t size = Py_SIZE(sequence);

#line 169 "dsproc3/core.pyx"
    #else

#line 169 "dsproc3/core.pyx"
    Py_ssize_t size = PySequence_Size(sequence);

#line 169 "dsproc3/core.pyx"
    #endif

#line 169 "dsproc3/core.pyx"
    if (unlikely(size != 3)) {

#line 169 "dsproc3/core.pyx"
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);

#line 169 "dsproc3/core.pyx"
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 169 "dsproc3/core.pyx"
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "dsproc3/core.pyx"
    }

#line 169 "dsproc3/core.pyx"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 169 "dsproc3/core.pyx"
    if (likely(PyTuple_CheckExact(sequence))) {

#line 169 "dsproc3/core.pyx"
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 

#line 169 "dsproc3/core.pyx"
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 

#line 169 "dsproc3/core.pyx"
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 

#line 169 "dsproc3/core.pyx"
    } else {

#line 169 "dsproc3/core.pyx"
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 

#line 169 "dsproc3/core.pyx"
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 

#line 169 "dsproc3/core.pyx"
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 

#line 169 "dsproc3/core.pyx"
    }

#line 169 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_t_2);

#line 169 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_t_3);

#line 169 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_t_4);

#line 169 "dsproc3/core.pyx"
    #else

#line 169 "dsproc3/core.pyx"
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 169 "dsproc3/core.pyx"
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 169 "dsproc3/core.pyx"
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 169 "dsproc3/core.pyx"
    #endif

#line 169 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 169 "dsproc3/core.pyx"
  } else

#line 169 "dsproc3/core.pyx"
  {

#line 169 "dsproc3/core.pyx"
    Py_ssize_t index = -1;

#line 169 "dsproc3/core.pyx"
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 169 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 169 "dsproc3/core.pyx"
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) 
#line 169 "dsproc3/core.pyx"
goto __pyx_L3_unpacking_failed;

#line 169 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) 
#line 169 "dsproc3/core.pyx"
goto __pyx_L3_unpacking_failed;

#line 169 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);
    index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) 
#line 169 "dsproc3/core.pyx"
goto __pyx_L3_unpacking_failed;

#line 169 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 169 "dsproc3/core.pyx"
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "dsproc3/core.pyx"
    __pyx_t_6 = NULL;

#line 169 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 169 "dsproc3/core.pyx"
    goto __pyx_L4_unpacking_done;

#line 169 "dsproc3/core.pyx"
    __pyx_L3_unpacking_failed:;

#line 169 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 169 "dsproc3/core.pyx"
    __pyx_t_6 = NULL;

#line 169 "dsproc3/core.pyx"
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 169 "dsproc3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "dsproc3/core.pyx"
    __pyx_L4_unpacking_done:;

#line 169 "dsproc3/core.pyx"
  }

#line 169 "dsproc3/core.pyx"
  __pyx_v_file = __pyx_t_2;

#line 169 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 169 "dsproc3/core.pyx"
  __pyx_v_line = __pyx_t_3;

#line 169 "dsproc3/core.pyx"
  __pyx_t_3 = 0;

#line 169 "dsproc3/core.pyx"
  __pyx_v_func = __pyx_t_4;

#line 169 "dsproc3/core.pyx"
  __pyx_t_4 = 0;

  /* "dsproc3/core.pyx":170
 *     s=format
 *     file,line,func=__line()
 *     if args:             # <<<<<<<<<<<<<<
 *         try:
 *             s = format % args
 */

#line 170 "dsproc3/core.pyx"
  __pyx_t_7 = (((PyObject *)__pyx_v_args) != Py_None) && (PyTuple_GET_SIZE(((PyObject *)__pyx_v_args)) != 0);

#line 170 "dsproc3/core.pyx"
  if (__pyx_t_7) {

    /* "dsproc3/core.pyx":171
 *     file,line,func=__line()
 *     if args:
 *         try:             # <<<<<<<<<<<<<<
 *             s = format % args
 *         except TypeError:
 */

#line 171 "dsproc3/core.pyx"
    {

#line 171 "dsproc3/core.pyx"
      __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);

#line 171 "dsproc3/core.pyx"
      __Pyx_XGOTREF(__pyx_t_8);

#line 171 "dsproc3/core.pyx"
      __Pyx_XGOTREF(__pyx_t_9);

#line 171 "dsproc3/core.pyx"
      __Pyx_XGOTREF(__pyx_t_10);

#line 171 "dsproc3/core.pyx"
      /*try:*/ {

        /* "dsproc3/core.pyx":172
 *     if args:
 *         try:
 *             s = format % args             # <<<<<<<<<<<<<<
 *         except TypeError:
 *             s = str((format,args))
 */

#line 172 "dsproc3/core.pyx"
        __pyx_t_1 = PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 172 "dsproc3/core.pyx"
        __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 172 "dsproc3/core.pyx"
        __pyx_t_4 = PyNumber_Remainder(((PyObject *)__pyx_t_1), ((PyObject *)__pyx_v_args)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 172 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 172 "dsproc3/core.pyx"
        __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

#line 172 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_v_s);

#line 172 "dsproc3/core.pyx"
        __pyx_v_s = __pyx_t_4;

#line 172 "dsproc3/core.pyx"
        __pyx_t_4 = 0;

#line 172 "dsproc3/core.pyx"
      }

#line 172 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 172 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 172 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 172 "dsproc3/core.pyx"
      goto __pyx_L13_try_end;

#line 172 "dsproc3/core.pyx"
      __pyx_L6_error:;

#line 172 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 172 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 172 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 172 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 172 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "dsproc3/core.pyx":173
 *         try:
 *             s = format % args
 *         except TypeError:             # <<<<<<<<<<<<<<
 *             s = str((format,args))
 *     if msngr_debug_level or msngr_provenance_level:
 */

#line 173 "dsproc3/core.pyx"
      __pyx_t_11 = PyErr_ExceptionMatches(__pyx_builtin_TypeError);

#line 173 "dsproc3/core.pyx"
      if (__pyx_t_11) {

#line 173 "dsproc3/core.pyx"
        __Pyx_AddTraceback("dsproc3.core.debug_lv4", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 173 "dsproc3/core.pyx"
        if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_1, &__pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 173 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 173 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 173 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_3);

        /* "dsproc3/core.pyx":174
 *             s = format % args
 *         except TypeError:
 *             s = str((format,args))             # <<<<<<<<<<<<<<
 *     if msngr_debug_level or msngr_provenance_level:
 *         dsproc_debug(func, file, line, 4, s)
 */

#line 174 "dsproc3/core.pyx"
        __pyx_t_2 = PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 174 "dsproc3/core.pyx"
        __Pyx_GOTREF(((PyObject *)__pyx_t_2));

#line 174 "dsproc3/core.pyx"
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 174 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 174 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_t_2));

#line 174 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_t_2));

#line 174 "dsproc3/core.pyx"
        __Pyx_INCREF(((PyObject *)__pyx_v_args));

#line 174 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_args));

#line 174 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_v_args));

#line 174 "dsproc3/core.pyx"
        __pyx_t_2 = 0;

#line 174 "dsproc3/core.pyx"
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 174 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 174 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_5));

#line 174 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_t_5));

#line 174 "dsproc3/core.pyx"
        __pyx_t_5 = 0;

#line 174 "dsproc3/core.pyx"
        __pyx_t_5 = PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 174 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 174 "dsproc3/core.pyx"
        __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 174 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_v_s);

#line 174 "dsproc3/core.pyx"
        __pyx_v_s = __pyx_t_5;

#line 174 "dsproc3/core.pyx"
        __pyx_t_5 = 0;

#line 174 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 174 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 174 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 174 "dsproc3/core.pyx"
        goto __pyx_L7_exception_handled;

#line 174 "dsproc3/core.pyx"
      }

#line 174 "dsproc3/core.pyx"
      __pyx_L8_except_error:;

#line 174 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_8);

#line 174 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_9);

#line 174 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_10);

#line 174 "dsproc3/core.pyx"
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);

#line 174 "dsproc3/core.pyx"
      goto __pyx_L1_error;

#line 174 "dsproc3/core.pyx"
      __pyx_L7_exception_handled:;

#line 174 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_8);

#line 174 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_9);

#line 174 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_10);

#line 174 "dsproc3/core.pyx"
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);

#line 174 "dsproc3/core.pyx"
      __pyx_L13_try_end:;

#line 174 "dsproc3/core.pyx"
    }

#line 174 "dsproc3/core.pyx"
    goto __pyx_L5;

#line 174 "dsproc3/core.pyx"
  }

#line 174 "dsproc3/core.pyx"
  __pyx_L5:;

  /* "dsproc3/core.pyx":175
 *         except TypeError:
 *             s = str((format,args))
 *     if msngr_debug_level or msngr_provenance_level:             # <<<<<<<<<<<<<<
 *         dsproc_debug(func, file, line, 4, s)
 * 
 */

#line 175 "dsproc3/core.pyx"
  if (!msngr_debug_level) {

#line 175 "dsproc3/core.pyx"
    __pyx_t_7 = msngr_provenance_level;

#line 175 "dsproc3/core.pyx"
  } else {

#line 175 "dsproc3/core.pyx"
    __pyx_t_7 = msngr_debug_level;

#line 175 "dsproc3/core.pyx"
  }

#line 175 "dsproc3/core.pyx"
  if (__pyx_t_7) {

    /* "dsproc3/core.pyx":176
 *             s = str((format,args))
 *     if msngr_debug_level or msngr_provenance_level:
 *         dsproc_debug(func, file, line, 4, s)             # <<<<<<<<<<<<<<
 * 
 * def debug_lv5(char *format, *args):
 */

#line 176 "dsproc3/core.pyx"
    __pyx_t_12 = PyBytes_AsString(__pyx_v_func); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 176 "dsproc3/core.pyx"
    __pyx_t_13 = PyBytes_AsString(__pyx_v_file); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 176 "dsproc3/core.pyx"
    __pyx_t_11 = __Pyx_PyInt_AsInt(__pyx_v_line); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 176 "dsproc3/core.pyx"
    __pyx_t_14 = PyBytes_AsString(__pyx_v_s); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 176 "dsproc3/core.pyx"
    dsproc_debug(__pyx_t_12, __pyx_t_13, __pyx_t_11, 4, __pyx_t_14);

#line 176 "dsproc3/core.pyx"
    goto __pyx_L16;

#line 176 "dsproc3/core.pyx"
  }

#line 176 "dsproc3/core.pyx"
  __pyx_L16:;

#line 176 "dsproc3/core.pyx"


#line 176 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 176 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 176 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 176 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 176 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 176 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 176 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 176 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 176 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.debug_lv4", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 176 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 176 "dsproc3/core.pyx"
  __pyx_L0:;

#line 176 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_s);

#line 176 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_file);

#line 176 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_line);

#line 176 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_func);

#line 176 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 176 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 176 "dsproc3/core.pyx"
  return __pyx_r;

#line 176 "dsproc3/core.pyx"
}

#line 176 "dsproc3/core.pyx"


#line 176 "dsproc3/core.pyx"
/* Python wrapper */

#line 176 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_17debug_lv5(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 176 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_16debug_lv5[] = "debug_lv5(char *format, *args)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_17debug_lv5 = 
#line 176 "dsproc3/core.pyx"
{__Pyx_NAMESTR("debug_lv5"), (PyCFunction)__pyx_pw_7dsproc3_4core_17debug_lv5, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_16debug_lv5)};

#line 176 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_17debug_lv5(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_format
#line 176 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_args = 0
#line 176 "dsproc3/core.pyx"
;

#line 176 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 176 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 176 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("debug_lv5 (wrapper)", 0);

#line 176 "dsproc3/core.pyx"
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {

#line 176 "dsproc3/core.pyx"
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));

#line 176 "dsproc3/core.pyx"
    if (unlikely(!__pyx_v_args)) {

#line 176 "dsproc3/core.pyx"
      __Pyx_RefNannyFinishContext();

#line 176 "dsproc3/core.pyx"
      return NULL;

#line 176 "dsproc3/core.pyx"
    }

#line 176 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_v_args);

#line 176 "dsproc3/core.pyx"
  } else {
    __pyx_v_args = __pyx_empty_tuple; 
#line 176 "dsproc3/core.pyx"
__Pyx_INCREF(__pyx_empty_tuple);

#line 176 "dsproc3/core.pyx"
  }

#line 176 "dsproc3/core.pyx"
  {

#line 176 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__format,0};

#line 176 "dsproc3/core.pyx"
    PyObject* values[1] = {0};

#line 176 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 176 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 176 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 176 "dsproc3/core.pyx"
      switch (pos_args) {

#line 176 "dsproc3/core.pyx"
        default:
        case  1: 
#line 176 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 176 "dsproc3/core.pyx"
        case  0: break;

#line 176 "dsproc3/core.pyx"
      }

#line 176 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 176 "dsproc3/core.pyx"
      switch (pos_args) {

#line 176 "dsproc3/core.pyx"
        case  0:

#line 176 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__format)) != 0)) kw_args--;
        else 
#line 176 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 176 "dsproc3/core.pyx"
      }

#line 176 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 176 "dsproc3/core.pyx"
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;

#line 176 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "debug_lv5") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 176 "dsproc3/core.pyx"
      }

#line 176 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {

#line 176 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 176 "dsproc3/core.pyx"
    } else {

#line 176 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 176 "dsproc3/core.pyx"
    }

#line 176 "dsproc3/core.pyx"
    __pyx_v_format = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_format) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 176 "dsproc3/core.pyx"
  }

#line 176 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 176 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("debug_lv5", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); 
#line 176 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 176 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 176 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;

#line 176 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.debug_lv5", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 176 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 176 "dsproc3/core.pyx"
  return NULL;

#line 176 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 176 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_16debug_lv5(__pyx_self, __pyx_v_format, __pyx_v_args);

#line 176 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_args);

#line 176 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 176 "dsproc3/core.pyx"
  return __pyx_r;

#line 176 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":178
 *         dsproc_debug(func, file, line, 4, s)
 * 
 * def debug_lv5(char *format, *args):             # <<<<<<<<<<<<<<
 *     s=format
 *     file,line,func=__line()
 */

#line 178 "dsproc3/core.pyx"


#line 178 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_16debug_lv5(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_format, PyObject *__pyx_v_args) {
  PyObject *__pyx_v_s = NULL
#line 178 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_file = NULL
#line 178 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_line = NULL
#line 178 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_func = NULL
#line 178 "dsproc3/core.pyx"
;

#line 178 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 178 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("debug_lv5", 0);

  /* "dsproc3/core.pyx":179
 * 
 * def debug_lv5(char *format, *args):
 *     s=format             # <<<<<<<<<<<<<<
 *     file,line,func=__line()
 *     if args:
 */

#line 179 "dsproc3/core.pyx"
  __pyx_t_1 = PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 179 "dsproc3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 179 "dsproc3/core.pyx"
  __pyx_v_s = ((PyObject *)__pyx_t_1);

#line 179 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":180
 * def debug_lv5(char *format, *args):
 *     s=format
 *     file,line,func=__line()             # <<<<<<<<<<<<<<
 *     if args:
 *         try:
 */

#line 180 "dsproc3/core.pyx"
  __pyx_t_1 = __pyx_f_7dsproc3_4core___line(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 180 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 180 "dsproc3/core.pyx"
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {

#line 180 "dsproc3/core.pyx"
    PyObject* sequence = __pyx_t_1;

#line 180 "dsproc3/core.pyx"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 180 "dsproc3/core.pyx"
    Py_ssize_t size = Py_SIZE(sequence);

#line 180 "dsproc3/core.pyx"
    #else

#line 180 "dsproc3/core.pyx"
    Py_ssize_t size = PySequence_Size(sequence);

#line 180 "dsproc3/core.pyx"
    #endif

#line 180 "dsproc3/core.pyx"
    if (unlikely(size != 3)) {

#line 180 "dsproc3/core.pyx"
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);

#line 180 "dsproc3/core.pyx"
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 180 "dsproc3/core.pyx"
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 180 "dsproc3/core.pyx"
    }

#line 180 "dsproc3/core.pyx"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 180 "dsproc3/core.pyx"
    if (likely(PyTuple_CheckExact(sequence))) {

#line 180 "dsproc3/core.pyx"
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 

#line 180 "dsproc3/core.pyx"
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 

#line 180 "dsproc3/core.pyx"
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 

#line 180 "dsproc3/core.pyx"
    } else {

#line 180 "dsproc3/core.pyx"
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 

#line 180 "dsproc3/core.pyx"
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 

#line 180 "dsproc3/core.pyx"
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 

#line 180 "dsproc3/core.pyx"
    }

#line 180 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_t_2);

#line 180 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_t_3);

#line 180 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_t_4);

#line 180 "dsproc3/core.pyx"
    #else

#line 180 "dsproc3/core.pyx"
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 180 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 180 "dsproc3/core.pyx"
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 180 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 180 "dsproc3/core.pyx"
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 180 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 180 "dsproc3/core.pyx"
    #endif

#line 180 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 180 "dsproc3/core.pyx"
  } else

#line 180 "dsproc3/core.pyx"
  {

#line 180 "dsproc3/core.pyx"
    Py_ssize_t index = -1;

#line 180 "dsproc3/core.pyx"
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 180 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 180 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 180 "dsproc3/core.pyx"
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) 
#line 180 "dsproc3/core.pyx"
goto __pyx_L3_unpacking_failed;

#line 180 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) 
#line 180 "dsproc3/core.pyx"
goto __pyx_L3_unpacking_failed;

#line 180 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);
    index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) 
#line 180 "dsproc3/core.pyx"
goto __pyx_L3_unpacking_failed;

#line 180 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 180 "dsproc3/core.pyx"
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 180 "dsproc3/core.pyx"
    __pyx_t_6 = NULL;

#line 180 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 180 "dsproc3/core.pyx"
    goto __pyx_L4_unpacking_done;

#line 180 "dsproc3/core.pyx"
    __pyx_L3_unpacking_failed:;

#line 180 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 180 "dsproc3/core.pyx"
    __pyx_t_6 = NULL;

#line 180 "dsproc3/core.pyx"
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 180 "dsproc3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 180 "dsproc3/core.pyx"
    __pyx_L4_unpacking_done:;

#line 180 "dsproc3/core.pyx"
  }

#line 180 "dsproc3/core.pyx"
  __pyx_v_file = __pyx_t_2;

#line 180 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 180 "dsproc3/core.pyx"
  __pyx_v_line = __pyx_t_3;

#line 180 "dsproc3/core.pyx"
  __pyx_t_3 = 0;

#line 180 "dsproc3/core.pyx"
  __pyx_v_func = __pyx_t_4;

#line 180 "dsproc3/core.pyx"
  __pyx_t_4 = 0;

  /* "dsproc3/core.pyx":181
 *     s=format
 *     file,line,func=__line()
 *     if args:             # <<<<<<<<<<<<<<
 *         try:
 *             s = format % args
 */

#line 181 "dsproc3/core.pyx"
  __pyx_t_7 = (((PyObject *)__pyx_v_args) != Py_None) && (PyTuple_GET_SIZE(((PyObject *)__pyx_v_args)) != 0);

#line 181 "dsproc3/core.pyx"
  if (__pyx_t_7) {

    /* "dsproc3/core.pyx":182
 *     file,line,func=__line()
 *     if args:
 *         try:             # <<<<<<<<<<<<<<
 *             s = format % args
 *         except TypeError:
 */

#line 182 "dsproc3/core.pyx"
    {

#line 182 "dsproc3/core.pyx"
      __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);

#line 182 "dsproc3/core.pyx"
      __Pyx_XGOTREF(__pyx_t_8);

#line 182 "dsproc3/core.pyx"
      __Pyx_XGOTREF(__pyx_t_9);

#line 182 "dsproc3/core.pyx"
      __Pyx_XGOTREF(__pyx_t_10);

#line 182 "dsproc3/core.pyx"
      /*try:*/ {

        /* "dsproc3/core.pyx":183
 *     if args:
 *         try:
 *             s = format % args             # <<<<<<<<<<<<<<
 *         except TypeError:
 *             s = str((format,args))
 */

#line 183 "dsproc3/core.pyx"
        __pyx_t_1 = PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 183 "dsproc3/core.pyx"
        __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 183 "dsproc3/core.pyx"
        __pyx_t_4 = PyNumber_Remainder(((PyObject *)__pyx_t_1), ((PyObject *)__pyx_v_args)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 183 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 183 "dsproc3/core.pyx"
        __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

#line 183 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_v_s);

#line 183 "dsproc3/core.pyx"
        __pyx_v_s = __pyx_t_4;

#line 183 "dsproc3/core.pyx"
        __pyx_t_4 = 0;

#line 183 "dsproc3/core.pyx"
      }

#line 183 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 183 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 183 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 183 "dsproc3/core.pyx"
      goto __pyx_L13_try_end;

#line 183 "dsproc3/core.pyx"
      __pyx_L6_error:;

#line 183 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 183 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 183 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 183 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 183 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "dsproc3/core.pyx":184
 *         try:
 *             s = format % args
 *         except TypeError:             # <<<<<<<<<<<<<<
 *             s = str((format,args))
 *     if msngr_debug_level or msngr_provenance_level:
 */

#line 184 "dsproc3/core.pyx"
      __pyx_t_11 = PyErr_ExceptionMatches(__pyx_builtin_TypeError);

#line 184 "dsproc3/core.pyx"
      if (__pyx_t_11) {

#line 184 "dsproc3/core.pyx"
        __Pyx_AddTraceback("dsproc3.core.debug_lv5", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 184 "dsproc3/core.pyx"
        if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_1, &__pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 184 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_4);

#line 184 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 184 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_3);

        /* "dsproc3/core.pyx":185
 *             s = format % args
 *         except TypeError:
 *             s = str((format,args))             # <<<<<<<<<<<<<<
 *     if msngr_debug_level or msngr_provenance_level:
 *         dsproc_debug(func, file, line, 5, s)
 */

#line 185 "dsproc3/core.pyx"
        __pyx_t_2 = PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 185 "dsproc3/core.pyx"
        __Pyx_GOTREF(((PyObject *)__pyx_t_2));

#line 185 "dsproc3/core.pyx"
        __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 185 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 185 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_t_2));

#line 185 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_t_2));

#line 185 "dsproc3/core.pyx"
        __Pyx_INCREF(((PyObject *)__pyx_v_args));

#line 185 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_args));

#line 185 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_v_args));

#line 185 "dsproc3/core.pyx"
        __pyx_t_2 = 0;

#line 185 "dsproc3/core.pyx"
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 185 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 185 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_5));

#line 185 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_t_5));

#line 185 "dsproc3/core.pyx"
        __pyx_t_5 = 0;

#line 185 "dsproc3/core.pyx"
        __pyx_t_5 = PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 185 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 185 "dsproc3/core.pyx"
        __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 185 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_v_s);

#line 185 "dsproc3/core.pyx"
        __pyx_v_s = __pyx_t_5;

#line 185 "dsproc3/core.pyx"
        __pyx_t_5 = 0;

#line 185 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 185 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 185 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 185 "dsproc3/core.pyx"
        goto __pyx_L7_exception_handled;

#line 185 "dsproc3/core.pyx"
      }

#line 185 "dsproc3/core.pyx"
      __pyx_L8_except_error:;

#line 185 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_8);

#line 185 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_9);

#line 185 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_10);

#line 185 "dsproc3/core.pyx"
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);

#line 185 "dsproc3/core.pyx"
      goto __pyx_L1_error;

#line 185 "dsproc3/core.pyx"
      __pyx_L7_exception_handled:;

#line 185 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_8);

#line 185 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_9);

#line 185 "dsproc3/core.pyx"
      __Pyx_XGIVEREF(__pyx_t_10);

#line 185 "dsproc3/core.pyx"
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);

#line 185 "dsproc3/core.pyx"
      __pyx_L13_try_end:;

#line 185 "dsproc3/core.pyx"
    }

#line 185 "dsproc3/core.pyx"
    goto __pyx_L5;

#line 185 "dsproc3/core.pyx"
  }

#line 185 "dsproc3/core.pyx"
  __pyx_L5:;

  /* "dsproc3/core.pyx":186
 *         except TypeError:
 *             s = str((format,args))
 *     if msngr_debug_level or msngr_provenance_level:             # <<<<<<<<<<<<<<
 *         dsproc_debug(func, file, line, 5, s)
 * 
 */

#line 186 "dsproc3/core.pyx"
  if (!msngr_debug_level) {

#line 186 "dsproc3/core.pyx"
    __pyx_t_7 = msngr_provenance_level;

#line 186 "dsproc3/core.pyx"
  } else {

#line 186 "dsproc3/core.pyx"
    __pyx_t_7 = msngr_debug_level;

#line 186 "dsproc3/core.pyx"
  }

#line 186 "dsproc3/core.pyx"
  if (__pyx_t_7) {

    /* "dsproc3/core.pyx":187
 *             s = str((format,args))
 *     if msngr_debug_level or msngr_provenance_level:
 *         dsproc_debug(func, file, line, 5, s)             # <<<<<<<<<<<<<<
 * 
 * ##############################################################################
 */

#line 187 "dsproc3/core.pyx"
    __pyx_t_12 = PyBytes_AsString(__pyx_v_func); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 187 "dsproc3/core.pyx"
    __pyx_t_13 = PyBytes_AsString(__pyx_v_file); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 187 "dsproc3/core.pyx"
    __pyx_t_11 = __Pyx_PyInt_AsInt(__pyx_v_line); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 187 "dsproc3/core.pyx"
    __pyx_t_14 = PyBytes_AsString(__pyx_v_s); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 187 "dsproc3/core.pyx"
    dsproc_debug(__pyx_t_12, __pyx_t_13, __pyx_t_11, 5, __pyx_t_14);

#line 187 "dsproc3/core.pyx"
    goto __pyx_L16;

#line 187 "dsproc3/core.pyx"
  }

#line 187 "dsproc3/core.pyx"
  __pyx_L16:;

#line 187 "dsproc3/core.pyx"


#line 187 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 187 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 187 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 187 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 187 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 187 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 187 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 187 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 187 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.debug_lv5", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 187 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 187 "dsproc3/core.pyx"
  __pyx_L0:;

#line 187 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_s);

#line 187 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_file);

#line 187 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_line);

#line 187 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_func);

#line 187 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 187 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 187 "dsproc3/core.pyx"
  return __pyx_r;

#line 187 "dsproc3/core.pyx"
}

#line 187 "dsproc3/core.pyx"


#line 187 "dsproc3/core.pyx"
/* Python wrapper */

#line 187 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_19set_init_process_hook(PyObject *__pyx_self, PyObject *__pyx_v_hook); /*proto*/

#line 187 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_18set_init_process_hook[] = "set_init_process_hook(hook)\nSet hook function to call when a process is first initialized.\n    \n    This function must be called from the main function before dsproc_main()\n    is called.\n    \n    The specified init_process_hook() function will be called once just before\n    the main data processing loop begins and before the initial database\n    connection is closed.\n    \n    The init_process_hook() function does not take any arguments, but it must\n    return:\n      - a user defined data structure or value (a Python object) that will be\n        passed in as user_data to all other hook functions.\n      - 1 if no user data is returned.\n      - None if a fatal error occurred and the process should exit.\n    \n    @param hook - function to call when the process is initialized\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_19set_init_process_hook = 
#line 187 "dsproc3/core.pyx"
{__Pyx_NAMESTR("set_init_process_hook"), (PyCFunction)__pyx_pw_7dsproc3_4core_19set_init_process_hook, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_18set_init_process_hook)};

#line 187 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_19set_init_process_hook(PyObject *__pyx_self, PyObject *__pyx_v_hook) {

#line 187 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 187 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 187 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_init_process_hook (wrapper)", 0);
  __pyx_r = 
#line 187 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_18set_init_process_hook(__pyx_self, ((PyObject *)__pyx_v_hook));

#line 187 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 187 "dsproc3/core.pyx"
  return __pyx_r;

#line 187 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":202
 * _process_file_hook = None
 * 
 * def set_init_process_hook(hook):             # <<<<<<<<<<<<<<
 *     """Set hook function to call when a process is first initialized.
 * 
 */

#line 202 "dsproc3/core.pyx"


#line 202 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_18set_init_process_hook(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hook) {

#line 202 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 202 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_init_process_hook", 0);

  /* "dsproc3/core.pyx":223
 *     """
 *     global _init_process_hook
 *     _init_process_hook = hook             # <<<<<<<<<<<<<<
 * 
 * def set_finish_process_hook(hook):
 */

#line 223 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s___init_process_hook, __pyx_v_hook) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 223 "dsproc3/core.pyx"


#line 223 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 223 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 223 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 223 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_init_process_hook", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 223 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 223 "dsproc3/core.pyx"
  __pyx_L0:;

#line 223 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 223 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 223 "dsproc3/core.pyx"
  return __pyx_r;

#line 223 "dsproc3/core.pyx"
}

#line 223 "dsproc3/core.pyx"


#line 223 "dsproc3/core.pyx"
/* Python wrapper */

#line 223 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_21set_finish_process_hook(PyObject *__pyx_self, PyObject *__pyx_v_hook); /*proto*/

#line 223 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_20set_finish_process_hook[] = "set_finish_process_hook(hook)\nSet hook function to call before a process finishes.\n    \n    This function must be called from the main function before dsproc_main()\n    is called, or from the init_process_hook() function.\n    \n    The specified finish_process_hook() function will be called once just after\n    the main data processing loop finishes.  This function should be used to\n    clean up any temporary files used, and to free any memory used by the\n    structure returned by the init_process_hook() function.\n    \n    The finish_process_hook function must take the following argument:\n    \n      - object  user_data:  value returned by the init_process_hook() function\n    \n    @param hook - function to call before the process finishes\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_21set_finish_process_hook = 
#line 223 "dsproc3/core.pyx"
{__Pyx_NAMESTR("set_finish_process_hook"), (PyCFunction)__pyx_pw_7dsproc3_4core_21set_finish_process_hook, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_20set_finish_process_hook)};

#line 223 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_21set_finish_process_hook(PyObject *__pyx_self, PyObject *__pyx_v_hook) {

#line 223 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 223 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 223 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_finish_process_hook (wrapper)", 0);
  __pyx_r = 
#line 223 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_20set_finish_process_hook(__pyx_self, ((PyObject *)__pyx_v_hook));

#line 223 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 223 "dsproc3/core.pyx"
  return __pyx_r;

#line 223 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":225
 *     _init_process_hook = hook
 * 
 * def set_finish_process_hook(hook):             # <<<<<<<<<<<<<<
 *     """Set hook function to call before a process finishes.
 * 
 */

#line 225 "dsproc3/core.pyx"


#line 225 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_20set_finish_process_hook(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hook) {

#line 225 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 225 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_finish_process_hook", 0);

  /* "dsproc3/core.pyx":244
 *     """
 *     global _finish_process_hook
 *     _finish_process_hook = hook             # <<<<<<<<<<<<<<
 * 
 * def set_process_data_hook(hook):
 */

#line 244 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_1, __pyx_v_hook) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 244 "dsproc3/core.pyx"


#line 244 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 244 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 244 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 244 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_finish_process_hook", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 244 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 244 "dsproc3/core.pyx"
  __pyx_L0:;

#line 244 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 244 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 244 "dsproc3/core.pyx"
  return __pyx_r;

#line 244 "dsproc3/core.pyx"
}

#line 244 "dsproc3/core.pyx"


#line 244 "dsproc3/core.pyx"
/* Python wrapper */

#line 244 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_23set_process_data_hook(PyObject *__pyx_self, PyObject *__pyx_v_hook); /*proto*/

#line 244 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_22set_process_data_hook[] = "set_process_data_hook(hook)\nSet the main data processing function.\n    \n    This function must be called from the main function before dsproc_main()\n    is called, or from the init_process_hook() function.\n    \n    The specified process_data_hook function will be called once per\n    processing interval just after the output datasets are created, but\n    before they are stored to disk.\n    \n    The process_data_hook function must take the following arguments:\n    \n      - object user_data:  value returned by the init_process_hook() function\n      - time_t begin_date: the begin time of the current processing interval\n      - time_t end_date:   the end time of the current processing interval\n      - Group  input_data: the parent CDS.Group containing the input data.\n    \n    And must return:\n    \n      -  1 if processing should continue normally\n      -  0 if processing should skip the current processing interval\n           and continue on to the next one.\n      - -1 if a fatal error occurred and the process should exit.\n    \n    @param hook - the main data processing function\n    \n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_23set_process_data_hook = 
#line 244 "dsproc3/core.pyx"
{__Pyx_NAMESTR("set_process_data_hook"), (PyCFunction)__pyx_pw_7dsproc3_4core_23set_process_data_hook, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_22set_process_data_hook)};

#line 244 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_23set_process_data_hook(PyObject *__pyx_self, PyObject *__pyx_v_hook) {

#line 244 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 244 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 244 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_process_data_hook (wrapper)", 0);
  __pyx_r = 
#line 244 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_22set_process_data_hook(__pyx_self, ((PyObject *)__pyx_v_hook));

#line 244 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 244 "dsproc3/core.pyx"
  return __pyx_r;

#line 244 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":246
 *     _finish_process_hook = hook
 * 
 * def set_process_data_hook(hook):             # <<<<<<<<<<<<<<
 *     """Set the main data processing function.
 * 
 */

#line 246 "dsproc3/core.pyx"


#line 246 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_22set_process_data_hook(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hook) {

#line 246 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 246 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_process_data_hook", 0);

  /* "dsproc3/core.pyx":274
 *     """
 *     global _process_data_hook
 *     _process_data_hook = hook             # <<<<<<<<<<<<<<
 * 
 * def set_pre_retrieval_hook(hook):
 */

#line 274 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s___process_data_hook, __pyx_v_hook) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 274 "dsproc3/core.pyx"


#line 274 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 274 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 274 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 274 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_process_data_hook", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 274 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 274 "dsproc3/core.pyx"
  __pyx_L0:;

#line 274 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 274 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 274 "dsproc3/core.pyx"
  return __pyx_r;

#line 274 "dsproc3/core.pyx"
}

#line 274 "dsproc3/core.pyx"


#line 274 "dsproc3/core.pyx"
/* Python wrapper */

#line 274 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_25set_pre_retrieval_hook(PyObject *__pyx_self, PyObject *__pyx_v_hook); /*proto*/

#line 274 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_24set_pre_retrieval_hook[] = "set_pre_retrieval_hook(hook)\nSet hook function to call before data is retrieved.\n    \n    This function must be called from the main function before dsproc_main()\n    is called, or from the init_process_hook() function.\n    \n    The specified pre_retrieval_hook function will be called once per\n    processing interval just prior to data retrieval, and must take the\n    following arguments:\n    \n    The pre_retrieval_hook function must take the following arguments:\n    \n      - object  user_data:  value returned by the init_process_hook() function\n      - time_t  begin_date: the begin time of the current processing interval\n      - time_t  end_date:   the end time of the current processing interval\n    \n    And must return:\n    \n      -  1 if processing should continue normally\n      -  0 if processing should skip the current processing interval\n           and continue on to the next one.\n      - -1 if a fatal error occurred and the process should exit.\n    \n    @param hook - function to call before data is retrieved\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_25set_pre_retrieval_hook = 
#line 274 "dsproc3/core.pyx"
{__Pyx_NAMESTR("set_pre_retrieval_hook"), (PyCFunction)__pyx_pw_7dsproc3_4core_25set_pre_retrieval_hook, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_24set_pre_retrieval_hook)};

#line 274 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_25set_pre_retrieval_hook(PyObject *__pyx_self, PyObject *__pyx_v_hook) {

#line 274 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 274 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 274 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_pre_retrieval_hook (wrapper)", 0);
  __pyx_r = 
#line 274 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_24set_pre_retrieval_hook(__pyx_self, ((PyObject *)__pyx_v_hook));

#line 274 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 274 "dsproc3/core.pyx"
  return __pyx_r;

#line 274 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":276
 *     _process_data_hook = hook
 * 
 * def set_pre_retrieval_hook(hook):             # <<<<<<<<<<<<<<
 *     """Set hook function to call before data is retrieved.
 * 
 */

#line 276 "dsproc3/core.pyx"


#line 276 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_24set_pre_retrieval_hook(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hook) {

#line 276 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 276 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_pre_retrieval_hook", 0);

  /* "dsproc3/core.pyx":303
 *     """
 *     global _pre_retrieval_hook
 *     _pre_retrieval_hook = hook             # <<<<<<<<<<<<<<
 * 
 * def set_post_retrieval_hook(hook):
 */

#line 303 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s___pre_retrieval_hook, __pyx_v_hook) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 303 "dsproc3/core.pyx"


#line 303 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 303 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 303 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 303 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_pre_retrieval_hook", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 303 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 303 "dsproc3/core.pyx"
  __pyx_L0:;

#line 303 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 303 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 303 "dsproc3/core.pyx"
  return __pyx_r;

#line 303 "dsproc3/core.pyx"
}

#line 303 "dsproc3/core.pyx"


#line 303 "dsproc3/core.pyx"
/* Python wrapper */

#line 303 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_27set_post_retrieval_hook(PyObject *__pyx_self, PyObject *__pyx_v_hook); /*proto*/

#line 303 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_26set_post_retrieval_hook[] = "set_post_retrieval_hook(hook)\nSet hook function to call after data is retrieved.\n    \n    This function must be called from the main function before dsproc_main()\n    is called, or from the init_process_hook() function.\n    \n    The specified post_retrieval_hook function will be called once per\n    processing interval just after data retrieval, but before the retrieved\n    observations are merged and QC is applied.\n    \n    The post_retrieval_hook function must take the following arguments:\n    \n      - object user_data:  value returned by the init_process_hook() function\n      - time_t begin_date: the begin time of the current processing interval\n      - time_t end_date:   the end time of the current processing interval\n      - Group  ret_data:   the parent CDS.Group containing the retrieved data\n    \n    And must return:\n    \n      -  1 if processing should continue normally\n      -  0 if processing should skip the current processing interval\n           and continue on to the next one.\n      - -1 if a fatal error occurred and the process should exit.\n    \n    @param hook - function to call after data is retrieved\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_27set_post_retrieval_hook = 
#line 303 "dsproc3/core.pyx"
{__Pyx_NAMESTR("set_post_retrieval_hook"), (PyCFunction)__pyx_pw_7dsproc3_4core_27set_post_retrieval_hook, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_26set_post_retrieval_hook)};

#line 303 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_27set_post_retrieval_hook(PyObject *__pyx_self, PyObject *__pyx_v_hook) {

#line 303 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 303 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 303 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_post_retrieval_hook (wrapper)", 0);
  __pyx_r = 
#line 303 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_26set_post_retrieval_hook(__pyx_self, ((PyObject *)__pyx_v_hook));

#line 303 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 303 "dsproc3/core.pyx"
  return __pyx_r;

#line 303 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":305
 *     _pre_retrieval_hook = hook
 * 
 * def set_post_retrieval_hook(hook):             # <<<<<<<<<<<<<<
 *     """Set hook function to call after data is retrieved.
 * 
 */

#line 305 "dsproc3/core.pyx"


#line 305 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_26set_post_retrieval_hook(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hook) {

#line 305 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 305 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_post_retrieval_hook", 0);

  /* "dsproc3/core.pyx":333
 *     """
 *     global _post_retrieval_hook
 *     _post_retrieval_hook = hook             # <<<<<<<<<<<<<<
 * 
 * def set_pre_transform_hook(hook):
 */

#line 333 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_2, __pyx_v_hook) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 333 "dsproc3/core.pyx"


#line 333 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 333 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 333 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 333 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_post_retrieval_hook", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 333 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 333 "dsproc3/core.pyx"
  __pyx_L0:;

#line 333 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 333 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 333 "dsproc3/core.pyx"
  return __pyx_r;

#line 333 "dsproc3/core.pyx"
}

#line 333 "dsproc3/core.pyx"


#line 333 "dsproc3/core.pyx"
/* Python wrapper */

#line 333 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_29set_pre_transform_hook(PyObject *__pyx_self, PyObject *__pyx_v_hook); /*proto*/

#line 333 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_28set_pre_transform_hook[] = "set_pre_transform_hook(hook)\nSet hook function to call before the data is transformed.\n    \n    This function must be called from the main function before dsproc_main()\n    is called, or from the init_process_hook() function.\n    \n    The specified pre_transform_hook function will be called once per\n    processing interval just prior to data transformation, and after\n    the retrieved observations are merged and QC is applied.\n    \n    The pre_transform_hook function must take the following arguments:\n    \n      - object user_data:  value returned by the init_process_hook() function\n      - time_t begin_date: the begin time of the current processing interval\n      - time_t end_date:   the end time of the current processing interval\n      - Group  ret_data:   the parent CDS.Group containing the retrieved data\n    \n    And must return:\n    \n      -  1 if processing should continue normally\n      -  0 if processing should skip the current processing interval\n           and continue on to the next one.\n      - -1 if a fatal error occurred and the process should exit.\n    \n    @param hook - function to call before the data is transformed\n    \n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_29set_pre_transform_hook = 
#line 333 "dsproc3/core.pyx"
{__Pyx_NAMESTR("set_pre_transform_hook"), (PyCFunction)__pyx_pw_7dsproc3_4core_29set_pre_transform_hook, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_28set_pre_transform_hook)};

#line 333 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_29set_pre_transform_hook(PyObject *__pyx_self, PyObject *__pyx_v_hook) {

#line 333 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 333 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 333 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_pre_transform_hook (wrapper)", 0);
  __pyx_r = 
#line 333 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_28set_pre_transform_hook(__pyx_self, ((PyObject *)__pyx_v_hook));

#line 333 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 333 "dsproc3/core.pyx"
  return __pyx_r;

#line 333 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":335
 *     _post_retrieval_hook = hook
 * 
 * def set_pre_transform_hook(hook):             # <<<<<<<<<<<<<<
 *     """Set hook function to call before the data is transformed.
 * 
 */

#line 335 "dsproc3/core.pyx"


#line 335 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_28set_pre_transform_hook(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hook) {

#line 335 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 335 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_pre_transform_hook", 0);

  /* "dsproc3/core.pyx":363
 *     """
 *     global _pre_transform_hook
 *     _pre_transform_hook = hook             # <<<<<<<<<<<<<<
 * 
 * def set_post_transform_hook(hook):
 */

#line 363 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s___pre_transform_hook, __pyx_v_hook) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 363 "dsproc3/core.pyx"


#line 363 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 363 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 363 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 363 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_pre_transform_hook", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 363 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 363 "dsproc3/core.pyx"
  __pyx_L0:;

#line 363 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 363 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 363 "dsproc3/core.pyx"
  return __pyx_r;

#line 363 "dsproc3/core.pyx"
}

#line 363 "dsproc3/core.pyx"


#line 363 "dsproc3/core.pyx"
/* Python wrapper */

#line 363 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_31set_post_transform_hook(PyObject *__pyx_self, PyObject *__pyx_v_hook); /*proto*/

#line 363 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_30set_post_transform_hook[] = "set_post_transform_hook(hook)\nSet hook function to call after the data is transformed.\n    \n    This function must be called from the main function before dsproc_main()\n    is called, or from the init_process_hook() function.\n    \n    The specified post_transform_hook function will be called once per\n    processing interval just after data transformation, but before the\n    output datasets are created.\n    \n    The post_transform_hook function must take the following arguments:\n    \n      - object user_data:  value returned by the init_process_hook() function\n      - time_t begin_date: the begin time of the current processing interval\n      - time_t end_date:   the end time of the current processing interval\n      - Group  trans_data: the parent CDS.Group containing the transformed data\n    \n    And must return:\n    \n      -  1 if processing should continue normally\n      -  0 if processing should skip the current processing interval\n           and continue on to the next one.\n      - -1 if a fatal error occurred and the process should exit.\n    \n    @param hook - function to call after the data is transformed\n    \n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_31set_post_transform_hook = 
#line 363 "dsproc3/core.pyx"
{__Pyx_NAMESTR("set_post_transform_hook"), (PyCFunction)__pyx_pw_7dsproc3_4core_31set_post_transform_hook, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_30set_post_transform_hook)};

#line 363 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_31set_post_transform_hook(PyObject *__pyx_self, PyObject *__pyx_v_hook) {

#line 363 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 363 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 363 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_post_transform_hook (wrapper)", 0);
  __pyx_r = 
#line 363 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_30set_post_transform_hook(__pyx_self, ((PyObject *)__pyx_v_hook));

#line 363 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 363 "dsproc3/core.pyx"
  return __pyx_r;

#line 363 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":365
 *     _pre_transform_hook = hook
 * 
 * def set_post_transform_hook(hook):             # <<<<<<<<<<<<<<
 *     """Set hook function to call after the data is transformed.
 * 
 */

#line 365 "dsproc3/core.pyx"


#line 365 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_30set_post_transform_hook(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hook) {

#line 365 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 365 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_post_transform_hook", 0);

  /* "dsproc3/core.pyx":393
 *     """
 *     global _post_transform_hook
 *     _post_transform_hook = hook             # <<<<<<<<<<<<<<
 * 
 * def set_process_file_hook(hook):
 */

#line 393 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_3, __pyx_v_hook) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 393 "dsproc3/core.pyx"


#line 393 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 393 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 393 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 393 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_post_transform_hook", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 393 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 393 "dsproc3/core.pyx"
  __pyx_L0:;

#line 393 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 393 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 393 "dsproc3/core.pyx"
  return __pyx_r;

#line 393 "dsproc3/core.pyx"
}

#line 393 "dsproc3/core.pyx"


#line 393 "dsproc3/core.pyx"
/* Python wrapper */

#line 393 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_33set_process_file_hook(PyObject *__pyx_self, PyObject *__pyx_v_hook); /*proto*/

#line 393 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_32set_process_file_hook[] = "set_process_file_hook(hook)\nSet the main file processing function.\n    \n    This function must be called from the main function before dsproc_main()\n    is called, or from the init_process_hook() function.\n    \n    The specified process_file_hook function will be called once for\n    for every file found in the input direcotyr, and it must take the\n    following arguments:\n    \n      - object user_data:  value returned by the init_process_hook() function\n      - char   input_dir:  the full path to the input directory\n      - char   file_name:  the name of the file to process\n    \n    And must return:\n    \n      -  1 if processing should continue normally\n      -  0 if processing should skip the file\n           and continue on to the next one.\n      - -1 if a fatal error occurred and the process should exit.\n    \n    @param hook - the main file processing function\n    \n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_33set_process_file_hook = 
#line 393 "dsproc3/core.pyx"
{__Pyx_NAMESTR("set_process_file_hook"), (PyCFunction)__pyx_pw_7dsproc3_4core_33set_process_file_hook, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_32set_process_file_hook)};

#line 393 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_33set_process_file_hook(PyObject *__pyx_self, PyObject *__pyx_v_hook) {

#line 393 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 393 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 393 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_process_file_hook (wrapper)", 0);
  __pyx_r = 
#line 393 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_32set_process_file_hook(__pyx_self, ((PyObject *)__pyx_v_hook));

#line 393 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 393 "dsproc3/core.pyx"
  return __pyx_r;

#line 393 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":395
 *     _post_transform_hook = hook
 * 
 * def set_process_file_hook(hook):             # <<<<<<<<<<<<<<
 *     """Set the main file processing function.
 * 
 */

#line 395 "dsproc3/core.pyx"


#line 395 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_32set_process_file_hook(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hook) {

#line 395 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 395 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_process_file_hook", 0);

  /* "dsproc3/core.pyx":420
 *     """
 *     global _process_file_hook
 *     _process_file_hook = hook             # <<<<<<<<<<<<<<
 * 
 * def _run_init_process_hook():
 */

#line 420 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s___process_file_hook, __pyx_v_hook) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 420 "dsproc3/core.pyx"


#line 420 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 420 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 420 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 420 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_process_file_hook", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 420 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 420 "dsproc3/core.pyx"
  __pyx_L0:;

#line 420 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 420 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 420 "dsproc3/core.pyx"
  return __pyx_r;

#line 420 "dsproc3/core.pyx"
}

#line 420 "dsproc3/core.pyx"


#line 420 "dsproc3/core.pyx"
/* Python wrapper */

#line 420 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_35_run_init_process_hook(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 420 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_34_run_init_process_hook[] = "_run_init_process_hook()\nPrivate: Run the init_process_hook function.\n    \n    @return\n      -  1 if successful\n      -  0 if an error occurred.\n    \n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_35_run_init_process_hook = 
#line 420 "dsproc3/core.pyx"
{__Pyx_NAMESTR("_run_init_process_hook"), (PyCFunction)__pyx_pw_7dsproc3_4core_35_run_init_process_hook, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_34_run_init_process_hook)};

#line 420 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_35_run_init_process_hook(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {

#line 420 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 420 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 420 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("_run_init_process_hook (wrapper)", 0);
  __pyx_r = 
#line 420 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_34_run_init_process_hook(__pyx_self);

#line 420 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 420 "dsproc3/core.pyx"
  return __pyx_r;

#line 420 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":422
 *     _process_file_hook = hook
 * 
 * def _run_init_process_hook():             # <<<<<<<<<<<<<<
 *     """Private: Run the init_process_hook function.
 * 
 */

#line 422 "dsproc3/core.pyx"


#line 422 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_34_run_init_process_hook(CYTHON_UNUSED PyObject *__pyx_self) {
  char *__pyx_v_status_text
#line 422 "dsproc3/core.pyx"
;

#line 422 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 422 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("_run_init_process_hook", 0);

  /* "dsproc3/core.pyx":432
 *     global _user_data
 *     cdef char *status_text
 *     if _init_process_hook:             # <<<<<<<<<<<<<<
 *         debug_lv1("\n----- ENTERING INIT PROCESS HOOK -------\n")
 *         _user_data = _init_process_hook()
 */

#line 432 "dsproc3/core.pyx"
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___init_process_hook); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 432 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 432 "dsproc3/core.pyx"
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 432 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 432 "dsproc3/core.pyx"
  if (__pyx_t_2) {

    /* "dsproc3/core.pyx":433
 *     cdef char *status_text
 *     if _init_process_hook:
 *         debug_lv1("\n----- ENTERING INIT PROCESS HOOK -------\n")             # <<<<<<<<<<<<<<
 *         _user_data = _init_process_hook()
 *         if not _user_data:
 */

#line 433 "dsproc3/core.pyx"
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__debug_lv1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 433 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 433 "dsproc3/core.pyx"
    __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_5), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 433 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 433 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 433 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "dsproc3/core.pyx":434
 *     if _init_process_hook:
 *         debug_lv1("\n----- ENTERING INIT PROCESS HOOK -------\n")
 *         _user_data = _init_process_hook()             # <<<<<<<<<<<<<<
 *         if not _user_data:
 *             status_text = dsproc_get_status()
 */

#line 434 "dsproc3/core.pyx"
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s___init_process_hook); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 434 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 434 "dsproc3/core.pyx"
    __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 434 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 434 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 434 "dsproc3/core.pyx"
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s___user_data, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 434 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "dsproc3/core.pyx":435
 *         debug_lv1("\n----- ENTERING INIT PROCESS HOOK -------\n")
 *         _user_data = _init_process_hook()
 *         if not _user_data:             # <<<<<<<<<<<<<<
 *             status_text = dsproc_get_status()
 *             if not status_text:
 */

#line 435 "dsproc3/core.pyx"
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___user_data); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 435 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 435 "dsproc3/core.pyx"
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 435 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 435 "dsproc3/core.pyx"
    __pyx_t_4 = (!__pyx_t_2);

#line 435 "dsproc3/core.pyx"
    if (__pyx_t_4) {

      /* "dsproc3/core.pyx":436
 *         _user_data = _init_process_hook()
 *         if not _user_data:
 *             status_text = dsproc_get_status()             # <<<<<<<<<<<<<<
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by init_process_hook function\n")
 */

#line 436 "dsproc3/core.pyx"
      __pyx_v_status_text = dsproc_get_status();

      /* "dsproc3/core.pyx":437
 *         if not _user_data:
 *             status_text = dsproc_get_status()
 *             if not status_text:             # <<<<<<<<<<<<<<
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by init_process_hook function\n")
 *             return 0
 */

#line 437 "dsproc3/core.pyx"
      __pyx_t_4 = (!(__pyx_v_status_text != 0));

#line 437 "dsproc3/core.pyx"
      if (__pyx_t_4) {

        /* "dsproc3/core.pyx":438
 *             status_text = dsproc_get_status()
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by init_process_hook function\n")             # <<<<<<<<<<<<<<
 *             return 0
 *         debug_lv1("----- EXITING INIT PROCESS HOOK --------\n\n")
 */

#line 438 "dsproc3/core.pyx"
        __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__error); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 438 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 438 "dsproc3/core.pyx"
        __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_8), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 438 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 438 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 438 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 438 "dsproc3/core.pyx"
        goto __pyx_L5;

#line 438 "dsproc3/core.pyx"
      }

#line 438 "dsproc3/core.pyx"
      __pyx_L5:;

      /* "dsproc3/core.pyx":439
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by init_process_hook function\n")
 *             return 0             # <<<<<<<<<<<<<<
 *         debug_lv1("----- EXITING INIT PROCESS HOOK --------\n\n")
 *     return 1
 */

#line 439 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_r);

#line 439 "dsproc3/core.pyx"
      __Pyx_INCREF(__pyx_int_0);

#line 439 "dsproc3/core.pyx"
      __pyx_r = __pyx_int_0;

#line 439 "dsproc3/core.pyx"
      goto __pyx_L0;

#line 439 "dsproc3/core.pyx"
      goto __pyx_L4;

#line 439 "dsproc3/core.pyx"
    }

#line 439 "dsproc3/core.pyx"
    __pyx_L4:;

    /* "dsproc3/core.pyx":440
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by init_process_hook function\n")
 *             return 0
 *         debug_lv1("----- EXITING INIT PROCESS HOOK --------\n\n")             # <<<<<<<<<<<<<<
 *     return 1
 * 
 */

#line 440 "dsproc3/core.pyx"
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__debug_lv1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 440 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 440 "dsproc3/core.pyx"
    __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_k_tuple_10), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 440 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 440 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 440 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 440 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 440 "dsproc3/core.pyx"
  }

#line 440 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":441
 *             return 0
 *         debug_lv1("----- EXITING INIT PROCESS HOOK --------\n\n")
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * def _run_finish_process_hook():
 */

#line 441 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 441 "dsproc3/core.pyx"
  __Pyx_INCREF(__pyx_int_1);

#line 441 "dsproc3/core.pyx"
  __pyx_r = __pyx_int_1;

#line 441 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 441 "dsproc3/core.pyx"


#line 441 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 441 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 441 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 441 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 441 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 441 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core._run_init_process_hook", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 441 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 441 "dsproc3/core.pyx"
  __pyx_L0:;

#line 441 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 441 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 441 "dsproc3/core.pyx"
  return __pyx_r;

#line 441 "dsproc3/core.pyx"
}

#line 441 "dsproc3/core.pyx"


#line 441 "dsproc3/core.pyx"
/* Python wrapper */

#line 441 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_37_run_finish_process_hook(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 441 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_36_run_finish_process_hook[] = "_run_finish_process_hook()\nPrivate: Run the finish_process_hook function.";
static PyMethodDef __pyx_mdef_7dsproc3_4core_37_run_finish_process_hook = 
#line 441 "dsproc3/core.pyx"
{__Pyx_NAMESTR("_run_finish_process_hook"), (PyCFunction)__pyx_pw_7dsproc3_4core_37_run_finish_process_hook, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_36_run_finish_process_hook)};

#line 441 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_37_run_finish_process_hook(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {

#line 441 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 441 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 441 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("_run_finish_process_hook (wrapper)", 0);
  __pyx_r = 
#line 441 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_36_run_finish_process_hook(__pyx_self);

#line 441 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 441 "dsproc3/core.pyx"
  return __pyx_r;

#line 441 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":443
 *     return 1
 * 
 * def _run_finish_process_hook():             # <<<<<<<<<<<<<<
 *     """Private: Run the finish_process_hook function."""
 *     if _finish_process_hook:
 */

#line 443 "dsproc3/core.pyx"


#line 443 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_36_run_finish_process_hook(CYTHON_UNUSED PyObject *__pyx_self) {

#line 443 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 443 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("_run_finish_process_hook", 0);

  /* "dsproc3/core.pyx":445
 * def _run_finish_process_hook():
 *     """Private: Run the finish_process_hook function."""
 *     if _finish_process_hook:             # <<<<<<<<<<<<<<
 *         debug_lv1("\n----- ENTERING FINISH PROCESS HOOK -----\n")
 *         _finish_process_hook(_user_data)
 */

#line 445 "dsproc3/core.pyx"
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 445 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 445 "dsproc3/core.pyx"
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 445 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 445 "dsproc3/core.pyx"
  if (__pyx_t_2) {

    /* "dsproc3/core.pyx":446
 *     """Private: Run the finish_process_hook function."""
 *     if _finish_process_hook:
 *         debug_lv1("\n----- ENTERING FINISH PROCESS HOOK -----\n")             # <<<<<<<<<<<<<<
 *         _finish_process_hook(_user_data)
 *         debug_lv1("----- EXITING FINISH PROCESS HOOK ------\n\n")
 */

#line 446 "dsproc3/core.pyx"
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__debug_lv1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 446 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 446 "dsproc3/core.pyx"
    __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_12), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 446 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 446 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 446 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "dsproc3/core.pyx":447
 *     if _finish_process_hook:
 *         debug_lv1("\n----- ENTERING FINISH PROCESS HOOK -----\n")
 *         _finish_process_hook(_user_data)             # <<<<<<<<<<<<<<
 *         debug_lv1("----- EXITING FINISH PROCESS HOOK ------\n\n")
 * 
 */

#line 447 "dsproc3/core.pyx"
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 447 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 447 "dsproc3/core.pyx"
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___user_data); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 447 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 447 "dsproc3/core.pyx"
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 447 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 447 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);

#line 447 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_1);

#line 447 "dsproc3/core.pyx"
    __pyx_t_1 = 0;

#line 447 "dsproc3/core.pyx"
    __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 447 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 447 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 447 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;

#line 447 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "dsproc3/core.pyx":448
 *         debug_lv1("\n----- ENTERING FINISH PROCESS HOOK -----\n")
 *         _finish_process_hook(_user_data)
 *         debug_lv1("----- EXITING FINISH PROCESS HOOK ------\n\n")             # <<<<<<<<<<<<<<
 * 
 * def _run_process_data_hook(
 */

#line 448 "dsproc3/core.pyx"
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__debug_lv1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 448 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 448 "dsproc3/core.pyx"
    __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_14), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 448 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 448 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 448 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 448 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 448 "dsproc3/core.pyx"
  }

#line 448 "dsproc3/core.pyx"
  __pyx_L3:;

#line 448 "dsproc3/core.pyx"


#line 448 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 448 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 448 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 448 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 448 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 448 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 448 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core._run_finish_process_hook", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 448 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 448 "dsproc3/core.pyx"
  __pyx_L0:;

#line 448 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 448 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 448 "dsproc3/core.pyx"
  return __pyx_r;

#line 448 "dsproc3/core.pyx"
}

#line 448 "dsproc3/core.pyx"


#line 448 "dsproc3/core.pyx"
/* Python wrapper */

#line 448 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_39_run_process_data_hook(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 448 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_38_run_process_data_hook[] = "_run_process_data_hook(time_t begin_date, time_t end_date, input_data)\nPrivate: Run the process_data_hook function.\n    \n    @param begin_date - the begin time of the current processing interval\n    @param end_date   - the end time of the current processing interval\n    @param input_data - the parent CDS.Group containing the input data\n    \n    @return\n      -  1 if processing should continue normally\n      -  0 if processing should skip the current processing interval\n           and continue on to the next one.\n      - -1 if a fatal error occurred and the process should exit.\n    \n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_39_run_process_data_hook = 
#line 448 "dsproc3/core.pyx"
{__Pyx_NAMESTR("_run_process_data_hook"), (PyCFunction)__pyx_pw_7dsproc3_4core_39_run_process_data_hook, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_38_run_process_data_hook)};

#line 448 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_39_run_process_data_hook(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  time_t __pyx_v_begin_date
#line 448 "dsproc3/core.pyx"
;
  time_t __pyx_v_end_date
#line 448 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_input_data = 0
#line 448 "dsproc3/core.pyx"
;

#line 448 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 448 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 448 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("_run_process_data_hook (wrapper)", 0);

#line 448 "dsproc3/core.pyx"
  {

#line 448 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__begin_date,&__pyx_n_s__end_date,&__pyx_n_s__input_data,0};

#line 448 "dsproc3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 448 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 448 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 448 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 448 "dsproc3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 448 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 448 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 448 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 448 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 448 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 448 "dsproc3/core.pyx"
      }

#line 448 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 448 "dsproc3/core.pyx"
      switch (pos_args) {

#line 448 "dsproc3/core.pyx"
        case  0:

#line 448 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__begin_date)) != 0)) kw_args--;
        else 
#line 448 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 448 "dsproc3/core.pyx"
        case  1:

#line 448 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__end_date)) != 0)) kw_args--;

#line 448 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("_run_process_data_hook", 1, 3, 3, 1); 
#line 448 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 448 "dsproc3/core.pyx"
        }

#line 448 "dsproc3/core.pyx"
        case  2:

#line 448 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__input_data)) != 0)) kw_args--;

#line 448 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("_run_process_data_hook", 1, 3, 3, 2); 
#line 448 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 448 "dsproc3/core.pyx"
        }

#line 448 "dsproc3/core.pyx"
      }

#line 448 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 448 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_run_process_data_hook") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 448 "dsproc3/core.pyx"
      }

#line 448 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 448 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 448 "dsproc3/core.pyx"
    } else {

#line 448 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 448 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 448 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 448 "dsproc3/core.pyx"
    }

#line 448 "dsproc3/core.pyx"
    __pyx_v_begin_date = __Pyx_PyInt_from_py_time_t(values[0]); if (unlikely((__pyx_v_begin_date == (time_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 448 "dsproc3/core.pyx"
    __pyx_v_end_date = __Pyx_PyInt_from_py_time_t(values[1]); if (unlikely((__pyx_v_end_date == (time_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 452; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 448 "dsproc3/core.pyx"
    __pyx_v_input_data = values[2];

#line 448 "dsproc3/core.pyx"
  }

#line 448 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 448 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_run_process_data_hook", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 448 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 448 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 448 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core._run_process_data_hook", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 448 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 448 "dsproc3/core.pyx"
  return NULL;

#line 448 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 448 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_38_run_process_data_hook(__pyx_self, __pyx_v_begin_date, __pyx_v_end_date, __pyx_v_input_data);

#line 448 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 448 "dsproc3/core.pyx"
  return __pyx_r;

#line 448 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":450
 *         debug_lv1("----- EXITING FINISH PROCESS HOOK ------\n\n")
 * 
 * def _run_process_data_hook(             # <<<<<<<<<<<<<<
 *         time_t begin_date,
 *         time_t end_date,
 */

#line 450 "dsproc3/core.pyx"


#line 450 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_38_run_process_data_hook(CYTHON_UNUSED PyObject *__pyx_self, time_t __pyx_v_begin_date, time_t __pyx_v_end_date, PyObject *__pyx_v_input_data) {
  char *__pyx_v_status_text
#line 450 "dsproc3/core.pyx"
;
  int __pyx_v_status
#line 450 "dsproc3/core.pyx"
;

#line 450 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 450 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("_run_process_data_hook", 0);

  /* "dsproc3/core.pyx":469
 *     cdef char *status_text
 *     cdef int   status
 *     status = 1             # <<<<<<<<<<<<<<
 *     if _process_data_hook:
 *         debug_lv1("\n----- ENTERING PROCESS DATA HOOK -------\n")
 */

#line 469 "dsproc3/core.pyx"
  __pyx_v_status = 1;

  /* "dsproc3/core.pyx":470
 *     cdef int   status
 *     status = 1
 *     if _process_data_hook:             # <<<<<<<<<<<<<<
 *         debug_lv1("\n----- ENTERING PROCESS DATA HOOK -------\n")
 *         status = _process_data_hook(
 */

#line 470 "dsproc3/core.pyx"
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___process_data_hook); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 470 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 470 "dsproc3/core.pyx"
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 470 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 470 "dsproc3/core.pyx"
  if (__pyx_t_2) {

    /* "dsproc3/core.pyx":471
 *     status = 1
 *     if _process_data_hook:
 *         debug_lv1("\n----- ENTERING PROCESS DATA HOOK -------\n")             # <<<<<<<<<<<<<<
 *         status = _process_data_hook(
 *                 _user_data, begin_date, end_date, input_data)
 */

#line 471 "dsproc3/core.pyx"
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__debug_lv1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 471 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 471 "dsproc3/core.pyx"
    __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_16), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 471 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 471 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 471 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "dsproc3/core.pyx":472
 *     if _process_data_hook:
 *         debug_lv1("\n----- ENTERING PROCESS DATA HOOK -------\n")
 *         status = _process_data_hook(             # <<<<<<<<<<<<<<
 *                 _user_data, begin_date, end_date, input_data)
 *         if status < 0:
 */

#line 472 "dsproc3/core.pyx"
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s___process_data_hook); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 472 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

    /* "dsproc3/core.pyx":473
 *         debug_lv1("\n----- ENTERING PROCESS DATA HOOK -------\n")
 *         status = _process_data_hook(
 *                 _user_data, begin_date, end_date, input_data)             # <<<<<<<<<<<<<<
 *         if status < 0:
 *             status_text = dsproc_get_status()
 */

#line 473 "dsproc3/core.pyx"
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___user_data); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 473 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 473 "dsproc3/core.pyx"
    __pyx_t_4 = __Pyx_PyInt_to_py_time_t(__pyx_v_begin_date); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 473 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 473 "dsproc3/core.pyx"
    __pyx_t_5 = __Pyx_PyInt_to_py_time_t(__pyx_v_end_date); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 473 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 473 "dsproc3/core.pyx"
    __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 473 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 473 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);

#line 473 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_1);

#line 473 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);

#line 473 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_4);

#line 473 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);

#line 473 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_5);

#line 473 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_v_input_data);

#line 473 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_v_input_data);

#line 473 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_v_input_data);

#line 473 "dsproc3/core.pyx"
    __pyx_t_1 = 0;

#line 473 "dsproc3/core.pyx"
    __pyx_t_4 = 0;

#line 473 "dsproc3/core.pyx"
    __pyx_t_5 = 0;

#line 473 "dsproc3/core.pyx"
    __pyx_t_5 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 473 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 473 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 473 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;

#line 473 "dsproc3/core.pyx"
    __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_t_5); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 473 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 473 "dsproc3/core.pyx"
    __pyx_v_status = __pyx_t_7;

    /* "dsproc3/core.pyx":474
 *         status = _process_data_hook(
 *                 _user_data, begin_date, end_date, input_data)
 *         if status < 0:             # <<<<<<<<<<<<<<
 *             status_text = dsproc_get_status()
 *             if not status_text:
 */

#line 474 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_status < 0);

#line 474 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":475
 *                 _user_data, begin_date, end_date, input_data)
 *         if status < 0:
 *             status_text = dsproc_get_status()             # <<<<<<<<<<<<<<
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by process_data_hook function\n")
 */

#line 475 "dsproc3/core.pyx"
      __pyx_v_status_text = dsproc_get_status();

      /* "dsproc3/core.pyx":476
 *         if status < 0:
 *             status_text = dsproc_get_status()
 *             if not status_text:             # <<<<<<<<<<<<<<
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by process_data_hook function\n")
 *         debug_lv1("----- EXITING PROCESS DATA HOOK --------\n\n")
 */

#line 476 "dsproc3/core.pyx"
      __pyx_t_2 = (!(__pyx_v_status_text != 0));

#line 476 "dsproc3/core.pyx"
      if (__pyx_t_2) {

        /* "dsproc3/core.pyx":477
 *             status_text = dsproc_get_status()
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by process_data_hook function\n")             # <<<<<<<<<<<<<<
 *         debug_lv1("----- EXITING PROCESS DATA HOOK --------\n\n")
 * 
 */

#line 477 "dsproc3/core.pyx"
        __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__error); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 477 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 477 "dsproc3/core.pyx"
        __pyx_t_6 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_k_tuple_18), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 477 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 477 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 477 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 477 "dsproc3/core.pyx"
        goto __pyx_L5;

#line 477 "dsproc3/core.pyx"
      }

#line 477 "dsproc3/core.pyx"
      __pyx_L5:;

#line 477 "dsproc3/core.pyx"
      goto __pyx_L4;

#line 477 "dsproc3/core.pyx"
    }

#line 477 "dsproc3/core.pyx"
    __pyx_L4:;

    /* "dsproc3/core.pyx":478
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by process_data_hook function\n")
 *         debug_lv1("----- EXITING PROCESS DATA HOOK --------\n\n")             # <<<<<<<<<<<<<<
 * 
 *     return status
 */

#line 478 "dsproc3/core.pyx"
    __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__debug_lv1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 478 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 478 "dsproc3/core.pyx"
    __pyx_t_5 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_k_tuple_20), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 478 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 478 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 478 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 478 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 478 "dsproc3/core.pyx"
  }

#line 478 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":480
 *         debug_lv1("----- EXITING PROCESS DATA HOOK --------\n\n")
 * 
 *     return status             # <<<<<<<<<<<<<<
 * 
 * def _run_pre_retrieval_hook(
 */

#line 480 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 480 "dsproc3/core.pyx"
  __pyx_t_5 = PyInt_FromLong(__pyx_v_status); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 480 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 480 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_5;

#line 480 "dsproc3/core.pyx"
  __pyx_t_5 = 0;

#line 480 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 480 "dsproc3/core.pyx"


#line 480 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 480 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 480 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 480 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 480 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 480 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 480 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 480 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 480 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core._run_process_data_hook", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 480 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 480 "dsproc3/core.pyx"
  __pyx_L0:;

#line 480 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 480 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 480 "dsproc3/core.pyx"
  return __pyx_r;

#line 480 "dsproc3/core.pyx"
}

#line 480 "dsproc3/core.pyx"


#line 480 "dsproc3/core.pyx"
/* Python wrapper */

#line 480 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_41_run_pre_retrieval_hook(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 480 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_40_run_pre_retrieval_hook[] = "_run_pre_retrieval_hook(time_t begin_date, time_t end_date)\nPrivate: Run the pre_retrieval_hook function.\n    \n    @param begin_date - the begin time of the current processing interval\n    @param end_date   - the end time of the current processing interval\n    \n    @return\n      -  1 if processing should continue normally\n      -  0 if processing should skip the current processing interval\n           and continue on to the next one.\n      - -1 if a fatal error occurred and the process should exit.\n    \n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_41_run_pre_retrieval_hook = 
#line 480 "dsproc3/core.pyx"
{__Pyx_NAMESTR("_run_pre_retrieval_hook"), (PyCFunction)__pyx_pw_7dsproc3_4core_41_run_pre_retrieval_hook, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_40_run_pre_retrieval_hook)};

#line 480 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_41_run_pre_retrieval_hook(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  time_t __pyx_v_begin_date
#line 480 "dsproc3/core.pyx"
;
  time_t __pyx_v_end_date
#line 480 "dsproc3/core.pyx"
;

#line 480 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 480 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 480 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("_run_pre_retrieval_hook (wrapper)", 0);

#line 480 "dsproc3/core.pyx"
  {

#line 480 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__begin_date,&__pyx_n_s__end_date,0};

#line 480 "dsproc3/core.pyx"
    PyObject* values[2] = {0,0};

#line 480 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 480 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 480 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 480 "dsproc3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 480 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 480 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 480 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 480 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 480 "dsproc3/core.pyx"
      }

#line 480 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 480 "dsproc3/core.pyx"
      switch (pos_args) {

#line 480 "dsproc3/core.pyx"
        case  0:

#line 480 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__begin_date)) != 0)) kw_args--;
        else 
#line 480 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 480 "dsproc3/core.pyx"
        case  1:

#line 480 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__end_date)) != 0)) kw_args--;

#line 480 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("_run_pre_retrieval_hook", 1, 2, 2, 1); 
#line 480 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 480 "dsproc3/core.pyx"
        }

#line 480 "dsproc3/core.pyx"
      }

#line 480 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 480 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_run_pre_retrieval_hook") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 480 "dsproc3/core.pyx"
      }

#line 480 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 480 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 480 "dsproc3/core.pyx"
    } else {

#line 480 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 480 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 480 "dsproc3/core.pyx"
    }

#line 480 "dsproc3/core.pyx"
    __pyx_v_begin_date = __Pyx_PyInt_from_py_time_t(values[0]); if (unlikely((__pyx_v_begin_date == (time_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 480 "dsproc3/core.pyx"
    __pyx_v_end_date = __Pyx_PyInt_from_py_time_t(values[1]); if (unlikely((__pyx_v_end_date == (time_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 480 "dsproc3/core.pyx"
  }

#line 480 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 480 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_run_pre_retrieval_hook", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 480 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 480 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 480 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core._run_pre_retrieval_hook", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 480 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 480 "dsproc3/core.pyx"
  return NULL;

#line 480 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 480 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_40_run_pre_retrieval_hook(__pyx_self, __pyx_v_begin_date, __pyx_v_end_date);

#line 480 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 480 "dsproc3/core.pyx"
  return __pyx_r;

#line 480 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":482
 *     return status
 * 
 * def _run_pre_retrieval_hook(             # <<<<<<<<<<<<<<
 *         time_t   begin_date,
 *         time_t   end_date):
 */

#line 482 "dsproc3/core.pyx"


#line 482 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_40_run_pre_retrieval_hook(CYTHON_UNUSED PyObject *__pyx_self, time_t __pyx_v_begin_date, time_t __pyx_v_end_date) {
  char *__pyx_v_status_text
#line 482 "dsproc3/core.pyx"
;
  int __pyx_v_status
#line 482 "dsproc3/core.pyx"
;

#line 482 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 482 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("_run_pre_retrieval_hook", 0);

  /* "dsproc3/core.pyx":499
 *     cdef char *status_text
 *     cdef int   status
 *     status = 1             # <<<<<<<<<<<<<<
 *     if _pre_retrieval_hook:
 *         debug_lv1("\n----- ENTERING PRE-RETRIEVAL HOOK ------\n")
 */

#line 499 "dsproc3/core.pyx"
  __pyx_v_status = 1;

  /* "dsproc3/core.pyx":500
 *     cdef int   status
 *     status = 1
 *     if _pre_retrieval_hook:             # <<<<<<<<<<<<<<
 *         debug_lv1("\n----- ENTERING PRE-RETRIEVAL HOOK ------\n")
 *         status = _pre_retrieval_hook(_user_data, begin_date, end_date)
 */

#line 500 "dsproc3/core.pyx"
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___pre_retrieval_hook); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 500 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 500 "dsproc3/core.pyx"
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 500 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 500 "dsproc3/core.pyx"
  if (__pyx_t_2) {

    /* "dsproc3/core.pyx":501
 *     status = 1
 *     if _pre_retrieval_hook:
 *         debug_lv1("\n----- ENTERING PRE-RETRIEVAL HOOK ------\n")             # <<<<<<<<<<<<<<
 *         status = _pre_retrieval_hook(_user_data, begin_date, end_date)
 *         if status < 0:
 */

#line 501 "dsproc3/core.pyx"
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__debug_lv1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 501 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 501 "dsproc3/core.pyx"
    __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_22), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 501 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 501 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 501 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "dsproc3/core.pyx":502
 *     if _pre_retrieval_hook:
 *         debug_lv1("\n----- ENTERING PRE-RETRIEVAL HOOK ------\n")
 *         status = _pre_retrieval_hook(_user_data, begin_date, end_date)             # <<<<<<<<<<<<<<
 *         if status < 0:
 *             status_text = dsproc_get_status()
 */

#line 502 "dsproc3/core.pyx"
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s___pre_retrieval_hook); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 502 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 502 "dsproc3/core.pyx"
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___user_data); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 502 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 502 "dsproc3/core.pyx"
    __pyx_t_4 = __Pyx_PyInt_to_py_time_t(__pyx_v_begin_date); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 502 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 502 "dsproc3/core.pyx"
    __pyx_t_5 = __Pyx_PyInt_to_py_time_t(__pyx_v_end_date); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 502 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 502 "dsproc3/core.pyx"
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 502 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 502 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);

#line 502 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_1);

#line 502 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);

#line 502 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_4);

#line 502 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);

#line 502 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_5);

#line 502 "dsproc3/core.pyx"
    __pyx_t_1 = 0;

#line 502 "dsproc3/core.pyx"
    __pyx_t_4 = 0;

#line 502 "dsproc3/core.pyx"
    __pyx_t_5 = 0;

#line 502 "dsproc3/core.pyx"
    __pyx_t_5 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 502 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 502 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 502 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;

#line 502 "dsproc3/core.pyx"
    __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_t_5); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 502 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 502 "dsproc3/core.pyx"
    __pyx_v_status = __pyx_t_7;

    /* "dsproc3/core.pyx":503
 *         debug_lv1("\n----- ENTERING PRE-RETRIEVAL HOOK ------\n")
 *         status = _pre_retrieval_hook(_user_data, begin_date, end_date)
 *         if status < 0:             # <<<<<<<<<<<<<<
 *             status_text = dsproc_get_status()
 *             if not status_text:
 */

#line 503 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_status < 0);

#line 503 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":504
 *         status = _pre_retrieval_hook(_user_data, begin_date, end_date)
 *         if status < 0:
 *             status_text = dsproc_get_status()             # <<<<<<<<<<<<<<
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by pre_retrieval_hook function\n")
 */

#line 504 "dsproc3/core.pyx"
      __pyx_v_status_text = dsproc_get_status();

      /* "dsproc3/core.pyx":505
 *         if status < 0:
 *             status_text = dsproc_get_status()
 *             if not status_text:             # <<<<<<<<<<<<<<
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by pre_retrieval_hook function\n")
 *         debug_lv1("----- EXITING PRE-RETRIEVAL HOOK -------\n")
 */

#line 505 "dsproc3/core.pyx"
      __pyx_t_2 = (!(__pyx_v_status_text != 0));

#line 505 "dsproc3/core.pyx"
      if (__pyx_t_2) {

        /* "dsproc3/core.pyx":506
 *             status_text = dsproc_get_status()
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by pre_retrieval_hook function\n")             # <<<<<<<<<<<<<<
 *         debug_lv1("----- EXITING PRE-RETRIEVAL HOOK -------\n")
 * 
 */

#line 506 "dsproc3/core.pyx"
        __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__error); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 506 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 506 "dsproc3/core.pyx"
        __pyx_t_6 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_k_tuple_24), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 506 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 506 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 506 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 506 "dsproc3/core.pyx"
        goto __pyx_L5;

#line 506 "dsproc3/core.pyx"
      }

#line 506 "dsproc3/core.pyx"
      __pyx_L5:;

#line 506 "dsproc3/core.pyx"
      goto __pyx_L4;

#line 506 "dsproc3/core.pyx"
    }

#line 506 "dsproc3/core.pyx"
    __pyx_L4:;

    /* "dsproc3/core.pyx":507
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by pre_retrieval_hook function\n")
 *         debug_lv1("----- EXITING PRE-RETRIEVAL HOOK -------\n")             # <<<<<<<<<<<<<<
 * 
 *     return status
 */

#line 507 "dsproc3/core.pyx"
    __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__debug_lv1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 507; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 507 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 507 "dsproc3/core.pyx"
    __pyx_t_5 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_k_tuple_26), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 507; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 507 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 507 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 507 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 507 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 507 "dsproc3/core.pyx"
  }

#line 507 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":509
 *         debug_lv1("----- EXITING PRE-RETRIEVAL HOOK -------\n")
 * 
 *     return status             # <<<<<<<<<<<<<<
 * 
 * def _run_post_retrieval_hook(
 */

#line 509 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 509 "dsproc3/core.pyx"
  __pyx_t_5 = PyInt_FromLong(__pyx_v_status); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 509 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 509 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_5;

#line 509 "dsproc3/core.pyx"
  __pyx_t_5 = 0;

#line 509 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 509 "dsproc3/core.pyx"


#line 509 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 509 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 509 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 509 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 509 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 509 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 509 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 509 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 509 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core._run_pre_retrieval_hook", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 509 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 509 "dsproc3/core.pyx"
  __pyx_L0:;

#line 509 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 509 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 509 "dsproc3/core.pyx"
  return __pyx_r;

#line 509 "dsproc3/core.pyx"
}

#line 509 "dsproc3/core.pyx"


#line 509 "dsproc3/core.pyx"
/* Python wrapper */

#line 509 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_43_run_post_retrieval_hook(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 509 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_42_run_post_retrieval_hook[] = "_run_post_retrieval_hook(time_t begin_date, time_t end_date, ret_data)\nPrivate: Run the post_retrieval_hook function.\n    \n    @param begin_date - the begin time of the current processing interval\n    @param end_date   - the end time of the current processing interval\n    @param ret_data   - the parent CDS.Group containing the retrieved data \n    @return\n      -  1 if processing should continue normally\n      -  0 if processing should skip the current processing interval\n           and continue on to the next one.\n      - -1 if a fatal error occurred and the process should exit.\n    \n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_43_run_post_retrieval_hook = 
#line 509 "dsproc3/core.pyx"
{__Pyx_NAMESTR("_run_post_retrieval_hook"), (PyCFunction)__pyx_pw_7dsproc3_4core_43_run_post_retrieval_hook, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_42_run_post_retrieval_hook)};

#line 509 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_43_run_post_retrieval_hook(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  time_t __pyx_v_begin_date
#line 509 "dsproc3/core.pyx"
;
  time_t __pyx_v_end_date
#line 509 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_ret_data = 0
#line 509 "dsproc3/core.pyx"
;

#line 509 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 509 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 509 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("_run_post_retrieval_hook (wrapper)", 0);

#line 509 "dsproc3/core.pyx"
  {

#line 509 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__begin_date,&__pyx_n_s__end_date,&__pyx_n_s__ret_data,0};

#line 509 "dsproc3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 509 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 509 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 509 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 509 "dsproc3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 509 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 509 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 509 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 509 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 509 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 509 "dsproc3/core.pyx"
      }

#line 509 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 509 "dsproc3/core.pyx"
      switch (pos_args) {

#line 509 "dsproc3/core.pyx"
        case  0:

#line 509 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__begin_date)) != 0)) kw_args--;
        else 
#line 509 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 509 "dsproc3/core.pyx"
        case  1:

#line 509 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__end_date)) != 0)) kw_args--;

#line 509 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("_run_post_retrieval_hook", 1, 3, 3, 1); 
#line 509 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 509 "dsproc3/core.pyx"
        }

#line 509 "dsproc3/core.pyx"
        case  2:

#line 509 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ret_data)) != 0)) kw_args--;

#line 509 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("_run_post_retrieval_hook", 1, 3, 3, 2); 
#line 509 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 509 "dsproc3/core.pyx"
        }

#line 509 "dsproc3/core.pyx"
      }

#line 509 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 509 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_run_post_retrieval_hook") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 509 "dsproc3/core.pyx"
      }

#line 509 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 509 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 509 "dsproc3/core.pyx"
    } else {

#line 509 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 509 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 509 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 509 "dsproc3/core.pyx"
    }

#line 509 "dsproc3/core.pyx"
    __pyx_v_begin_date = __Pyx_PyInt_from_py_time_t(values[0]); if (unlikely((__pyx_v_begin_date == (time_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 509 "dsproc3/core.pyx"
    __pyx_v_end_date = __Pyx_PyInt_from_py_time_t(values[1]); if (unlikely((__pyx_v_end_date == (time_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 513; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 509 "dsproc3/core.pyx"
    __pyx_v_ret_data = values[2];

#line 509 "dsproc3/core.pyx"
  }

#line 509 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 509 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_run_post_retrieval_hook", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 509 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 509 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 509 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core._run_post_retrieval_hook", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 509 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 509 "dsproc3/core.pyx"
  return NULL;

#line 509 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 509 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_42_run_post_retrieval_hook(__pyx_self, __pyx_v_begin_date, __pyx_v_end_date, __pyx_v_ret_data);

#line 509 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 509 "dsproc3/core.pyx"
  return __pyx_r;

#line 509 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":511
 *     return status
 * 
 * def _run_post_retrieval_hook(             # <<<<<<<<<<<<<<
 *         time_t begin_date,
 *         time_t end_date,
 */

#line 511 "dsproc3/core.pyx"


#line 511 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_42_run_post_retrieval_hook(CYTHON_UNUSED PyObject *__pyx_self, time_t __pyx_v_begin_date, time_t __pyx_v_end_date, PyObject *__pyx_v_ret_data) {
  char *__pyx_v_status_text
#line 511 "dsproc3/core.pyx"
;
  int __pyx_v_status
#line 511 "dsproc3/core.pyx"
;

#line 511 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 511 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("_run_post_retrieval_hook", 0);

  /* "dsproc3/core.pyx":529
 *     cdef char *status_text
 *     cdef int   status
 *     status = 1             # <<<<<<<<<<<<<<
 *     if _post_retrieval_hook:
 *         debug_lv1("\n----- ENTERING POST-RETRIEVAL HOOK -----\n")
 */

#line 529 "dsproc3/core.pyx"
  __pyx_v_status = 1;

  /* "dsproc3/core.pyx":530
 *     cdef int   status
 *     status = 1
 *     if _post_retrieval_hook:             # <<<<<<<<<<<<<<
 *         debug_lv1("\n----- ENTERING POST-RETRIEVAL HOOK -----\n")
 *         status = _post_retrieval_hook(
 */

#line 530 "dsproc3/core.pyx"
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 530 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 530 "dsproc3/core.pyx"
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 530 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 530 "dsproc3/core.pyx"
  if (__pyx_t_2) {

    /* "dsproc3/core.pyx":531
 *     status = 1
 *     if _post_retrieval_hook:
 *         debug_lv1("\n----- ENTERING POST-RETRIEVAL HOOK -----\n")             # <<<<<<<<<<<<<<
 *         status = _post_retrieval_hook(
 *             _user_data, begin_date, end_date, ret_data)
 */

#line 531 "dsproc3/core.pyx"
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__debug_lv1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 531 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 531 "dsproc3/core.pyx"
    __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_28), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 531 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 531 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 531 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "dsproc3/core.pyx":532
 *     if _post_retrieval_hook:
 *         debug_lv1("\n----- ENTERING POST-RETRIEVAL HOOK -----\n")
 *         status = _post_retrieval_hook(             # <<<<<<<<<<<<<<
 *             _user_data, begin_date, end_date, ret_data)
 *         if status < 0:
 */

#line 532 "dsproc3/core.pyx"
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 532; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 532 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

    /* "dsproc3/core.pyx":533
 *         debug_lv1("\n----- ENTERING POST-RETRIEVAL HOOK -----\n")
 *         status = _post_retrieval_hook(
 *             _user_data, begin_date, end_date, ret_data)             # <<<<<<<<<<<<<<
 *         if status < 0:
 *             status_text = dsproc_get_status()
 */

#line 533 "dsproc3/core.pyx"
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___user_data); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 533 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 533 "dsproc3/core.pyx"
    __pyx_t_4 = __Pyx_PyInt_to_py_time_t(__pyx_v_begin_date); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 533 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 533 "dsproc3/core.pyx"
    __pyx_t_5 = __Pyx_PyInt_to_py_time_t(__pyx_v_end_date); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 533 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 533 "dsproc3/core.pyx"
    __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 532; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 533 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 533 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);

#line 533 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_1);

#line 533 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);

#line 533 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_4);

#line 533 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);

#line 533 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_5);

#line 533 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_v_ret_data);

#line 533 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_v_ret_data);

#line 533 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_v_ret_data);

#line 533 "dsproc3/core.pyx"
    __pyx_t_1 = 0;

#line 533 "dsproc3/core.pyx"
    __pyx_t_4 = 0;

#line 533 "dsproc3/core.pyx"
    __pyx_t_5 = 0;

#line 533 "dsproc3/core.pyx"
    __pyx_t_5 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 532; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 533 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 533 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 533 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;

#line 533 "dsproc3/core.pyx"
    __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_t_5); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 532; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 533 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 533 "dsproc3/core.pyx"
    __pyx_v_status = __pyx_t_7;

    /* "dsproc3/core.pyx":534
 *         status = _post_retrieval_hook(
 *             _user_data, begin_date, end_date, ret_data)
 *         if status < 0:             # <<<<<<<<<<<<<<
 *             status_text = dsproc_get_status()
 *             if not status_text:
 */

#line 534 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_status < 0);

#line 534 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":535
 *             _user_data, begin_date, end_date, ret_data)
 *         if status < 0:
 *             status_text = dsproc_get_status()             # <<<<<<<<<<<<<<
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by post_retrieval_hook function\n")
 */

#line 535 "dsproc3/core.pyx"
      __pyx_v_status_text = dsproc_get_status();

      /* "dsproc3/core.pyx":536
 *         if status < 0:
 *             status_text = dsproc_get_status()
 *             if not status_text:             # <<<<<<<<<<<<<<
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by post_retrieval_hook function\n")
 *         debug_lv1("----- EXITING POST-RETRIEVAL HOOK ------\n\n")
 */

#line 536 "dsproc3/core.pyx"
      __pyx_t_2 = (!(__pyx_v_status_text != 0));

#line 536 "dsproc3/core.pyx"
      if (__pyx_t_2) {

        /* "dsproc3/core.pyx":537
 *             status_text = dsproc_get_status()
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by post_retrieval_hook function\n")             # <<<<<<<<<<<<<<
 *         debug_lv1("----- EXITING POST-RETRIEVAL HOOK ------\n\n")
 * 
 */

#line 537 "dsproc3/core.pyx"
        __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__error); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 537; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 537 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 537 "dsproc3/core.pyx"
        __pyx_t_6 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_k_tuple_30), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 537; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 537 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 537 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 537 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 537 "dsproc3/core.pyx"
        goto __pyx_L5;

#line 537 "dsproc3/core.pyx"
      }

#line 537 "dsproc3/core.pyx"
      __pyx_L5:;

#line 537 "dsproc3/core.pyx"
      goto __pyx_L4;

#line 537 "dsproc3/core.pyx"
    }

#line 537 "dsproc3/core.pyx"
    __pyx_L4:;

    /* "dsproc3/core.pyx":538
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by post_retrieval_hook function\n")
 *         debug_lv1("----- EXITING POST-RETRIEVAL HOOK ------\n\n")             # <<<<<<<<<<<<<<
 * 
 *     return status
 */

#line 538 "dsproc3/core.pyx"
    __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__debug_lv1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 538 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 538 "dsproc3/core.pyx"
    __pyx_t_5 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_k_tuple_32), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 538 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 538 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 538 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 538 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 538 "dsproc3/core.pyx"
  }

#line 538 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":540
 *         debug_lv1("----- EXITING POST-RETRIEVAL HOOK ------\n\n")
 * 
 *     return status             # <<<<<<<<<<<<<<
 * 
 * def _run_pre_transform_hook(
 */

#line 540 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 540 "dsproc3/core.pyx"
  __pyx_t_5 = PyInt_FromLong(__pyx_v_status); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 540 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 540 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_5;

#line 540 "dsproc3/core.pyx"
  __pyx_t_5 = 0;

#line 540 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 540 "dsproc3/core.pyx"


#line 540 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 540 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 540 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 540 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 540 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 540 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 540 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 540 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 540 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core._run_post_retrieval_hook", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 540 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 540 "dsproc3/core.pyx"
  __pyx_L0:;

#line 540 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 540 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 540 "dsproc3/core.pyx"
  return __pyx_r;

#line 540 "dsproc3/core.pyx"
}

#line 540 "dsproc3/core.pyx"


#line 540 "dsproc3/core.pyx"
/* Python wrapper */

#line 540 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_45_run_pre_transform_hook(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 540 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_44_run_pre_transform_hook[] = "_run_pre_transform_hook(time_t begin_date, time_t end_date, ret_data)\nPrivate: Run the pre_transform_hook function.\n    \n    @param begin_date - the begin time of the current processing interval\n    @param end_date   - the end time of the current processing interval\n    @param ret_data   - the parent CDS.Group containing the retrieved data \n    @return\n      -  1 if processing should continue normally\n      -  0 if processing should skip the current processing interval\n           and continue on to the next one.\n      - -1 if a fatal error occurred and the process should exit.\n    \n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_45_run_pre_transform_hook = 
#line 540 "dsproc3/core.pyx"
{__Pyx_NAMESTR("_run_pre_transform_hook"), (PyCFunction)__pyx_pw_7dsproc3_4core_45_run_pre_transform_hook, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_44_run_pre_transform_hook)};

#line 540 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_45_run_pre_transform_hook(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  time_t __pyx_v_begin_date
#line 540 "dsproc3/core.pyx"
;
  time_t __pyx_v_end_date
#line 540 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_ret_data = 0
#line 540 "dsproc3/core.pyx"
;

#line 540 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 540 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 540 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("_run_pre_transform_hook (wrapper)", 0);

#line 540 "dsproc3/core.pyx"
  {

#line 540 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__begin_date,&__pyx_n_s__end_date,&__pyx_n_s__ret_data,0};

#line 540 "dsproc3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 540 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 540 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 540 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 540 "dsproc3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 540 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 540 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 540 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 540 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 540 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 540 "dsproc3/core.pyx"
      }

#line 540 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 540 "dsproc3/core.pyx"
      switch (pos_args) {

#line 540 "dsproc3/core.pyx"
        case  0:

#line 540 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__begin_date)) != 0)) kw_args--;
        else 
#line 540 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 540 "dsproc3/core.pyx"
        case  1:

#line 540 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__end_date)) != 0)) kw_args--;

#line 540 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("_run_pre_transform_hook", 1, 3, 3, 1); 
#line 540 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 540 "dsproc3/core.pyx"
        }

#line 540 "dsproc3/core.pyx"
        case  2:

#line 540 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ret_data)) != 0)) kw_args--;

#line 540 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("_run_pre_transform_hook", 1, 3, 3, 2); 
#line 540 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 540 "dsproc3/core.pyx"
        }

#line 540 "dsproc3/core.pyx"
      }

#line 540 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 540 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_run_pre_transform_hook") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 540 "dsproc3/core.pyx"
      }

#line 540 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 540 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 540 "dsproc3/core.pyx"
    } else {

#line 540 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 540 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 540 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 540 "dsproc3/core.pyx"
    }

#line 540 "dsproc3/core.pyx"
    __pyx_v_begin_date = __Pyx_PyInt_from_py_time_t(values[0]); if (unlikely((__pyx_v_begin_date == (time_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 543; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 540 "dsproc3/core.pyx"
    __pyx_v_end_date = __Pyx_PyInt_from_py_time_t(values[1]); if (unlikely((__pyx_v_end_date == (time_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 540 "dsproc3/core.pyx"
    __pyx_v_ret_data = values[2];

#line 540 "dsproc3/core.pyx"
  }

#line 540 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 540 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_run_pre_transform_hook", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 540 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 540 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 540 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core._run_pre_transform_hook", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 540 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 540 "dsproc3/core.pyx"
  return NULL;

#line 540 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 540 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_44_run_pre_transform_hook(__pyx_self, __pyx_v_begin_date, __pyx_v_end_date, __pyx_v_ret_data);

#line 540 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 540 "dsproc3/core.pyx"
  return __pyx_r;

#line 540 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":542
 *     return status
 * 
 * def _run_pre_transform_hook(             # <<<<<<<<<<<<<<
 *         time_t begin_date,
 *         time_t end_date,
 */

#line 542 "dsproc3/core.pyx"


#line 542 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_44_run_pre_transform_hook(CYTHON_UNUSED PyObject *__pyx_self, time_t __pyx_v_begin_date, time_t __pyx_v_end_date, PyObject *__pyx_v_ret_data) {
  char *__pyx_v_status_text
#line 542 "dsproc3/core.pyx"
;
  int __pyx_v_status
#line 542 "dsproc3/core.pyx"
;

#line 542 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 542 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("_run_pre_transform_hook", 0);

  /* "dsproc3/core.pyx":560
 *     cdef char *status_text
 *     cdef int   status
 *     status = 1             # <<<<<<<<<<<<<<
 *     if _pre_transform_hook:
 *         debug_lv1("\n----- ENTERING PRE-TRANSFORM HOOK ------\n")
 */

#line 560 "dsproc3/core.pyx"
  __pyx_v_status = 1;

  /* "dsproc3/core.pyx":561
 *     cdef int   status
 *     status = 1
 *     if _pre_transform_hook:             # <<<<<<<<<<<<<<
 *         debug_lv1("\n----- ENTERING PRE-TRANSFORM HOOK ------\n")
 *         status = _pre_transform_hook(
 */

#line 561 "dsproc3/core.pyx"
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___pre_transform_hook); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 561 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 561 "dsproc3/core.pyx"
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 561 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 561 "dsproc3/core.pyx"
  if (__pyx_t_2) {

    /* "dsproc3/core.pyx":562
 *     status = 1
 *     if _pre_transform_hook:
 *         debug_lv1("\n----- ENTERING PRE-TRANSFORM HOOK ------\n")             # <<<<<<<<<<<<<<
 *         status = _pre_transform_hook(
 *             _user_data, begin_date, end_date, ret_data)
 */

#line 562 "dsproc3/core.pyx"
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__debug_lv1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 562 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 562 "dsproc3/core.pyx"
    __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_34), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 562 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 562 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 562 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "dsproc3/core.pyx":563
 *     if _pre_transform_hook:
 *         debug_lv1("\n----- ENTERING PRE-TRANSFORM HOOK ------\n")
 *         status = _pre_transform_hook(             # <<<<<<<<<<<<<<
 *             _user_data, begin_date, end_date, ret_data)
 *         if status < 0:
 */

#line 563 "dsproc3/core.pyx"
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s___pre_transform_hook); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 563 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

    /* "dsproc3/core.pyx":564
 *         debug_lv1("\n----- ENTERING PRE-TRANSFORM HOOK ------\n")
 *         status = _pre_transform_hook(
 *             _user_data, begin_date, end_date, ret_data)             # <<<<<<<<<<<<<<
 *         if status < 0:
 *             status_text = dsproc_get_status()
 */

#line 564 "dsproc3/core.pyx"
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___user_data); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 564 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 564 "dsproc3/core.pyx"
    __pyx_t_4 = __Pyx_PyInt_to_py_time_t(__pyx_v_begin_date); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 564 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 564 "dsproc3/core.pyx"
    __pyx_t_5 = __Pyx_PyInt_to_py_time_t(__pyx_v_end_date); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 564 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 564 "dsproc3/core.pyx"
    __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 564 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 564 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);

#line 564 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_1);

#line 564 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);

#line 564 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_4);

#line 564 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);

#line 564 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_5);

#line 564 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_v_ret_data);

#line 564 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_v_ret_data);

#line 564 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_v_ret_data);

#line 564 "dsproc3/core.pyx"
    __pyx_t_1 = 0;

#line 564 "dsproc3/core.pyx"
    __pyx_t_4 = 0;

#line 564 "dsproc3/core.pyx"
    __pyx_t_5 = 0;

#line 564 "dsproc3/core.pyx"
    __pyx_t_5 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 564 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 564 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 564 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;

#line 564 "dsproc3/core.pyx"
    __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_t_5); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 564 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 564 "dsproc3/core.pyx"
    __pyx_v_status = __pyx_t_7;

    /* "dsproc3/core.pyx":565
 *         status = _pre_transform_hook(
 *             _user_data, begin_date, end_date, ret_data)
 *         if status < 0:             # <<<<<<<<<<<<<<
 *             status_text = dsproc_get_status()
 *             if not status_text:
 */

#line 565 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_status < 0);

#line 565 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":566
 *             _user_data, begin_date, end_date, ret_data)
 *         if status < 0:
 *             status_text = dsproc_get_status()             # <<<<<<<<<<<<<<
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by pre_transform_hook function\n")
 */

#line 566 "dsproc3/core.pyx"
      __pyx_v_status_text = dsproc_get_status();

      /* "dsproc3/core.pyx":567
 *         if status < 0:
 *             status_text = dsproc_get_status()
 *             if not status_text:             # <<<<<<<<<<<<<<
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by pre_transform_hook function\n")
 *         debug_lv1("----- EXITING PRE-TRANSFORM HOOK -------\n\n")
 */

#line 567 "dsproc3/core.pyx"
      __pyx_t_2 = (!(__pyx_v_status_text != 0));

#line 567 "dsproc3/core.pyx"
      if (__pyx_t_2) {

        /* "dsproc3/core.pyx":568
 *             status_text = dsproc_get_status()
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by pre_transform_hook function\n")             # <<<<<<<<<<<<<<
 *         debug_lv1("----- EXITING PRE-TRANSFORM HOOK -------\n\n")
 * 
 */

#line 568 "dsproc3/core.pyx"
        __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__error); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 568 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 568 "dsproc3/core.pyx"
        __pyx_t_6 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_k_tuple_36), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 568 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 568 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 568 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 568 "dsproc3/core.pyx"
        goto __pyx_L5;

#line 568 "dsproc3/core.pyx"
      }

#line 568 "dsproc3/core.pyx"
      __pyx_L5:;

#line 568 "dsproc3/core.pyx"
      goto __pyx_L4;

#line 568 "dsproc3/core.pyx"
    }

#line 568 "dsproc3/core.pyx"
    __pyx_L4:;

    /* "dsproc3/core.pyx":569
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by pre_transform_hook function\n")
 *         debug_lv1("----- EXITING PRE-TRANSFORM HOOK -------\n\n")             # <<<<<<<<<<<<<<
 * 
 *     return status
 */

#line 569 "dsproc3/core.pyx"
    __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__debug_lv1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 569 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 569 "dsproc3/core.pyx"
    __pyx_t_5 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_k_tuple_38), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 569 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 569 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 569 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 569 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 569 "dsproc3/core.pyx"
  }

#line 569 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":571
 *         debug_lv1("----- EXITING PRE-TRANSFORM HOOK -------\n\n")
 * 
 *     return status             # <<<<<<<<<<<<<<
 * 
 * def _run_post_transform_hook(
 */

#line 571 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 571 "dsproc3/core.pyx"
  __pyx_t_5 = PyInt_FromLong(__pyx_v_status); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 571 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 571 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_5;

#line 571 "dsproc3/core.pyx"
  __pyx_t_5 = 0;

#line 571 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 571 "dsproc3/core.pyx"


#line 571 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 571 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 571 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 571 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 571 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 571 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 571 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 571 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 571 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core._run_pre_transform_hook", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 571 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 571 "dsproc3/core.pyx"
  __pyx_L0:;

#line 571 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 571 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 571 "dsproc3/core.pyx"
  return __pyx_r;

#line 571 "dsproc3/core.pyx"
}

#line 571 "dsproc3/core.pyx"


#line 571 "dsproc3/core.pyx"
/* Python wrapper */

#line 571 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_47_run_post_transform_hook(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 571 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_46_run_post_transform_hook[] = "_run_post_transform_hook(time_t begin_date, time_t end_date, trans_data)\nPrivate: Run the post_transform_hook function.\n    \n    @param begin_date - the begin time of the current processing interval\n    @param end_date   - the end time of the current processing interval\n    @param trans_data - the parent CDS.Group containing the transformed data\n    \n    @return\n      -  1 if processing should continue normally\n      -  0 if processing should skip the current processing interval\n           and continue on to the next one.\n      - -1 if a fatal error occurred and the process should exit.\n    \n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_47_run_post_transform_hook = 
#line 571 "dsproc3/core.pyx"
{__Pyx_NAMESTR("_run_post_transform_hook"), (PyCFunction)__pyx_pw_7dsproc3_4core_47_run_post_transform_hook, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_46_run_post_transform_hook)};

#line 571 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_47_run_post_transform_hook(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  time_t __pyx_v_begin_date
#line 571 "dsproc3/core.pyx"
;
  time_t __pyx_v_end_date
#line 571 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_trans_data = 0
#line 571 "dsproc3/core.pyx"
;

#line 571 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 571 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 571 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("_run_post_transform_hook (wrapper)", 0);

#line 571 "dsproc3/core.pyx"
  {

#line 571 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__begin_date,&__pyx_n_s__end_date,&__pyx_n_s__trans_data,0};

#line 571 "dsproc3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 571 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 571 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 571 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 571 "dsproc3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 571 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 571 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 571 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 571 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 571 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 571 "dsproc3/core.pyx"
      }

#line 571 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 571 "dsproc3/core.pyx"
      switch (pos_args) {

#line 571 "dsproc3/core.pyx"
        case  0:

#line 571 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__begin_date)) != 0)) kw_args--;
        else 
#line 571 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 571 "dsproc3/core.pyx"
        case  1:

#line 571 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__end_date)) != 0)) kw_args--;

#line 571 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("_run_post_transform_hook", 1, 3, 3, 1); 
#line 571 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 571 "dsproc3/core.pyx"
        }

#line 571 "dsproc3/core.pyx"
        case  2:

#line 571 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__trans_data)) != 0)) kw_args--;

#line 571 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("_run_post_transform_hook", 1, 3, 3, 2); 
#line 571 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 571 "dsproc3/core.pyx"
        }

#line 571 "dsproc3/core.pyx"
      }

#line 571 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 571 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_run_post_transform_hook") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 571 "dsproc3/core.pyx"
      }

#line 571 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 571 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 571 "dsproc3/core.pyx"
    } else {

#line 571 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 571 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 571 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 571 "dsproc3/core.pyx"
    }

#line 571 "dsproc3/core.pyx"
    __pyx_v_begin_date = __Pyx_PyInt_from_py_time_t(values[0]); if (unlikely((__pyx_v_begin_date == (time_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 574; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 571 "dsproc3/core.pyx"
    __pyx_v_end_date = __Pyx_PyInt_from_py_time_t(values[1]); if (unlikely((__pyx_v_end_date == (time_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 575; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 571 "dsproc3/core.pyx"
    __pyx_v_trans_data = values[2];

#line 571 "dsproc3/core.pyx"
  }

#line 571 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 571 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_run_post_transform_hook", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 571 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 571 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 571 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core._run_post_transform_hook", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 571 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 571 "dsproc3/core.pyx"
  return NULL;

#line 571 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 571 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_46_run_post_transform_hook(__pyx_self, __pyx_v_begin_date, __pyx_v_end_date, __pyx_v_trans_data);

#line 571 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 571 "dsproc3/core.pyx"
  return __pyx_r;

#line 571 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":573
 *     return status
 * 
 * def _run_post_transform_hook(             # <<<<<<<<<<<<<<
 *         time_t begin_date,
 *         time_t end_date,
 */

#line 573 "dsproc3/core.pyx"


#line 573 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_46_run_post_transform_hook(CYTHON_UNUSED PyObject *__pyx_self, time_t __pyx_v_begin_date, time_t __pyx_v_end_date, PyObject *__pyx_v_trans_data) {
  char *__pyx_v_status_text
#line 573 "dsproc3/core.pyx"
;
  int __pyx_v_status
#line 573 "dsproc3/core.pyx"
;

#line 573 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 573 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("_run_post_transform_hook", 0);

  /* "dsproc3/core.pyx":592
 *     cdef char *status_text
 *     cdef int   status
 *     status = 1             # <<<<<<<<<<<<<<
 *     if _post_transform_hook:
 *         debug_lv1("\n----- ENTERING POST-TRANSFORM HOOK -----\n")
 */

#line 592 "dsproc3/core.pyx"
  __pyx_v_status = 1;

  /* "dsproc3/core.pyx":593
 *     cdef int   status
 *     status = 1
 *     if _post_transform_hook:             # <<<<<<<<<<<<<<
 *         debug_lv1("\n----- ENTERING POST-TRANSFORM HOOK -----\n")
 *         status = _post_transform_hook(
 */

#line 593 "dsproc3/core.pyx"
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 593 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 593 "dsproc3/core.pyx"
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 593 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 593 "dsproc3/core.pyx"
  if (__pyx_t_2) {

    /* "dsproc3/core.pyx":594
 *     status = 1
 *     if _post_transform_hook:
 *         debug_lv1("\n----- ENTERING POST-TRANSFORM HOOK -----\n")             # <<<<<<<<<<<<<<
 *         status = _post_transform_hook(
 *             _user_data, begin_date, end_date, trans_data)
 */

#line 594 "dsproc3/core.pyx"
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__debug_lv1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 594 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 594 "dsproc3/core.pyx"
    __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_40), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 594 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 594 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 594 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "dsproc3/core.pyx":595
 *     if _post_transform_hook:
 *         debug_lv1("\n----- ENTERING POST-TRANSFORM HOOK -----\n")
 *         status = _post_transform_hook(             # <<<<<<<<<<<<<<
 *             _user_data, begin_date, end_date, trans_data)
 *         if status < 0:
 */

#line 595 "dsproc3/core.pyx"
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 595 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

    /* "dsproc3/core.pyx":596
 *         debug_lv1("\n----- ENTERING POST-TRANSFORM HOOK -----\n")
 *         status = _post_transform_hook(
 *             _user_data, begin_date, end_date, trans_data)             # <<<<<<<<<<<<<<
 *         if status < 0:
 *             status_text = dsproc_get_status()
 */

#line 596 "dsproc3/core.pyx"
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___user_data); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 596 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 596 "dsproc3/core.pyx"
    __pyx_t_4 = __Pyx_PyInt_to_py_time_t(__pyx_v_begin_date); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 596 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 596 "dsproc3/core.pyx"
    __pyx_t_5 = __Pyx_PyInt_to_py_time_t(__pyx_v_end_date); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 596 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 596 "dsproc3/core.pyx"
    __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 596 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 596 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);

#line 596 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_1);

#line 596 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);

#line 596 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_4);

#line 596 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);

#line 596 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_5);

#line 596 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_v_trans_data);

#line 596 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_v_trans_data);

#line 596 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_v_trans_data);

#line 596 "dsproc3/core.pyx"
    __pyx_t_1 = 0;

#line 596 "dsproc3/core.pyx"
    __pyx_t_4 = 0;

#line 596 "dsproc3/core.pyx"
    __pyx_t_5 = 0;

#line 596 "dsproc3/core.pyx"
    __pyx_t_5 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 596 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 596 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 596 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;

#line 596 "dsproc3/core.pyx"
    __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_t_5); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 596 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 596 "dsproc3/core.pyx"
    __pyx_v_status = __pyx_t_7;

    /* "dsproc3/core.pyx":597
 *         status = _post_transform_hook(
 *             _user_data, begin_date, end_date, trans_data)
 *         if status < 0:             # <<<<<<<<<<<<<<
 *             status_text = dsproc_get_status()
 *             if not status_text:
 */

#line 597 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_status < 0);

#line 597 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":598
 *             _user_data, begin_date, end_date, trans_data)
 *         if status < 0:
 *             status_text = dsproc_get_status()             # <<<<<<<<<<<<<<
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by post_transform_hook function\n")
 */

#line 598 "dsproc3/core.pyx"
      __pyx_v_status_text = dsproc_get_status();

      /* "dsproc3/core.pyx":599
 *         if status < 0:
 *             status_text = dsproc_get_status()
 *             if not status_text:             # <<<<<<<<<<<<<<
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by post_transform_hook function\n")
 *         debug_lv1("----- EXITING POST-TRANSFORM HOOK ------\n\n")
 */

#line 599 "dsproc3/core.pyx"
      __pyx_t_2 = (!(__pyx_v_status_text != 0));

#line 599 "dsproc3/core.pyx"
      if (__pyx_t_2) {

        /* "dsproc3/core.pyx":600
 *             status_text = dsproc_get_status()
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by post_transform_hook function\n")             # <<<<<<<<<<<<<<
 *         debug_lv1("----- EXITING POST-TRANSFORM HOOK ------\n\n")
 * 
 */

#line 600 "dsproc3/core.pyx"
        __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__error); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 600 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 600 "dsproc3/core.pyx"
        __pyx_t_6 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_k_tuple_42), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 600 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 600 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 600 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 600 "dsproc3/core.pyx"
        goto __pyx_L5;

#line 600 "dsproc3/core.pyx"
      }

#line 600 "dsproc3/core.pyx"
      __pyx_L5:;

#line 600 "dsproc3/core.pyx"
      goto __pyx_L4;

#line 600 "dsproc3/core.pyx"
    }

#line 600 "dsproc3/core.pyx"
    __pyx_L4:;

    /* "dsproc3/core.pyx":601
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by post_transform_hook function\n")
 *         debug_lv1("----- EXITING POST-TRANSFORM HOOK ------\n\n")             # <<<<<<<<<<<<<<
 * 
 *     return status
 */

#line 601 "dsproc3/core.pyx"
    __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__debug_lv1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 601 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 601 "dsproc3/core.pyx"
    __pyx_t_5 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_k_tuple_44), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 601 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 601 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 601 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 601 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 601 "dsproc3/core.pyx"
  }

#line 601 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":603
 *         debug_lv1("----- EXITING POST-TRANSFORM HOOK ------\n\n")
 * 
 *     return status             # <<<<<<<<<<<<<<
 * 
 * def _run_process_file_hook(
 */

#line 603 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 603 "dsproc3/core.pyx"
  __pyx_t_5 = PyInt_FromLong(__pyx_v_status); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 603 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 603 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_5;

#line 603 "dsproc3/core.pyx"
  __pyx_t_5 = 0;

#line 603 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 603 "dsproc3/core.pyx"


#line 603 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 603 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 603 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 603 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 603 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 603 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 603 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 603 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 603 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core._run_post_transform_hook", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 603 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 603 "dsproc3/core.pyx"
  __pyx_L0:;

#line 603 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 603 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 603 "dsproc3/core.pyx"
  return __pyx_r;

#line 603 "dsproc3/core.pyx"
}

#line 603 "dsproc3/core.pyx"


#line 603 "dsproc3/core.pyx"
/* Python wrapper */

#line 603 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_49_run_process_file_hook(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 603 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_48_run_process_file_hook[] = "_run_process_file_hook(char *input_dir, char *file_name)\nPrivate: Run the process_file_hook function.\n    \n    @param input_dir   - full path to the input directory\n    @param file_name   - name of the file to process\n    \n    @return\n      -  1 if processing should continue normally\n      -  0 if processing should skip the current file\n           and continue on to the next one.\n      - -1 if a fatal error occurred and the process should exit.\n    \n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_49_run_process_file_hook = 
#line 603 "dsproc3/core.pyx"
{__Pyx_NAMESTR("_run_process_file_hook"), (PyCFunction)__pyx_pw_7dsproc3_4core_49_run_process_file_hook, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_48_run_process_file_hook)};

#line 603 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_49_run_process_file_hook(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_input_dir
#line 603 "dsproc3/core.pyx"
;
  char *__pyx_v_file_name
#line 603 "dsproc3/core.pyx"
;

#line 603 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 603 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 603 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("_run_process_file_hook (wrapper)", 0);

#line 603 "dsproc3/core.pyx"
  {

#line 603 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__input_dir,&__pyx_n_s__file_name,0};

#line 603 "dsproc3/core.pyx"
    PyObject* values[2] = {0,0};

#line 603 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 603 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 603 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 603 "dsproc3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 603 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 603 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 603 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 603 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 603 "dsproc3/core.pyx"
      }

#line 603 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 603 "dsproc3/core.pyx"
      switch (pos_args) {

#line 603 "dsproc3/core.pyx"
        case  0:

#line 603 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__input_dir)) != 0)) kw_args--;
        else 
#line 603 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 603 "dsproc3/core.pyx"
        case  1:

#line 603 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__file_name)) != 0)) kw_args--;

#line 603 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("_run_process_file_hook", 1, 2, 2, 1); 
#line 603 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 605; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 603 "dsproc3/core.pyx"
        }

#line 603 "dsproc3/core.pyx"
      }

#line 603 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 603 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_run_process_file_hook") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 605; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 603 "dsproc3/core.pyx"
      }

#line 603 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 603 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 603 "dsproc3/core.pyx"
    } else {

#line 603 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 603 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 603 "dsproc3/core.pyx"
    }

#line 603 "dsproc3/core.pyx"
    __pyx_v_input_dir = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_input_dir) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 603 "dsproc3/core.pyx"
    __pyx_v_file_name = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_file_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 607; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 603 "dsproc3/core.pyx"
  }

#line 603 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 603 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_run_process_file_hook", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 603 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 605; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 603 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 603 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core._run_process_file_hook", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 603 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 603 "dsproc3/core.pyx"
  return NULL;

#line 603 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 603 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_48_run_process_file_hook(__pyx_self, __pyx_v_input_dir, __pyx_v_file_name);

#line 603 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 603 "dsproc3/core.pyx"
  return __pyx_r;

#line 603 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":605
 *     return status
 * 
 * def _run_process_file_hook(             # <<<<<<<<<<<<<<
 *         char *input_dir,
 *         char *file_name):
 */

#line 605 "dsproc3/core.pyx"


#line 605 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_48_run_process_file_hook(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_input_dir, char *__pyx_v_file_name) {
  char *__pyx_v_status_text
#line 605 "dsproc3/core.pyx"
;
  int __pyx_v_status
#line 605 "dsproc3/core.pyx"
;

#line 605 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 605 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("_run_process_file_hook", 0);

  /* "dsproc3/core.pyx":622
 *     cdef char *status_text
 *     cdef int   status
 *     status = 1             # <<<<<<<<<<<<<<
 *     if _process_file_hook:
 *         debug_lv1("\n----- ENTERING PROCESS FILE HOOK -----\n")
 */

#line 622 "dsproc3/core.pyx"
  __pyx_v_status = 1;

  /* "dsproc3/core.pyx":623
 *     cdef int   status
 *     status = 1
 *     if _process_file_hook:             # <<<<<<<<<<<<<<
 *         debug_lv1("\n----- ENTERING PROCESS FILE HOOK -----\n")
 *         status = _process_file_hook(
 */

#line 623 "dsproc3/core.pyx"
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___process_file_hook); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 623 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 623 "dsproc3/core.pyx"
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 623; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 623 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 623 "dsproc3/core.pyx"
  if (__pyx_t_2) {

    /* "dsproc3/core.pyx":624
 *     status = 1
 *     if _process_file_hook:
 *         debug_lv1("\n----- ENTERING PROCESS FILE HOOK -----\n")             # <<<<<<<<<<<<<<
 *         status = _process_file_hook(
 *             _user_data, input_dir, file_name)
 */

#line 624 "dsproc3/core.pyx"
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__debug_lv1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 624; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 624 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 624 "dsproc3/core.pyx"
    __pyx_t_3 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_k_tuple_46), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 624; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 624 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 624 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 624 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "dsproc3/core.pyx":625
 *     if _process_file_hook:
 *         debug_lv1("\n----- ENTERING PROCESS FILE HOOK -----\n")
 *         status = _process_file_hook(             # <<<<<<<<<<<<<<
 *             _user_data, input_dir, file_name)
 *         if status < 0:
 */

#line 625 "dsproc3/core.pyx"
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s___process_file_hook); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 625 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

    /* "dsproc3/core.pyx":626
 *         debug_lv1("\n----- ENTERING PROCESS FILE HOOK -----\n")
 *         status = _process_file_hook(
 *             _user_data, input_dir, file_name)             # <<<<<<<<<<<<<<
 *         if status < 0:
 *             status_text = dsproc_get_status()
 */

#line 626 "dsproc3/core.pyx"
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s___user_data); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 626 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 626 "dsproc3/core.pyx"
    __pyx_t_4 = PyBytes_FromString(__pyx_v_input_dir); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 626 "dsproc3/core.pyx"
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));

#line 626 "dsproc3/core.pyx"
    __pyx_t_5 = PyBytes_FromString(__pyx_v_file_name); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 626 "dsproc3/core.pyx"
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));

#line 626 "dsproc3/core.pyx"
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 626 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 626 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);

#line 626 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_1);

#line 626 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 1, ((PyObject *)__pyx_t_4));

#line 626 "dsproc3/core.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_t_4));

#line 626 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 2, ((PyObject *)__pyx_t_5));

#line 626 "dsproc3/core.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_t_5));

#line 626 "dsproc3/core.pyx"
    __pyx_t_1 = 0;

#line 626 "dsproc3/core.pyx"
    __pyx_t_4 = 0;

#line 626 "dsproc3/core.pyx"
    __pyx_t_5 = 0;

#line 626 "dsproc3/core.pyx"
    __pyx_t_5 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 626 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 626 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 626 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;

#line 626 "dsproc3/core.pyx"
    __pyx_t_7 = __Pyx_PyInt_AsInt(__pyx_t_5); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 626 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 626 "dsproc3/core.pyx"
    __pyx_v_status = __pyx_t_7;

    /* "dsproc3/core.pyx":627
 *         status = _process_file_hook(
 *             _user_data, input_dir, file_name)
 *         if status < 0:             # <<<<<<<<<<<<<<
 *             status_text = dsproc_get_status()
 *             if not status_text:
 */

#line 627 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_status < 0);

#line 627 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":628
 *             _user_data, input_dir, file_name)
 *         if status < 0:
 *             status_text = dsproc_get_status()             # <<<<<<<<<<<<<<
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by process_file_hook function\n")
 */

#line 628 "dsproc3/core.pyx"
      __pyx_v_status_text = dsproc_get_status();

      /* "dsproc3/core.pyx":629
 *         if status < 0:
 *             status_text = dsproc_get_status()
 *             if not status_text:             # <<<<<<<<<<<<<<
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by process_file_hook function\n")
 *         debug_lv1("----- EXITING PROCESS FILE HOOK ------\n\n")
 */

#line 629 "dsproc3/core.pyx"
      __pyx_t_2 = (!(__pyx_v_status_text != 0));

#line 629 "dsproc3/core.pyx"
      if (__pyx_t_2) {

        /* "dsproc3/core.pyx":630
 *             status_text = dsproc_get_status()
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by process_file_hook function\n")             # <<<<<<<<<<<<<<
 *         debug_lv1("----- EXITING PROCESS FILE HOOK ------\n\n")
 * 
 */

#line 630 "dsproc3/core.pyx"
        __pyx_t_5 = __Pyx_GetName(__pyx_m, __pyx_n_s__error); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 630 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 630 "dsproc3/core.pyx"
        __pyx_t_6 = PyObject_Call(__pyx_t_5, ((PyObject *)__pyx_k_tuple_48), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 630 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 630 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 630 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 630 "dsproc3/core.pyx"
        goto __pyx_L5;

#line 630 "dsproc3/core.pyx"
      }

#line 630 "dsproc3/core.pyx"
      __pyx_L5:;

#line 630 "dsproc3/core.pyx"
      goto __pyx_L4;

#line 630 "dsproc3/core.pyx"
    }

#line 630 "dsproc3/core.pyx"
    __pyx_L4:;

    /* "dsproc3/core.pyx":631
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by process_file_hook function\n")
 *         debug_lv1("----- EXITING PROCESS FILE HOOK ------\n\n")             # <<<<<<<<<<<<<<
 * 
 *     return status
 */

#line 631 "dsproc3/core.pyx"
    __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__debug_lv1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 631 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 631 "dsproc3/core.pyx"
    __pyx_t_5 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_k_tuple_50), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 631 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 631 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 631 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 631 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 631 "dsproc3/core.pyx"
  }

#line 631 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":633
 *         debug_lv1("----- EXITING PROCESS FILE HOOK ------\n\n")
 * 
 *     return status             # <<<<<<<<<<<<<<
 * ##############################################################################
 * # ported from dsproc3.h
 */

#line 633 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 633 "dsproc3/core.pyx"
  __pyx_t_5 = PyInt_FromLong(__pyx_v_status); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 633 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 633 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_5;

#line 633 "dsproc3/core.pyx"
  __pyx_t_5 = 0;

#line 633 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 633 "dsproc3/core.pyx"


#line 633 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 633 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 633 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 633 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 633 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 633 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 633 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 633 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 633 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core._run_process_file_hook", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 633 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 633 "dsproc3/core.pyx"
  __pyx_L0:;

#line 633 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 633 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 633 "dsproc3/core.pyx"
  return __pyx_r;

#line 633 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":639
 * 
 * # helper function for freeing memory allocated by libdsproc3
 * cdef void _free(void *address):             # <<<<<<<<<<<<<<
 *     free(address)
 * 
 */

#line 639 "dsproc3/core.pyx"


#line 639 "dsproc3/core.pyx"
static void __pyx_f_7dsproc3_4core__free(void *__pyx_v_address) {
  __Pyx_RefNannyDeclarations

#line 639 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("_free", 0);

  /* "dsproc3/core.pyx":640
 * # helper function for freeing memory allocated by libdsproc3
 * cdef void _free(void *address):
 *     free(address)             # <<<<<<<<<<<<<<
 * 
 * cdef inline void* _alloc_single(CDSDataType type, object initial_value=None):
 */

#line 640 "dsproc3/core.pyx"
  free(__pyx_v_address);

#line 640 "dsproc3/core.pyx"


#line 640 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 640 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":642
 *     free(address)
 * 
 * cdef inline void* _alloc_single(CDSDataType type, object initial_value=None):             # <<<<<<<<<<<<<<
 *     """Allocates a single value of the given type and return its address."""
 *     cdef void *retval = NULL
 */

#line 642 "dsproc3/core.pyx"


#line 642 "dsproc3/core.pyx"
static CYTHON_INLINE void *__pyx_f_7dsproc3_4core__alloc_single(CDSDataType __pyx_v_type, struct __pyx_opt_args_7dsproc3_4core__alloc_single *__pyx_optional_args) {

#line 642 "dsproc3/core.pyx"
  PyObject *__pyx_v_initial_value = ((PyObject *)Py_None);
  void *__pyx_v_retval
#line 642 "dsproc3/core.pyx"
;

#line 642 "dsproc3/core.pyx"
  void *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  char __pyx_t_2;
  short __pyx_t_3;
  int __pyx_t_4;
  float __pyx_t_5;
  double __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 642 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("_alloc_single", 0);

#line 642 "dsproc3/core.pyx"
  if (__pyx_optional_args) {

#line 642 "dsproc3/core.pyx"
    if (__pyx_optional_args->__pyx_n > 0) {

#line 642 "dsproc3/core.pyx"
      __pyx_v_initial_value = __pyx_optional_args->initial_value;

#line 642 "dsproc3/core.pyx"
    }

#line 642 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":644
 * cdef inline void* _alloc_single(CDSDataType type, object initial_value=None):
 *     """Allocates a single value of the given type and return its address."""
 *     cdef void *retval = NULL             # <<<<<<<<<<<<<<
 *     if type == CDS_NAT:
 *         raise ValueError, "CDS_NAT"
 */

#line 644 "dsproc3/core.pyx"
  __pyx_v_retval = NULL;

  /* "dsproc3/core.pyx":645
 *     """Allocates a single value of the given type and return its address."""
 *     cdef void *retval = NULL
 *     if type == CDS_NAT:             # <<<<<<<<<<<<<<
 *         raise ValueError, "CDS_NAT"
 *     elif type == CDS_CHAR:
 */

#line 645 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_NAT);

#line 645 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":646
 *     cdef void *retval = NULL
 *     if type == CDS_NAT:
 *         raise ValueError, "CDS_NAT"             # <<<<<<<<<<<<<<
 *     elif type == CDS_CHAR:
 *         retval = malloc(sizeof(char))
 */

#line 646 "dsproc3/core.pyx"
    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_n_s__CDS_NAT), 0, 0);

#line 646 "dsproc3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 646 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 646 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":647
 *     if type == CDS_NAT:
 *         raise ValueError, "CDS_NAT"
 *     elif type == CDS_CHAR:             # <<<<<<<<<<<<<<
 *         retval = malloc(sizeof(char))
 *         if initial_value is not None:
 */

#line 647 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_CHAR);

#line 647 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":648
 *         raise ValueError, "CDS_NAT"
 *     elif type == CDS_CHAR:
 *         retval = malloc(sizeof(char))             # <<<<<<<<<<<<<<
 *         if initial_value is not None:
 *             (<char*>retval)[0] = initial_value
 */

#line 648 "dsproc3/core.pyx"
    __pyx_v_retval = malloc((sizeof(char)));

    /* "dsproc3/core.pyx":649
 *     elif type == CDS_CHAR:
 *         retval = malloc(sizeof(char))
 *         if initial_value is not None:             # <<<<<<<<<<<<<<
 *             (<char*>retval)[0] = initial_value
 *     elif type == CDS_BYTE:
 */

#line 649 "dsproc3/core.pyx"
    __pyx_t_1 = (__pyx_v_initial_value != Py_None);

#line 649 "dsproc3/core.pyx"
    if (__pyx_t_1) {

      /* "dsproc3/core.pyx":650
 *         retval = malloc(sizeof(char))
 *         if initial_value is not None:
 *             (<char*>retval)[0] = initial_value             # <<<<<<<<<<<<<<
 *     elif type == CDS_BYTE:
 *         retval = malloc(sizeof(char))
 */

#line 650 "dsproc3/core.pyx"
      __pyx_t_2 = __Pyx_PyInt_AsChar(__pyx_v_initial_value); if (unlikely((__pyx_t_2 == (char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 650 "dsproc3/core.pyx"
      (((char *)__pyx_v_retval)[0]) = __pyx_t_2;

#line 650 "dsproc3/core.pyx"
      goto __pyx_L4;

#line 650 "dsproc3/core.pyx"
    }

#line 650 "dsproc3/core.pyx"
    __pyx_L4:;

#line 650 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 650 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":651
 *         if initial_value is not None:
 *             (<char*>retval)[0] = initial_value
 *     elif type == CDS_BYTE:             # <<<<<<<<<<<<<<
 *         retval = malloc(sizeof(char))
 *         if initial_value is not None:
 */

#line 651 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_BYTE);

#line 651 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":652
 *             (<char*>retval)[0] = initial_value
 *     elif type == CDS_BYTE:
 *         retval = malloc(sizeof(char))             # <<<<<<<<<<<<<<
 *         if initial_value is not None:
 *             (<char*>retval)[0] = initial_value
 */

#line 652 "dsproc3/core.pyx"
    __pyx_v_retval = malloc((sizeof(char)));

    /* "dsproc3/core.pyx":653
 *     elif type == CDS_BYTE:
 *         retval = malloc(sizeof(char))
 *         if initial_value is not None:             # <<<<<<<<<<<<<<
 *             (<char*>retval)[0] = initial_value
 *     elif type == CDS_SHORT:
 */

#line 653 "dsproc3/core.pyx"
    __pyx_t_1 = (__pyx_v_initial_value != Py_None);

#line 653 "dsproc3/core.pyx"
    if (__pyx_t_1) {

      /* "dsproc3/core.pyx":654
 *         retval = malloc(sizeof(char))
 *         if initial_value is not None:
 *             (<char*>retval)[0] = initial_value             # <<<<<<<<<<<<<<
 *     elif type == CDS_SHORT:
 *         retval = malloc(sizeof(short))
 */

#line 654 "dsproc3/core.pyx"
      __pyx_t_2 = __Pyx_PyInt_AsChar(__pyx_v_initial_value); if (unlikely((__pyx_t_2 == (char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 654; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 654 "dsproc3/core.pyx"
      (((char *)__pyx_v_retval)[0]) = __pyx_t_2;

#line 654 "dsproc3/core.pyx"
      goto __pyx_L5;

#line 654 "dsproc3/core.pyx"
    }

#line 654 "dsproc3/core.pyx"
    __pyx_L5:;

#line 654 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 654 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":655
 *         if initial_value is not None:
 *             (<char*>retval)[0] = initial_value
 *     elif type == CDS_SHORT:             # <<<<<<<<<<<<<<
 *         retval = malloc(sizeof(short))
 *         if initial_value is not None:
 */

#line 655 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_SHORT);

#line 655 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":656
 *             (<char*>retval)[0] = initial_value
 *     elif type == CDS_SHORT:
 *         retval = malloc(sizeof(short))             # <<<<<<<<<<<<<<
 *         if initial_value is not None:
 *             (<short*>retval)[0] = initial_value
 */

#line 656 "dsproc3/core.pyx"
    __pyx_v_retval = malloc((sizeof(short)));

    /* "dsproc3/core.pyx":657
 *     elif type == CDS_SHORT:
 *         retval = malloc(sizeof(short))
 *         if initial_value is not None:             # <<<<<<<<<<<<<<
 *             (<short*>retval)[0] = initial_value
 *     elif type == CDS_INT:
 */

#line 657 "dsproc3/core.pyx"
    __pyx_t_1 = (__pyx_v_initial_value != Py_None);

#line 657 "dsproc3/core.pyx"
    if (__pyx_t_1) {

      /* "dsproc3/core.pyx":658
 *         retval = malloc(sizeof(short))
 *         if initial_value is not None:
 *             (<short*>retval)[0] = initial_value             # <<<<<<<<<<<<<<
 *     elif type == CDS_INT:
 *         retval = malloc(sizeof(int))
 */

#line 658 "dsproc3/core.pyx"
      __pyx_t_3 = __Pyx_PyInt_AsShort(__pyx_v_initial_value); if (unlikely((__pyx_t_3 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 658 "dsproc3/core.pyx"
      (((short *)__pyx_v_retval)[0]) = __pyx_t_3;

#line 658 "dsproc3/core.pyx"
      goto __pyx_L6;

#line 658 "dsproc3/core.pyx"
    }

#line 658 "dsproc3/core.pyx"
    __pyx_L6:;

#line 658 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 658 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":659
 *         if initial_value is not None:
 *             (<short*>retval)[0] = initial_value
 *     elif type == CDS_INT:             # <<<<<<<<<<<<<<
 *         retval = malloc(sizeof(int))
 *         if initial_value is not None:
 */

#line 659 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_INT);

#line 659 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":660
 *             (<short*>retval)[0] = initial_value
 *     elif type == CDS_INT:
 *         retval = malloc(sizeof(int))             # <<<<<<<<<<<<<<
 *         if initial_value is not None:
 *             (<int*>retval)[0] = initial_value
 */

#line 660 "dsproc3/core.pyx"
    __pyx_v_retval = malloc((sizeof(int)));

    /* "dsproc3/core.pyx":661
 *     elif type == CDS_INT:
 *         retval = malloc(sizeof(int))
 *         if initial_value is not None:             # <<<<<<<<<<<<<<
 *             (<int*>retval)[0] = initial_value
 *     elif type == CDS_FLOAT:
 */

#line 661 "dsproc3/core.pyx"
    __pyx_t_1 = (__pyx_v_initial_value != Py_None);

#line 661 "dsproc3/core.pyx"
    if (__pyx_t_1) {

      /* "dsproc3/core.pyx":662
 *         retval = malloc(sizeof(int))
 *         if initial_value is not None:
 *             (<int*>retval)[0] = initial_value             # <<<<<<<<<<<<<<
 *     elif type == CDS_FLOAT:
 *         retval = malloc(sizeof(float))
 */

#line 662 "dsproc3/core.pyx"
      __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_v_initial_value); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 662 "dsproc3/core.pyx"
      (((int *)__pyx_v_retval)[0]) = __pyx_t_4;

#line 662 "dsproc3/core.pyx"
      goto __pyx_L7;

#line 662 "dsproc3/core.pyx"
    }

#line 662 "dsproc3/core.pyx"
    __pyx_L7:;

#line 662 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 662 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":663
 *         if initial_value is not None:
 *             (<int*>retval)[0] = initial_value
 *     elif type == CDS_FLOAT:             # <<<<<<<<<<<<<<
 *         retval = malloc(sizeof(float))
 *         if initial_value is not None:
 */

#line 663 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_FLOAT);

#line 663 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":664
 *             (<int*>retval)[0] = initial_value
 *     elif type == CDS_FLOAT:
 *         retval = malloc(sizeof(float))             # <<<<<<<<<<<<<<
 *         if initial_value is not None:
 *             (<float*>retval)[0] = initial_value
 */

#line 664 "dsproc3/core.pyx"
    __pyx_v_retval = malloc((sizeof(float)));

    /* "dsproc3/core.pyx":665
 *     elif type == CDS_FLOAT:
 *         retval = malloc(sizeof(float))
 *         if initial_value is not None:             # <<<<<<<<<<<<<<
 *             (<float*>retval)[0] = initial_value
 *     elif type == CDS_DOUBLE:
 */

#line 665 "dsproc3/core.pyx"
    __pyx_t_1 = (__pyx_v_initial_value != Py_None);

#line 665 "dsproc3/core.pyx"
    if (__pyx_t_1) {

      /* "dsproc3/core.pyx":666
 *         retval = malloc(sizeof(float))
 *         if initial_value is not None:
 *             (<float*>retval)[0] = initial_value             # <<<<<<<<<<<<<<
 *     elif type == CDS_DOUBLE:
 *         retval = malloc(sizeof(double))
 */

#line 666 "dsproc3/core.pyx"
      __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_v_initial_value); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 666 "dsproc3/core.pyx"
      (((float *)__pyx_v_retval)[0]) = __pyx_t_5;

#line 666 "dsproc3/core.pyx"
      goto __pyx_L8;

#line 666 "dsproc3/core.pyx"
    }

#line 666 "dsproc3/core.pyx"
    __pyx_L8:;

#line 666 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 666 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":667
 *         if initial_value is not None:
 *             (<float*>retval)[0] = initial_value
 *     elif type == CDS_DOUBLE:             # <<<<<<<<<<<<<<
 *         retval = malloc(sizeof(double))
 *         if initial_value is not None:
 */

#line 667 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_DOUBLE);

#line 667 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":668
 *             (<float*>retval)[0] = initial_value
 *     elif type == CDS_DOUBLE:
 *         retval = malloc(sizeof(double))             # <<<<<<<<<<<<<<
 *         if initial_value is not None:
 *             (<double*>retval)[0] = initial_value
 */

#line 668 "dsproc3/core.pyx"
    __pyx_v_retval = malloc((sizeof(double)));

    /* "dsproc3/core.pyx":669
 *     elif type == CDS_DOUBLE:
 *         retval = malloc(sizeof(double))
 *         if initial_value is not None:             # <<<<<<<<<<<<<<
 *             (<double*>retval)[0] = initial_value
 *     else:
 */

#line 669 "dsproc3/core.pyx"
    __pyx_t_1 = (__pyx_v_initial_value != Py_None);

#line 669 "dsproc3/core.pyx"
    if (__pyx_t_1) {

      /* "dsproc3/core.pyx":670
 *         retval = malloc(sizeof(double))
 *         if initial_value is not None:
 *             (<double*>retval)[0] = initial_value             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError, "Unknown CDSDataType %s" % type
 */

#line 670 "dsproc3/core.pyx"
      __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_initial_value); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 670; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 670 "dsproc3/core.pyx"
      (((double *)__pyx_v_retval)[0]) = __pyx_t_6;

#line 670 "dsproc3/core.pyx"
      goto __pyx_L9;

#line 670 "dsproc3/core.pyx"
    }

#line 670 "dsproc3/core.pyx"
    __pyx_L9:;

#line 670 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 670 "dsproc3/core.pyx"
  }

#line 670 "dsproc3/core.pyx"
  /*else*/ {

    /* "dsproc3/core.pyx":672
 *             (<double*>retval)[0] = initial_value
 *     else:
 *         raise ValueError, "Unknown CDSDataType %s" % type             # <<<<<<<<<<<<<<
 *     return retval
 * 
 */

#line 672 "dsproc3/core.pyx"
    __pyx_t_7 = PyInt_FromLong(__pyx_v_type); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 672; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 672 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 672 "dsproc3/core.pyx"
    __pyx_t_8 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_51), __pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 672; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 672 "dsproc3/core.pyx"
    __Pyx_GOTREF(((PyObject *)__pyx_t_8));

#line 672 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 672 "dsproc3/core.pyx"
    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_8), 0, 0);

#line 672 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_8)); __pyx_t_8 = 0;

#line 672 "dsproc3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 672; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 672 "dsproc3/core.pyx"
  }

#line 672 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":673
 *     else:
 *         raise ValueError, "Unknown CDSDataType %s" % type
 *     return retval             # <<<<<<<<<<<<<<
 * 
 * cdef inline object _convert_single(CDSDataType type, void *value):
 */

#line 673 "dsproc3/core.pyx"
  __pyx_r = __pyx_v_retval;

#line 673 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 673 "dsproc3/core.pyx"


#line 673 "dsproc3/core.pyx"
  __pyx_r = 0;

#line 673 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 673 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 673 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 673 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 673 "dsproc3/core.pyx"
  __Pyx_WriteUnraisable("dsproc3.core._alloc_single", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 673 "dsproc3/core.pyx"
  __pyx_r = 0;

#line 673 "dsproc3/core.pyx"
  __pyx_L0:;

#line 673 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 673 "dsproc3/core.pyx"
  return __pyx_r;

#line 673 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":675
 *     return retval
 * 
 * cdef inline object _convert_single(CDSDataType type, void *value):             # <<<<<<<<<<<<<<
 *     """Converts a single value at the given address to the given type
 *     and frees it."""
 */

#line 675 "dsproc3/core.pyx"


#line 675 "dsproc3/core.pyx"
static CYTHON_INLINE PyObject *__pyx_f_7dsproc3_4core__convert_single(CDSDataType __pyx_v_type, void *__pyx_v_value) {
  PyObject *__pyx_v_retval = 0
#line 675 "dsproc3/core.pyx"
;

#line 675 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 675 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("_convert_single", 0);

  /* "dsproc3/core.pyx":679
 *     and frees it."""
 *     cdef object retval
 *     if type == CDS_NAT:             # <<<<<<<<<<<<<<
 *         raise ValueError, "CDS_NAT"
 *     elif type == CDS_CHAR:
 */

#line 679 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_NAT);

#line 679 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":680
 *     cdef object retval
 *     if type == CDS_NAT:
 *         raise ValueError, "CDS_NAT"             # <<<<<<<<<<<<<<
 *     elif type == CDS_CHAR:
 *         retval = (<char*>value)[0];
 */

#line 680 "dsproc3/core.pyx"
    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_n_s__CDS_NAT), 0, 0);

#line 680 "dsproc3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 680; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 680 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 680 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":681
 *     if type == CDS_NAT:
 *         raise ValueError, "CDS_NAT"
 *     elif type == CDS_CHAR:             # <<<<<<<<<<<<<<
 *         retval = (<char*>value)[0];
 *         free(<char*>value)
 */

#line 681 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_CHAR);

#line 681 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":682
 *         raise ValueError, "CDS_NAT"
 *     elif type == CDS_CHAR:
 *         retval = (<char*>value)[0];             # <<<<<<<<<<<<<<
 *         free(<char*>value)
 *     elif type == CDS_BYTE:
 */

#line 682 "dsproc3/core.pyx"
    __pyx_t_2 = PyInt_FromLong((((char *)__pyx_v_value)[0])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 682; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 682 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 682 "dsproc3/core.pyx"
    __pyx_v_retval = __pyx_t_2;

#line 682 "dsproc3/core.pyx"
    __pyx_t_2 = 0;

    /* "dsproc3/core.pyx":683
 *     elif type == CDS_CHAR:
 *         retval = (<char*>value)[0];
 *         free(<char*>value)             # <<<<<<<<<<<<<<
 *     elif type == CDS_BYTE:
 *         retval = (<char*>value)[0];
 */

#line 683 "dsproc3/core.pyx"
    free(((char *)__pyx_v_value));

#line 683 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 683 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":684
 *         retval = (<char*>value)[0];
 *         free(<char*>value)
 *     elif type == CDS_BYTE:             # <<<<<<<<<<<<<<
 *         retval = (<char*>value)[0];
 *         free(<char*>value)
 */

#line 684 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_BYTE);

#line 684 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":685
 *         free(<char*>value)
 *     elif type == CDS_BYTE:
 *         retval = (<char*>value)[0];             # <<<<<<<<<<<<<<
 *         free(<char*>value)
 *     elif type == CDS_SHORT:
 */

#line 685 "dsproc3/core.pyx"
    __pyx_t_2 = PyInt_FromLong((((char *)__pyx_v_value)[0])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 685; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 685 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 685 "dsproc3/core.pyx"
    __pyx_v_retval = __pyx_t_2;

#line 685 "dsproc3/core.pyx"
    __pyx_t_2 = 0;

    /* "dsproc3/core.pyx":686
 *     elif type == CDS_BYTE:
 *         retval = (<char*>value)[0];
 *         free(<char*>value)             # <<<<<<<<<<<<<<
 *     elif type == CDS_SHORT:
 *         retval = (<short*>value)[0];
 */

#line 686 "dsproc3/core.pyx"
    free(((char *)__pyx_v_value));

#line 686 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 686 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":687
 *         retval = (<char*>value)[0];
 *         free(<char*>value)
 *     elif type == CDS_SHORT:             # <<<<<<<<<<<<<<
 *         retval = (<short*>value)[0];
 *         free(<short*>value)
 */

#line 687 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_SHORT);

#line 687 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":688
 *         free(<char*>value)
 *     elif type == CDS_SHORT:
 *         retval = (<short*>value)[0];             # <<<<<<<<<<<<<<
 *         free(<short*>value)
 *     elif type == CDS_INT:
 */

#line 688 "dsproc3/core.pyx"
    __pyx_t_2 = PyInt_FromLong((((short *)__pyx_v_value)[0])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 688 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 688 "dsproc3/core.pyx"
    __pyx_v_retval = __pyx_t_2;

#line 688 "dsproc3/core.pyx"
    __pyx_t_2 = 0;

    /* "dsproc3/core.pyx":689
 *     elif type == CDS_SHORT:
 *         retval = (<short*>value)[0];
 *         free(<short*>value)             # <<<<<<<<<<<<<<
 *     elif type == CDS_INT:
 *         retval = (<int*>value)[0];
 */

#line 689 "dsproc3/core.pyx"
    free(((short *)__pyx_v_value));

#line 689 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 689 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":690
 *         retval = (<short*>value)[0];
 *         free(<short*>value)
 *     elif type == CDS_INT:             # <<<<<<<<<<<<<<
 *         retval = (<int*>value)[0];
 *         free(<int*>value)
 */

#line 690 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_INT);

#line 690 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":691
 *         free(<short*>value)
 *     elif type == CDS_INT:
 *         retval = (<int*>value)[0];             # <<<<<<<<<<<<<<
 *         free(<int*>value)
 *     elif type == CDS_FLOAT:
 */

#line 691 "dsproc3/core.pyx"
    __pyx_t_2 = PyInt_FromLong((((int *)__pyx_v_value)[0])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 691 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 691 "dsproc3/core.pyx"
    __pyx_v_retval = __pyx_t_2;

#line 691 "dsproc3/core.pyx"
    __pyx_t_2 = 0;

    /* "dsproc3/core.pyx":692
 *     elif type == CDS_INT:
 *         retval = (<int*>value)[0];
 *         free(<int*>value)             # <<<<<<<<<<<<<<
 *     elif type == CDS_FLOAT:
 *         retval = (<float*>value)[0];
 */

#line 692 "dsproc3/core.pyx"
    free(((int *)__pyx_v_value));

#line 692 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 692 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":693
 *         retval = (<int*>value)[0];
 *         free(<int*>value)
 *     elif type == CDS_FLOAT:             # <<<<<<<<<<<<<<
 *         retval = (<float*>value)[0];
 *         free(<float*>value)
 */

#line 693 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_FLOAT);

#line 693 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":694
 *         free(<int*>value)
 *     elif type == CDS_FLOAT:
 *         retval = (<float*>value)[0];             # <<<<<<<<<<<<<<
 *         free(<float*>value)
 *     elif type == CDS_DOUBLE:
 */

#line 694 "dsproc3/core.pyx"
    __pyx_t_2 = PyFloat_FromDouble((((float *)__pyx_v_value)[0])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 694 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 694 "dsproc3/core.pyx"
    __pyx_v_retval = __pyx_t_2;

#line 694 "dsproc3/core.pyx"
    __pyx_t_2 = 0;

    /* "dsproc3/core.pyx":695
 *     elif type == CDS_FLOAT:
 *         retval = (<float*>value)[0];
 *         free(<float*>value)             # <<<<<<<<<<<<<<
 *     elif type == CDS_DOUBLE:
 *         retval = (<double*>value)[0];
 */

#line 695 "dsproc3/core.pyx"
    free(((float *)__pyx_v_value));

#line 695 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 695 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":696
 *         retval = (<float*>value)[0];
 *         free(<float*>value)
 *     elif type == CDS_DOUBLE:             # <<<<<<<<<<<<<<
 *         retval = (<double*>value)[0];
 *         free(<double*>value)
 */

#line 696 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_DOUBLE);

#line 696 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":697
 *         free(<float*>value)
 *     elif type == CDS_DOUBLE:
 *         retval = (<double*>value)[0];             # <<<<<<<<<<<<<<
 *         free(<double*>value)
 *     else:
 */

#line 697 "dsproc3/core.pyx"
    __pyx_t_2 = PyFloat_FromDouble((((double *)__pyx_v_value)[0])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 697 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 697 "dsproc3/core.pyx"
    __pyx_v_retval = __pyx_t_2;

#line 697 "dsproc3/core.pyx"
    __pyx_t_2 = 0;

    /* "dsproc3/core.pyx":698
 *     elif type == CDS_DOUBLE:
 *         retval = (<double*>value)[0];
 *         free(<double*>value)             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError, "Unknown CDSDataType %s" % type
 */

#line 698 "dsproc3/core.pyx"
    free(((double *)__pyx_v_value));

#line 698 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 698 "dsproc3/core.pyx"
  }

#line 698 "dsproc3/core.pyx"
  /*else*/ {

    /* "dsproc3/core.pyx":700
 *         free(<double*>value)
 *     else:
 *         raise ValueError, "Unknown CDSDataType %s" % type             # <<<<<<<<<<<<<<
 *     return retval
 * 
 */

#line 700 "dsproc3/core.pyx"
    __pyx_t_2 = PyInt_FromLong(__pyx_v_type); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 700 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 700 "dsproc3/core.pyx"
    __pyx_t_3 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_51), __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 700 "dsproc3/core.pyx"
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));

#line 700 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 700 "dsproc3/core.pyx"
    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_3), 0, 0);

#line 700 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 700 "dsproc3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 700 "dsproc3/core.pyx"
  }

#line 700 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":701
 *     else:
 *         raise ValueError, "Unknown CDSDataType %s" % type
 *     return retval             # <<<<<<<<<<<<<<
 * 
 * cdef inline int cds_type_to_dtype(CDSDataType type) except -1:
 */

#line 701 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 701 "dsproc3/core.pyx"
  __Pyx_INCREF(__pyx_v_retval);

#line 701 "dsproc3/core.pyx"
  __pyx_r = __pyx_v_retval;

#line 701 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 701 "dsproc3/core.pyx"


#line 701 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 701 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 701 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 701 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 701 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 701 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core._convert_single", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 701 "dsproc3/core.pyx"
  __pyx_r = 0;

#line 701 "dsproc3/core.pyx"
  __pyx_L0:;

#line 701 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_retval);

#line 701 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 701 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 701 "dsproc3/core.pyx"
  return __pyx_r;

#line 701 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":703
 *     return retval
 * 
 * cdef inline int cds_type_to_dtype(CDSDataType type) except -1:             # <<<<<<<<<<<<<<
 * # Use np.NPY_<type> when calling into numpy C interface
 * # i.e. PyArray
 */

#line 703 "dsproc3/core.pyx"


#line 703 "dsproc3/core.pyx"
static CYTHON_INLINE int __pyx_f_7dsproc3_4core_cds_type_to_dtype(CDSDataType __pyx_v_type) {

#line 703 "dsproc3/core.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 703 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("cds_type_to_dtype", 0);

  /* "dsproc3/core.pyx":706
 * # Use np.NPY_<type> when calling into numpy C interface
 * # i.e. PyArray
 *     if type == CDS_NAT:             # <<<<<<<<<<<<<<
 *         raise ValueError, "CDS_NAT"
 *     elif type == CDS_CHAR:
 */

#line 706 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_NAT);

#line 706 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":707
 * # i.e. PyArray
 *     if type == CDS_NAT:
 *         raise ValueError, "CDS_NAT"             # <<<<<<<<<<<<<<
 *     elif type == CDS_CHAR:
 *         return np.NPY_STRING
 */

#line 707 "dsproc3/core.pyx"
    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_n_s__CDS_NAT), 0, 0);

#line 707 "dsproc3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 707 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 707 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":708
 *     if type == CDS_NAT:
 *         raise ValueError, "CDS_NAT"
 *     elif type == CDS_CHAR:             # <<<<<<<<<<<<<<
 *         return np.NPY_STRING
 *     elif type == CDS_BYTE:
 */

#line 708 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_CHAR);

#line 708 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":709
 *         raise ValueError, "CDS_NAT"
 *     elif type == CDS_CHAR:
 *         return np.NPY_STRING             # <<<<<<<<<<<<<<
 *     elif type == CDS_BYTE:
 *         return np.NPY_BYTE
 */

#line 709 "dsproc3/core.pyx"
    __pyx_r = NPY_STRING;

#line 709 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 709 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 709 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":710
 *     elif type == CDS_CHAR:
 *         return np.NPY_STRING
 *     elif type == CDS_BYTE:             # <<<<<<<<<<<<<<
 *         return np.NPY_BYTE
 *     elif type == CDS_SHORT:
 */

#line 710 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_BYTE);

#line 710 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":711
 *         return np.NPY_STRING
 *     elif type == CDS_BYTE:
 *         return np.NPY_BYTE             # <<<<<<<<<<<<<<
 *     elif type == CDS_SHORT:
 *         return np.NPY_SHORT
 */

#line 711 "dsproc3/core.pyx"
    __pyx_r = NPY_BYTE;

#line 711 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 711 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 711 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":712
 *     elif type == CDS_BYTE:
 *         return np.NPY_BYTE
 *     elif type == CDS_SHORT:             # <<<<<<<<<<<<<<
 *         return np.NPY_SHORT
 *     elif type == CDS_INT:
 */

#line 712 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_SHORT);

#line 712 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":713
 *         return np.NPY_BYTE
 *     elif type == CDS_SHORT:
 *         return np.NPY_SHORT             # <<<<<<<<<<<<<<
 *     elif type == CDS_INT:
 *         return np.NPY_INT
 */

#line 713 "dsproc3/core.pyx"
    __pyx_r = NPY_SHORT;

#line 713 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 713 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 713 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":714
 *     elif type == CDS_SHORT:
 *         return np.NPY_SHORT
 *     elif type == CDS_INT:             # <<<<<<<<<<<<<<
 *         return np.NPY_INT
 *     elif type == CDS_FLOAT:
 */

#line 714 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_INT);

#line 714 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":715
 *         return np.NPY_SHORT
 *     elif type == CDS_INT:
 *         return np.NPY_INT             # <<<<<<<<<<<<<<
 *     elif type == CDS_FLOAT:
 *         return np.NPY_FLOAT
 */

#line 715 "dsproc3/core.pyx"
    __pyx_r = NPY_INT;

#line 715 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 715 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 715 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":716
 *     elif type == CDS_INT:
 *         return np.NPY_INT
 *     elif type == CDS_FLOAT:             # <<<<<<<<<<<<<<
 *         return np.NPY_FLOAT
 *     elif type == CDS_DOUBLE:
 */

#line 716 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_FLOAT);

#line 716 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":717
 *         return np.NPY_INT
 *     elif type == CDS_FLOAT:
 *         return np.NPY_FLOAT             # <<<<<<<<<<<<<<
 *     elif type == CDS_DOUBLE:
 *         return np.NPY_DOUBLE
 */

#line 717 "dsproc3/core.pyx"
    __pyx_r = NPY_FLOAT;

#line 717 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 717 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 717 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":718
 *     elif type == CDS_FLOAT:
 *         return np.NPY_FLOAT
 *     elif type == CDS_DOUBLE:             # <<<<<<<<<<<<<<
 *         return np.NPY_DOUBLE
 *     else:
 */

#line 718 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_DOUBLE);

#line 718 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":719
 *         return np.NPY_FLOAT
 *     elif type == CDS_DOUBLE:
 *         return np.NPY_DOUBLE             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError, "Unknown CDSDataType %s" % type
 */

#line 719 "dsproc3/core.pyx"
    __pyx_r = NPY_DOUBLE;

#line 719 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 719 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 719 "dsproc3/core.pyx"
  }

#line 719 "dsproc3/core.pyx"
  /*else*/ {

    /* "dsproc3/core.pyx":721
 *         return np.NPY_DOUBLE
 *     else:
 *         raise ValueError, "Unknown CDSDataType %s" % type             # <<<<<<<<<<<<<<
 * 
 * cdef inline np.dtype cds_type_to_dtype_obj(CDSDataType type):
 */

#line 721 "dsproc3/core.pyx"
    __pyx_t_2 = PyInt_FromLong(__pyx_v_type); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 721 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 721 "dsproc3/core.pyx"
    __pyx_t_3 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_51), __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 721 "dsproc3/core.pyx"
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));

#line 721 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 721 "dsproc3/core.pyx"
    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_3), 0, 0);

#line 721 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 721 "dsproc3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 721 "dsproc3/core.pyx"
  }

#line 721 "dsproc3/core.pyx"
  __pyx_L3:;

#line 721 "dsproc3/core.pyx"


#line 721 "dsproc3/core.pyx"
  __pyx_r = 0;

#line 721 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 721 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 721 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 721 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 721 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.cds_type_to_dtype", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 721 "dsproc3/core.pyx"
  __pyx_r = -1;

#line 721 "dsproc3/core.pyx"
  __pyx_L0:;

#line 721 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 721 "dsproc3/core.pyx"
  return __pyx_r;

#line 721 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":723
 *         raise ValueError, "Unknown CDSDataType %s" % type
 * 
 * cdef inline np.dtype cds_type_to_dtype_obj(CDSDataType type):             # <<<<<<<<<<<<<<
 * # Use np.dtype<type> when calling into numpy Python interface
 *     """Converts a CDSDataType to a dtype instance."""
 */

#line 723 "dsproc3/core.pyx"


#line 723 "dsproc3/core.pyx"
static CYTHON_INLINE PyArray_Descr *__pyx_f_7dsproc3_4core_cds_type_to_dtype_obj(CDSDataType __pyx_v_type) {

#line 723 "dsproc3/core.pyx"
  PyArray_Descr *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 723 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("cds_type_to_dtype_obj", 0);

  /* "dsproc3/core.pyx":726
 * # Use np.dtype<type> when calling into numpy Python interface
 *     """Converts a CDSDataType to a dtype instance."""
 *     if type == CDS_NAT:             # <<<<<<<<<<<<<<
 *         raise ValueError, "CDS_NAT"
 *     elif type == CDS_CHAR:
 */

#line 726 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_NAT);

#line 726 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":727
 *     """Converts a CDSDataType to a dtype instance."""
 *     if type == CDS_NAT:
 *         raise ValueError, "CDS_NAT"             # <<<<<<<<<<<<<<
 *     elif type == CDS_CHAR:
 *         return np.dtype(np.uint8)
 */

#line 727 "dsproc3/core.pyx"
    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_n_s__CDS_NAT), 0, 0);

#line 727 "dsproc3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 727; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 727 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 727 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":728
 *     if type == CDS_NAT:
 *         raise ValueError, "CDS_NAT"
 *     elif type == CDS_CHAR:             # <<<<<<<<<<<<<<
 *         return np.dtype(np.uint8)
 *     elif type == CDS_BYTE:
 */

#line 728 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_CHAR);

#line 728 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":729
 *         raise ValueError, "CDS_NAT"
 *     elif type == CDS_CHAR:
 *         return np.dtype(np.uint8)             # <<<<<<<<<<<<<<
 *     elif type == CDS_BYTE:
 *         return np.dtype(np.int8)
 */

#line 729 "dsproc3/core.pyx"
    __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 729 "dsproc3/core.pyx"
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 729 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 729 "dsproc3/core.pyx"
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__uint8); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 729 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 729 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 729 "dsproc3/core.pyx"
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 729 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 729 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);

#line 729 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_3);

#line 729 "dsproc3/core.pyx"
    __pyx_t_3 = 0;

#line 729 "dsproc3/core.pyx"
    __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 729 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 729 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 729 "dsproc3/core.pyx"
    __pyx_r = ((PyArray_Descr *)__pyx_t_3);

#line 729 "dsproc3/core.pyx"
    __pyx_t_3 = 0;

#line 729 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 729 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 729 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":730
 *     elif type == CDS_CHAR:
 *         return np.dtype(np.uint8)
 *     elif type == CDS_BYTE:             # <<<<<<<<<<<<<<
 *         return np.dtype(np.int8)
 *     elif type == CDS_SHORT:
 */

#line 730 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_BYTE);

#line 730 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":731
 *         return np.dtype(np.uint8)
 *     elif type == CDS_BYTE:
 *         return np.dtype(np.int8)             # <<<<<<<<<<<<<<
 *     elif type == CDS_SHORT:
 *         return np.dtype(np.int16)
 */

#line 731 "dsproc3/core.pyx"
    __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 731 "dsproc3/core.pyx"
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 731 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 731 "dsproc3/core.pyx"
    __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__int8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 731 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 731 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 731 "dsproc3/core.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 731 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 731 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 731 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_2);

#line 731 "dsproc3/core.pyx"
    __pyx_t_2 = 0;

#line 731 "dsproc3/core.pyx"
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 731 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 731 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 731 "dsproc3/core.pyx"
    __pyx_r = ((PyArray_Descr *)__pyx_t_2);

#line 731 "dsproc3/core.pyx"
    __pyx_t_2 = 0;

#line 731 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 731 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 731 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":732
 *     elif type == CDS_BYTE:
 *         return np.dtype(np.int8)
 *     elif type == CDS_SHORT:             # <<<<<<<<<<<<<<
 *         return np.dtype(np.int16)
 *     elif type == CDS_INT:
 */

#line 732 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_SHORT);

#line 732 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":733
 *         return np.dtype(np.int8)
 *     elif type == CDS_SHORT:
 *         return np.dtype(np.int16)             # <<<<<<<<<<<<<<
 *     elif type == CDS_INT:
 *         return np.dtype(np.int32)
 */

#line 733 "dsproc3/core.pyx"
    __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 733 "dsproc3/core.pyx"
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 733 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 733 "dsproc3/core.pyx"
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__int16); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 733 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 733 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 733 "dsproc3/core.pyx"
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 733 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 733 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);

#line 733 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_3);

#line 733 "dsproc3/core.pyx"
    __pyx_t_3 = 0;

#line 733 "dsproc3/core.pyx"
    __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 733 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 733 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 733 "dsproc3/core.pyx"
    __pyx_r = ((PyArray_Descr *)__pyx_t_3);

#line 733 "dsproc3/core.pyx"
    __pyx_t_3 = 0;

#line 733 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 733 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 733 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":734
 *     elif type == CDS_SHORT:
 *         return np.dtype(np.int16)
 *     elif type == CDS_INT:             # <<<<<<<<<<<<<<
 *         return np.dtype(np.int32)
 *     elif type == CDS_FLOAT:
 */

#line 734 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_INT);

#line 734 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":735
 *         return np.dtype(np.int16)
 *     elif type == CDS_INT:
 *         return np.dtype(np.int32)             # <<<<<<<<<<<<<<
 *     elif type == CDS_FLOAT:
 *         return np.dtype(np.float32)
 */

#line 735 "dsproc3/core.pyx"
    __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 735 "dsproc3/core.pyx"
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 735 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 735 "dsproc3/core.pyx"
    __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__int32); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 735 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 735 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 735 "dsproc3/core.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 735 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 735 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 735 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_2);

#line 735 "dsproc3/core.pyx"
    __pyx_t_2 = 0;

#line 735 "dsproc3/core.pyx"
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 735 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 735 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 735 "dsproc3/core.pyx"
    __pyx_r = ((PyArray_Descr *)__pyx_t_2);

#line 735 "dsproc3/core.pyx"
    __pyx_t_2 = 0;

#line 735 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 735 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 735 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":736
 *     elif type == CDS_INT:
 *         return np.dtype(np.int32)
 *     elif type == CDS_FLOAT:             # <<<<<<<<<<<<<<
 *         return np.dtype(np.float32)
 *     elif type == CDS_DOUBLE:
 */

#line 736 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_FLOAT);

#line 736 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":737
 *         return np.dtype(np.int32)
 *     elif type == CDS_FLOAT:
 *         return np.dtype(np.float32)             # <<<<<<<<<<<<<<
 *     elif type == CDS_DOUBLE:
 *         return np.dtype(np.float64)
 */

#line 737 "dsproc3/core.pyx"
    __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 737 "dsproc3/core.pyx"
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 737 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 737 "dsproc3/core.pyx"
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__float32); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 737 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 737 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 737 "dsproc3/core.pyx"
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 737 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 737 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);

#line 737 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_3);

#line 737 "dsproc3/core.pyx"
    __pyx_t_3 = 0;

#line 737 "dsproc3/core.pyx"
    __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 737 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 737 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 737 "dsproc3/core.pyx"
    __pyx_r = ((PyArray_Descr *)__pyx_t_3);

#line 737 "dsproc3/core.pyx"
    __pyx_t_3 = 0;

#line 737 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 737 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 737 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":738
 *     elif type == CDS_FLOAT:
 *         return np.dtype(np.float32)
 *     elif type == CDS_DOUBLE:             # <<<<<<<<<<<<<<
 *         return np.dtype(np.float64)
 *     else:
 */

#line 738 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_type == CDS_DOUBLE);

#line 738 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":739
 *         return np.dtype(np.float32)
 *     elif type == CDS_DOUBLE:
 *         return np.dtype(np.float64)             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError, "Unknown CDSDataType %s" % type
 */

#line 739 "dsproc3/core.pyx"
    __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 739 "dsproc3/core.pyx"
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 739 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 739 "dsproc3/core.pyx"
    __pyx_t_2 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__float64); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 739 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 739 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 739 "dsproc3/core.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 739 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 739 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 739 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_2);

#line 739 "dsproc3/core.pyx"
    __pyx_t_2 = 0;

#line 739 "dsproc3/core.pyx"
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 739 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 739 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 739 "dsproc3/core.pyx"
    __pyx_r = ((PyArray_Descr *)__pyx_t_2);

#line 739 "dsproc3/core.pyx"
    __pyx_t_2 = 0;

#line 739 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 739 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 739 "dsproc3/core.pyx"
  }

#line 739 "dsproc3/core.pyx"
  /*else*/ {

    /* "dsproc3/core.pyx":741
 *         return np.dtype(np.float64)
 *     else:
 *         raise ValueError, "Unknown CDSDataType %s" % type             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 741 "dsproc3/core.pyx"
    __pyx_t_2 = PyInt_FromLong(__pyx_v_type); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 741 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 741 "dsproc3/core.pyx"
    __pyx_t_3 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_51), __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 741 "dsproc3/core.pyx"
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));

#line 741 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 741 "dsproc3/core.pyx"
    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_3), 0, 0);

#line 741 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 741 "dsproc3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 741 "dsproc3/core.pyx"
  }

#line 741 "dsproc3/core.pyx"
  __pyx_L3:;

#line 741 "dsproc3/core.pyx"


#line 741 "dsproc3/core.pyx"
  __pyx_r = ((PyArray_Descr *)Py_None); __Pyx_INCREF(Py_None);

#line 741 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 741 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 741 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 741 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 741 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.cds_type_to_dtype_obj", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 741 "dsproc3/core.pyx"
  __pyx_r = 0;

#line 741 "dsproc3/core.pyx"
  __pyx_L0:;

#line 741 "dsproc3/core.pyx"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 741 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 741 "dsproc3/core.pyx"
  return __pyx_r;

#line 741 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":744
 * 
 * 
 * cdef inline int dtype_to_cds_type(np.dtype type) except -1:             # <<<<<<<<<<<<<<
 *     if type == np.dtype(np.uint8):
 *         return CDS_CHAR
 */

#line 744 "dsproc3/core.pyx"


#line 744 "dsproc3/core.pyx"
static CYTHON_INLINE int __pyx_f_7dsproc3_4core_dtype_to_cds_type(PyArray_Descr *__pyx_v_type) {

#line 744 "dsproc3/core.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 744 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("dtype_to_cds_type", 0);

  /* "dsproc3/core.pyx":745
 * 
 * cdef inline int dtype_to_cds_type(np.dtype type) except -1:
 *     if type == np.dtype(np.uint8):             # <<<<<<<<<<<<<<
 *         return CDS_CHAR
 *     elif type == np.dtype('S1'):
 */

#line 745 "dsproc3/core.pyx"
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 745 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 745 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__uint8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 745 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 745 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 745 "dsproc3/core.pyx"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 745 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 745 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);

#line 745 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 745 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 745 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 745 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 745 "dsproc3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

#line 745 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_type), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 745 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 745 "dsproc3/core.pyx"
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 745 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 745 "dsproc3/core.pyx"
  if (__pyx_t_3) {

    /* "dsproc3/core.pyx":746
 * cdef inline int dtype_to_cds_type(np.dtype type) except -1:
 *     if type == np.dtype(np.uint8):
 *         return CDS_CHAR             # <<<<<<<<<<<<<<
 *     elif type == np.dtype('S1'):
 *         return CDS_CHAR
 */

#line 746 "dsproc3/core.pyx"
    __pyx_r = CDS_CHAR;

#line 746 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 746 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 746 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":747
 *     if type == np.dtype(np.uint8):
 *         return CDS_CHAR
 *     elif type == np.dtype('S1'):             # <<<<<<<<<<<<<<
 *         return CDS_CHAR
 *     elif type == np.dtype(np.str):
 */

#line 747 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), ((PyObject *)__pyx_k_tuple_52), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 747 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 747 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_type), __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 747 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 747 "dsproc3/core.pyx"
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 747 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 747 "dsproc3/core.pyx"
  if (__pyx_t_3) {

    /* "dsproc3/core.pyx":748
 *         return CDS_CHAR
 *     elif type == np.dtype('S1'):
 *         return CDS_CHAR             # <<<<<<<<<<<<<<
 *     elif type == np.dtype(np.str):
 *         return CDS_CHAR
 */

#line 748 "dsproc3/core.pyx"
    __pyx_r = CDS_CHAR;

#line 748 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 748 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 748 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":749
 *     elif type == np.dtype('S1'):
 *         return CDS_CHAR
 *     elif type == np.dtype(np.str):             # <<<<<<<<<<<<<<
 *         return CDS_CHAR
 *     elif type == np.dtype(np.int8):
 */

#line 749 "dsproc3/core.pyx"
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 749 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 749 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__str); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 749 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 749 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 749 "dsproc3/core.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 749 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 749 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 749 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 749 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 749 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 749 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 749 "dsproc3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 749 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_type), __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 749 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 749 "dsproc3/core.pyx"
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 749 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 749 "dsproc3/core.pyx"
  if (__pyx_t_3) {

    /* "dsproc3/core.pyx":750
 *         return CDS_CHAR
 *     elif type == np.dtype(np.str):
 *         return CDS_CHAR             # <<<<<<<<<<<<<<
 *     elif type == np.dtype(np.int8):
 *         return CDS_BYTE
 */

#line 750 "dsproc3/core.pyx"
    __pyx_r = CDS_CHAR;

#line 750 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 750 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 750 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":751
 *     elif type == np.dtype(np.str):
 *         return CDS_CHAR
 *     elif type == np.dtype(np.int8):             # <<<<<<<<<<<<<<
 *         return CDS_BYTE
 *     elif type == np.dtype(np.int16):
 */

#line 751 "dsproc3/core.pyx"
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 751 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 751 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__int8); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 751 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 751 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 751 "dsproc3/core.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 751 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 751 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 751 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 751 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 751 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 751 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 751 "dsproc3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 751 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_type), __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 751 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 751 "dsproc3/core.pyx"
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 751 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 751 "dsproc3/core.pyx"
  if (__pyx_t_3) {

    /* "dsproc3/core.pyx":752
 *         return CDS_CHAR
 *     elif type == np.dtype(np.int8):
 *         return CDS_BYTE             # <<<<<<<<<<<<<<
 *     elif type == np.dtype(np.int16):
 *         return CDS_SHORT
 */

#line 752 "dsproc3/core.pyx"
    __pyx_r = CDS_BYTE;

#line 752 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 752 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 752 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":753
 *     elif type == np.dtype(np.int8):
 *         return CDS_BYTE
 *     elif type == np.dtype(np.int16):             # <<<<<<<<<<<<<<
 *         return CDS_SHORT
 *     elif type == np.dtype(np.int32):
 */

#line 753 "dsproc3/core.pyx"
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 753 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 753 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__int16); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 753 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 753 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 753 "dsproc3/core.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 753 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 753 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 753 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 753 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 753 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 753 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 753 "dsproc3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 753 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_type), __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 753 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 753 "dsproc3/core.pyx"
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 753 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 753 "dsproc3/core.pyx"
  if (__pyx_t_3) {

    /* "dsproc3/core.pyx":754
 *         return CDS_BYTE
 *     elif type == np.dtype(np.int16):
 *         return CDS_SHORT             # <<<<<<<<<<<<<<
 *     elif type == np.dtype(np.int32):
 *         return CDS_INT
 */

#line 754 "dsproc3/core.pyx"
    __pyx_r = CDS_SHORT;

#line 754 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 754 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 754 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":755
 *     elif type == np.dtype(np.int16):
 *         return CDS_SHORT
 *     elif type == np.dtype(np.int32):             # <<<<<<<<<<<<<<
 *         return CDS_INT
 *     elif type == np.dtype(np.float32):
 */

#line 755 "dsproc3/core.pyx"
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 755 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 755 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__int32); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 755 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 755 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 755 "dsproc3/core.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 755 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 755 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 755 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 755 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 755 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 755 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 755 "dsproc3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 755 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_type), __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 755 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 755 "dsproc3/core.pyx"
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 755 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 755 "dsproc3/core.pyx"
  if (__pyx_t_3) {

    /* "dsproc3/core.pyx":756
 *         return CDS_SHORT
 *     elif type == np.dtype(np.int32):
 *         return CDS_INT             # <<<<<<<<<<<<<<
 *     elif type == np.dtype(np.float32):
 *         return CDS_FLOAT
 */

#line 756 "dsproc3/core.pyx"
    __pyx_r = CDS_INT;

#line 756 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 756 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 756 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":757
 *     elif type == np.dtype(np.int32):
 *         return CDS_INT
 *     elif type == np.dtype(np.float32):             # <<<<<<<<<<<<<<
 *         return CDS_FLOAT
 *     elif type == np.dtype(np.float64):
 */

#line 757 "dsproc3/core.pyx"
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 757; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 757 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 757 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__float32); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 757; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 757 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 757 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 757 "dsproc3/core.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 757; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 757 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 757 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 757 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 757 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 757 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 757; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 757 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 757 "dsproc3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 757 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_type), __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 757; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 757 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 757 "dsproc3/core.pyx"
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 757; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 757 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 757 "dsproc3/core.pyx"
  if (__pyx_t_3) {

    /* "dsproc3/core.pyx":758
 *         return CDS_INT
 *     elif type == np.dtype(np.float32):
 *         return CDS_FLOAT             # <<<<<<<<<<<<<<
 *     elif type == np.dtype(np.float64):
 *         return CDS_DOUBLE
 */

#line 758 "dsproc3/core.pyx"
    __pyx_r = CDS_FLOAT;

#line 758 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 758 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 758 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":759
 *     elif type == np.dtype(np.float32):
 *         return CDS_FLOAT
 *     elif type == np.dtype(np.float64):             # <<<<<<<<<<<<<<
 *         return CDS_DOUBLE
 *     else:
 */

#line 759 "dsproc3/core.pyx"
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 759; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 759 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 759 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__float64); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 759; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 759 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 759 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 759 "dsproc3/core.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 759; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 759 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 759 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 759 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 759 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 759 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 759; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 759 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 759 "dsproc3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 759 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_RichCompare(((PyObject *)__pyx_v_type), __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 759; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 759 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 759 "dsproc3/core.pyx"
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 759; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 759 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 759 "dsproc3/core.pyx"
  if (__pyx_t_3) {

    /* "dsproc3/core.pyx":760
 *         return CDS_FLOAT
 *     elif type == np.dtype(np.float64):
 *         return CDS_DOUBLE             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError, "Unknown dtype for CDSDataType %s" % type
 */

#line 760 "dsproc3/core.pyx"
    __pyx_r = CDS_DOUBLE;

#line 760 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 760 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 760 "dsproc3/core.pyx"
  }

#line 760 "dsproc3/core.pyx"
  /*else*/ {

    /* "dsproc3/core.pyx":762
 *         return CDS_DOUBLE
 *     else:
 *         raise ValueError, "Unknown dtype for CDSDataType %s" % type             # <<<<<<<<<<<<<<
 * 
 * def get_debug_level():
 */

#line 762 "dsproc3/core.pyx"
    __pyx_t_2 = PyNumber_Remainder(((PyObject *)__pyx_kp_s_53), ((PyObject *)__pyx_v_type)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 762 "dsproc3/core.pyx"
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));

#line 762 "dsproc3/core.pyx"
    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_2), 0, 0);

#line 762 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 762 "dsproc3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 762 "dsproc3/core.pyx"
  }

#line 762 "dsproc3/core.pyx"
  __pyx_L3:;

#line 762 "dsproc3/core.pyx"


#line 762 "dsproc3/core.pyx"
  __pyx_r = 0;

#line 762 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 762 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 762 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 762 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 762 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.dtype_to_cds_type", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 762 "dsproc3/core.pyx"
  __pyx_r = -1;

#line 762 "dsproc3/core.pyx"
  __pyx_L0:;

#line 762 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 762 "dsproc3/core.pyx"
  return __pyx_r;

#line 762 "dsproc3/core.pyx"
}

#line 762 "dsproc3/core.pyx"


#line 762 "dsproc3/core.pyx"
/* Python wrapper */

#line 762 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_51get_debug_level(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 762 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_50get_debug_level[] = "get_debug_level()\nGet the current debug level.";
static PyMethodDef __pyx_mdef_7dsproc3_4core_51get_debug_level = 
#line 762 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_debug_level"), (PyCFunction)__pyx_pw_7dsproc3_4core_51get_debug_level, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_50get_debug_level)};

#line 762 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_51get_debug_level(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {

#line 762 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 762 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 762 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_debug_level (wrapper)", 0);
  __pyx_r = 
#line 762 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_50get_debug_level(__pyx_self);

#line 762 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 762 "dsproc3/core.pyx"
  return __pyx_r;

#line 762 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":764
 *         raise ValueError, "Unknown dtype for CDSDataType %s" % type
 * 
 * def get_debug_level():             # <<<<<<<<<<<<<<
 *     """Get the current debug level."""
 *     return dsproc_get_debug_level()
 */

#line 764 "dsproc3/core.pyx"


#line 764 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_50get_debug_level(CYTHON_UNUSED PyObject *__pyx_self) {

#line 764 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 764 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_debug_level", 0);

  /* "dsproc3/core.pyx":766
 * def get_debug_level():
 *     """Get the current debug level."""
 *     return dsproc_get_debug_level()             # <<<<<<<<<<<<<<
 * 
 * def get_site():
 */

#line 766 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 766 "dsproc3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(dsproc_get_debug_level()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 766 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 766 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 766 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 766 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 766 "dsproc3/core.pyx"


#line 766 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 766 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 766 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 766 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 766 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_debug_level", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 766 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 766 "dsproc3/core.pyx"
  __pyx_L0:;

#line 766 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 766 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 766 "dsproc3/core.pyx"
  return __pyx_r;

#line 766 "dsproc3/core.pyx"
}

#line 766 "dsproc3/core.pyx"


#line 766 "dsproc3/core.pyx"
/* Python wrapper */

#line 766 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_53get_site(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 766 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_52get_site[] = "get_site()\nGet the process site.";
static PyMethodDef __pyx_mdef_7dsproc3_4core_53get_site = 
#line 766 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_site"), (PyCFunction)__pyx_pw_7dsproc3_4core_53get_site, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_52get_site)};

#line 766 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_53get_site(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {

#line 766 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 766 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 766 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_site (wrapper)", 0);
  __pyx_r = 
#line 766 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_52get_site(__pyx_self);

#line 766 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 766 "dsproc3/core.pyx"
  return __pyx_r;

#line 766 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":768
 *     return dsproc_get_debug_level()
 * 
 * def get_site():             # <<<<<<<<<<<<<<
 *     """Get the process site."""
 *     return dsproc_get_site()
 */

#line 768 "dsproc3/core.pyx"


#line 768 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_52get_site(CYTHON_UNUSED PyObject *__pyx_self) {

#line 768 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 768 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_site", 0);

  /* "dsproc3/core.pyx":770
 * def get_site():
 *     """Get the process site."""
 *     return dsproc_get_site()             # <<<<<<<<<<<<<<
 * 
 * def get_facility():
 */

#line 770 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 770 "dsproc3/core.pyx"
  __pyx_t_1 = PyBytes_FromString(dsproc_get_site()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 770 "dsproc3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 770 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_t_1);

#line 770 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 770 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 770 "dsproc3/core.pyx"


#line 770 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 770 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 770 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 770 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 770 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_site", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 770 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 770 "dsproc3/core.pyx"
  __pyx_L0:;

#line 770 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 770 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 770 "dsproc3/core.pyx"
  return __pyx_r;

#line 770 "dsproc3/core.pyx"
}

#line 770 "dsproc3/core.pyx"


#line 770 "dsproc3/core.pyx"
/* Python wrapper */

#line 770 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_55get_facility(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 770 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_54get_facility[] = "get_facility()\nGet the process facility.";
static PyMethodDef __pyx_mdef_7dsproc3_4core_55get_facility = 
#line 770 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_facility"), (PyCFunction)__pyx_pw_7dsproc3_4core_55get_facility, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_54get_facility)};

#line 770 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_55get_facility(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {

#line 770 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 770 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 770 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_facility (wrapper)", 0);
  __pyx_r = 
#line 770 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_54get_facility(__pyx_self);

#line 770 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 770 "dsproc3/core.pyx"
  return __pyx_r;

#line 770 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":772
 *     return dsproc_get_site()
 * 
 * def get_facility():             # <<<<<<<<<<<<<<
 *     """Get the process facility."""
 *     return dsproc_get_facility()
 */

#line 772 "dsproc3/core.pyx"


#line 772 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_54get_facility(CYTHON_UNUSED PyObject *__pyx_self) {

#line 772 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 772 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_facility", 0);

  /* "dsproc3/core.pyx":774
 * def get_facility():
 *     """Get the process facility."""
 *     return dsproc_get_facility()             # <<<<<<<<<<<<<<
 * 
 * def get_name():
 */

#line 774 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 774 "dsproc3/core.pyx"
  __pyx_t_1 = PyBytes_FromString(dsproc_get_facility()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 774 "dsproc3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 774 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_t_1);

#line 774 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 774 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 774 "dsproc3/core.pyx"


#line 774 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 774 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 774 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 774 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 774 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_facility", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 774 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 774 "dsproc3/core.pyx"
  __pyx_L0:;

#line 774 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 774 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 774 "dsproc3/core.pyx"
  return __pyx_r;

#line 774 "dsproc3/core.pyx"
}

#line 774 "dsproc3/core.pyx"


#line 774 "dsproc3/core.pyx"
/* Python wrapper */

#line 774 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_57get_name(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 774 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_56get_name[] = "get_name()\nGet the process name.";
static PyMethodDef __pyx_mdef_7dsproc3_4core_57get_name = 
#line 774 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_name"), (PyCFunction)__pyx_pw_7dsproc3_4core_57get_name, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_56get_name)};

#line 774 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_57get_name(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {

#line 774 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 774 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 774 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_name (wrapper)", 0);
  __pyx_r = 
#line 774 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_56get_name(__pyx_self);

#line 774 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 774 "dsproc3/core.pyx"
  return __pyx_r;

#line 774 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":776
 *     return dsproc_get_facility()
 * 
 * def get_name():             # <<<<<<<<<<<<<<
 *     """Get the process name."""
 *     return dsproc_get_name()
 */

#line 776 "dsproc3/core.pyx"


#line 776 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_56get_name(CYTHON_UNUSED PyObject *__pyx_self) {

#line 776 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 776 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_name", 0);

  /* "dsproc3/core.pyx":778
 * def get_name():
 *     """Get the process name."""
 *     return dsproc_get_name()             # <<<<<<<<<<<<<<
 * 
 * def get_datastream_id(
 */

#line 778 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 778 "dsproc3/core.pyx"
  __pyx_t_1 = PyBytes_FromString(dsproc_get_name()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 778 "dsproc3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 778 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_t_1);

#line 778 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 778 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 778 "dsproc3/core.pyx"


#line 778 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 778 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 778 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 778 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 778 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_name", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 778 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 778 "dsproc3/core.pyx"
  __pyx_L0:;

#line 778 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 778 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 778 "dsproc3/core.pyx"
  return __pyx_r;

#line 778 "dsproc3/core.pyx"
}

#line 778 "dsproc3/core.pyx"


#line 778 "dsproc3/core.pyx"
/* Python wrapper */

#line 778 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_59get_datastream_id(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 778 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_58get_datastream_id[] = "get_datastream_id(char *site, char *facility, char *dsc_name, char *dsc_level, DSRole role)\nGet the ID of a datastream.\n    \n    @param site - site name, or NULL to find first match\n    @param facility - facility name, or NULL to find first match\n    @param dsc_name - datastream class name\n    @param dsc_level - datastream class level\n    @param role - specifies input or output datastream\n    \n    @retval datastream ID\n    @retval -1 if the datastream has not beed defined\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_59get_datastream_id = 
#line 778 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_datastream_id"), (PyCFunction)__pyx_pw_7dsproc3_4core_59get_datastream_id, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_58get_datastream_id)};

#line 778 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_59get_datastream_id(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_site
#line 778 "dsproc3/core.pyx"
;
  char *__pyx_v_facility
#line 778 "dsproc3/core.pyx"
;
  char *__pyx_v_dsc_name
#line 778 "dsproc3/core.pyx"
;
  char *__pyx_v_dsc_level
#line 778 "dsproc3/core.pyx"
;
  DSRole __pyx_v_role
#line 778 "dsproc3/core.pyx"
;

#line 778 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 778 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 778 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_datastream_id (wrapper)", 0);

#line 778 "dsproc3/core.pyx"
  {

#line 778 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__site,&__pyx_n_s__facility,&__pyx_n_s__dsc_name,&__pyx_n_s__dsc_level,&__pyx_n_s__role,0};

#line 778 "dsproc3/core.pyx"
    PyObject* values[5] = {0,0,0,0,0};

#line 778 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 778 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 778 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 778 "dsproc3/core.pyx"
      switch (pos_args) {
        case  5: 
#line 778 "dsproc3/core.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 778 "dsproc3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 778 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 778 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 778 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 778 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 778 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 778 "dsproc3/core.pyx"
      }

#line 778 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 778 "dsproc3/core.pyx"
      switch (pos_args) {

#line 778 "dsproc3/core.pyx"
        case  0:

#line 778 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__site)) != 0)) kw_args--;
        else 
#line 778 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 778 "dsproc3/core.pyx"
        case  1:

#line 778 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__facility)) != 0)) kw_args--;

#line 778 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("get_datastream_id", 1, 5, 5, 1); 
#line 778 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 778 "dsproc3/core.pyx"
        }

#line 778 "dsproc3/core.pyx"
        case  2:

#line 778 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dsc_name)) != 0)) kw_args--;

#line 778 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("get_datastream_id", 1, 5, 5, 2); 
#line 778 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 778 "dsproc3/core.pyx"
        }

#line 778 "dsproc3/core.pyx"
        case  3:

#line 778 "dsproc3/core.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dsc_level)) != 0)) kw_args--;

#line 778 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("get_datastream_id", 1, 5, 5, 3); 
#line 778 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 778 "dsproc3/core.pyx"
        }

#line 778 "dsproc3/core.pyx"
        case  4:

#line 778 "dsproc3/core.pyx"
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__role)) != 0)) kw_args--;

#line 778 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("get_datastream_id", 1, 5, 5, 4); 
#line 778 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 778 "dsproc3/core.pyx"
        }

#line 778 "dsproc3/core.pyx"
      }

#line 778 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 778 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_datastream_id") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 778 "dsproc3/core.pyx"
      }

#line 778 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {

#line 778 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 778 "dsproc3/core.pyx"
    } else {

#line 778 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 778 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 778 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 778 "dsproc3/core.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 778 "dsproc3/core.pyx"
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 778 "dsproc3/core.pyx"
    }

#line 778 "dsproc3/core.pyx"
    __pyx_v_site = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_site) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 778 "dsproc3/core.pyx"
    __pyx_v_facility = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_facility) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 782; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 778 "dsproc3/core.pyx"
    __pyx_v_dsc_name = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_dsc_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 783; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 778 "dsproc3/core.pyx"
    __pyx_v_dsc_level = PyBytes_AsString(values[3]); if (unlikely((!__pyx_v_dsc_level) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 784; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 778 "dsproc3/core.pyx"
    __pyx_v_role = ((DSRole)PyInt_AsLong(values[4])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 785; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 778 "dsproc3/core.pyx"
  }

#line 778 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 778 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_datastream_id", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); 
#line 778 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 778 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 778 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_datastream_id", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 778 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 778 "dsproc3/core.pyx"
  return NULL;

#line 778 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 778 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_58get_datastream_id(__pyx_self, __pyx_v_site, __pyx_v_facility, __pyx_v_dsc_name, __pyx_v_dsc_level, __pyx_v_role);

#line 778 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 778 "dsproc3/core.pyx"
  return __pyx_r;

#line 778 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":780
 *     return dsproc_get_name()
 * 
 * def get_datastream_id(             # <<<<<<<<<<<<<<
 *         char *site,
 *         char *facility,
 */

#line 780 "dsproc3/core.pyx"


#line 780 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_58get_datastream_id(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_site, char *__pyx_v_facility, char *__pyx_v_dsc_name, char *__pyx_v_dsc_level, DSRole __pyx_v_role) {

#line 780 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 780 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_datastream_id", 0);

  /* "dsproc3/core.pyx":798
 * 
 *     """
 *     return dsproc_get_datastream_id(site, facility, dsc_name, dsc_level, role)             # <<<<<<<<<<<<<<
 * 
 * def get_input_datastream_id(char *dsc_name, char *dsc_level):
 */

#line 798 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 798 "dsproc3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(dsproc_get_datastream_id(__pyx_v_site, __pyx_v_facility, __pyx_v_dsc_name, __pyx_v_dsc_level, __pyx_v_role)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 798 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 798 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 798 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 798 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 798 "dsproc3/core.pyx"


#line 798 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 798 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 798 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 798 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 798 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_datastream_id", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 798 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 798 "dsproc3/core.pyx"
  __pyx_L0:;

#line 798 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 798 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 798 "dsproc3/core.pyx"
  return __pyx_r;

#line 798 "dsproc3/core.pyx"
}

#line 798 "dsproc3/core.pyx"


#line 798 "dsproc3/core.pyx"
/* Python wrapper */

#line 798 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_61get_input_datastream_id(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 798 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_60get_input_datastream_id[] = "get_input_datastream_id(char *dsc_name, char *dsc_level)\nGet the ID of an input datastream.\n    \n    This function will generate an error if the specified datastream class has\n    not been defined in the database as an input for this process.\n    \n    If an error occurs in this function it will be appended to the log and\n    error mail messages, and the process status will be set appropriately.\n    \n    @param dsc_name - datastream class name\n    @param dsc_level - datastream class level\n    \n    @retval datastream ID\n    @retval -1 if an error occurs\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_61get_input_datastream_id = 
#line 798 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_input_datastream_id"), (PyCFunction)__pyx_pw_7dsproc3_4core_61get_input_datastream_id, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_60get_input_datastream_id)};

#line 798 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_61get_input_datastream_id(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_dsc_name
#line 798 "dsproc3/core.pyx"
;
  char *__pyx_v_dsc_level
#line 798 "dsproc3/core.pyx"
;

#line 798 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 798 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 798 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_input_datastream_id (wrapper)", 0);

#line 798 "dsproc3/core.pyx"
  {

#line 798 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__dsc_name,&__pyx_n_s__dsc_level,0};

#line 798 "dsproc3/core.pyx"
    PyObject* values[2] = {0,0};

#line 798 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 798 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 798 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 798 "dsproc3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 798 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 798 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 798 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 798 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 798 "dsproc3/core.pyx"
      }

#line 798 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 798 "dsproc3/core.pyx"
      switch (pos_args) {

#line 798 "dsproc3/core.pyx"
        case  0:

#line 798 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dsc_name)) != 0)) kw_args--;
        else 
#line 798 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 798 "dsproc3/core.pyx"
        case  1:

#line 798 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dsc_level)) != 0)) kw_args--;

#line 798 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("get_input_datastream_id", 1, 2, 2, 1); 
#line 798 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 800; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 798 "dsproc3/core.pyx"
        }

#line 798 "dsproc3/core.pyx"
      }

#line 798 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 798 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_input_datastream_id") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 800; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 798 "dsproc3/core.pyx"
      }

#line 798 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 798 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 798 "dsproc3/core.pyx"
    } else {

#line 798 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 798 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 798 "dsproc3/core.pyx"
    }

#line 798 "dsproc3/core.pyx"
    __pyx_v_dsc_name = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_dsc_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 800; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 798 "dsproc3/core.pyx"
    __pyx_v_dsc_level = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_dsc_level) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 800; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 798 "dsproc3/core.pyx"
  }

#line 798 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 798 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_input_datastream_id", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 798 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 800; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 798 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 798 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_input_datastream_id", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 798 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 798 "dsproc3/core.pyx"
  return NULL;

#line 798 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 798 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_60get_input_datastream_id(__pyx_self, __pyx_v_dsc_name, __pyx_v_dsc_level);

#line 798 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 798 "dsproc3/core.pyx"
  return __pyx_r;

#line 798 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":800
 *     return dsproc_get_datastream_id(site, facility, dsc_name, dsc_level, role)
 * 
 * def get_input_datastream_id(char *dsc_name, char *dsc_level):             # <<<<<<<<<<<<<<
 *     """Get the ID of an input datastream.
 * 
 */

#line 800 "dsproc3/core.pyx"


#line 800 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_60get_input_datastream_id(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_dsc_name, char *__pyx_v_dsc_level) {

#line 800 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 800 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_input_datastream_id", 0);

  /* "dsproc3/core.pyx":816
 * 
 *     """
 *     return dsproc_get_input_datastream_id(dsc_name, dsc_level)             # <<<<<<<<<<<<<<
 * 
 * def get_input_datastream_ids():
 */

#line 816 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 816 "dsproc3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(dsproc_get_input_datastream_id(__pyx_v_dsc_name, __pyx_v_dsc_level)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 816; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 816 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 816 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 816 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 816 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 816 "dsproc3/core.pyx"


#line 816 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 816 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 816 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 816 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 816 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_input_datastream_id", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 816 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 816 "dsproc3/core.pyx"
  __pyx_L0:;

#line 816 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 816 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 816 "dsproc3/core.pyx"
  return __pyx_r;

#line 816 "dsproc3/core.pyx"
}

#line 816 "dsproc3/core.pyx"


#line 816 "dsproc3/core.pyx"
/* Python wrapper */

#line 816 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_63get_input_datastream_ids(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 816 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_62get_input_datastream_ids[] = "get_input_datastream_ids()\nGet the IDs of all input datastreams.\n    \n    This function will return an array of all input datastream ids. The memory\n    used by the returned array is dynamically allocated and will be freed when\n    the returned ndarray goes out of scope.\n    \n    If an error occurs in this function it will be appended to the log and\n    error mail messages, and the process status will be set appropriately.\n    \n    @retval ndarray of datastream IDs\n    @raise MemoryError if memory allocation error occurs\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_63get_input_datastream_ids = 
#line 816 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_input_datastream_ids"), (PyCFunction)__pyx_pw_7dsproc3_4core_63get_input_datastream_ids, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_62get_input_datastream_ids)};

#line 816 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_63get_input_datastream_ids(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {

#line 816 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 816 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 816 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_input_datastream_ids (wrapper)", 0);
  __pyx_r = 
#line 816 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_62get_input_datastream_ids(__pyx_self);

#line 816 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 816 "dsproc3/core.pyx"
  return __pyx_r;

#line 816 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":818
 *     return dsproc_get_input_datastream_id(dsc_name, dsc_level)
 * 
 * def get_input_datastream_ids():             # <<<<<<<<<<<<<<
 *     """Get the IDs of all input datastreams.
 * 
 */

#line 818 "dsproc3/core.pyx"


#line 818 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_62get_input_datastream_ids(CYTHON_UNUSED PyObject *__pyx_self) {
  int *__pyx_v_ids
#line 818 "dsproc3/core.pyx"
;
  int __pyx_v_count
#line 818 "dsproc3/core.pyx"
;
  npy_intp __pyx_v_dims
#line 818 "dsproc3/core.pyx"
;
  PyArrayObject *__pyx_v_ids_nd = 0
#line 818 "dsproc3/core.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_ids_nd
#line 818 "dsproc3/core.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_ids_nd
#line 818 "dsproc3/core.pyx"
;

#line 818 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyArrayObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 818 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_input_datastream_ids", 0);

#line 818 "dsproc3/core.pyx"
  __pyx_pybuffer_ids_nd.pybuffer.buf = NULL;

#line 818 "dsproc3/core.pyx"
  __pyx_pybuffer_ids_nd.refcount = 0;

#line 818 "dsproc3/core.pyx"
  __pyx_pybuffernd_ids_nd.data = NULL;

#line 818 "dsproc3/core.pyx"
  __pyx_pybuffernd_ids_nd.rcbuffer = &__pyx_pybuffer_ids_nd;

  /* "dsproc3/core.pyx":836
 *     cdef np.npy_intp dims
 *     cdef np.ndarray[np.int32_t, ndim=1] ids_nd
 *     count = dsproc_get_input_datastream_ids(&ids)             # <<<<<<<<<<<<<<
 *     if count == -1:
 *         raise MemoryError
 */

#line 836 "dsproc3/core.pyx"
  __pyx_v_count = dsproc_get_input_datastream_ids((&__pyx_v_ids));

  /* "dsproc3/core.pyx":837
 *     cdef np.ndarray[np.int32_t, ndim=1] ids_nd
 *     count = dsproc_get_input_datastream_ids(&ids)
 *     if count == -1:             # <<<<<<<<<<<<<<
 *         raise MemoryError
 *     if count == 0: # TODO: does this happen?
 */

#line 837 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_count == -1);

#line 837 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":838
 *     count = dsproc_get_input_datastream_ids(&ids)
 *     if count == -1:
 *         raise MemoryError             # <<<<<<<<<<<<<<
 *     if count == 0: # TODO: does this happen?
 *         return None
 */

#line 838 "dsproc3/core.pyx"
    PyErr_NoMemory(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 838 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 838 "dsproc3/core.pyx"
  }

#line 838 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":839
 *     if count == -1:
 *         raise MemoryError
 *     if count == 0: # TODO: does this happen?             # <<<<<<<<<<<<<<
 *         return None
 *     dims = count
 */

#line 839 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_count == 0);

#line 839 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":840
 *         raise MemoryError
 *     if count == 0: # TODO: does this happen?
 *         return None             # <<<<<<<<<<<<<<
 *     dims = count
 *     ids_nd = np.PyArray_SimpleNewFromData(1, &dims, np.NPY_INT32, ids)
 */

#line 840 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 840 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 840 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 840 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 840 "dsproc3/core.pyx"
    goto __pyx_L4;

#line 840 "dsproc3/core.pyx"
  }

#line 840 "dsproc3/core.pyx"
  __pyx_L4:;

  /* "dsproc3/core.pyx":841
 *     if count == 0: # TODO: does this happen?
 *         return None
 *     dims = count             # <<<<<<<<<<<<<<
 *     ids_nd = np.PyArray_SimpleNewFromData(1, &dims, np.NPY_INT32, ids)
 *     # allow numpy to reclaim memory when array goes out of scope
 */

#line 841 "dsproc3/core.pyx"
  __pyx_v_dims = __pyx_v_count;

  /* "dsproc3/core.pyx":842
 *         return None
 *     dims = count
 *     ids_nd = np.PyArray_SimpleNewFromData(1, &dims, np.NPY_INT32, ids)             # <<<<<<<<<<<<<<
 *     # allow numpy to reclaim memory when array goes out of scope
 *     ids_nd.base = PyCObject_FromVoidPtr(ids, _free)
 */

#line 842 "dsproc3/core.pyx"
  __pyx_t_2 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), NPY_INT32, __pyx_v_ids); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 842 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 842 "dsproc3/core.pyx"
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 842 "dsproc3/core.pyx"
  __pyx_t_3 = ((PyArrayObject *)__pyx_t_2);

#line 842 "dsproc3/core.pyx"
  {

#line 842 "dsproc3/core.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 842 "dsproc3/core.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ids_nd.rcbuffer->pybuffer);

#line 842 "dsproc3/core.pyx"
    __pyx_t_4 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_ids_nd.rcbuffer->pybuffer, (PyObject*)__pyx_t_3, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);

#line 842 "dsproc3/core.pyx"
    if (unlikely(__pyx_t_4 < 0)) {

#line 842 "dsproc3/core.pyx"
      PyErr_Fetch(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);

#line 842 "dsproc3/core.pyx"
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_ids_nd.rcbuffer->pybuffer, (PyObject*)__pyx_v_ids_nd, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {

#line 842 "dsproc3/core.pyx"
        Py_XDECREF(__pyx_t_5); Py_XDECREF(__pyx_t_6); Py_XDECREF(__pyx_t_7);

#line 842 "dsproc3/core.pyx"
        __Pyx_RaiseBufferFallbackError();

#line 842 "dsproc3/core.pyx"
      } else {

#line 842 "dsproc3/core.pyx"
        PyErr_Restore(__pyx_t_5, __pyx_t_6, __pyx_t_7);

#line 842 "dsproc3/core.pyx"
      }

#line 842 "dsproc3/core.pyx"
    }

#line 842 "dsproc3/core.pyx"
    __pyx_pybuffernd_ids_nd.diminfo[0].strides = __pyx_pybuffernd_ids_nd.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_ids_nd.diminfo[0].shape = __pyx_pybuffernd_ids_nd.rcbuffer->pybuffer.shape[0];

#line 842 "dsproc3/core.pyx"
    if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 842 "dsproc3/core.pyx"
  }

#line 842 "dsproc3/core.pyx"
  __pyx_t_3 = 0;

#line 842 "dsproc3/core.pyx"
  __pyx_v_ids_nd = ((PyArrayObject *)__pyx_t_2);

#line 842 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

  /* "dsproc3/core.pyx":844
 *     ids_nd = np.PyArray_SimpleNewFromData(1, &dims, np.NPY_INT32, ids)
 *     # allow numpy to reclaim memory when array goes out of scope
 *     ids_nd.base = PyCObject_FromVoidPtr(ids, _free)             # <<<<<<<<<<<<<<
 *     return ids_nd
 * 
 */

#line 844 "dsproc3/core.pyx"
  __pyx_v_ids_nd->base = PyCObject_FromVoidPtr(__pyx_v_ids, __pyx_f_7dsproc3_4core__free);

  /* "dsproc3/core.pyx":845
 *     # allow numpy to reclaim memory when array goes out of scope
 *     ids_nd.base = PyCObject_FromVoidPtr(ids, _free)
 *     return ids_nd             # <<<<<<<<<<<<<<
 * 
 * def get_output_datastream_id(char *dsc_name, char *dsc_level):
 */

#line 845 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 845 "dsproc3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_ids_nd));

#line 845 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_ids_nd);

#line 845 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 845 "dsproc3/core.pyx"


#line 845 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 845 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 845 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 845 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 845 "dsproc3/core.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 845 "dsproc3/core.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 845 "dsproc3/core.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ids_nd.rcbuffer->pybuffer);

#line 845 "dsproc3/core.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 845 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_input_datastream_ids", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 845 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 845 "dsproc3/core.pyx"
  goto __pyx_L2;

#line 845 "dsproc3/core.pyx"
  __pyx_L0:;

#line 845 "dsproc3/core.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ids_nd.rcbuffer->pybuffer);

#line 845 "dsproc3/core.pyx"
  __pyx_L2:;

#line 845 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_ids_nd);

#line 845 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 845 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 845 "dsproc3/core.pyx"
  return __pyx_r;

#line 845 "dsproc3/core.pyx"
}

#line 845 "dsproc3/core.pyx"


#line 845 "dsproc3/core.pyx"
/* Python wrapper */

#line 845 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_65get_output_datastream_id(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 845 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_64get_output_datastream_id[] = "get_output_datastream_id(char *dsc_name, char *dsc_level)\nGet the ID of an output datastream.\n    \n    This function will generate an error if the specified datastream class\n    has not been defined in the database as an output for this process.\n    \n    If an error occurs in this function it will be appended to the log and\n    error mail messages, and the process status will be set appropriately.\n    \n    @param dsc_name - datastream class name\n    @param dsc_level - datastream class level\n    \n    @retval datastream ID\n    @retval -1 if an error occurs\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_65get_output_datastream_id = 
#line 845 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_output_datastream_id"), (PyCFunction)__pyx_pw_7dsproc3_4core_65get_output_datastream_id, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_64get_output_datastream_id)};

#line 845 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_65get_output_datastream_id(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_dsc_name
#line 845 "dsproc3/core.pyx"
;
  char *__pyx_v_dsc_level
#line 845 "dsproc3/core.pyx"
;

#line 845 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 845 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 845 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_output_datastream_id (wrapper)", 0);

#line 845 "dsproc3/core.pyx"
  {

#line 845 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__dsc_name,&__pyx_n_s__dsc_level,0};

#line 845 "dsproc3/core.pyx"
    PyObject* values[2] = {0,0};

#line 845 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 845 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 845 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 845 "dsproc3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 845 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 845 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 845 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 845 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 845 "dsproc3/core.pyx"
      }

#line 845 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 845 "dsproc3/core.pyx"
      switch (pos_args) {

#line 845 "dsproc3/core.pyx"
        case  0:

#line 845 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dsc_name)) != 0)) kw_args--;
        else 
#line 845 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 845 "dsproc3/core.pyx"
        case  1:

#line 845 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dsc_level)) != 0)) kw_args--;

#line 845 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("get_output_datastream_id", 1, 2, 2, 1); 
#line 845 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 845 "dsproc3/core.pyx"
        }

#line 845 "dsproc3/core.pyx"
      }

#line 845 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 845 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_output_datastream_id") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 845 "dsproc3/core.pyx"
      }

#line 845 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 845 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 845 "dsproc3/core.pyx"
    } else {

#line 845 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 845 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 845 "dsproc3/core.pyx"
    }

#line 845 "dsproc3/core.pyx"
    __pyx_v_dsc_name = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_dsc_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 845 "dsproc3/core.pyx"
    __pyx_v_dsc_level = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_dsc_level) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 845 "dsproc3/core.pyx"
  }

#line 845 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 845 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_output_datastream_id", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 845 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 845 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 845 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_output_datastream_id", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 845 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 845 "dsproc3/core.pyx"
  return NULL;

#line 845 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 845 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_64get_output_datastream_id(__pyx_self, __pyx_v_dsc_name, __pyx_v_dsc_level);

#line 845 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 845 "dsproc3/core.pyx"
  return __pyx_r;

#line 845 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":847
 *     return ids_nd
 * 
 * def get_output_datastream_id(char *dsc_name, char *dsc_level):             # <<<<<<<<<<<<<<
 *     """Get the ID of an output datastream.
 * 
 */

#line 847 "dsproc3/core.pyx"


#line 847 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_64get_output_datastream_id(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_dsc_name, char *__pyx_v_dsc_level) {

#line 847 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 847 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_output_datastream_id", 0);

  /* "dsproc3/core.pyx":863
 * 
 *     """
 *     return dsproc_get_output_datastream_id(dsc_name, dsc_level)             # <<<<<<<<<<<<<<
 * 
 * def get_output_datastream_ids():
 */

#line 863 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 863 "dsproc3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(dsproc_get_output_datastream_id(__pyx_v_dsc_name, __pyx_v_dsc_level)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 863; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 863 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 863 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 863 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 863 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 863 "dsproc3/core.pyx"


#line 863 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 863 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 863 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 863 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 863 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_output_datastream_id", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 863 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 863 "dsproc3/core.pyx"
  __pyx_L0:;

#line 863 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 863 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 863 "dsproc3/core.pyx"
  return __pyx_r;

#line 863 "dsproc3/core.pyx"
}

#line 863 "dsproc3/core.pyx"


#line 863 "dsproc3/core.pyx"
/* Python wrapper */

#line 863 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_67get_output_datastream_ids(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 863 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_66get_output_datastream_ids[] = "get_output_datastream_ids()\nGet the IDs of all output datastreams.\n    \n    This function will return an array of all input datastream ids. The memory\n    used by the returned array is dynamically allocated and will be freed when\n    the returned ndarray goes out of scope.\n    \n    If an error occurs in this function it will be appended to the log and\n    error mail messages, and the process status will be set appropriately.\n    \n    @retval ndarray of datastream IDs\n    @raise MemoryError if memory allocation error occurs\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_67get_output_datastream_ids = 
#line 863 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_output_datastream_ids"), (PyCFunction)__pyx_pw_7dsproc3_4core_67get_output_datastream_ids, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_66get_output_datastream_ids)};

#line 863 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_67get_output_datastream_ids(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {

#line 863 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 863 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 863 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_output_datastream_ids (wrapper)", 0);
  __pyx_r = 
#line 863 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_66get_output_datastream_ids(__pyx_self);

#line 863 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 863 "dsproc3/core.pyx"
  return __pyx_r;

#line 863 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":865
 *     return dsproc_get_output_datastream_id(dsc_name, dsc_level)
 * 
 * def get_output_datastream_ids():             # <<<<<<<<<<<<<<
 *     """Get the IDs of all output datastreams.
 * 
 */

#line 865 "dsproc3/core.pyx"


#line 865 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_66get_output_datastream_ids(CYTHON_UNUSED PyObject *__pyx_self) {
  int *__pyx_v_ids
#line 865 "dsproc3/core.pyx"
;
  int __pyx_v_count
#line 865 "dsproc3/core.pyx"
;
  npy_intp __pyx_v_dims
#line 865 "dsproc3/core.pyx"
;
  PyArrayObject *__pyx_v_ids_nd = 0
#line 865 "dsproc3/core.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_ids_nd
#line 865 "dsproc3/core.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_ids_nd
#line 865 "dsproc3/core.pyx"
;

#line 865 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyArrayObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 865 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_output_datastream_ids", 0);

#line 865 "dsproc3/core.pyx"
  __pyx_pybuffer_ids_nd.pybuffer.buf = NULL;

#line 865 "dsproc3/core.pyx"
  __pyx_pybuffer_ids_nd.refcount = 0;

#line 865 "dsproc3/core.pyx"
  __pyx_pybuffernd_ids_nd.data = NULL;

#line 865 "dsproc3/core.pyx"
  __pyx_pybuffernd_ids_nd.rcbuffer = &__pyx_pybuffer_ids_nd;

  /* "dsproc3/core.pyx":883
 *     cdef np.npy_intp dims
 *     cdef np.ndarray[np.int32_t, ndim=1] ids_nd
 *     count = dsproc_get_output_datastream_ids(&ids)             # <<<<<<<<<<<<<<
 *     if count == -1:
 *         raise MemoryError
 */

#line 883 "dsproc3/core.pyx"
  __pyx_v_count = dsproc_get_output_datastream_ids((&__pyx_v_ids));

  /* "dsproc3/core.pyx":884
 *     cdef np.ndarray[np.int32_t, ndim=1] ids_nd
 *     count = dsproc_get_output_datastream_ids(&ids)
 *     if count == -1:             # <<<<<<<<<<<<<<
 *         raise MemoryError
 *     if count == 0: # TODO: does this happen?
 */

#line 884 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_count == -1);

#line 884 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":885
 *     count = dsproc_get_output_datastream_ids(&ids)
 *     if count == -1:
 *         raise MemoryError             # <<<<<<<<<<<<<<
 *     if count == 0: # TODO: does this happen?
 *         return None
 */

#line 885 "dsproc3/core.pyx"
    PyErr_NoMemory(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 885; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 885 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 885 "dsproc3/core.pyx"
  }

#line 885 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":886
 *     if count == -1:
 *         raise MemoryError
 *     if count == 0: # TODO: does this happen?             # <<<<<<<<<<<<<<
 *         return None
 *     dims = count
 */

#line 886 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_count == 0);

#line 886 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":887
 *         raise MemoryError
 *     if count == 0: # TODO: does this happen?
 *         return None             # <<<<<<<<<<<<<<
 *     dims = count
 *     ids_nd = np.PyArray_SimpleNewFromData(1, &dims, np.NPY_INT32, ids)
 */

#line 887 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 887 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 887 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 887 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 887 "dsproc3/core.pyx"
    goto __pyx_L4;

#line 887 "dsproc3/core.pyx"
  }

#line 887 "dsproc3/core.pyx"
  __pyx_L4:;

  /* "dsproc3/core.pyx":888
 *     if count == 0: # TODO: does this happen?
 *         return None
 *     dims = count             # <<<<<<<<<<<<<<
 *     ids_nd = np.PyArray_SimpleNewFromData(1, &dims, np.NPY_INT32, ids)
 *     # allow numpy to reclaim memory when array goes out of scope
 */

#line 888 "dsproc3/core.pyx"
  __pyx_v_dims = __pyx_v_count;

  /* "dsproc3/core.pyx":889
 *         return None
 *     dims = count
 *     ids_nd = np.PyArray_SimpleNewFromData(1, &dims, np.NPY_INT32, ids)             # <<<<<<<<<<<<<<
 *     # allow numpy to reclaim memory when array goes out of scope
 *     ids_nd.base = PyCObject_FromVoidPtr(ids, _free)
 */

#line 889 "dsproc3/core.pyx"
  __pyx_t_2 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), NPY_INT32, __pyx_v_ids); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 889 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 889 "dsproc3/core.pyx"
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 889 "dsproc3/core.pyx"
  __pyx_t_3 = ((PyArrayObject *)__pyx_t_2);

#line 889 "dsproc3/core.pyx"
  {

#line 889 "dsproc3/core.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 889 "dsproc3/core.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ids_nd.rcbuffer->pybuffer);

#line 889 "dsproc3/core.pyx"
    __pyx_t_4 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_ids_nd.rcbuffer->pybuffer, (PyObject*)__pyx_t_3, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);

#line 889 "dsproc3/core.pyx"
    if (unlikely(__pyx_t_4 < 0)) {

#line 889 "dsproc3/core.pyx"
      PyErr_Fetch(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);

#line 889 "dsproc3/core.pyx"
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_ids_nd.rcbuffer->pybuffer, (PyObject*)__pyx_v_ids_nd, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {

#line 889 "dsproc3/core.pyx"
        Py_XDECREF(__pyx_t_5); Py_XDECREF(__pyx_t_6); Py_XDECREF(__pyx_t_7);

#line 889 "dsproc3/core.pyx"
        __Pyx_RaiseBufferFallbackError();

#line 889 "dsproc3/core.pyx"
      } else {

#line 889 "dsproc3/core.pyx"
        PyErr_Restore(__pyx_t_5, __pyx_t_6, __pyx_t_7);

#line 889 "dsproc3/core.pyx"
      }

#line 889 "dsproc3/core.pyx"
    }

#line 889 "dsproc3/core.pyx"
    __pyx_pybuffernd_ids_nd.diminfo[0].strides = __pyx_pybuffernd_ids_nd.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_ids_nd.diminfo[0].shape = __pyx_pybuffernd_ids_nd.rcbuffer->pybuffer.shape[0];

#line 889 "dsproc3/core.pyx"
    if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 889 "dsproc3/core.pyx"
  }

#line 889 "dsproc3/core.pyx"
  __pyx_t_3 = 0;

#line 889 "dsproc3/core.pyx"
  __pyx_v_ids_nd = ((PyArrayObject *)__pyx_t_2);

#line 889 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

  /* "dsproc3/core.pyx":891
 *     ids_nd = np.PyArray_SimpleNewFromData(1, &dims, np.NPY_INT32, ids)
 *     # allow numpy to reclaim memory when array goes out of scope
 *     ids_nd.base = PyCObject_FromVoidPtr(ids, _free)             # <<<<<<<<<<<<<<
 *     return ids_nd
 * 
 */

#line 891 "dsproc3/core.pyx"
  __pyx_v_ids_nd->base = PyCObject_FromVoidPtr(__pyx_v_ids, __pyx_f_7dsproc3_4core__free);

  /* "dsproc3/core.pyx":892
 *     # allow numpy to reclaim memory when array goes out of scope
 *     ids_nd.base = PyCObject_FromVoidPtr(ids, _free)
 *     return ids_nd             # <<<<<<<<<<<<<<
 * 
 * def datastream_name(int ds_id):
 */

#line 892 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 892 "dsproc3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_ids_nd));

#line 892 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_ids_nd);

#line 892 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 892 "dsproc3/core.pyx"


#line 892 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 892 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 892 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 892 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 892 "dsproc3/core.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 892 "dsproc3/core.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 892 "dsproc3/core.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ids_nd.rcbuffer->pybuffer);

#line 892 "dsproc3/core.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 892 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_output_datastream_ids", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 892 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 892 "dsproc3/core.pyx"
  goto __pyx_L2;

#line 892 "dsproc3/core.pyx"
  __pyx_L0:;

#line 892 "dsproc3/core.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ids_nd.rcbuffer->pybuffer);

#line 892 "dsproc3/core.pyx"
  __pyx_L2:;

#line 892 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_ids_nd);

#line 892 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 892 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 892 "dsproc3/core.pyx"
  return __pyx_r;

#line 892 "dsproc3/core.pyx"
}

#line 892 "dsproc3/core.pyx"


#line 892 "dsproc3/core.pyx"
/* Python wrapper */

#line 892 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_69datastream_name(PyObject *__pyx_self, PyObject *__pyx_arg_ds_id); /*proto*/

#line 892 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_68datastream_name[] = "datastream_name(int ds_id)\nReturns the fully qualified datastream name.\n    \n    @param ds_id - datastream ID\n    \n    @retval the datastream name\n    @retval None if the datastream ID is not valid\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_69datastream_name = 
#line 892 "dsproc3/core.pyx"
{__Pyx_NAMESTR("datastream_name"), (PyCFunction)__pyx_pw_7dsproc3_4core_69datastream_name, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_68datastream_name)};

#line 892 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_69datastream_name(PyObject *__pyx_self, PyObject *__pyx_arg_ds_id) {
  int __pyx_v_ds_id
#line 892 "dsproc3/core.pyx"
;

#line 892 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 892 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 892 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("datastream_name (wrapper)", 0);

#line 892 "dsproc3/core.pyx"
  assert(__pyx_arg_ds_id); {

#line 892 "dsproc3/core.pyx"
    __pyx_v_ds_id = __Pyx_PyInt_AsInt(__pyx_arg_ds_id); if (unlikely((__pyx_v_ds_id == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 892 "dsproc3/core.pyx"
  }

#line 892 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 892 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 892 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.datastream_name", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 892 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 892 "dsproc3/core.pyx"
  return NULL;

#line 892 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 892 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_68datastream_name(__pyx_self, ((int)__pyx_v_ds_id));

#line 892 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 892 "dsproc3/core.pyx"
  return __pyx_r;

#line 892 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":894
 *     return ids_nd
 * 
 * def datastream_name(int ds_id):             # <<<<<<<<<<<<<<
 *     """Returns the fully qualified datastream name.
 * 
 */

#line 894 "dsproc3/core.pyx"


#line 894 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_68datastream_name(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id) {
  char *__pyx_v_retval
#line 894 "dsproc3/core.pyx"
;

#line 894 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 894 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("datastream_name", 0);

  /* "dsproc3/core.pyx":903
 * 
 *     """
 *     cdef char *retval = dsproc_datastream_name(ds_id)             # <<<<<<<<<<<<<<
 *     if retval == NULL:
 *         return None
 */

#line 903 "dsproc3/core.pyx"
  __pyx_v_retval = dsproc_datastream_name(__pyx_v_ds_id);

  /* "dsproc3/core.pyx":904
 *     """
 *     cdef char *retval = dsproc_datastream_name(ds_id)
 *     if retval == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return retval
 */

#line 904 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_retval == NULL);

#line 904 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":905
 *     cdef char *retval = dsproc_datastream_name(ds_id)
 *     if retval == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return retval
 * 
 */

#line 905 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 905 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 905 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 905 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 905 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 905 "dsproc3/core.pyx"
  }

#line 905 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":906
 *     if retval == NULL:
 *         return None
 *     return retval             # <<<<<<<<<<<<<<
 * 
 * def datastream_path(int ds_id):
 */

#line 906 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 906 "dsproc3/core.pyx"
  __pyx_t_2 = PyBytes_FromString(__pyx_v_retval); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 906 "dsproc3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));

#line 906 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_t_2);

#line 906 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 906 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 906 "dsproc3/core.pyx"


#line 906 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 906 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 906 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 906 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 906 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.datastream_name", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 906 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 906 "dsproc3/core.pyx"
  __pyx_L0:;

#line 906 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 906 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 906 "dsproc3/core.pyx"
  return __pyx_r;

#line 906 "dsproc3/core.pyx"
}

#line 906 "dsproc3/core.pyx"


#line 906 "dsproc3/core.pyx"
/* Python wrapper */

#line 906 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_71datastream_path(PyObject *__pyx_self, PyObject *__pyx_arg_ds_id); /*proto*/

#line 906 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_70datastream_path[] = "datastream_path(int ds_id)\nReturns the path to the datastream directory.\n    \n    @param ds_id - datastream ID\n    \n    @retval the path to the datastream directory\n    @retval None if the datastream path has not ben set\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_71datastream_path = 
#line 906 "dsproc3/core.pyx"
{__Pyx_NAMESTR("datastream_path"), (PyCFunction)__pyx_pw_7dsproc3_4core_71datastream_path, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_70datastream_path)};

#line 906 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_71datastream_path(PyObject *__pyx_self, PyObject *__pyx_arg_ds_id) {
  int __pyx_v_ds_id
#line 906 "dsproc3/core.pyx"
;

#line 906 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 906 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 906 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("datastream_path (wrapper)", 0);

#line 906 "dsproc3/core.pyx"
  assert(__pyx_arg_ds_id); {

#line 906 "dsproc3/core.pyx"
    __pyx_v_ds_id = __Pyx_PyInt_AsInt(__pyx_arg_ds_id); if (unlikely((__pyx_v_ds_id == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 906 "dsproc3/core.pyx"
  }

#line 906 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 906 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 906 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.datastream_path", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 906 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 906 "dsproc3/core.pyx"
  return NULL;

#line 906 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 906 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_70datastream_path(__pyx_self, ((int)__pyx_v_ds_id));

#line 906 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 906 "dsproc3/core.pyx"
  return __pyx_r;

#line 906 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":908
 *     return retval
 * 
 * def datastream_path(int ds_id):             # <<<<<<<<<<<<<<
 *     """Returns the path to the datastream directory.
 * 
 */

#line 908 "dsproc3/core.pyx"


#line 908 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_70datastream_path(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id) {
  char *__pyx_v_retval
#line 908 "dsproc3/core.pyx"
;

#line 908 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 908 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("datastream_path", 0);

  /* "dsproc3/core.pyx":917
 * 
 *     """
 *     cdef char *retval = dsproc_datastream_path(ds_id)             # <<<<<<<<<<<<<<
 *     if retval == NULL:
 *         return None
 */

#line 917 "dsproc3/core.pyx"
  __pyx_v_retval = dsproc_datastream_path(__pyx_v_ds_id);

  /* "dsproc3/core.pyx":918
 *     """
 *     cdef char *retval = dsproc_datastream_path(ds_id)
 *     if retval == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return retval
 */

#line 918 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_retval == NULL);

#line 918 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":919
 *     cdef char *retval = dsproc_datastream_path(ds_id)
 *     if retval == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return retval
 * 
 */

#line 919 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 919 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 919 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 919 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 919 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 919 "dsproc3/core.pyx"
  }

#line 919 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":920
 *     if retval == NULL:
 *         return None
 *     return retval             # <<<<<<<<<<<<<<
 * 
 * def datastream_site(int ds_id):
 */

#line 920 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 920 "dsproc3/core.pyx"
  __pyx_t_2 = PyBytes_FromString(__pyx_v_retval); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 920; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 920 "dsproc3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));

#line 920 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_t_2);

#line 920 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 920 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 920 "dsproc3/core.pyx"


#line 920 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 920 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 920 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 920 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 920 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.datastream_path", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 920 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 920 "dsproc3/core.pyx"
  __pyx_L0:;

#line 920 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 920 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 920 "dsproc3/core.pyx"
  return __pyx_r;

#line 920 "dsproc3/core.pyx"
}

#line 920 "dsproc3/core.pyx"


#line 920 "dsproc3/core.pyx"
/* Python wrapper */

#line 920 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_73datastream_site(PyObject *__pyx_self, PyObject *__pyx_arg_ds_id); /*proto*/

#line 920 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_72datastream_site[] = "datastream_site(int ds_id)\nReturns the datastream site.\n    \n    @param ds_id - datastream ID\n    \n    @retval the datastream site code\n    @retval None if the datastream ID is not valid\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_73datastream_site = 
#line 920 "dsproc3/core.pyx"
{__Pyx_NAMESTR("datastream_site"), (PyCFunction)__pyx_pw_7dsproc3_4core_73datastream_site, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_72datastream_site)};

#line 920 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_73datastream_site(PyObject *__pyx_self, PyObject *__pyx_arg_ds_id) {
  int __pyx_v_ds_id
#line 920 "dsproc3/core.pyx"
;

#line 920 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 920 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 920 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("datastream_site (wrapper)", 0);

#line 920 "dsproc3/core.pyx"
  assert(__pyx_arg_ds_id); {

#line 920 "dsproc3/core.pyx"
    __pyx_v_ds_id = __Pyx_PyInt_AsInt(__pyx_arg_ds_id); if (unlikely((__pyx_v_ds_id == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 920 "dsproc3/core.pyx"
  }

#line 920 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 920 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 920 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.datastream_site", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 920 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 920 "dsproc3/core.pyx"
  return NULL;

#line 920 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 920 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_72datastream_site(__pyx_self, ((int)__pyx_v_ds_id));

#line 920 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 920 "dsproc3/core.pyx"
  return __pyx_r;

#line 920 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":922
 *     return retval
 * 
 * def datastream_site(int ds_id):             # <<<<<<<<<<<<<<
 *     """Returns the datastream site.
 * 
 */

#line 922 "dsproc3/core.pyx"


#line 922 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_72datastream_site(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id) {
  char *__pyx_v_retval
#line 922 "dsproc3/core.pyx"
;

#line 922 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 922 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("datastream_site", 0);

  /* "dsproc3/core.pyx":931
 * 
 *     """
 *     cdef char *retval = dsproc_datastream_site(ds_id)             # <<<<<<<<<<<<<<
 *     if retval == NULL:
 *         return None
 */

#line 931 "dsproc3/core.pyx"
  __pyx_v_retval = dsproc_datastream_site(__pyx_v_ds_id);

  /* "dsproc3/core.pyx":932
 *     """
 *     cdef char *retval = dsproc_datastream_site(ds_id)
 *     if retval == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return retval
 */

#line 932 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_retval == NULL);

#line 932 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":933
 *     cdef char *retval = dsproc_datastream_site(ds_id)
 *     if retval == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return retval
 * 
 */

#line 933 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 933 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 933 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 933 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 933 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 933 "dsproc3/core.pyx"
  }

#line 933 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":934
 *     if retval == NULL:
 *         return None
 *     return retval             # <<<<<<<<<<<<<<
 * 
 * def datastream_facility(int ds_id):
 */

#line 934 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 934 "dsproc3/core.pyx"
  __pyx_t_2 = PyBytes_FromString(__pyx_v_retval); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 934 "dsproc3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));

#line 934 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_t_2);

#line 934 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 934 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 934 "dsproc3/core.pyx"


#line 934 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 934 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 934 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 934 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 934 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.datastream_site", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 934 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 934 "dsproc3/core.pyx"
  __pyx_L0:;

#line 934 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 934 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 934 "dsproc3/core.pyx"
  return __pyx_r;

#line 934 "dsproc3/core.pyx"
}

#line 934 "dsproc3/core.pyx"


#line 934 "dsproc3/core.pyx"
/* Python wrapper */

#line 934 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_75datastream_facility(PyObject *__pyx_self, PyObject *__pyx_arg_ds_id); /*proto*/

#line 934 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_74datastream_facility[] = "datastream_facility(int ds_id)\n 995  * Returns the datastream facility.\n    \n    @param ds_id - datastream ID\n    \n    @retval the datastream facility code\n    @retval None if the datastream ID is not valid\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_75datastream_facility = 
#line 934 "dsproc3/core.pyx"
{__Pyx_NAMESTR("datastream_facility"), (PyCFunction)__pyx_pw_7dsproc3_4core_75datastream_facility, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_74datastream_facility)};

#line 934 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_75datastream_facility(PyObject *__pyx_self, PyObject *__pyx_arg_ds_id) {
  int __pyx_v_ds_id
#line 934 "dsproc3/core.pyx"
;

#line 934 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 934 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 934 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("datastream_facility (wrapper)", 0);

#line 934 "dsproc3/core.pyx"
  assert(__pyx_arg_ds_id); {

#line 934 "dsproc3/core.pyx"
    __pyx_v_ds_id = __Pyx_PyInt_AsInt(__pyx_arg_ds_id); if (unlikely((__pyx_v_ds_id == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 936; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 934 "dsproc3/core.pyx"
  }

#line 934 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 934 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 934 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.datastream_facility", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 934 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 934 "dsproc3/core.pyx"
  return NULL;

#line 934 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 934 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_74datastream_facility(__pyx_self, ((int)__pyx_v_ds_id));

#line 934 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 934 "dsproc3/core.pyx"
  return __pyx_r;

#line 934 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":936
 *     return retval
 * 
 * def datastream_facility(int ds_id):             # <<<<<<<<<<<<<<
 *     """ 995  * Returns the datastream facility.
 * 
 */

#line 936 "dsproc3/core.pyx"


#line 936 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_74datastream_facility(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id) {
  char *__pyx_v_retval
#line 936 "dsproc3/core.pyx"
;

#line 936 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 936 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("datastream_facility", 0);

  /* "dsproc3/core.pyx":945
 * 
 *     """
 *     cdef char *retval = dsproc_datastream_facility(ds_id)             # <<<<<<<<<<<<<<
 *     if retval == NULL:
 *         return None
 */

#line 945 "dsproc3/core.pyx"
  __pyx_v_retval = dsproc_datastream_facility(__pyx_v_ds_id);

  /* "dsproc3/core.pyx":946
 *     """
 *     cdef char *retval = dsproc_datastream_facility(ds_id)
 *     if retval == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return retval
 */

#line 946 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_retval == NULL);

#line 946 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":947
 *     cdef char *retval = dsproc_datastream_facility(ds_id)
 *     if retval == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return retval
 * 
 */

#line 947 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 947 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 947 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 947 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 947 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 947 "dsproc3/core.pyx"
  }

#line 947 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":948
 *     if retval == NULL:
 *         return None
 *     return retval             # <<<<<<<<<<<<<<
 * 
 * def datastream_class_name(int ds_id):
 */

#line 948 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 948 "dsproc3/core.pyx"
  __pyx_t_2 = PyBytes_FromString(__pyx_v_retval); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 948 "dsproc3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));

#line 948 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_t_2);

#line 948 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 948 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 948 "dsproc3/core.pyx"


#line 948 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 948 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 948 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 948 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 948 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.datastream_facility", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 948 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 948 "dsproc3/core.pyx"
  __pyx_L0:;

#line 948 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 948 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 948 "dsproc3/core.pyx"
  return __pyx_r;

#line 948 "dsproc3/core.pyx"
}

#line 948 "dsproc3/core.pyx"


#line 948 "dsproc3/core.pyx"
/* Python wrapper */

#line 948 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_77datastream_class_name(PyObject *__pyx_self, PyObject *__pyx_arg_ds_id); /*proto*/

#line 948 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_76datastream_class_name[] = "datastream_class_name(int ds_id)\nReturns the datastream class name.\n    \n    @param ds_id - datastream ID\n    \n    @retval the datastream class name\n    @retval None if the datastream ID is not valid\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_77datastream_class_name = 
#line 948 "dsproc3/core.pyx"
{__Pyx_NAMESTR("datastream_class_name"), (PyCFunction)__pyx_pw_7dsproc3_4core_77datastream_class_name, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_76datastream_class_name)};

#line 948 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_77datastream_class_name(PyObject *__pyx_self, PyObject *__pyx_arg_ds_id) {
  int __pyx_v_ds_id
#line 948 "dsproc3/core.pyx"
;

#line 948 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 948 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 948 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("datastream_class_name (wrapper)", 0);

#line 948 "dsproc3/core.pyx"
  assert(__pyx_arg_ds_id); {

#line 948 "dsproc3/core.pyx"
    __pyx_v_ds_id = __Pyx_PyInt_AsInt(__pyx_arg_ds_id); if (unlikely((__pyx_v_ds_id == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 950; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 948 "dsproc3/core.pyx"
  }

#line 948 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 948 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 948 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.datastream_class_name", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 948 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 948 "dsproc3/core.pyx"
  return NULL;

#line 948 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 948 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_76datastream_class_name(__pyx_self, ((int)__pyx_v_ds_id));

#line 948 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 948 "dsproc3/core.pyx"
  return __pyx_r;

#line 948 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":950
 *     return retval
 * 
 * def datastream_class_name(int ds_id):             # <<<<<<<<<<<<<<
 *     """Returns the datastream class name.
 * 
 */

#line 950 "dsproc3/core.pyx"


#line 950 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_76datastream_class_name(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id) {
  char *__pyx_v_retval
#line 950 "dsproc3/core.pyx"
;

#line 950 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 950 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("datastream_class_name", 0);

  /* "dsproc3/core.pyx":959
 * 
 *     """
 *     cdef char *retval = dsproc_datastream_class_name(ds_id)             # <<<<<<<<<<<<<<
 *     if retval == NULL:
 *         return None
 */

#line 959 "dsproc3/core.pyx"
  __pyx_v_retval = dsproc_datastream_class_name(__pyx_v_ds_id);

  /* "dsproc3/core.pyx":960
 *     """
 *     cdef char *retval = dsproc_datastream_class_name(ds_id)
 *     if retval == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return retval
 */

#line 960 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_retval == NULL);

#line 960 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":961
 *     cdef char *retval = dsproc_datastream_class_name(ds_id)
 *     if retval == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return retval
 * 
 */

#line 961 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 961 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 961 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 961 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 961 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 961 "dsproc3/core.pyx"
  }

#line 961 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":962
 *     if retval == NULL:
 *         return None
 *     return retval             # <<<<<<<<<<<<<<
 * 
 * def datastream_class_level(int ds_id):
 */

#line 962 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 962 "dsproc3/core.pyx"
  __pyx_t_2 = PyBytes_FromString(__pyx_v_retval); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 962; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 962 "dsproc3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));

#line 962 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_t_2);

#line 962 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 962 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 962 "dsproc3/core.pyx"


#line 962 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 962 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 962 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 962 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 962 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.datastream_class_name", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 962 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 962 "dsproc3/core.pyx"
  __pyx_L0:;

#line 962 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 962 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 962 "dsproc3/core.pyx"
  return __pyx_r;

#line 962 "dsproc3/core.pyx"
}

#line 962 "dsproc3/core.pyx"


#line 962 "dsproc3/core.pyx"
/* Python wrapper */

#line 962 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_79datastream_class_level(PyObject *__pyx_self, PyObject *__pyx_arg_ds_id); /*proto*/

#line 962 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_78datastream_class_level[] = "datastream_class_level(int ds_id)\nReturns the datastream class level.\n    \n    @param ds_id - datastream ID\n    \n    @retval the datastream class level\n    @retval None if the datastream ID is not valid\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_79datastream_class_level = 
#line 962 "dsproc3/core.pyx"
{__Pyx_NAMESTR("datastream_class_level"), (PyCFunction)__pyx_pw_7dsproc3_4core_79datastream_class_level, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_78datastream_class_level)};

#line 962 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_79datastream_class_level(PyObject *__pyx_self, PyObject *__pyx_arg_ds_id) {
  int __pyx_v_ds_id
#line 962 "dsproc3/core.pyx"
;

#line 962 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 962 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 962 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("datastream_class_level (wrapper)", 0);

#line 962 "dsproc3/core.pyx"
  assert(__pyx_arg_ds_id); {

#line 962 "dsproc3/core.pyx"
    __pyx_v_ds_id = __Pyx_PyInt_AsInt(__pyx_arg_ds_id); if (unlikely((__pyx_v_ds_id == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 964; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 962 "dsproc3/core.pyx"
  }

#line 962 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 962 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 962 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.datastream_class_level", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 962 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 962 "dsproc3/core.pyx"
  return NULL;

#line 962 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 962 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_78datastream_class_level(__pyx_self, ((int)__pyx_v_ds_id));

#line 962 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 962 "dsproc3/core.pyx"
  return __pyx_r;

#line 962 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":964
 *     return retval
 * 
 * def datastream_class_level(int ds_id):             # <<<<<<<<<<<<<<
 *     """Returns the datastream class level.
 * 
 */

#line 964 "dsproc3/core.pyx"


#line 964 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_78datastream_class_level(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id) {
  char *__pyx_v_retval
#line 964 "dsproc3/core.pyx"
;

#line 964 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 964 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("datastream_class_level", 0);

  /* "dsproc3/core.pyx":973
 * 
 *     """
 *     cdef char *retval = dsproc_datastream_class_level(ds_id)             # <<<<<<<<<<<<<<
 *     if retval == NULL:
 *         return None
 */

#line 973 "dsproc3/core.pyx"
  __pyx_v_retval = dsproc_datastream_class_level(__pyx_v_ds_id);

  /* "dsproc3/core.pyx":974
 *     """
 *     cdef char *retval = dsproc_datastream_class_level(ds_id)
 *     if retval == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return retval
 */

#line 974 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_retval == NULL);

#line 974 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":975
 *     cdef char *retval = dsproc_datastream_class_level(ds_id)
 *     if retval == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return retval
 * 
 */

#line 975 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 975 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 975 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 975 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 975 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 975 "dsproc3/core.pyx"
  }

#line 975 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":976
 *     if retval == NULL:
 *         return None
 *     return retval             # <<<<<<<<<<<<<<
 * 
 * def dataset_name(cds3.core.Group dataset):
 */

#line 976 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 976 "dsproc3/core.pyx"
  __pyx_t_2 = PyBytes_FromString(__pyx_v_retval); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 976; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 976 "dsproc3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));

#line 976 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_t_2);

#line 976 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 976 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 976 "dsproc3/core.pyx"


#line 976 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 976 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 976 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 976 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 976 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.datastream_class_level", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 976 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 976 "dsproc3/core.pyx"
  __pyx_L0:;

#line 976 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 976 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 976 "dsproc3/core.pyx"
  return __pyx_r;

#line 976 "dsproc3/core.pyx"
}

#line 976 "dsproc3/core.pyx"


#line 976 "dsproc3/core.pyx"
/* Python wrapper */

#line 976 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_81dataset_name(PyObject *__pyx_self, PyObject *__pyx_v_dataset); /*proto*/

#line 976 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_80dataset_name[] = "dataset_name(Group dataset)\nReturns the dataset name.\n    \n    @param dataset pointer to the dataset\n    \n    @retval name pointer to the dataset name\n    @retval None if the specified dataset is None\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_81dataset_name = 
#line 976 "dsproc3/core.pyx"
{__Pyx_NAMESTR("dataset_name"), (PyCFunction)__pyx_pw_7dsproc3_4core_81dataset_name, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_80dataset_name)};

#line 976 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_81dataset_name(PyObject *__pyx_self, PyObject *__pyx_v_dataset) {

#line 976 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 976 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 976 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("dataset_name (wrapper)", 0);

#line 976 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dataset), __pyx_ptype_4cds3_4core_Group, 1, "dataset", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 976 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_80dataset_name(__pyx_self, ((struct __pyx_obj_4cds3_4core_Group *)__pyx_v_dataset));

#line 976 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 976 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 976 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 976 "dsproc3/core.pyx"
  __pyx_L0:;

#line 976 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 976 "dsproc3/core.pyx"
  return __pyx_r;

#line 976 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":978
 *     return retval
 * 
 * def dataset_name(cds3.core.Group dataset):             # <<<<<<<<<<<<<<
 *     """Returns the dataset name.
 * 
 */

#line 978 "dsproc3/core.pyx"


#line 978 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_80dataset_name(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Group *__pyx_v_dataset) {
  char *__pyx_v_retval
#line 978 "dsproc3/core.pyx"
;

#line 978 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 978 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("dataset_name", 0);

  /* "dsproc3/core.pyx":988
 *     """
 *     cdef char *retval
 *     if dataset is None:             # <<<<<<<<<<<<<<
 *         return None
 *     retval = dsproc_dataset_name(dataset.c_ob)
 */

#line 988 "dsproc3/core.pyx"
  __pyx_t_1 = (((PyObject *)__pyx_v_dataset) == Py_None);

#line 988 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":989
 *     cdef char *retval
 *     if dataset is None:
 *         return None             # <<<<<<<<<<<<<<
 *     retval = dsproc_dataset_name(dataset.c_ob)
 *     if retval == NULL:
 */

#line 989 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 989 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 989 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 989 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 989 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 989 "dsproc3/core.pyx"
  }

#line 989 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":990
 *     if dataset is None:
 *         return None
 *     retval = dsproc_dataset_name(dataset.c_ob)             # <<<<<<<<<<<<<<
 *     if retval == NULL:
 *         return None
 */

#line 990 "dsproc3/core.pyx"
  __pyx_v_retval = dsproc_dataset_name(__pyx_v_dataset->c_ob);

  /* "dsproc3/core.pyx":991
 *         return None
 *     retval = dsproc_dataset_name(dataset.c_ob)
 *     if retval == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return retval
 */

#line 991 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_retval == NULL);

#line 991 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":992
 *     retval = dsproc_dataset_name(dataset.c_ob)
 *     if retval == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return retval
 * 
 */

#line 992 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 992 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 992 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 992 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 992 "dsproc3/core.pyx"
    goto __pyx_L4;

#line 992 "dsproc3/core.pyx"
  }

#line 992 "dsproc3/core.pyx"
  __pyx_L4:;

  /* "dsproc3/core.pyx":993
 *     if retval == NULL:
 *         return None
 *     return retval             # <<<<<<<<<<<<<<
 * 
 * def get_output_dataset(int ds_id, int obs_index=0):
 */

#line 993 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 993 "dsproc3/core.pyx"
  __pyx_t_2 = PyBytes_FromString(__pyx_v_retval); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 993 "dsproc3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));

#line 993 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_t_2);

#line 993 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 993 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 993 "dsproc3/core.pyx"


#line 993 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 993 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 993 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 993 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 993 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.dataset_name", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 993 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 993 "dsproc3/core.pyx"
  __pyx_L0:;

#line 993 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 993 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 993 "dsproc3/core.pyx"
  return __pyx_r;

#line 993 "dsproc3/core.pyx"
}

#line 993 "dsproc3/core.pyx"


#line 993 "dsproc3/core.pyx"
/* Python wrapper */

#line 993 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_83get_output_dataset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 993 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_82get_output_dataset[] = "get_output_dataset(int ds_id, int obs_index=0)\nGet an output dataset.\n    \n    This function will return a cds3.Group of the output dataset for the\n    specifed datastream and observation. The obs_index should always be zero\n    unless observation based processing is being used. This is because all\n    input observations should have been merged into a single observation\n    in the output datasets.\n    \n    @param ds_id output datastream ID\n    @param obs_index the index of the obervation to get the dataset for\n    \n    @retval dataset cds3.Group to the output dataset\n    @retval NULL if it does not exist\n    \n    @b Example: Get the dataset for an output datastream\n    @code\n    dsc_name = \"example\"\n    dsc_level = \"c1\"\n    ds_id = dsproc.get_output_datastream_id(dsc_name, dsc_level)\n    dataset = dsproc.get_output_dataset(ds_id, 0)\n    @endcode \n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_83get_output_dataset = 
#line 993 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_output_dataset"), (PyCFunction)__pyx_pw_7dsproc3_4core_83get_output_dataset, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_82get_output_dataset)};

#line 993 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_83get_output_dataset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_ds_id
#line 993 "dsproc3/core.pyx"
;
  int __pyx_v_obs_index
#line 993 "dsproc3/core.pyx"
;

#line 993 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 993 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 993 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_output_dataset (wrapper)", 0);

#line 993 "dsproc3/core.pyx"
  {

#line 993 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__ds_id,&__pyx_n_s__obs_index,0};

#line 993 "dsproc3/core.pyx"
    PyObject* values[2] = {0,0};

#line 993 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 993 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 993 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 993 "dsproc3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 993 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 993 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 993 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 993 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 993 "dsproc3/core.pyx"
      }

#line 993 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 993 "dsproc3/core.pyx"
      switch (pos_args) {

#line 993 "dsproc3/core.pyx"
        case  0:

#line 993 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ds_id)) != 0)) kw_args--;
        else 
#line 993 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 993 "dsproc3/core.pyx"
        case  1:

#line 993 "dsproc3/core.pyx"
        if (kw_args > 0) {

#line 993 "dsproc3/core.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__obs_index);

#line 993 "dsproc3/core.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 993 "dsproc3/core.pyx"
        }

#line 993 "dsproc3/core.pyx"
      }

#line 993 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 993 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_output_dataset") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 995; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 993 "dsproc3/core.pyx"
      }

#line 993 "dsproc3/core.pyx"
    } else {

#line 993 "dsproc3/core.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: 
#line 993 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 993 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 993 "dsproc3/core.pyx"
        break;
        default: 
#line 993 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 993 "dsproc3/core.pyx"
      }

#line 993 "dsproc3/core.pyx"
    }

#line 993 "dsproc3/core.pyx"
    __pyx_v_ds_id = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_ds_id == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 995; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 993 "dsproc3/core.pyx"
    if (values[1]) {

#line 993 "dsproc3/core.pyx"
      __pyx_v_obs_index = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_obs_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 995; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 993 "dsproc3/core.pyx"
    } else {

#line 993 "dsproc3/core.pyx"
      __pyx_v_obs_index = ((int)0);

#line 993 "dsproc3/core.pyx"
    }

#line 993 "dsproc3/core.pyx"
  }

#line 993 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 993 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_output_dataset", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 993 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 995; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 993 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 993 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_output_dataset", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 993 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 993 "dsproc3/core.pyx"
  return NULL;

#line 993 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 993 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_82get_output_dataset(__pyx_self, __pyx_v_ds_id, __pyx_v_obs_index);

#line 993 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 993 "dsproc3/core.pyx"
  return __pyx_r;

#line 993 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":995
 *     return retval
 * 
 * def get_output_dataset(int ds_id, int obs_index=0):             # <<<<<<<<<<<<<<
 *     """Get an output dataset.
 * 
 */

#line 995 "dsproc3/core.pyx"


#line 995 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_82get_output_dataset(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id, int __pyx_v_obs_index) {
  struct __pyx_obj_4cds3_4core_Group *__pyx_v_group = 0
#line 995 "dsproc3/core.pyx"
;
  struct CDSGroup *__pyx_v_cds_group
#line 995 "dsproc3/core.pyx"
;

#line 995 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 995 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_output_dataset", 0);

  /* "dsproc3/core.pyx":1020
 *     """
 *     cdef cds3.core.Group group
 *     cdef CDSGroup *cds_group = NULL             # <<<<<<<<<<<<<<
 *     cds_group = dsproc_get_output_dataset(ds_id, obs_index)
 *     if cds_group == NULL:
 */

#line 1020 "dsproc3/core.pyx"
  __pyx_v_cds_group = NULL;

  /* "dsproc3/core.pyx":1021
 *     cdef cds3.core.Group group
 *     cdef CDSGroup *cds_group = NULL
 *     cds_group = dsproc_get_output_dataset(ds_id, obs_index)             # <<<<<<<<<<<<<<
 *     if cds_group == NULL:
 *         return None
 */

#line 1021 "dsproc3/core.pyx"
  __pyx_v_cds_group = dsproc_get_output_dataset(__pyx_v_ds_id, __pyx_v_obs_index);

  /* "dsproc3/core.pyx":1022
 *     cdef CDSGroup *cds_group = NULL
 *     cds_group = dsproc_get_output_dataset(ds_id, obs_index)
 *     if cds_group == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */

#line 1022 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_cds_group == NULL);

#line 1022 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":1023
 *     cds_group = dsproc_get_output_dataset(ds_id, obs_index)
 *     if cds_group == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         group = cds3.core.Group()
 */

#line 1023 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1023 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 1023 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 1023 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1023 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 1023 "dsproc3/core.pyx"
  }

#line 1023 "dsproc3/core.pyx"
  /*else*/ {

    /* "dsproc3/core.pyx":1025
 *         return None
 *     else:
 *         group = cds3.core.Group()             # <<<<<<<<<<<<<<
 *         group.set_group(cds_group)
 *         return group
 */

#line 1025 "dsproc3/core.pyx"
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Group)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1025; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1025 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1025 "dsproc3/core.pyx"
    __pyx_v_group = ((struct __pyx_obj_4cds3_4core_Group *)__pyx_t_2);

#line 1025 "dsproc3/core.pyx"
    __pyx_t_2 = 0;

    /* "dsproc3/core.pyx":1026
 *     else:
 *         group = cds3.core.Group()
 *         group.set_group(cds_group)             # <<<<<<<<<<<<<<
 *         return group
 * 
 */

#line 1026 "dsproc3/core.pyx"
    __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Group *)__pyx_v_group->__pyx_base.__pyx_vtab)->set_group(__pyx_v_group, __pyx_v_cds_group); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1026; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1026 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1026 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "dsproc3/core.pyx":1027
 *         group = cds3.core.Group()
 *         group.set_group(cds_group)
 *         return group             # <<<<<<<<<<<<<<
 * 
 * def get_retrieved_dataset(int ds_id, int obs_index=0):
 */

#line 1027 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1027 "dsproc3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_group));

#line 1027 "dsproc3/core.pyx"
    __pyx_r = ((PyObject *)__pyx_v_group);

#line 1027 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1027 "dsproc3/core.pyx"
  }

#line 1027 "dsproc3/core.pyx"
  __pyx_L3:;

#line 1027 "dsproc3/core.pyx"


#line 1027 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1027 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1027 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1027 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1027 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_output_dataset", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1027 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1027 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1027 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_group);

#line 1027 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1027 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1027 "dsproc3/core.pyx"
  return __pyx_r;

#line 1027 "dsproc3/core.pyx"
}

#line 1027 "dsproc3/core.pyx"


#line 1027 "dsproc3/core.pyx"
/* Python wrapper */

#line 1027 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_85get_retrieved_dataset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1027 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_84get_retrieved_dataset[] = "get_retrieved_dataset(int ds_id, int obs_index=0)\nGet a retrieved dataset.\n    \n    This function will return a cds3.Group of the retrieved dataset for the\n    specifed datastream and observation.\n    \n    The obs_index is used to specify which observation to get the dataset for.\n    This value will typically be zero unless this function is called from a\n    post_retrieval_hook() function, or the process is using observation based\n    processing. In either of these cases the retrieved data will contain one\n    \"observation\" for every file the data was read from on disk.\n    \n    It is also possible to have multiple observations in the retrieved data\n    when a pre_transform_hook() is called if a dimensionality conflict\n    prevented all observations from being merged.\n    \n    @param ds_id input datastream ID\n    @param obs_index observation index (0 based indexing)\n    \n    @retval cds3.Group of the retrieved dataset\n    @retval None if it does not exist\n    \n    @b Example: Loop over all retrieved datasets for an input datastream\n    @code\n    \n    dsc_name = \"example\"\n    dsc_level = \"b1\"\n    ds_id = dsproc.get_input_datastream_id(dsc_name, dsc_level)\n    obs_index = 0\n    dataset = dsproc.get_retrieved_dataset(ds_id, obs_index)\n    while dataset is not None:\n        obs_index += 1\n        dataset = dsproc.get_retrieved_dataset(ds_id, obs_index)\n    @endcode\n    \n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_85get_retrieved_dataset = 
#line 1027 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_retrieved_dataset"), (PyCFunction)__pyx_pw_7dsproc3_4core_85get_retrieved_dataset, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_84get_retrieved_dataset)};

#line 1027 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_85get_retrieved_dataset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_ds_id
#line 1027 "dsproc3/core.pyx"
;
  int __pyx_v_obs_index
#line 1027 "dsproc3/core.pyx"
;

#line 1027 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1027 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1027 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_retrieved_dataset (wrapper)", 0);

#line 1027 "dsproc3/core.pyx"
  {

#line 1027 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__ds_id,&__pyx_n_s__obs_index,0};

#line 1027 "dsproc3/core.pyx"
    PyObject* values[2] = {0,0};

#line 1027 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1027 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 1027 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1027 "dsproc3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 1027 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1027 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1027 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 1027 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1027 "dsproc3/core.pyx"
      }

#line 1027 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1027 "dsproc3/core.pyx"
      switch (pos_args) {

#line 1027 "dsproc3/core.pyx"
        case  0:

#line 1027 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ds_id)) != 0)) kw_args--;
        else 
#line 1027 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1027 "dsproc3/core.pyx"
        case  1:

#line 1027 "dsproc3/core.pyx"
        if (kw_args > 0) {

#line 1027 "dsproc3/core.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__obs_index);

#line 1027 "dsproc3/core.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 1027 "dsproc3/core.pyx"
        }

#line 1027 "dsproc3/core.pyx"
      }

#line 1027 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1027 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_retrieved_dataset") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1029; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1027 "dsproc3/core.pyx"
      }

#line 1027 "dsproc3/core.pyx"
    } else {

#line 1027 "dsproc3/core.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: 
#line 1027 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1027 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1027 "dsproc3/core.pyx"
        break;
        default: 
#line 1027 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1027 "dsproc3/core.pyx"
      }

#line 1027 "dsproc3/core.pyx"
    }

#line 1027 "dsproc3/core.pyx"
    __pyx_v_ds_id = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_ds_id == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1029; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1027 "dsproc3/core.pyx"
    if (values[1]) {

#line 1027 "dsproc3/core.pyx"
      __pyx_v_obs_index = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_obs_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1029; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1027 "dsproc3/core.pyx"
    } else {

#line 1027 "dsproc3/core.pyx"
      __pyx_v_obs_index = ((int)0);

#line 1027 "dsproc3/core.pyx"
    }

#line 1027 "dsproc3/core.pyx"
  }

#line 1027 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1027 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_retrieved_dataset", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 1027 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1029; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1027 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 1027 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_retrieved_dataset", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1027 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1027 "dsproc3/core.pyx"
  return NULL;

#line 1027 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1027 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_84get_retrieved_dataset(__pyx_self, __pyx_v_ds_id, __pyx_v_obs_index);

#line 1027 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1027 "dsproc3/core.pyx"
  return __pyx_r;

#line 1027 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1029
 *         return group
 * 
 * def get_retrieved_dataset(int ds_id, int obs_index=0):             # <<<<<<<<<<<<<<
 *     """Get a retrieved dataset.
 * 
 */

#line 1029 "dsproc3/core.pyx"


#line 1029 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_84get_retrieved_dataset(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id, int __pyx_v_obs_index) {
  struct __pyx_obj_4cds3_4core_Group *__pyx_v_group = 0
#line 1029 "dsproc3/core.pyx"
;
  struct CDSGroup *__pyx_v_cds_group
#line 1029 "dsproc3/core.pyx"
;

#line 1029 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1029 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_retrieved_dataset", 0);

  /* "dsproc3/core.pyx":1066
 *     """
 *     cdef cds3.core.Group group
 *     cdef CDSGroup *cds_group = NULL             # <<<<<<<<<<<<<<
 *     cds_group = dsproc_get_retrieved_dataset(ds_id, obs_index)
 *     if cds_group == NULL:
 */

#line 1066 "dsproc3/core.pyx"
  __pyx_v_cds_group = NULL;

  /* "dsproc3/core.pyx":1067
 *     cdef cds3.core.Group group
 *     cdef CDSGroup *cds_group = NULL
 *     cds_group = dsproc_get_retrieved_dataset(ds_id, obs_index)             # <<<<<<<<<<<<<<
 *     if cds_group == NULL:
 *         return None
 */

#line 1067 "dsproc3/core.pyx"
  __pyx_v_cds_group = dsproc_get_retrieved_dataset(__pyx_v_ds_id, __pyx_v_obs_index);

  /* "dsproc3/core.pyx":1068
 *     cdef CDSGroup *cds_group = NULL
 *     cds_group = dsproc_get_retrieved_dataset(ds_id, obs_index)
 *     if cds_group == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */

#line 1068 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_cds_group == NULL);

#line 1068 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":1069
 *     cds_group = dsproc_get_retrieved_dataset(ds_id, obs_index)
 *     if cds_group == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         group = cds3.core.Group()
 */

#line 1069 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1069 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 1069 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 1069 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1069 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 1069 "dsproc3/core.pyx"
  }

#line 1069 "dsproc3/core.pyx"
  /*else*/ {

    /* "dsproc3/core.pyx":1071
 *         return None
 *     else:
 *         group = cds3.core.Group()             # <<<<<<<<<<<<<<
 *         group.set_group(cds_group)
 *         return group
 */

#line 1071 "dsproc3/core.pyx"
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Group)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1071; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1071 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1071 "dsproc3/core.pyx"
    __pyx_v_group = ((struct __pyx_obj_4cds3_4core_Group *)__pyx_t_2);

#line 1071 "dsproc3/core.pyx"
    __pyx_t_2 = 0;

    /* "dsproc3/core.pyx":1072
 *     else:
 *         group = cds3.core.Group()
 *         group.set_group(cds_group)             # <<<<<<<<<<<<<<
 *         return group
 * 
 */

#line 1072 "dsproc3/core.pyx"
    __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Group *)__pyx_v_group->__pyx_base.__pyx_vtab)->set_group(__pyx_v_group, __pyx_v_cds_group); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1072; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1072 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1072 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "dsproc3/core.pyx":1073
 *         group = cds3.core.Group()
 *         group.set_group(cds_group)
 *         return group             # <<<<<<<<<<<<<<
 * 
 * def get_transformed_dataset(
 */

#line 1073 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1073 "dsproc3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_group));

#line 1073 "dsproc3/core.pyx"
    __pyx_r = ((PyObject *)__pyx_v_group);

#line 1073 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1073 "dsproc3/core.pyx"
  }

#line 1073 "dsproc3/core.pyx"
  __pyx_L3:;

#line 1073 "dsproc3/core.pyx"


#line 1073 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1073 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1073 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1073 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1073 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_retrieved_dataset", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1073 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1073 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1073 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_group);

#line 1073 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1073 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1073 "dsproc3/core.pyx"
  return __pyx_r;

#line 1073 "dsproc3/core.pyx"
}

#line 1073 "dsproc3/core.pyx"


#line 1073 "dsproc3/core.pyx"
/* Python wrapper */

#line 1073 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_87get_transformed_dataset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1073 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_86get_transformed_dataset[] = "get_transformed_dataset(char *coordsys_name, int ds_id, int obs_index=0)\nGet a transformed dataset.\n    \n    This function will return a cds3.Group of the transformed dataset for the\n    specifed coordinate system, datastream, and observation. The obs_index\n    should always be zero unless observation based processing is being used.\n    This is because all input observations should have been merged into a\n    single observation in the transformed datasets.\n    \n    @param coordsys_name the name of the coordinate system as specified in the\n    retriever definition or None if a coordinate system name was not specified.\n    \n    @param ds_id input datastream ID\n    \n    @param obs_index the index of the obervation to get the dataset for\n    \n    @retval cds3.Group of the output dataset\n    @retval None if it does not exist\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_87get_transformed_dataset = 
#line 1073 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_transformed_dataset"), (PyCFunction)__pyx_pw_7dsproc3_4core_87get_transformed_dataset, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_86get_transformed_dataset)};

#line 1073 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_87get_transformed_dataset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_coordsys_name
#line 1073 "dsproc3/core.pyx"
;
  int __pyx_v_ds_id
#line 1073 "dsproc3/core.pyx"
;
  int __pyx_v_obs_index
#line 1073 "dsproc3/core.pyx"
;

#line 1073 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1073 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1073 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_transformed_dataset (wrapper)", 0);

#line 1073 "dsproc3/core.pyx"
  {

#line 1073 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__coordsys_name,&__pyx_n_s__ds_id,&__pyx_n_s__obs_index,0};

#line 1073 "dsproc3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 1073 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1073 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 1073 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1073 "dsproc3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 1073 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1073 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1073 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1073 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 1073 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1073 "dsproc3/core.pyx"
      }

#line 1073 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1073 "dsproc3/core.pyx"
      switch (pos_args) {

#line 1073 "dsproc3/core.pyx"
        case  0:

#line 1073 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__coordsys_name)) != 0)) kw_args--;
        else 
#line 1073 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1073 "dsproc3/core.pyx"
        case  1:

#line 1073 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ds_id)) != 0)) kw_args--;

#line 1073 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("get_transformed_dataset", 0, 2, 3, 1); 
#line 1073 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1073 "dsproc3/core.pyx"
        }

#line 1073 "dsproc3/core.pyx"
        case  2:

#line 1073 "dsproc3/core.pyx"
        if (kw_args > 0) {

#line 1073 "dsproc3/core.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__obs_index);

#line 1073 "dsproc3/core.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 1073 "dsproc3/core.pyx"
        }

#line 1073 "dsproc3/core.pyx"
      }

#line 1073 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1073 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_transformed_dataset") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1073 "dsproc3/core.pyx"
      }

#line 1073 "dsproc3/core.pyx"
    } else {

#line 1073 "dsproc3/core.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: 
#line 1073 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1073 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1073 "dsproc3/core.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1073 "dsproc3/core.pyx"
        break;
        default: 
#line 1073 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1073 "dsproc3/core.pyx"
      }

#line 1073 "dsproc3/core.pyx"
    }

#line 1073 "dsproc3/core.pyx"
    __pyx_v_coordsys_name = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_coordsys_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1076; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1073 "dsproc3/core.pyx"
    __pyx_v_ds_id = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_ds_id == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1073 "dsproc3/core.pyx"
    if (values[2]) {

#line 1073 "dsproc3/core.pyx"
      __pyx_v_obs_index = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_obs_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1078; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1073 "dsproc3/core.pyx"
    } else {

#line 1073 "dsproc3/core.pyx"
      __pyx_v_obs_index = ((int)0);

#line 1073 "dsproc3/core.pyx"
    }

#line 1073 "dsproc3/core.pyx"
  }

#line 1073 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1073 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_transformed_dataset", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 1073 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1073 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 1073 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_transformed_dataset", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1073 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1073 "dsproc3/core.pyx"
  return NULL;

#line 1073 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1073 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_86get_transformed_dataset(__pyx_self, __pyx_v_coordsys_name, __pyx_v_ds_id, __pyx_v_obs_index);

#line 1073 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1073 "dsproc3/core.pyx"
  return __pyx_r;

#line 1073 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1075
 *         return group
 * 
 * def get_transformed_dataset(             # <<<<<<<<<<<<<<
 *         char *coordsys_name,
 *         int ds_id,
 */

#line 1075 "dsproc3/core.pyx"


#line 1075 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_86get_transformed_dataset(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_coordsys_name, int __pyx_v_ds_id, int __pyx_v_obs_index) {
  struct __pyx_obj_4cds3_4core_Group *__pyx_v_group = 0
#line 1075 "dsproc3/core.pyx"
;
  struct CDSGroup *__pyx_v_cds_group
#line 1075 "dsproc3/core.pyx"
;

#line 1075 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1075 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_transformed_dataset", 0);

  /* "dsproc3/core.pyx":1099
 *     """
 *     cdef cds3.core.Group group
 *     cdef CDSGroup *cds_group = NULL             # <<<<<<<<<<<<<<
 *     cds_group = dsproc_get_transformed_dataset(coordsys_name, ds_id, obs_index)
 *     if cds_group == NULL:
 */

#line 1099 "dsproc3/core.pyx"
  __pyx_v_cds_group = NULL;

  /* "dsproc3/core.pyx":1100
 *     cdef cds3.core.Group group
 *     cdef CDSGroup *cds_group = NULL
 *     cds_group = dsproc_get_transformed_dataset(coordsys_name, ds_id, obs_index)             # <<<<<<<<<<<<<<
 *     if cds_group == NULL:
 *         return None
 */

#line 1100 "dsproc3/core.pyx"
  __pyx_v_cds_group = dsproc_get_transformed_dataset(__pyx_v_coordsys_name, __pyx_v_ds_id, __pyx_v_obs_index);

  /* "dsproc3/core.pyx":1101
 *     cdef CDSGroup *cds_group = NULL
 *     cds_group = dsproc_get_transformed_dataset(coordsys_name, ds_id, obs_index)
 *     if cds_group == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */

#line 1101 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_cds_group == NULL);

#line 1101 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":1102
 *     cds_group = dsproc_get_transformed_dataset(coordsys_name, ds_id, obs_index)
 *     if cds_group == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         group = cds3.core.Group()
 */

#line 1102 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1102 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 1102 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 1102 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1102 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 1102 "dsproc3/core.pyx"
  }

#line 1102 "dsproc3/core.pyx"
  /*else*/ {

    /* "dsproc3/core.pyx":1104
 *         return None
 *     else:
 *         group = cds3.core.Group()             # <<<<<<<<<<<<<<
 *         group.set_group(cds_group)
 *         return group
 */

#line 1104 "dsproc3/core.pyx"
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Group)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1104 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1104 "dsproc3/core.pyx"
    __pyx_v_group = ((struct __pyx_obj_4cds3_4core_Group *)__pyx_t_2);

#line 1104 "dsproc3/core.pyx"
    __pyx_t_2 = 0;

    /* "dsproc3/core.pyx":1105
 *     else:
 *         group = cds3.core.Group()
 *         group.set_group(cds_group)             # <<<<<<<<<<<<<<
 *         return group
 * 
 */

#line 1105 "dsproc3/core.pyx"
    __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Group *)__pyx_v_group->__pyx_base.__pyx_vtab)->set_group(__pyx_v_group, __pyx_v_cds_group); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1105 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1105 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "dsproc3/core.pyx":1106
 *         group = cds3.core.Group()
 *         group.set_group(cds_group)
 *         return group             # <<<<<<<<<<<<<<
 * 
 * def get_dim(cds3.core.Group dataset, char *name):
 */

#line 1106 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1106 "dsproc3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_group));

#line 1106 "dsproc3/core.pyx"
    __pyx_r = ((PyObject *)__pyx_v_group);

#line 1106 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1106 "dsproc3/core.pyx"
  }

#line 1106 "dsproc3/core.pyx"
  __pyx_L3:;

#line 1106 "dsproc3/core.pyx"


#line 1106 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1106 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1106 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1106 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1106 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_transformed_dataset", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1106 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1106 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1106 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_group);

#line 1106 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1106 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1106 "dsproc3/core.pyx"
  return __pyx_r;

#line 1106 "dsproc3/core.pyx"
}

#line 1106 "dsproc3/core.pyx"


#line 1106 "dsproc3/core.pyx"
/* Python wrapper */

#line 1106 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_89get_dim(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1106 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_88get_dim[] = "get_dim(Group dataset, char *name)\nGet a dimension from a dataset.\n    \n    @param dataset - pointer to the dataset\n    @param name - name of the dimension\n    \n    @retval cds3.Dim of the dimension\n    @retval None if the dimension does not exist\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_89get_dim = 
#line 1106 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_dim"), (PyCFunction)__pyx_pw_7dsproc3_4core_89get_dim, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_88get_dim)};

#line 1106 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_89get_dim(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Group *__pyx_v_dataset = 0
#line 1106 "dsproc3/core.pyx"
;
  char *__pyx_v_name
#line 1106 "dsproc3/core.pyx"
;

#line 1106 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1106 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1106 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_dim (wrapper)", 0);

#line 1106 "dsproc3/core.pyx"
  {

#line 1106 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__dataset,&__pyx_n_s__name,0};

#line 1106 "dsproc3/core.pyx"
    PyObject* values[2] = {0,0};

#line 1106 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1106 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 1106 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1106 "dsproc3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 1106 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1106 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1106 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 1106 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1106 "dsproc3/core.pyx"
      }

#line 1106 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1106 "dsproc3/core.pyx"
      switch (pos_args) {

#line 1106 "dsproc3/core.pyx"
        case  0:

#line 1106 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dataset)) != 0)) kw_args--;
        else 
#line 1106 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1106 "dsproc3/core.pyx"
        case  1:

#line 1106 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name)) != 0)) kw_args--;

#line 1106 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("get_dim", 1, 2, 2, 1); 
#line 1106 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1108; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1106 "dsproc3/core.pyx"
        }

#line 1106 "dsproc3/core.pyx"
      }

#line 1106 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1106 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_dim") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1108; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1106 "dsproc3/core.pyx"
      }

#line 1106 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 1106 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1106 "dsproc3/core.pyx"
    } else {

#line 1106 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1106 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1106 "dsproc3/core.pyx"
    }

#line 1106 "dsproc3/core.pyx"
    __pyx_v_dataset = ((struct __pyx_obj_4cds3_4core_Group *)values[0]);

#line 1106 "dsproc3/core.pyx"
    __pyx_v_name = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1108; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1106 "dsproc3/core.pyx"
  }

#line 1106 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1106 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_dim", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 1106 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1108; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1106 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 1106 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1106 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1106 "dsproc3/core.pyx"
  return NULL;

#line 1106 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1106 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dataset), __pyx_ptype_4cds3_4core_Group, 1, "dataset", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1106 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_88get_dim(__pyx_self, __pyx_v_dataset, __pyx_v_name);

#line 1106 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1106 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1106 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1106 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1106 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1106 "dsproc3/core.pyx"
  return __pyx_r;

#line 1106 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1108
 *         return group
 * 
 * def get_dim(cds3.core.Group dataset, char *name):             # <<<<<<<<<<<<<<
 *     """Get a dimension from a dataset.
 * 
 */

#line 1108 "dsproc3/core.pyx"


#line 1108 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_88get_dim(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Group *__pyx_v_dataset, char *__pyx_v_name) {
  struct __pyx_obj_4cds3_4core_Dim *__pyx_v_dim = 0
#line 1108 "dsproc3/core.pyx"
;
  struct CDSDim *__pyx_v_cds_dim
#line 1108 "dsproc3/core.pyx"
;

#line 1108 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1108 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_dim", 0);

  /* "dsproc3/core.pyx":1120
 *     cdef cds3.core.Dim dim
 *     cdef CDSDim *cds_dim
 *     cds_dim = dsproc_get_dim(dataset.c_ob, name)             # <<<<<<<<<<<<<<
 *     if cds_dim == NULL:
 *         return None
 */

#line 1120 "dsproc3/core.pyx"
  __pyx_v_cds_dim = dsproc_get_dim(__pyx_v_dataset->c_ob, __pyx_v_name);

  /* "dsproc3/core.pyx":1121
 *     cdef CDSDim *cds_dim
 *     cds_dim = dsproc_get_dim(dataset.c_ob, name)
 *     if cds_dim == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */

#line 1121 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_cds_dim == NULL);

#line 1121 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":1122
 *     cds_dim = dsproc_get_dim(dataset.c_ob, name)
 *     if cds_dim == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         dim = cds3.core.Dim()
 */

#line 1122 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1122 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 1122 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 1122 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1122 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 1122 "dsproc3/core.pyx"
  }

#line 1122 "dsproc3/core.pyx"
  /*else*/ {

    /* "dsproc3/core.pyx":1124
 *         return None
 *     else:
 *         dim = cds3.core.Dim()             # <<<<<<<<<<<<<<
 *         dim.set_dim(cds_dim)
 *         return dim
 */

#line 1124 "dsproc3/core.pyx"
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Dim)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1124 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1124 "dsproc3/core.pyx"
    __pyx_v_dim = ((struct __pyx_obj_4cds3_4core_Dim *)__pyx_t_2);

#line 1124 "dsproc3/core.pyx"
    __pyx_t_2 = 0;

    /* "dsproc3/core.pyx":1125
 *     else:
 *         dim = cds3.core.Dim()
 *         dim.set_dim(cds_dim)             # <<<<<<<<<<<<<<
 *         return dim
 * 
 */

#line 1125 "dsproc3/core.pyx"
    __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Dim *)__pyx_v_dim->__pyx_base.__pyx_vtab)->set_dim(__pyx_v_dim, __pyx_v_cds_dim); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1125 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1125 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "dsproc3/core.pyx":1126
 *         dim = cds3.core.Dim()
 *         dim.set_dim(cds_dim)
 *         return dim             # <<<<<<<<<<<<<<
 * 
 * def get_dim_length(cds3.core.Group dataset, char *name):
 */

#line 1126 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1126 "dsproc3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_dim));

#line 1126 "dsproc3/core.pyx"
    __pyx_r = ((PyObject *)__pyx_v_dim);

#line 1126 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1126 "dsproc3/core.pyx"
  }

#line 1126 "dsproc3/core.pyx"
  __pyx_L3:;

#line 1126 "dsproc3/core.pyx"


#line 1126 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1126 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1126 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1126 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1126 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1126 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1126 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1126 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_dim);

#line 1126 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1126 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1126 "dsproc3/core.pyx"
  return __pyx_r;

#line 1126 "dsproc3/core.pyx"
}

#line 1126 "dsproc3/core.pyx"


#line 1126 "dsproc3/core.pyx"
/* Python wrapper */

#line 1126 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_91get_dim_length(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1126 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_90get_dim_length[] = "get_dim_length(Group dataset, char *name)\nGet the length of a dimension in a dataset.\n    \n    @param dataset - pointer to the dataset\n    @param name - name of the dimension\n    \n    @retval dimension length\n    @retval 0 if the dimension does not exist or has 0 length\n    \n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_91get_dim_length = 
#line 1126 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_dim_length"), (PyCFunction)__pyx_pw_7dsproc3_4core_91get_dim_length, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_90get_dim_length)};

#line 1126 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_91get_dim_length(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Group *__pyx_v_dataset = 0
#line 1126 "dsproc3/core.pyx"
;
  char *__pyx_v_name
#line 1126 "dsproc3/core.pyx"
;

#line 1126 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1126 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1126 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_dim_length (wrapper)", 0);

#line 1126 "dsproc3/core.pyx"
  {

#line 1126 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__dataset,&__pyx_n_s__name,0};

#line 1126 "dsproc3/core.pyx"
    PyObject* values[2] = {0,0};

#line 1126 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1126 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 1126 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1126 "dsproc3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 1126 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1126 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1126 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 1126 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1126 "dsproc3/core.pyx"
      }

#line 1126 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1126 "dsproc3/core.pyx"
      switch (pos_args) {

#line 1126 "dsproc3/core.pyx"
        case  0:

#line 1126 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dataset)) != 0)) kw_args--;
        else 
#line 1126 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1126 "dsproc3/core.pyx"
        case  1:

#line 1126 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name)) != 0)) kw_args--;

#line 1126 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("get_dim_length", 1, 2, 2, 1); 
#line 1126 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1128; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1126 "dsproc3/core.pyx"
        }

#line 1126 "dsproc3/core.pyx"
      }

#line 1126 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1126 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_dim_length") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1128; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1126 "dsproc3/core.pyx"
      }

#line 1126 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 1126 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1126 "dsproc3/core.pyx"
    } else {

#line 1126 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1126 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1126 "dsproc3/core.pyx"
    }

#line 1126 "dsproc3/core.pyx"
    __pyx_v_dataset = ((struct __pyx_obj_4cds3_4core_Group *)values[0]);

#line 1126 "dsproc3/core.pyx"
    __pyx_v_name = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1128; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1126 "dsproc3/core.pyx"
  }

#line 1126 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1126 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_dim_length", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 1126 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1128; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1126 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 1126 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_dim_length", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1126 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1126 "dsproc3/core.pyx"
  return NULL;

#line 1126 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1126 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dataset), __pyx_ptype_4cds3_4core_Group, 1, "dataset", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1126 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_90get_dim_length(__pyx_self, __pyx_v_dataset, __pyx_v_name);

#line 1126 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1126 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1126 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1126 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1126 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1126 "dsproc3/core.pyx"
  return __pyx_r;

#line 1126 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1128
 *         return dim
 * 
 * def get_dim_length(cds3.core.Group dataset, char *name):             # <<<<<<<<<<<<<<
 *     """Get the length of a dimension in a dataset.
 * 
 */

#line 1128 "dsproc3/core.pyx"


#line 1128 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_90get_dim_length(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Group *__pyx_v_dataset, char *__pyx_v_name) {

#line 1128 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1128 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_dim_length", 0);

  /* "dsproc3/core.pyx":1138
 * 
 *     """
 *     return dsproc_get_dim_length(dataset.c_ob, name)             # <<<<<<<<<<<<<<
 * 
 * def set_dim_length(cds3.core.Group dataset, char *name, size_t length):
 */

#line 1138 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1138 "dsproc3/core.pyx"
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(dsproc_get_dim_length(__pyx_v_dataset->c_ob, __pyx_v_name)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1138 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1138 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 1138 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 1138 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1138 "dsproc3/core.pyx"


#line 1138 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1138 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1138 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1138 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1138 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_dim_length", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1138 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1138 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1138 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1138 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1138 "dsproc3/core.pyx"
  return __pyx_r;

#line 1138 "dsproc3/core.pyx"
}

#line 1138 "dsproc3/core.pyx"


#line 1138 "dsproc3/core.pyx"
/* Python wrapper */

#line 1138 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_93set_dim_length(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1138 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_92set_dim_length[] = "set_dim_length(Group dataset, char *name, size_t length)\nSet the length of a dimension in a dataset.\n    \n    If an error occurs in this function it will be appended to the log and\n    error mail messages, and the process status will be set appropriately.\n    \n    @param dataset - pointer to the dataset\n    @param name - name of the dimension\n    @param length - new length of the dimension\n    \n    @retval 1 if successful\n    @retval 0 if the dimension does not exist\n    @retval 0 if the dimension definition is locked\n    @retval 0 if data has already been added to a variable using this dimension\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_93set_dim_length = 
#line 1138 "dsproc3/core.pyx"
{__Pyx_NAMESTR("set_dim_length"), (PyCFunction)__pyx_pw_7dsproc3_4core_93set_dim_length, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_92set_dim_length)};

#line 1138 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_93set_dim_length(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Group *__pyx_v_dataset = 0
#line 1138 "dsproc3/core.pyx"
;
  char *__pyx_v_name
#line 1138 "dsproc3/core.pyx"
;
  size_t __pyx_v_length
#line 1138 "dsproc3/core.pyx"
;

#line 1138 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1138 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1138 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_dim_length (wrapper)", 0);

#line 1138 "dsproc3/core.pyx"
  {

#line 1138 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__dataset,&__pyx_n_s__name,&__pyx_n_s__length,0};

#line 1138 "dsproc3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 1138 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1138 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 1138 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1138 "dsproc3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 1138 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1138 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1138 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1138 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 1138 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1138 "dsproc3/core.pyx"
      }

#line 1138 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1138 "dsproc3/core.pyx"
      switch (pos_args) {

#line 1138 "dsproc3/core.pyx"
        case  0:

#line 1138 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dataset)) != 0)) kw_args--;
        else 
#line 1138 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1138 "dsproc3/core.pyx"
        case  1:

#line 1138 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name)) != 0)) kw_args--;

#line 1138 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_dim_length", 1, 3, 3, 1); 
#line 1138 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1138 "dsproc3/core.pyx"
        }

#line 1138 "dsproc3/core.pyx"
        case  2:

#line 1138 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__length)) != 0)) kw_args--;

#line 1138 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_dim_length", 1, 3, 3, 2); 
#line 1138 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1138 "dsproc3/core.pyx"
        }

#line 1138 "dsproc3/core.pyx"
      }

#line 1138 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1138 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_dim_length") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1138 "dsproc3/core.pyx"
      }

#line 1138 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 1138 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1138 "dsproc3/core.pyx"
    } else {

#line 1138 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1138 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1138 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1138 "dsproc3/core.pyx"
    }

#line 1138 "dsproc3/core.pyx"
    __pyx_v_dataset = ((struct __pyx_obj_4cds3_4core_Group *)values[0]);

#line 1138 "dsproc3/core.pyx"
    __pyx_v_name = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1138 "dsproc3/core.pyx"
    __pyx_v_length = __Pyx_PyInt_AsSize_t(values[2]); if (unlikely((__pyx_v_length == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1138 "dsproc3/core.pyx"
  }

#line 1138 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1138 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_dim_length", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 1138 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1140; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1138 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 1138 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_dim_length", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1138 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1138 "dsproc3/core.pyx"
  return NULL;

#line 1138 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1138 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dataset), __pyx_ptype_4cds3_4core_Group, 1, "dataset", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1138 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_92set_dim_length(__pyx_self, __pyx_v_dataset, __pyx_v_name, __pyx_v_length);

#line 1138 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1138 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1138 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1138 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1138 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1138 "dsproc3/core.pyx"
  return __pyx_r;

#line 1138 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1140
 *     return dsproc_get_dim_length(dataset.c_ob, name)
 * 
 * def set_dim_length(cds3.core.Group dataset, char *name, size_t length):             # <<<<<<<<<<<<<<
 *     """Set the length of a dimension in a dataset.
 * 
 */

#line 1140 "dsproc3/core.pyx"


#line 1140 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_92set_dim_length(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Group *__pyx_v_dataset, char *__pyx_v_name, size_t __pyx_v_length) {

#line 1140 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1140 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_dim_length", 0);

  /* "dsproc3/core.pyx":1156
 * 
 *     """
 *     return dsproc_set_dim_length(dataset.c_ob, name, length)             # <<<<<<<<<<<<<<
 * 
 * def change_att(
 */

#line 1156 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1156 "dsproc3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(dsproc_set_dim_length(__pyx_v_dataset->c_ob, __pyx_v_name, __pyx_v_length)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1156 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1156 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 1156 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 1156 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1156 "dsproc3/core.pyx"


#line 1156 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1156 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1156 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1156 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1156 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_dim_length", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1156 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1156 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1156 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1156 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1156 "dsproc3/core.pyx"
  return __pyx_r;

#line 1156 "dsproc3/core.pyx"
}

#line 1156 "dsproc3/core.pyx"


#line 1156 "dsproc3/core.pyx"
/* Python wrapper */

#line 1156 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_95change_att(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1156 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_94change_att[] = "change_att(Object parent, int overwrite, char *name, CDSDataType type, value)\nChange an attribute for a dataset or variable.\n    \n    This function will define the specified attribute if it does not exist.\n    If the attribute does exist and the overwrite flag is set, the data type\n    and value will be changed.\n    \n    If an error occurs in this function it will be appended to the log and\n    error mail messages, and the process status will be set appropriately.\n    \n    @param parent - pointer to the parent CDSGroup or CDSVar\n    @param overwrite - overwrite flag (1 = TRUE, 0 = FALSE)\n    @param name - attribute name\n    @param type - attribute data type\n    @param value - pointer to the attribute value\n    \n    @retval 1 if successful\n    @retval 0 if the parent object is not a group or variable\n    @retval 0 if the parent group or variable definition is locked\n    @retval 0 if the attribute definition is locked\n    @retval 0 if a memory allocation error occurred\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_95change_att = 
#line 1156 "dsproc3/core.pyx"
{__Pyx_NAMESTR("change_att"), (PyCFunction)__pyx_pw_7dsproc3_4core_95change_att, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_94change_att)};

#line 1156 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_95change_att(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Object *__pyx_v_parent = 0
#line 1156 "dsproc3/core.pyx"
;
  int __pyx_v_overwrite
#line 1156 "dsproc3/core.pyx"
;
  char *__pyx_v_name
#line 1156 "dsproc3/core.pyx"
;
  CDSDataType __pyx_v_type
#line 1156 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_value = 0
#line 1156 "dsproc3/core.pyx"
;

#line 1156 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1156 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1156 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("change_att (wrapper)", 0);

#line 1156 "dsproc3/core.pyx"
  {

#line 1156 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__parent,&__pyx_n_s__overwrite,&__pyx_n_s__name,&__pyx_n_s__type,&__pyx_n_s__value,0};

#line 1156 "dsproc3/core.pyx"
    PyObject* values[5] = {0,0,0,0,0};

#line 1156 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1156 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 1156 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1156 "dsproc3/core.pyx"
      switch (pos_args) {
        case  5: 
#line 1156 "dsproc3/core.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 1156 "dsproc3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 1156 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1156 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1156 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1156 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 1156 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1156 "dsproc3/core.pyx"
      }

#line 1156 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1156 "dsproc3/core.pyx"
      switch (pos_args) {

#line 1156 "dsproc3/core.pyx"
        case  0:

#line 1156 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__parent)) != 0)) kw_args--;
        else 
#line 1156 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1156 "dsproc3/core.pyx"
        case  1:

#line 1156 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__overwrite)) != 0)) kw_args--;

#line 1156 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("change_att", 1, 5, 5, 1); 
#line 1156 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1158; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1156 "dsproc3/core.pyx"
        }

#line 1156 "dsproc3/core.pyx"
        case  2:

#line 1156 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name)) != 0)) kw_args--;

#line 1156 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("change_att", 1, 5, 5, 2); 
#line 1156 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1158; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1156 "dsproc3/core.pyx"
        }

#line 1156 "dsproc3/core.pyx"
        case  3:

#line 1156 "dsproc3/core.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__type)) != 0)) kw_args--;

#line 1156 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("change_att", 1, 5, 5, 3); 
#line 1156 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1158; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1156 "dsproc3/core.pyx"
        }

#line 1156 "dsproc3/core.pyx"
        case  4:

#line 1156 "dsproc3/core.pyx"
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value)) != 0)) kw_args--;

#line 1156 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("change_att", 1, 5, 5, 4); 
#line 1156 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1158; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1156 "dsproc3/core.pyx"
        }

#line 1156 "dsproc3/core.pyx"
      }

#line 1156 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1156 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "change_att") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1158; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1156 "dsproc3/core.pyx"
      }

#line 1156 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {

#line 1156 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1156 "dsproc3/core.pyx"
    } else {

#line 1156 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1156 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1156 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1156 "dsproc3/core.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 1156 "dsproc3/core.pyx"
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 1156 "dsproc3/core.pyx"
    }

#line 1156 "dsproc3/core.pyx"
    __pyx_v_parent = ((struct __pyx_obj_4cds3_4core_Object *)values[0]);

#line 1156 "dsproc3/core.pyx"
    __pyx_v_overwrite = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_overwrite == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1160; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1156 "dsproc3/core.pyx"
    __pyx_v_name = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1161; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1156 "dsproc3/core.pyx"
    __pyx_v_type = ((CDSDataType)PyInt_AsLong(values[3])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1156 "dsproc3/core.pyx"
    __pyx_v_value = values[4];

#line 1156 "dsproc3/core.pyx"
  }

#line 1156 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1156 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("change_att", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); 
#line 1156 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1158; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1156 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 1156 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.change_att", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1156 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1156 "dsproc3/core.pyx"
  return NULL;

#line 1156 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1156 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_4cds3_4core_Object, 1, "parent", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1156 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_94change_att(__pyx_self, __pyx_v_parent, __pyx_v_overwrite, __pyx_v_name, __pyx_v_type, __pyx_v_value);

#line 1156 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1156 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1156 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1156 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1156 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1156 "dsproc3/core.pyx"
  return __pyx_r;

#line 1156 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1158
 *     return dsproc_set_dim_length(dataset.c_ob, name, length)
 * 
 * def change_att(             # <<<<<<<<<<<<<<
 *             cds3.core.Object parent,
 *             int          overwrite,
 */

#line 1158 "dsproc3/core.pyx"


#line 1158 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_94change_att(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_parent, int __pyx_v_overwrite, char *__pyx_v_name, CDSDataType __pyx_v_type, PyObject *__pyx_v_value) {
  PyArrayObject *__pyx_v_value_nd = 0
#line 1158 "dsproc3/core.pyx"
;

#line 1158 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1158 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("change_att", 0);

  /* "dsproc3/core.pyx":1188
 *     # TODO need to used fused types for the 'parent' param and also likely for
 *     # the conversion of the 'value' param
 *     cdef np.ndarray value_nd = np.asarray(value, cds_type_to_dtype_obj(type))             # <<<<<<<<<<<<<<
 *     if value_nd.ndim == 0:
 *         value_nd = value_nd[None] # add dummy dimension to scalar value
 */

#line 1188 "dsproc3/core.pyx"
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1188 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1188 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__asarray); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1188 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1188 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1188 "dsproc3/core.pyx"
  __pyx_t_1 = ((PyObject *)__pyx_f_7dsproc3_4core_cds_type_to_dtype_obj(__pyx_v_type)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1188 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1188 "dsproc3/core.pyx"
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1188 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 1188 "dsproc3/core.pyx"
  __Pyx_INCREF(__pyx_v_value);

#line 1188 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_value);

#line 1188 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_v_value);

#line 1188 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);

#line 1188 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 1188 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 1188 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1188 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1188 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1188 "dsproc3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 1188 "dsproc3/core.pyx"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1188 "dsproc3/core.pyx"
  __pyx_v_value_nd = ((PyArrayObject *)__pyx_t_1);

#line 1188 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1189
 *     # the conversion of the 'value' param
 *     cdef np.ndarray value_nd = np.asarray(value, cds_type_to_dtype_obj(type))
 *     if value_nd.ndim == 0:             # <<<<<<<<<<<<<<
 *         value_nd = value_nd[None] # add dummy dimension to scalar value
 *     assert value_nd.ndim == 1
 */

#line 1189 "dsproc3/core.pyx"
  __pyx_t_4 = (__pyx_v_value_nd->nd == 0);

#line 1189 "dsproc3/core.pyx"
  if (__pyx_t_4) {

    /* "dsproc3/core.pyx":1190
 *     cdef np.ndarray value_nd = np.asarray(value, cds_type_to_dtype_obj(type))
 *     if value_nd.ndim == 0:
 *         value_nd = value_nd[None] # add dummy dimension to scalar value             # <<<<<<<<<<<<<<
 *     assert value_nd.ndim == 1
 *     return dsproc_change_att(parent.cds_object, overwrite, name, type,
 */

#line 1190 "dsproc3/core.pyx"
    __pyx_t_1 = PyObject_GetItem(((PyObject *)__pyx_v_value_nd), Py_None); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1190 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 1190 "dsproc3/core.pyx"
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1190 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_v_value_nd));

#line 1190 "dsproc3/core.pyx"
    __pyx_v_value_nd = ((PyArrayObject *)__pyx_t_1);

#line 1190 "dsproc3/core.pyx"
    __pyx_t_1 = 0;

#line 1190 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 1190 "dsproc3/core.pyx"
  }

#line 1190 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":1191
 *     if value_nd.ndim == 0:
 *         value_nd = value_nd[None] # add dummy dimension to scalar value
 *     assert value_nd.ndim == 1             # <<<<<<<<<<<<<<
 *     return dsproc_change_att(parent.cds_object, overwrite, name, type,
 *             len(value_nd), value_nd.data)
 */

#line 1191 "dsproc3/core.pyx"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 1191 "dsproc3/core.pyx"
  if (unlikely(!(__pyx_v_value_nd->nd == 1))) {

#line 1191 "dsproc3/core.pyx"
    PyErr_SetNone(PyExc_AssertionError);

#line 1191 "dsproc3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1191 "dsproc3/core.pyx"
  }

#line 1191 "dsproc3/core.pyx"
  #endif

  /* "dsproc3/core.pyx":1192
 *         value_nd = value_nd[None] # add dummy dimension to scalar value
 *     assert value_nd.ndim == 1
 *     return dsproc_change_att(parent.cds_object, overwrite, name, type,             # <<<<<<<<<<<<<<
 *             len(value_nd), value_nd.data)
 * 
 */

#line 1192 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

  /* "dsproc3/core.pyx":1193
 *     assert value_nd.ndim == 1
 *     return dsproc_change_att(parent.cds_object, overwrite, name, type,
 *             len(value_nd), value_nd.data)             # <<<<<<<<<<<<<<
 * 
 * def get_att(cds3.core.Object parent, char  *name):
 */

#line 1193 "dsproc3/core.pyx"
  __pyx_t_5 = PyObject_Length(((PyObject *)__pyx_v_value_nd)); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1193 "dsproc3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(dsproc_change_att(__pyx_v_parent->cds_object, __pyx_v_overwrite, __pyx_v_name, __pyx_v_type, __pyx_t_5, __pyx_v_value_nd->data)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1193 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1193 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 1193 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 1193 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1193 "dsproc3/core.pyx"


#line 1193 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1193 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1193 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1193 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1193 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1193 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 1193 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.change_att", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1193 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1193 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1193 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_value_nd);

#line 1193 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1193 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1193 "dsproc3/core.pyx"
  return __pyx_r;

#line 1193 "dsproc3/core.pyx"
}

#line 1193 "dsproc3/core.pyx"


#line 1193 "dsproc3/core.pyx"
/* Python wrapper */

#line 1193 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_97get_att(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1193 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_96get_att[] = "get_att(Object parent, char *name)\nGet an attribute from a dataset or variable.\n    \n    @param parent - the parent cds3.Group or cds3.Var\n    @param name - name of the attribute\n    \n    @retval pointer to the attribute\n    @retval None if the attribute does not exist\n    \n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_97get_att = 
#line 1193 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_att"), (PyCFunction)__pyx_pw_7dsproc3_4core_97get_att, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_96get_att)};

#line 1193 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_97get_att(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Object *__pyx_v_parent = 0
#line 1193 "dsproc3/core.pyx"
;
  char *__pyx_v_name
#line 1193 "dsproc3/core.pyx"
;

#line 1193 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1193 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1193 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_att (wrapper)", 0);

#line 1193 "dsproc3/core.pyx"
  {

#line 1193 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__parent,&__pyx_n_s__name,0};

#line 1193 "dsproc3/core.pyx"
    PyObject* values[2] = {0,0};

#line 1193 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1193 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 1193 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1193 "dsproc3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 1193 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1193 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1193 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 1193 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1193 "dsproc3/core.pyx"
      }

#line 1193 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1193 "dsproc3/core.pyx"
      switch (pos_args) {

#line 1193 "dsproc3/core.pyx"
        case  0:

#line 1193 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__parent)) != 0)) kw_args--;
        else 
#line 1193 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1193 "dsproc3/core.pyx"
        case  1:

#line 1193 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name)) != 0)) kw_args--;

#line 1193 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("get_att", 1, 2, 2, 1); 
#line 1193 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1195; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1193 "dsproc3/core.pyx"
        }

#line 1193 "dsproc3/core.pyx"
      }

#line 1193 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1193 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_att") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1195; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1193 "dsproc3/core.pyx"
      }

#line 1193 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 1193 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1193 "dsproc3/core.pyx"
    } else {

#line 1193 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1193 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1193 "dsproc3/core.pyx"
    }

#line 1193 "dsproc3/core.pyx"
    __pyx_v_parent = ((struct __pyx_obj_4cds3_4core_Object *)values[0]);

#line 1193 "dsproc3/core.pyx"
    __pyx_v_name = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1195; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1193 "dsproc3/core.pyx"
  }

#line 1193 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1193 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_att", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 1193 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1195; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1193 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 1193 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_att", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1193 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1193 "dsproc3/core.pyx"
  return NULL;

#line 1193 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1193 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_4cds3_4core_Object, 1, "parent", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1193 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_96get_att(__pyx_self, __pyx_v_parent, __pyx_v_name);

#line 1193 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1193 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1193 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1193 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1193 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1193 "dsproc3/core.pyx"
  return __pyx_r;

#line 1193 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1195
 *             len(value_nd), value_nd.data)
 * 
 * def get_att(cds3.core.Object parent, char  *name):             # <<<<<<<<<<<<<<
 *     """Get an attribute from a dataset or variable.
 * 
 */

#line 1195 "dsproc3/core.pyx"


#line 1195 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_96get_att(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_parent, char *__pyx_v_name) {
  struct __pyx_obj_4cds3_4core_Att *__pyx_v_att = 0
#line 1195 "dsproc3/core.pyx"
;
  struct CDSAtt *__pyx_v_cds_att
#line 1195 "dsproc3/core.pyx"
;

#line 1195 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1195 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_att", 0);

  /* "dsproc3/core.pyx":1207
 *     cdef cds3.core.Att att
 *     cdef CDSAtt *cds_att
 *     cds_att = dsproc_get_att(parent.cds_object, name)             # <<<<<<<<<<<<<<
 *     if cds_att == NULL:
 *         return None
 */

#line 1207 "dsproc3/core.pyx"
  __pyx_v_cds_att = dsproc_get_att(__pyx_v_parent->cds_object, __pyx_v_name);

  /* "dsproc3/core.pyx":1208
 *     cdef CDSAtt *cds_att
 *     cds_att = dsproc_get_att(parent.cds_object, name)
 *     if cds_att == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */

#line 1208 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_cds_att == NULL);

#line 1208 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":1209
 *     cds_att = dsproc_get_att(parent.cds_object, name)
 *     if cds_att == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         att = cds3.core.Att()
 */

#line 1209 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1209 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 1209 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 1209 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1209 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 1209 "dsproc3/core.pyx"
  }

#line 1209 "dsproc3/core.pyx"
  /*else*/ {

    /* "dsproc3/core.pyx":1211
 *         return None
 *     else:
 *         att = cds3.core.Att()             # <<<<<<<<<<<<<<
 *         att.set_att(cds_att)
 *         return att
 */

#line 1211 "dsproc3/core.pyx"
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Att)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1211; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1211 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1211 "dsproc3/core.pyx"
    __pyx_v_att = ((struct __pyx_obj_4cds3_4core_Att *)__pyx_t_2);

#line 1211 "dsproc3/core.pyx"
    __pyx_t_2 = 0;

    /* "dsproc3/core.pyx":1212
 *     else:
 *         att = cds3.core.Att()
 *         att.set_att(cds_att)             # <<<<<<<<<<<<<<
 *         return att
 * 
 */

#line 1212 "dsproc3/core.pyx"
    __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Att *)__pyx_v_att->__pyx_base.__pyx_vtab)->set_att(__pyx_v_att, __pyx_v_cds_att); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1212 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1212 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "dsproc3/core.pyx":1213
 *         att = cds3.core.Att()
 *         att.set_att(cds_att)
 *         return att             # <<<<<<<<<<<<<<
 * 
 * def get_att_text(cds3.core.Object parent, char *name):
 */

#line 1213 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1213 "dsproc3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_att));

#line 1213 "dsproc3/core.pyx"
    __pyx_r = ((PyObject *)__pyx_v_att);

#line 1213 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1213 "dsproc3/core.pyx"
  }

#line 1213 "dsproc3/core.pyx"
  __pyx_L3:;

#line 1213 "dsproc3/core.pyx"


#line 1213 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1213 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1213 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1213 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1213 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_att", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1213 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1213 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1213 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_att);

#line 1213 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1213 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1213 "dsproc3/core.pyx"
  return __pyx_r;

#line 1213 "dsproc3/core.pyx"
}

#line 1213 "dsproc3/core.pyx"


#line 1213 "dsproc3/core.pyx"
/* Python wrapper */

#line 1213 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_99get_att_text(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1213 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_98get_att_text[] = "get_att_text(Object parent, char *name)\nGet a copy of an attribute value from a dataset or variable.\n    \n    This function will get a copy of an attribute value converted to a\n    text string. If the data type of the attribute is not CDS_CHAR the\n    cds_array_to_string() function is used to create the output string.\n    \n    If an error occurs in this function it will be appended to the log and\n    error mail messages, and the process status will be set appropriately.\n    \n    @param parent - pointer to the parent CDSGroup or CDSVar\n    @param name - name of the attribute\n    \n    @retval the output string\n    @retval None if the attribute does not exist or has zero length\n    @retval None if a memory allocation error occurs\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_99get_att_text = 
#line 1213 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_att_text"), (PyCFunction)__pyx_pw_7dsproc3_4core_99get_att_text, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_98get_att_text)};

#line 1213 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_99get_att_text(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Object *__pyx_v_parent = 0
#line 1213 "dsproc3/core.pyx"
;
  char *__pyx_v_name
#line 1213 "dsproc3/core.pyx"
;

#line 1213 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1213 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1213 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_att_text (wrapper)", 0);

#line 1213 "dsproc3/core.pyx"
  {

#line 1213 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__parent,&__pyx_n_s__name,0};

#line 1213 "dsproc3/core.pyx"
    PyObject* values[2] = {0,0};

#line 1213 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1213 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 1213 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1213 "dsproc3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 1213 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1213 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1213 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 1213 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1213 "dsproc3/core.pyx"
      }

#line 1213 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1213 "dsproc3/core.pyx"
      switch (pos_args) {

#line 1213 "dsproc3/core.pyx"
        case  0:

#line 1213 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__parent)) != 0)) kw_args--;
        else 
#line 1213 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1213 "dsproc3/core.pyx"
        case  1:

#line 1213 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name)) != 0)) kw_args--;

#line 1213 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("get_att_text", 1, 2, 2, 1); 
#line 1213 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1213 "dsproc3/core.pyx"
        }

#line 1213 "dsproc3/core.pyx"
      }

#line 1213 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1213 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_att_text") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1213 "dsproc3/core.pyx"
      }

#line 1213 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 1213 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1213 "dsproc3/core.pyx"
    } else {

#line 1213 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1213 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1213 "dsproc3/core.pyx"
    }

#line 1213 "dsproc3/core.pyx"
    __pyx_v_parent = ((struct __pyx_obj_4cds3_4core_Object *)values[0]);

#line 1213 "dsproc3/core.pyx"
    __pyx_v_name = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1213 "dsproc3/core.pyx"
  }

#line 1213 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1213 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_att_text", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 1213 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1213 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 1213 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_att_text", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1213 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1213 "dsproc3/core.pyx"
  return NULL;

#line 1213 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1213 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_4cds3_4core_Object, 1, "parent", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1213 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_98get_att_text(__pyx_self, __pyx_v_parent, __pyx_v_name);

#line 1213 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1213 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1213 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1213 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1213 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1213 "dsproc3/core.pyx"
  return __pyx_r;

#line 1213 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1215
 *         return att
 * 
 * def get_att_text(cds3.core.Object parent, char *name):             # <<<<<<<<<<<<<<
 *     """Get a copy of an attribute value from a dataset or variable.
 * 
 */

#line 1215 "dsproc3/core.pyx"


#line 1215 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_98get_att_text(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_parent, char *__pyx_v_name) {
  size_t __pyx_v_length
#line 1215 "dsproc3/core.pyx"
;
  char *__pyx_v_text
#line 1215 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_retval = 0
#line 1215 "dsproc3/core.pyx"
;

#line 1215 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1215 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_att_text", 0);

  /* "dsproc3/core.pyx":1236
 *     cdef char *text
 *     cdef object retval
 *     text = dsproc_get_att_text(parent.cds_object, name, &length, NULL)             # <<<<<<<<<<<<<<
 *     if text == NULL:
 *         return None
 */

#line 1236 "dsproc3/core.pyx"
  __pyx_v_text = dsproc_get_att_text(__pyx_v_parent->cds_object, __pyx_v_name, (&__pyx_v_length), NULL);

  /* "dsproc3/core.pyx":1237
 *     cdef object retval
 *     text = dsproc_get_att_text(parent.cds_object, name, &length, NULL)
 *     if text == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     retval = text
 */

#line 1237 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_text == NULL);

#line 1237 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":1238
 *     text = dsproc_get_att_text(parent.cds_object, name, &length, NULL)
 *     if text == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     retval = text
 *     free(text);
 */

#line 1238 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1238 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 1238 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 1238 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1238 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 1238 "dsproc3/core.pyx"
  }

#line 1238 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":1239
 *     if text == NULL:
 *         return None
 *     retval = text             # <<<<<<<<<<<<<<
 *     free(text);
 *     return retval
 */

#line 1239 "dsproc3/core.pyx"
  __pyx_t_2 = PyBytes_FromString(__pyx_v_text); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1239 "dsproc3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));

#line 1239 "dsproc3/core.pyx"
  __pyx_v_retval = ((PyObject *)__pyx_t_2);

#line 1239 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

  /* "dsproc3/core.pyx":1240
 *         return None
 *     retval = text
 *     free(text);             # <<<<<<<<<<<<<<
 *     return retval
 * 
 */

#line 1240 "dsproc3/core.pyx"
  free(__pyx_v_text);

  /* "dsproc3/core.pyx":1241
 *     retval = text
 *     free(text);
 *     return retval             # <<<<<<<<<<<<<<
 * 
 * def get_att_value(cds3.core.Object parent, char *name, CDSDataType type):
 */

#line 1241 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1241 "dsproc3/core.pyx"
  __Pyx_INCREF(__pyx_v_retval);

#line 1241 "dsproc3/core.pyx"
  __pyx_r = __pyx_v_retval;

#line 1241 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1241 "dsproc3/core.pyx"


#line 1241 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1241 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1241 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1241 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1241 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_att_text", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1241 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1241 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1241 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_retval);

#line 1241 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1241 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1241 "dsproc3/core.pyx"
  return __pyx_r;

#line 1241 "dsproc3/core.pyx"
}

#line 1241 "dsproc3/core.pyx"


#line 1241 "dsproc3/core.pyx"
/* Python wrapper */

#line 1241 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_101get_att_value(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1241 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_100get_att_value[] = "get_att_value(Object parent, char *name, CDSDataType type)\nGet a copy of an attribute value from a dataset or variable.\n    \n    This function will get a copy of an attribute value casted into\n    the specified data type. The functions cds_string_to_array() and\n    cds_array_to_string() are used to convert between text (CDS_CHAR)\n    and numeric data types.\n    \n    If an error occurs in this function it will be appended to the log and\n    error mail messages, and the process status will be set appropriately.\n    \n    @param parent - pointer to the parent CDSGroup or CDSVar\n    @param name - name of the attribute\n    @param type - data type of the output array\n    \n    @retval ndarray of the output array\n    @retval None if the attribute value has zero length (length == 0)\n    @retval None if a memory allocation error occurs (length == (size_t)-1)\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_101get_att_value = 
#line 1241 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_att_value"), (PyCFunction)__pyx_pw_7dsproc3_4core_101get_att_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_100get_att_value)};

#line 1241 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_101get_att_value(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Object *__pyx_v_parent = 0
#line 1241 "dsproc3/core.pyx"
;
  char *__pyx_v_name
#line 1241 "dsproc3/core.pyx"
;
  CDSDataType __pyx_v_type
#line 1241 "dsproc3/core.pyx"
;

#line 1241 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1241 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1241 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_att_value (wrapper)", 0);

#line 1241 "dsproc3/core.pyx"
  {

#line 1241 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__parent,&__pyx_n_s__name,&__pyx_n_s__type,0};

#line 1241 "dsproc3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 1241 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1241 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 1241 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1241 "dsproc3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 1241 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1241 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1241 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1241 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 1241 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1241 "dsproc3/core.pyx"
      }

#line 1241 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1241 "dsproc3/core.pyx"
      switch (pos_args) {

#line 1241 "dsproc3/core.pyx"
        case  0:

#line 1241 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__parent)) != 0)) kw_args--;
        else 
#line 1241 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1241 "dsproc3/core.pyx"
        case  1:

#line 1241 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name)) != 0)) kw_args--;

#line 1241 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("get_att_value", 1, 3, 3, 1); 
#line 1241 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1243; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1241 "dsproc3/core.pyx"
        }

#line 1241 "dsproc3/core.pyx"
        case  2:

#line 1241 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__type)) != 0)) kw_args--;

#line 1241 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("get_att_value", 1, 3, 3, 2); 
#line 1241 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1243; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1241 "dsproc3/core.pyx"
        }

#line 1241 "dsproc3/core.pyx"
      }

#line 1241 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1241 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_att_value") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1243; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1241 "dsproc3/core.pyx"
      }

#line 1241 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 1241 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1241 "dsproc3/core.pyx"
    } else {

#line 1241 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1241 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1241 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1241 "dsproc3/core.pyx"
    }

#line 1241 "dsproc3/core.pyx"
    __pyx_v_parent = ((struct __pyx_obj_4cds3_4core_Object *)values[0]);

#line 1241 "dsproc3/core.pyx"
    __pyx_v_name = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1243; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1241 "dsproc3/core.pyx"
    __pyx_v_type = ((CDSDataType)PyInt_AsLong(values[2])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1243; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1241 "dsproc3/core.pyx"
  }

#line 1241 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1241 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_att_value", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 1241 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1243; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1241 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 1241 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_att_value", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1241 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1241 "dsproc3/core.pyx"
  return NULL;

#line 1241 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1241 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_4cds3_4core_Object, 1, "parent", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1241 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_100get_att_value(__pyx_self, __pyx_v_parent, __pyx_v_name, __pyx_v_type);

#line 1241 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1241 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1241 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1241 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1241 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1241 "dsproc3/core.pyx"
  return __pyx_r;

#line 1241 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1243
 *     return retval
 * 
 * def get_att_value(cds3.core.Object parent, char *name, CDSDataType type):             # <<<<<<<<<<<<<<
 *     """Get a copy of an attribute value from a dataset or variable.
 * 
 */

#line 1243 "dsproc3/core.pyx"


#line 1243 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_100get_att_value(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_parent, char *__pyx_v_name, CDSDataType __pyx_v_type) {
  size_t __pyx_v_length
#line 1243 "dsproc3/core.pyx"
;
  void *__pyx_v_value
#line 1243 "dsproc3/core.pyx"
;
  int __pyx_v_dtype
#line 1243 "dsproc3/core.pyx"
;
  PyArrayObject *__pyx_v_value_nd = 0
#line 1243 "dsproc3/core.pyx"
;
  npy_intp __pyx_v_dims
#line 1243 "dsproc3/core.pyx"
;

#line 1243 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1243 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_att_value", 0);

  /* "dsproc3/core.pyx":1264
 *     """
 *     cdef size_t length
 *     cdef void *value = NULL             # <<<<<<<<<<<<<<
 *     cdef int dtype
 *     cdef np.ndarray value_nd
 */

#line 1264 "dsproc3/core.pyx"
  __pyx_v_value = NULL;

  /* "dsproc3/core.pyx":1268
 *     cdef np.ndarray value_nd
 *     cdef np.npy_intp dims
 *     value = dsproc_get_att_value(parent.cds_object, name, type, &length, NULL)             # <<<<<<<<<<<<<<
 *     if value == NULL:
 *         return None
 */

#line 1268 "dsproc3/core.pyx"
  __pyx_v_value = dsproc_get_att_value(__pyx_v_parent->cds_object, __pyx_v_name, __pyx_v_type, (&__pyx_v_length), NULL);

  /* "dsproc3/core.pyx":1269
 *     cdef np.npy_intp dims
 *     value = dsproc_get_att_value(parent.cds_object, name, type, &length, NULL)
 *     if value == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     dtype = cds_type_to_dtype(type)
 */

#line 1269 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_value == NULL);

#line 1269 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":1270
 *     value = dsproc_get_att_value(parent.cds_object, name, type, &length, NULL)
 *     if value == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     dtype = cds_type_to_dtype(type)
 *     dims = length
 */

#line 1270 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1270 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 1270 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 1270 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1270 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 1270 "dsproc3/core.pyx"
  }

#line 1270 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":1271
 *     if value == NULL:
 *         return None
 *     dtype = cds_type_to_dtype(type)             # <<<<<<<<<<<<<<
 *     dims = length
 *     value_nd = np.PyArray_SimpleNewFromData(1, &dims, dtype, value)
 */

#line 1271 "dsproc3/core.pyx"
  __pyx_t_2 = __pyx_f_7dsproc3_4core_cds_type_to_dtype(__pyx_v_type); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1271 "dsproc3/core.pyx"
  __pyx_v_dtype = __pyx_t_2;

  /* "dsproc3/core.pyx":1272
 *         return None
 *     dtype = cds_type_to_dtype(type)
 *     dims = length             # <<<<<<<<<<<<<<
 *     value_nd = np.PyArray_SimpleNewFromData(1, &dims, dtype, value)
 *     # allow numpy to reclaim memory when array goes out of scope
 */

#line 1272 "dsproc3/core.pyx"
  __pyx_v_dims = __pyx_v_length;

  /* "dsproc3/core.pyx":1273
 *     dtype = cds_type_to_dtype(type)
 *     dims = length
 *     value_nd = np.PyArray_SimpleNewFromData(1, &dims, dtype, value)             # <<<<<<<<<<<<<<
 *     # allow numpy to reclaim memory when array goes out of scope
 *     value_nd.base = PyCObject_FromVoidPtr(value, _free)
 */

#line 1273 "dsproc3/core.pyx"
  __pyx_t_3 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), __pyx_v_dtype, __pyx_v_value); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1273 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 1273 "dsproc3/core.pyx"
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1273 "dsproc3/core.pyx"
  __pyx_v_value_nd = ((PyArrayObject *)__pyx_t_3);

#line 1273 "dsproc3/core.pyx"
  __pyx_t_3 = 0;

  /* "dsproc3/core.pyx":1275
 *     value_nd = np.PyArray_SimpleNewFromData(1, &dims, dtype, value)
 *     # allow numpy to reclaim memory when array goes out of scope
 *     value_nd.base = PyCObject_FromVoidPtr(value, _free)             # <<<<<<<<<<<<<<
 *     return value_nd
 * 
 */

#line 1275 "dsproc3/core.pyx"
  __pyx_v_value_nd->base = PyCObject_FromVoidPtr(__pyx_v_value, __pyx_f_7dsproc3_4core__free);

  /* "dsproc3/core.pyx":1276
 *     # allow numpy to reclaim memory when array goes out of scope
 *     value_nd.base = PyCObject_FromVoidPtr(value, _free)
 *     return value_nd             # <<<<<<<<<<<<<<
 * 
 * def set_att(cds3.core.Object parent, int overwrite, char *name,
 */

#line 1276 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1276 "dsproc3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_value_nd));

#line 1276 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_value_nd);

#line 1276 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1276 "dsproc3/core.pyx"


#line 1276 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1276 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1276 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1276 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 1276 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_att_value", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1276 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1276 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1276 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_value_nd);

#line 1276 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1276 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1276 "dsproc3/core.pyx"
  return __pyx_r;

#line 1276 "dsproc3/core.pyx"
}

#line 1276 "dsproc3/core.pyx"


#line 1276 "dsproc3/core.pyx"
/* Python wrapper */

#line 1276 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_103set_att(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1276 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_102set_att[] = "set_att(Object parent, int overwrite, char *name, CDSDataType type, value)\nSet the value of an attribute in a dataset or variable.\n    \n    This function will define the specified attribute if it does not exist.\n    If the attribute does exist and the overwrite flag is set, the value will\n    be set by casting the specified value into the data type of the attribute.\n    The functions cds_string_to_array() and cds_array_to_string() are used to\n    convert between text (CDS_CHAR) and numeric data types.\n    \n    If an error occurs in this function it will be appended to the log and\n    error mail messages, and the process status will be set appropriately.\n    \n    @param parent - pointer to the parent CDSGroup or CDSVar\n    @param overwrite - overwrite flag (1 = TRUE, 0 = FALSE)\n    @param name - attribute name\n    @param type - attribute data type\n    @param value - pointer to the attribute value\n    \n    @retval 1 if successful\n    @retval 0 if the parent object is not a group or variable\n    @retval 0 if the parent group or variable definition is locked\n    @retval 0 if the attribute definition is locked\n    @retval 0 if a memory allocation error occurred\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_103set_att = 
#line 1276 "dsproc3/core.pyx"
{__Pyx_NAMESTR("set_att"), (PyCFunction)__pyx_pw_7dsproc3_4core_103set_att, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_102set_att)};

#line 1276 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_103set_att(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Object *__pyx_v_parent = 0
#line 1276 "dsproc3/core.pyx"
;
  int __pyx_v_overwrite
#line 1276 "dsproc3/core.pyx"
;
  char *__pyx_v_name
#line 1276 "dsproc3/core.pyx"
;
  CDSDataType __pyx_v_type
#line 1276 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_value = 0
#line 1276 "dsproc3/core.pyx"
;

#line 1276 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1276 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1276 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_att (wrapper)", 0);

#line 1276 "dsproc3/core.pyx"
  {

#line 1276 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__parent,&__pyx_n_s__overwrite,&__pyx_n_s__name,&__pyx_n_s__type,&__pyx_n_s__value,0};

#line 1276 "dsproc3/core.pyx"
    PyObject* values[5] = {0,0,0,0,0};

#line 1276 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1276 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 1276 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1276 "dsproc3/core.pyx"
      switch (pos_args) {
        case  5: 
#line 1276 "dsproc3/core.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 1276 "dsproc3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 1276 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1276 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1276 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1276 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 1276 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1276 "dsproc3/core.pyx"
      }

#line 1276 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1276 "dsproc3/core.pyx"
      switch (pos_args) {

#line 1276 "dsproc3/core.pyx"
        case  0:

#line 1276 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__parent)) != 0)) kw_args--;
        else 
#line 1276 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1276 "dsproc3/core.pyx"
        case  1:

#line 1276 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__overwrite)) != 0)) kw_args--;

#line 1276 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_att", 1, 5, 5, 1); 
#line 1276 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1276 "dsproc3/core.pyx"
        }

#line 1276 "dsproc3/core.pyx"
        case  2:

#line 1276 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name)) != 0)) kw_args--;

#line 1276 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_att", 1, 5, 5, 2); 
#line 1276 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1276 "dsproc3/core.pyx"
        }

#line 1276 "dsproc3/core.pyx"
        case  3:

#line 1276 "dsproc3/core.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__type)) != 0)) kw_args--;

#line 1276 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_att", 1, 5, 5, 3); 
#line 1276 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1276 "dsproc3/core.pyx"
        }

#line 1276 "dsproc3/core.pyx"
        case  4:

#line 1276 "dsproc3/core.pyx"
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value)) != 0)) kw_args--;

#line 1276 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_att", 1, 5, 5, 4); 
#line 1276 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1276 "dsproc3/core.pyx"
        }

#line 1276 "dsproc3/core.pyx"
      }

#line 1276 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1276 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_att") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1276 "dsproc3/core.pyx"
      }

#line 1276 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {

#line 1276 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1276 "dsproc3/core.pyx"
    } else {

#line 1276 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1276 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1276 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1276 "dsproc3/core.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 1276 "dsproc3/core.pyx"
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 1276 "dsproc3/core.pyx"
    }

#line 1276 "dsproc3/core.pyx"
    __pyx_v_parent = ((struct __pyx_obj_4cds3_4core_Object *)values[0]);

#line 1276 "dsproc3/core.pyx"
    __pyx_v_overwrite = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_overwrite == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1276 "dsproc3/core.pyx"
    __pyx_v_name = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1276 "dsproc3/core.pyx"
    __pyx_v_type = ((CDSDataType)PyInt_AsLong(values[3])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1279; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1276 "dsproc3/core.pyx"
    __pyx_v_value = values[4];

#line 1276 "dsproc3/core.pyx"
  }

#line 1276 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1276 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_att", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); 
#line 1276 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1276 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 1276 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_att", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1276 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1276 "dsproc3/core.pyx"
  return NULL;

#line 1276 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1276 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_4cds3_4core_Object, 1, "parent", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1276 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_102set_att(__pyx_self, __pyx_v_parent, __pyx_v_overwrite, __pyx_v_name, __pyx_v_type, __pyx_v_value);

#line 1276 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1276 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1276 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1276 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1276 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1276 "dsproc3/core.pyx"
  return __pyx_r;

#line 1276 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1278
 *     return value_nd
 * 
 * def set_att(cds3.core.Object parent, int overwrite, char *name,             # <<<<<<<<<<<<<<
 *         CDSDataType type, object value):
 *     """Set the value of an attribute in a dataset or variable.
 */

#line 1278 "dsproc3/core.pyx"


#line 1278 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_102set_att(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_parent, int __pyx_v_overwrite, char *__pyx_v_name, CDSDataType __pyx_v_type, PyObject *__pyx_v_value) {
  PyArrayObject *__pyx_v_value_nd = 0
#line 1278 "dsproc3/core.pyx"
;

#line 1278 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1278 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_att", 0);

  /* "dsproc3/core.pyx":1305
 *     """
 *     cdef int return_value
 *     cdef np.ndarray value_nd = np.asarray(value, cds_type_to_dtype_obj(type))             # <<<<<<<<<<<<<<
 *     if value_nd.ndim == 0:
 *         value_nd = value_nd[None] # add dummy dimension to a scalar value
 */

#line 1305 "dsproc3/core.pyx"
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1305 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1305 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__asarray); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1305 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1305 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1305 "dsproc3/core.pyx"
  __pyx_t_1 = ((PyObject *)__pyx_f_7dsproc3_4core_cds_type_to_dtype_obj(__pyx_v_type)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1305 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1305 "dsproc3/core.pyx"
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1305 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 1305 "dsproc3/core.pyx"
  __Pyx_INCREF(__pyx_v_value);

#line 1305 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_value);

#line 1305 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_v_value);

#line 1305 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);

#line 1305 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 1305 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 1305 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1305 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1305 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1305 "dsproc3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 1305 "dsproc3/core.pyx"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1305 "dsproc3/core.pyx"
  __pyx_v_value_nd = ((PyArrayObject *)__pyx_t_1);

#line 1305 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1306
 *     cdef int return_value
 *     cdef np.ndarray value_nd = np.asarray(value, cds_type_to_dtype_obj(type))
 *     if value_nd.ndim == 0:             # <<<<<<<<<<<<<<
 *         value_nd = value_nd[None] # add dummy dimension to a scalar value
 *     assert value_nd.ndim == 1
 */

#line 1306 "dsproc3/core.pyx"
  __pyx_t_4 = (__pyx_v_value_nd->nd == 0);

#line 1306 "dsproc3/core.pyx"
  if (__pyx_t_4) {

    /* "dsproc3/core.pyx":1307
 *     cdef np.ndarray value_nd = np.asarray(value, cds_type_to_dtype_obj(type))
 *     if value_nd.ndim == 0:
 *         value_nd = value_nd[None] # add dummy dimension to a scalar value             # <<<<<<<<<<<<<<
 *     assert value_nd.ndim == 1
 *     return dsproc_set_att(parent.cds_object, overwrite, name, type,
 */

#line 1307 "dsproc3/core.pyx"
    __pyx_t_1 = PyObject_GetItem(((PyObject *)__pyx_v_value_nd), Py_None); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1307 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 1307 "dsproc3/core.pyx"
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1307 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_v_value_nd));

#line 1307 "dsproc3/core.pyx"
    __pyx_v_value_nd = ((PyArrayObject *)__pyx_t_1);

#line 1307 "dsproc3/core.pyx"
    __pyx_t_1 = 0;

#line 1307 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 1307 "dsproc3/core.pyx"
  }

#line 1307 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":1308
 *     if value_nd.ndim == 0:
 *         value_nd = value_nd[None] # add dummy dimension to a scalar value
 *     assert value_nd.ndim == 1             # <<<<<<<<<<<<<<
 *     return dsproc_set_att(parent.cds_object, overwrite, name, type,
 *             len(value_nd), value_nd.data)
 */

#line 1308 "dsproc3/core.pyx"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 1308 "dsproc3/core.pyx"
  if (unlikely(!(__pyx_v_value_nd->nd == 1))) {

#line 1308 "dsproc3/core.pyx"
    PyErr_SetNone(PyExc_AssertionError);

#line 1308 "dsproc3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1308 "dsproc3/core.pyx"
  }

#line 1308 "dsproc3/core.pyx"
  #endif

  /* "dsproc3/core.pyx":1309
 *         value_nd = value_nd[None] # add dummy dimension to a scalar value
 *     assert value_nd.ndim == 1
 *     return dsproc_set_att(parent.cds_object, overwrite, name, type,             # <<<<<<<<<<<<<<
 *             len(value_nd), value_nd.data)
 * 
 */

#line 1309 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

  /* "dsproc3/core.pyx":1310
 *     assert value_nd.ndim == 1
 *     return dsproc_set_att(parent.cds_object, overwrite, name, type,
 *             len(value_nd), value_nd.data)             # <<<<<<<<<<<<<<
 * 
 * def set_att_text(cds3.core.Object parent, char *name, char *value):
 */

#line 1310 "dsproc3/core.pyx"
  __pyx_t_5 = PyObject_Length(((PyObject *)__pyx_v_value_nd)); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1310 "dsproc3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(dsproc_set_att(__pyx_v_parent->cds_object, __pyx_v_overwrite, __pyx_v_name, __pyx_v_type, __pyx_t_5, __pyx_v_value_nd->data)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1310 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1310 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 1310 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 1310 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1310 "dsproc3/core.pyx"


#line 1310 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1310 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1310 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1310 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1310 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1310 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 1310 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_att", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1310 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1310 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1310 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_value_nd);

#line 1310 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1310 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1310 "dsproc3/core.pyx"
  return __pyx_r;

#line 1310 "dsproc3/core.pyx"
}

#line 1310 "dsproc3/core.pyx"


#line 1310 "dsproc3/core.pyx"
/* Python wrapper */

#line 1310 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_105set_att_text(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1310 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_104set_att_text[] = "set_att_text(Object parent, char *name, char *value)\nSet the value of an attribute in a dataset or variable.\n    \n    The cds_string_to_array() function will be used to set the attribute\n    value if the data type of the attribute is not CDS_CHAR.\n    \n    If an error occurs in this function it will be appended to the log and\n    error mail messages, and the process status will be set appropriately.\n    \n    @param parent - pointer to the parent CDSGroup or CDSVar\n    @param name - name of the attribute\n    @param value - the string\n    \n    @retval 1 if successful\n    @retval 0 if the attribute does not exist\n    @retval 0 if the attribute definition is locked\n    @retval 0 if a memory allocation error occurred\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_105set_att_text = 
#line 1310 "dsproc3/core.pyx"
{__Pyx_NAMESTR("set_att_text"), (PyCFunction)__pyx_pw_7dsproc3_4core_105set_att_text, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_104set_att_text)};

#line 1310 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_105set_att_text(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Object *__pyx_v_parent = 0
#line 1310 "dsproc3/core.pyx"
;
  char *__pyx_v_name
#line 1310 "dsproc3/core.pyx"
;
  char *__pyx_v_value
#line 1310 "dsproc3/core.pyx"
;

#line 1310 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1310 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1310 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_att_text (wrapper)", 0);

#line 1310 "dsproc3/core.pyx"
  {

#line 1310 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__parent,&__pyx_n_s__name,&__pyx_n_s__value,0};

#line 1310 "dsproc3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 1310 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1310 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 1310 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1310 "dsproc3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 1310 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1310 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1310 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1310 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 1310 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1310 "dsproc3/core.pyx"
      }

#line 1310 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1310 "dsproc3/core.pyx"
      switch (pos_args) {

#line 1310 "dsproc3/core.pyx"
        case  0:

#line 1310 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__parent)) != 0)) kw_args--;
        else 
#line 1310 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1310 "dsproc3/core.pyx"
        case  1:

#line 1310 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name)) != 0)) kw_args--;

#line 1310 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_att_text", 1, 3, 3, 1); 
#line 1310 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1310 "dsproc3/core.pyx"
        }

#line 1310 "dsproc3/core.pyx"
        case  2:

#line 1310 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value)) != 0)) kw_args--;

#line 1310 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_att_text", 1, 3, 3, 2); 
#line 1310 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1310 "dsproc3/core.pyx"
        }

#line 1310 "dsproc3/core.pyx"
      }

#line 1310 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1310 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_att_text") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1310 "dsproc3/core.pyx"
      }

#line 1310 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 1310 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1310 "dsproc3/core.pyx"
    } else {

#line 1310 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1310 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1310 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1310 "dsproc3/core.pyx"
    }

#line 1310 "dsproc3/core.pyx"
    __pyx_v_parent = ((struct __pyx_obj_4cds3_4core_Object *)values[0]);

#line 1310 "dsproc3/core.pyx"
    __pyx_v_name = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1310 "dsproc3/core.pyx"
    __pyx_v_value = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1310 "dsproc3/core.pyx"
  }

#line 1310 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1310 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_att_text", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 1310 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1310 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 1310 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_att_text", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1310 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1310 "dsproc3/core.pyx"
  return NULL;

#line 1310 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1310 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_4cds3_4core_Object, 1, "parent", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1310 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_104set_att_text(__pyx_self, __pyx_v_parent, __pyx_v_name, __pyx_v_value);

#line 1310 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1310 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1310 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1310 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1310 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1310 "dsproc3/core.pyx"
  return __pyx_r;

#line 1310 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1312
 *             len(value_nd), value_nd.data)
 * 
 * def set_att_text(cds3.core.Object parent, char *name, char *value):             # <<<<<<<<<<<<<<
 *     """Set the value of an attribute in a dataset or variable.
 * 
 */

#line 1312 "dsproc3/core.pyx"


#line 1312 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_104set_att_text(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_parent, char *__pyx_v_name, char *__pyx_v_value) {

#line 1312 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1312 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_att_text", 0);

  /* "dsproc3/core.pyx":1331
 * 
 *     """
 *     return dsproc_set_att_text(parent.cds_object, name, value)             # <<<<<<<<<<<<<<
 * 
 * def set_att_value(cds3.core.Object parent, char *name,
 */

#line 1331 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1331 "dsproc3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(dsproc_set_att_text(__pyx_v_parent->cds_object, __pyx_v_name, __pyx_v_value)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1331 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1331 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 1331 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 1331 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1331 "dsproc3/core.pyx"


#line 1331 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1331 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1331 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1331 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1331 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_att_text", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1331 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1331 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1331 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1331 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1331 "dsproc3/core.pyx"
  return __pyx_r;

#line 1331 "dsproc3/core.pyx"
}

#line 1331 "dsproc3/core.pyx"


#line 1331 "dsproc3/core.pyx"
/* Python wrapper */

#line 1331 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_107set_att_value(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1331 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_106set_att_value[] = "set_att_value(Object parent, char *name, CDSDataType type, value)\nSet the value of an attribute in a dataset or variable.\n    \n    This function will set the value of an attribute by casting the\n    specified value into the data type of the attribute. The functions\n    cds_string_to_array() and cds_array_to_string() are used to convert\n    between text (CDS_CHAR) and numeric data types.\n    \n    If an error occurs in this function it will be appended to the log and\n    error mail messages, and the process status will be set appropriately.\n    \n    @param parent - the parent CDSGroup or CDSVar\n    @param name - name of the attribute\n    @param type - data type of the specified value\n    @param value - the attribute value\n    \n    @retval 1 if successful\n    @retval 0 if the attribute does not exist\n    @retval 0 if the attribute definition is locked\n    @retval 0 if a memory allocation error occurred\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_107set_att_value = 
#line 1331 "dsproc3/core.pyx"
{__Pyx_NAMESTR("set_att_value"), (PyCFunction)__pyx_pw_7dsproc3_4core_107set_att_value, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_106set_att_value)};

#line 1331 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_107set_att_value(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Object *__pyx_v_parent = 0
#line 1331 "dsproc3/core.pyx"
;
  char *__pyx_v_name
#line 1331 "dsproc3/core.pyx"
;
  CDSDataType __pyx_v_type
#line 1331 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_value = 0
#line 1331 "dsproc3/core.pyx"
;

#line 1331 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1331 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1331 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_att_value (wrapper)", 0);

#line 1331 "dsproc3/core.pyx"
  {

#line 1331 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__parent,&__pyx_n_s__name,&__pyx_n_s__type,&__pyx_n_s__value,0};

#line 1331 "dsproc3/core.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 1331 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1331 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 1331 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1331 "dsproc3/core.pyx"
      switch (pos_args) {
        case  4: 
#line 1331 "dsproc3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 1331 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1331 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1331 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1331 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 1331 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1331 "dsproc3/core.pyx"
      }

#line 1331 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1331 "dsproc3/core.pyx"
      switch (pos_args) {

#line 1331 "dsproc3/core.pyx"
        case  0:

#line 1331 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__parent)) != 0)) kw_args--;
        else 
#line 1331 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1331 "dsproc3/core.pyx"
        case  1:

#line 1331 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name)) != 0)) kw_args--;

#line 1331 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_att_value", 1, 4, 4, 1); 
#line 1331 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1333; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1331 "dsproc3/core.pyx"
        }

#line 1331 "dsproc3/core.pyx"
        case  2:

#line 1331 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__type)) != 0)) kw_args--;

#line 1331 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_att_value", 1, 4, 4, 2); 
#line 1331 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1333; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1331 "dsproc3/core.pyx"
        }

#line 1331 "dsproc3/core.pyx"
        case  3:

#line 1331 "dsproc3/core.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__value)) != 0)) kw_args--;

#line 1331 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_att_value", 1, 4, 4, 3); 
#line 1331 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1333; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1331 "dsproc3/core.pyx"
        }

#line 1331 "dsproc3/core.pyx"
      }

#line 1331 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1331 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_att_value") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1333; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1331 "dsproc3/core.pyx"
      }

#line 1331 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {

#line 1331 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1331 "dsproc3/core.pyx"
    } else {

#line 1331 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1331 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1331 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1331 "dsproc3/core.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 1331 "dsproc3/core.pyx"
    }

#line 1331 "dsproc3/core.pyx"
    __pyx_v_parent = ((struct __pyx_obj_4cds3_4core_Object *)values[0]);

#line 1331 "dsproc3/core.pyx"
    __pyx_v_name = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1333; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1331 "dsproc3/core.pyx"
    __pyx_v_type = ((CDSDataType)PyInt_AsLong(values[2])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1331 "dsproc3/core.pyx"
    __pyx_v_value = values[3];

#line 1331 "dsproc3/core.pyx"
  }

#line 1331 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1331 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_att_value", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 1331 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1333; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1331 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 1331 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_att_value", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1331 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1331 "dsproc3/core.pyx"
  return NULL;

#line 1331 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1331 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_parent), __pyx_ptype_4cds3_4core_Object, 1, "parent", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1331 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_106set_att_value(__pyx_self, __pyx_v_parent, __pyx_v_name, __pyx_v_type, __pyx_v_value);

#line 1331 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1331 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1331 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1331 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1331 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1331 "dsproc3/core.pyx"
  return __pyx_r;

#line 1331 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1333
 *     return dsproc_set_att_text(parent.cds_object, name, value)
 * 
 * def set_att_value(cds3.core.Object parent, char *name,             # <<<<<<<<<<<<<<
 *         CDSDataType type, object value):
 *     """Set the value of an attribute in a dataset or variable.
 */

#line 1333 "dsproc3/core.pyx"


#line 1333 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_106set_att_value(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_parent, char *__pyx_v_name, CDSDataType __pyx_v_type, PyObject *__pyx_v_value) {
  PyArrayObject *__pyx_v_value_nd = 0
#line 1333 "dsproc3/core.pyx"
;

#line 1333 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1333 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_att_value", 0);

  /* "dsproc3/core.pyx":1356
 * 
 *     """
 *     cdef np.ndarray value_nd = np.asarray(value, cds_type_to_dtype_obj(type))             # <<<<<<<<<<<<<<
 *     if value_nd.ndim == 0:
 *         value_nd = value_nd[None] # add dummy dimension to a scalar value
 */

#line 1356 "dsproc3/core.pyx"
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1356 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1356 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_GetAttr(__pyx_t_1, __pyx_n_s__asarray); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1356 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1356 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 1356 "dsproc3/core.pyx"
  __pyx_t_1 = ((PyObject *)__pyx_f_7dsproc3_4core_cds_type_to_dtype_obj(__pyx_v_type)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1356 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1356 "dsproc3/core.pyx"
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1356 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 1356 "dsproc3/core.pyx"
  __Pyx_INCREF(__pyx_v_value);

#line 1356 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_value);

#line 1356 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_v_value);

#line 1356 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);

#line 1356 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 1356 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 1356 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1356 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1356 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1356 "dsproc3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 1356 "dsproc3/core.pyx"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1356 "dsproc3/core.pyx"
  __pyx_v_value_nd = ((PyArrayObject *)__pyx_t_1);

#line 1356 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1357
 *     """
 *     cdef np.ndarray value_nd = np.asarray(value, cds_type_to_dtype_obj(type))
 *     if value_nd.ndim == 0:             # <<<<<<<<<<<<<<
 *         value_nd = value_nd[None] # add dummy dimension to a scalar value
 *     assert value_nd.ndim == 1
 */

#line 1357 "dsproc3/core.pyx"
  __pyx_t_4 = (__pyx_v_value_nd->nd == 0);

#line 1357 "dsproc3/core.pyx"
  if (__pyx_t_4) {

    /* "dsproc3/core.pyx":1358
 *     cdef np.ndarray value_nd = np.asarray(value, cds_type_to_dtype_obj(type))
 *     if value_nd.ndim == 0:
 *         value_nd = value_nd[None] # add dummy dimension to a scalar value             # <<<<<<<<<<<<<<
 *     assert value_nd.ndim == 1
 *     return dsproc_set_att_value(parent.cds_object, name, type,
 */

#line 1358 "dsproc3/core.pyx"
    __pyx_t_1 = PyObject_GetItem(((PyObject *)__pyx_v_value_nd), Py_None); if (!__pyx_t_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1358 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 1358 "dsproc3/core.pyx"
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1358 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_v_value_nd));

#line 1358 "dsproc3/core.pyx"
    __pyx_v_value_nd = ((PyArrayObject *)__pyx_t_1);

#line 1358 "dsproc3/core.pyx"
    __pyx_t_1 = 0;

#line 1358 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 1358 "dsproc3/core.pyx"
  }

#line 1358 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":1359
 *     if value_nd.ndim == 0:
 *         value_nd = value_nd[None] # add dummy dimension to a scalar value
 *     assert value_nd.ndim == 1             # <<<<<<<<<<<<<<
 *     return dsproc_set_att_value(parent.cds_object, name, type,
 *             len(value_nd), value_nd.data)
 */

#line 1359 "dsproc3/core.pyx"
  #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 1359 "dsproc3/core.pyx"
  if (unlikely(!(__pyx_v_value_nd->nd == 1))) {

#line 1359 "dsproc3/core.pyx"
    PyErr_SetNone(PyExc_AssertionError);

#line 1359 "dsproc3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1359 "dsproc3/core.pyx"
  }

#line 1359 "dsproc3/core.pyx"
  #endif

  /* "dsproc3/core.pyx":1360
 *         value_nd = value_nd[None] # add dummy dimension to a scalar value
 *     assert value_nd.ndim == 1
 *     return dsproc_set_att_value(parent.cds_object, name, type,             # <<<<<<<<<<<<<<
 *             len(value_nd), value_nd.data)
 * 
 */

#line 1360 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

  /* "dsproc3/core.pyx":1361
 *     assert value_nd.ndim == 1
 *     return dsproc_set_att_value(parent.cds_object, name, type,
 *             len(value_nd), value_nd.data)             # <<<<<<<<<<<<<<
 * 
 * def clone_var(
 */

#line 1361 "dsproc3/core.pyx"
  __pyx_t_5 = PyObject_Length(((PyObject *)__pyx_v_value_nd)); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1361 "dsproc3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(dsproc_set_att_value(__pyx_v_parent->cds_object, __pyx_v_name, __pyx_v_type, __pyx_t_5, __pyx_v_value_nd->data)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1361 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1361 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 1361 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 1361 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1361 "dsproc3/core.pyx"


#line 1361 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1361 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1361 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1361 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1361 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1361 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 1361 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_att_value", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1361 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1361 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1361 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_value_nd);

#line 1361 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1361 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1361 "dsproc3/core.pyx"
  return __pyx_r;

#line 1361 "dsproc3/core.pyx"
}

#line 1361 "dsproc3/core.pyx"


#line 1361 "dsproc3/core.pyx"
/* Python wrapper */

#line 1361 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_109clone_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1361 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_108clone_var[] = "clone_var(Var src_var, Group dataset=None, char *var_name='', CDSDataType data_type=CDS_NAT, dim_names=None, int copy_data=True)\nCreate a clone of an existing variable.\n    \n    If an error occurs in this function it will be appended to the log and\n    error mail messages, and the process status will be set appropriately.\n    \n    @param src_var - the source variable to clone\n    @param dataset - dataset to create the new variable in, or None to create\n            the variable in the same dataset the source variable belongs to.\n    @param var_name - name to use for the new variable, or None to use the\n            source variable name.\n    @param data_type - data type to use for the new variable, or CDS_NAT to use\n            the same data type as the source variable.\n    @param dim_names - the list of corresponding dimension names in the dataset\n            the new variable will be created in, or None if the dimension names\n            are the same.\n    @param copy_data - flag indicating if the data should be copied,\n            (1 == TRUE, 0 == FALSE)\n    \n    @retval the new variable\n    @retval None if the variable already exists in the dataset\n    @retval None if a memory allocation error occurred\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_109clone_var = 
#line 1361 "dsproc3/core.pyx"
{__Pyx_NAMESTR("clone_var"), (PyCFunction)__pyx_pw_7dsproc3_4core_109clone_var, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_108clone_var)};

#line 1361 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_109clone_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_src_var = 0
#line 1361 "dsproc3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Group *__pyx_v_dataset = 0
#line 1361 "dsproc3/core.pyx"
;
  char *__pyx_v_var_name
#line 1361 "dsproc3/core.pyx"
;
  CDSDataType __pyx_v_data_type
#line 1361 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_dim_names = 0
#line 1361 "dsproc3/core.pyx"
;
  int __pyx_v_copy_data
#line 1361 "dsproc3/core.pyx"
;

#line 1361 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1361 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1361 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("clone_var (wrapper)", 0);

#line 1361 "dsproc3/core.pyx"
  {

#line 1361 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__src_var,&__pyx_n_s__dataset,&__pyx_n_s__var_name,&__pyx_n_s__data_type,&__pyx_n_s__dim_names,&__pyx_n_s__copy_data,0};

#line 1361 "dsproc3/core.pyx"
    PyObject* values[6] = {0,0,0,0,0,0};

    /* "dsproc3/core.pyx":1365
 * def clone_var(
 *             cds3.core.Var src_var,
 *             cds3.core.Group dataset=None,             # <<<<<<<<<<<<<<
 *             char *var_name="",
 *             CDSDataType data_type=CDS_NAT,
 */

#line 1365 "dsproc3/core.pyx"
    values[1] = (PyObject *)((struct __pyx_obj_4cds3_4core_Group *)Py_None);

    /* "dsproc3/core.pyx":1368
 *             char *var_name="",
 *             CDSDataType data_type=CDS_NAT,
 *             object dim_names=None, # should be iterable i.e. 1-d list/tuple             # <<<<<<<<<<<<<<
 *             bint copy_data=True):
 *     """Create a clone of an existing variable.
 */

#line 1368 "dsproc3/core.pyx"
    values[4] = ((PyObject *)Py_None);

#line 1368 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1368 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 1368 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1368 "dsproc3/core.pyx"
      switch (pos_args) {
        case  6: 
#line 1368 "dsproc3/core.pyx"
values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: 
#line 1368 "dsproc3/core.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 1368 "dsproc3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 1368 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1368 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1368 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1368 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 1368 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1368 "dsproc3/core.pyx"
      }

#line 1368 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1368 "dsproc3/core.pyx"
      switch (pos_args) {

#line 1368 "dsproc3/core.pyx"
        case  0:

#line 1368 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__src_var)) != 0)) kw_args--;
        else 
#line 1368 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1368 "dsproc3/core.pyx"
        case  1:

#line 1368 "dsproc3/core.pyx"
        if (kw_args > 0) {

#line 1368 "dsproc3/core.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dataset);

#line 1368 "dsproc3/core.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 1368 "dsproc3/core.pyx"
        }

#line 1368 "dsproc3/core.pyx"
        case  2:

#line 1368 "dsproc3/core.pyx"
        if (kw_args > 0) {

#line 1368 "dsproc3/core.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__var_name);

#line 1368 "dsproc3/core.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 1368 "dsproc3/core.pyx"
        }

#line 1368 "dsproc3/core.pyx"
        case  3:

#line 1368 "dsproc3/core.pyx"
        if (kw_args > 0) {

#line 1368 "dsproc3/core.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__data_type);

#line 1368 "dsproc3/core.pyx"
          if (value) { values[3] = value; kw_args--; }

#line 1368 "dsproc3/core.pyx"
        }

#line 1368 "dsproc3/core.pyx"
        case  4:

#line 1368 "dsproc3/core.pyx"
        if (kw_args > 0) {

#line 1368 "dsproc3/core.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dim_names);

#line 1368 "dsproc3/core.pyx"
          if (value) { values[4] = value; kw_args--; }

#line 1368 "dsproc3/core.pyx"
        }

#line 1368 "dsproc3/core.pyx"
        case  5:

#line 1368 "dsproc3/core.pyx"
        if (kw_args > 0) {

#line 1368 "dsproc3/core.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__copy_data);

#line 1368 "dsproc3/core.pyx"
          if (value) { values[5] = value; kw_args--; }

#line 1368 "dsproc3/core.pyx"
        }

#line 1368 "dsproc3/core.pyx"
      }

#line 1368 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1368 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "clone_var") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1363; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1368 "dsproc3/core.pyx"
      }

#line 1368 "dsproc3/core.pyx"
    } else {

#line 1368 "dsproc3/core.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: 
#line 1368 "dsproc3/core.pyx"
values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: 
#line 1368 "dsproc3/core.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 1368 "dsproc3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 1368 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1368 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1368 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1368 "dsproc3/core.pyx"
        break;
        default: 
#line 1368 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1368 "dsproc3/core.pyx"
      }

#line 1368 "dsproc3/core.pyx"
    }

#line 1368 "dsproc3/core.pyx"
    __pyx_v_src_var = ((struct __pyx_obj_4cds3_4core_Var *)values[0]);

#line 1368 "dsproc3/core.pyx"
    __pyx_v_dataset = ((struct __pyx_obj_4cds3_4core_Group *)values[1]);

#line 1368 "dsproc3/core.pyx"
    if (values[2]) {

#line 1368 "dsproc3/core.pyx"
      __pyx_v_var_name = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_var_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1366; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1368 "dsproc3/core.pyx"
    } else {

#line 1368 "dsproc3/core.pyx"
      __pyx_v_var_name = ((char *)__pyx_k_54);

#line 1368 "dsproc3/core.pyx"
    }

#line 1368 "dsproc3/core.pyx"
    if (values[3]) {

#line 1368 "dsproc3/core.pyx"
      __pyx_v_data_type = ((CDSDataType)PyInt_AsLong(values[3])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1367; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1368 "dsproc3/core.pyx"
    } else {

#line 1368 "dsproc3/core.pyx"
      __pyx_v_data_type = __pyx_k_55;

#line 1368 "dsproc3/core.pyx"
    }

#line 1368 "dsproc3/core.pyx"
    __pyx_v_dim_names = values[4];

#line 1368 "dsproc3/core.pyx"
    if (values[5]) {

#line 1368 "dsproc3/core.pyx"
      __pyx_v_copy_data = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_copy_data == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1369; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1368 "dsproc3/core.pyx"
    } else {

      /* "dsproc3/core.pyx":1369
 *             CDSDataType data_type=CDS_NAT,
 *             object dim_names=None, # should be iterable i.e. 1-d list/tuple
 *             bint copy_data=True):             # <<<<<<<<<<<<<<
 *     """Create a clone of an existing variable.
 * 
 */

#line 1369 "dsproc3/core.pyx"
      __pyx_v_copy_data = ((int)1);

#line 1369 "dsproc3/core.pyx"
    }

#line 1369 "dsproc3/core.pyx"
  }

#line 1369 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1369 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("clone_var", 0, 1, 6, PyTuple_GET_SIZE(__pyx_args)); 
#line 1369 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1363; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1369 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 1369 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.clone_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1369 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1369 "dsproc3/core.pyx"
  return NULL;

#line 1369 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1369 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_src_var), __pyx_ptype_4cds3_4core_Var, 1, "src_var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1369 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dataset), __pyx_ptype_4cds3_4core_Group, 1, "dataset", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1369 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_108clone_var(__pyx_self, __pyx_v_src_var, __pyx_v_dataset, __pyx_v_var_name, __pyx_v_data_type, __pyx_v_dim_names, __pyx_v_copy_data);

#line 1369 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1369 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1369 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1369 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1369 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1369 "dsproc3/core.pyx"
  return __pyx_r;

#line 1369 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1363
 *             len(value_nd), value_nd.data)
 * 
 * def clone_var(             # <<<<<<<<<<<<<<
 *             cds3.core.Var src_var,
 *             cds3.core.Group dataset=None,
 */

#line 1363 "dsproc3/core.pyx"


#line 1363 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_108clone_var(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_src_var, struct __pyx_obj_4cds3_4core_Group *__pyx_v_dataset, char *__pyx_v_var_name, CDSDataType __pyx_v_data_type, PyObject *__pyx_v_dim_names, int __pyx_v_copy_data) {
  struct CDSVar *__pyx_v_cds_var
#line 1363 "dsproc3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = 0
#line 1363 "dsproc3/core.pyx"
;
  char **__pyx_v_c_dim_names
#line 1363 "dsproc3/core.pyx"
;
  struct CDSGroup *__pyx_v_cds_group
#line 1363 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_i = NULL
#line 1363 "dsproc3/core.pyx"
;

#line 1363 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  CDSDataType __pyx_t_2;
  struct CDSGroup *__pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  char *__pyx_t_10;
  Py_ssize_t __pyx_t_11;
  size_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1363 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("clone_var", 0);

  /* "dsproc3/core.pyx":1393
 * 
 *     """
 *     cdef CDSVar *cds_var = NULL             # <<<<<<<<<<<<<<
 *     cdef cds3.core.Var var
 *     cdef char **c_dim_names = NULL
 */

#line 1393 "dsproc3/core.pyx"
  __pyx_v_cds_var = NULL;

  /* "dsproc3/core.pyx":1395
 *     cdef CDSVar *cds_var = NULL
 *     cdef cds3.core.Var var
 *     cdef char **c_dim_names = NULL             # <<<<<<<<<<<<<<
 *     cdef CDSGroup *cds_group = NULL
 *     if data_type == CDS_NAT:
 */

#line 1395 "dsproc3/core.pyx"
  __pyx_v_c_dim_names = NULL;

  /* "dsproc3/core.pyx":1396
 *     cdef cds3.core.Var var
 *     cdef char **c_dim_names = NULL
 *     cdef CDSGroup *cds_group = NULL             # <<<<<<<<<<<<<<
 *     if data_type == CDS_NAT:
 *         data_type = src_var.c_ob.type
 */

#line 1396 "dsproc3/core.pyx"
  __pyx_v_cds_group = NULL;

  /* "dsproc3/core.pyx":1397
 *     cdef char **c_dim_names = NULL
 *     cdef CDSGroup *cds_group = NULL
 *     if data_type == CDS_NAT:             # <<<<<<<<<<<<<<
 *         data_type = src_var.c_ob.type
 *     if dataset is not None:
 */

#line 1397 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_data_type == CDS_NAT);

#line 1397 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":1398
 *     cdef CDSGroup *cds_group = NULL
 *     if data_type == CDS_NAT:
 *         data_type = src_var.c_ob.type             # <<<<<<<<<<<<<<
 *     if dataset is not None:
 *         cds_group = dataset.c_ob
 */

#line 1398 "dsproc3/core.pyx"
    __pyx_t_2 = __pyx_v_src_var->c_ob->type;

#line 1398 "dsproc3/core.pyx"
    __pyx_v_data_type = __pyx_t_2;

#line 1398 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 1398 "dsproc3/core.pyx"
  }

#line 1398 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":1399
 *     if data_type == CDS_NAT:
 *         data_type = src_var.c_ob.type
 *     if dataset is not None:             # <<<<<<<<<<<<<<
 *         cds_group = dataset.c_ob
 *     if dim_names is not None and len(dim_names) > 0:
 */

#line 1399 "dsproc3/core.pyx"
  __pyx_t_1 = (((PyObject *)__pyx_v_dataset) != Py_None);

#line 1399 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":1400
 *         data_type = src_var.c_ob.type
 *     if dataset is not None:
 *         cds_group = dataset.c_ob             # <<<<<<<<<<<<<<
 *     if dim_names is not None and len(dim_names) > 0:
 *         c_dim_names = <char**>malloc(len(dim_names) * sizeof(char*))
 */

#line 1400 "dsproc3/core.pyx"
    __pyx_t_3 = __pyx_v_dataset->c_ob;

#line 1400 "dsproc3/core.pyx"
    __pyx_v_cds_group = __pyx_t_3;

#line 1400 "dsproc3/core.pyx"
    goto __pyx_L4;

#line 1400 "dsproc3/core.pyx"
  }

#line 1400 "dsproc3/core.pyx"
  __pyx_L4:;

  /* "dsproc3/core.pyx":1401
 *     if dataset is not None:
 *         cds_group = dataset.c_ob
 *     if dim_names is not None and len(dim_names) > 0:             # <<<<<<<<<<<<<<
 *         c_dim_names = <char**>malloc(len(dim_names) * sizeof(char*))
 *         for i in range(len(dim_names)):
 */

#line 1401 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_dim_names != Py_None);

#line 1401 "dsproc3/core.pyx"
  if (__pyx_t_1) {

#line 1401 "dsproc3/core.pyx"
    __pyx_t_4 = PyObject_Length(__pyx_v_dim_names); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1401 "dsproc3/core.pyx"
    __pyx_t_5 = (__pyx_t_4 > 0);

#line 1401 "dsproc3/core.pyx"
    __pyx_t_6 = __pyx_t_5;

#line 1401 "dsproc3/core.pyx"
  } else {

#line 1401 "dsproc3/core.pyx"
    __pyx_t_6 = __pyx_t_1;

#line 1401 "dsproc3/core.pyx"
  }

#line 1401 "dsproc3/core.pyx"
  if (__pyx_t_6) {

    /* "dsproc3/core.pyx":1402
 *         cds_group = dataset.c_ob
 *     if dim_names is not None and len(dim_names) > 0:
 *         c_dim_names = <char**>malloc(len(dim_names) * sizeof(char*))             # <<<<<<<<<<<<<<
 *         for i in range(len(dim_names)):
 *             c_dim_names[i] = PyString_AsString(dim_names[i])
 */

#line 1402 "dsproc3/core.pyx"
    __pyx_t_4 = PyObject_Length(__pyx_v_dim_names); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1402 "dsproc3/core.pyx"
    __pyx_v_c_dim_names = ((char **)malloc((__pyx_t_4 * (sizeof(char *)))));

    /* "dsproc3/core.pyx":1403
 *     if dim_names is not None and len(dim_names) > 0:
 *         c_dim_names = <char**>malloc(len(dim_names) * sizeof(char*))
 *         for i in range(len(dim_names)):             # <<<<<<<<<<<<<<
 *             c_dim_names[i] = PyString_AsString(dim_names[i])
 *     # cython doesn't like assigning NULL to char* variables!
 */

#line 1403 "dsproc3/core.pyx"
    __pyx_t_4 = PyObject_Length(__pyx_v_dim_names); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1403 "dsproc3/core.pyx"
    __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1403 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 1403 "dsproc3/core.pyx"
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1403 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 1403 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);

#line 1403 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_7);

#line 1403 "dsproc3/core.pyx"
    __pyx_t_7 = 0;

#line 1403 "dsproc3/core.pyx"
    __pyx_t_7 = PyObject_Call(__pyx_builtin_range, ((PyObject *)__pyx_t_8), NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1403 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 1403 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_8)); __pyx_t_8 = 0;

#line 1403 "dsproc3/core.pyx"
    if (PyList_CheckExact(__pyx_t_7) || PyTuple_CheckExact(__pyx_t_7)) {

#line 1403 "dsproc3/core.pyx"
      __pyx_t_8 = __pyx_t_7; __Pyx_INCREF(__pyx_t_8); __pyx_t_4 = 0;

#line 1403 "dsproc3/core.pyx"
      __pyx_t_9 = NULL;

#line 1403 "dsproc3/core.pyx"
    } else {
      __pyx_t_4 = -1; 
#line 1403 "dsproc3/core.pyx"
__pyx_t_8 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1403 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 1403 "dsproc3/core.pyx"
      __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;

#line 1403 "dsproc3/core.pyx"
    }

#line 1403 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 1403 "dsproc3/core.pyx"
    for (;;) {

#line 1403 "dsproc3/core.pyx"
      if (!__pyx_t_9 && PyList_CheckExact(__pyx_t_8)) {

#line 1403 "dsproc3/core.pyx"
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_8)) break;

#line 1403 "dsproc3/core.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 1403 "dsproc3/core.pyx"
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_4); __Pyx_INCREF(__pyx_t_7); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1403 "dsproc3/core.pyx"
        #else

#line 1403 "dsproc3/core.pyx"
        __pyx_t_7 = PySequence_ITEM(__pyx_t_8, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1403 "dsproc3/core.pyx"
        #endif
      } else 
#line 1403 "dsproc3/core.pyx"
if (!__pyx_t_9 && PyTuple_CheckExact(__pyx_t_8)) {

#line 1403 "dsproc3/core.pyx"
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_8)) break;

#line 1403 "dsproc3/core.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 1403 "dsproc3/core.pyx"
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_4); __Pyx_INCREF(__pyx_t_7); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1403 "dsproc3/core.pyx"
        #else

#line 1403 "dsproc3/core.pyx"
        __pyx_t_7 = PySequence_ITEM(__pyx_t_8, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1403 "dsproc3/core.pyx"
        #endif
      } else 
#line 1403 "dsproc3/core.pyx"
{

#line 1403 "dsproc3/core.pyx"
        __pyx_t_7 = __pyx_t_9(__pyx_t_8);

#line 1403 "dsproc3/core.pyx"
        if (unlikely(!__pyx_t_7)) {

#line 1403 "dsproc3/core.pyx"
          if (PyErr_Occurred()) {

#line 1403 "dsproc3/core.pyx"
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();

#line 1403 "dsproc3/core.pyx"
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1403 "dsproc3/core.pyx"
          }

#line 1403 "dsproc3/core.pyx"
          break;

#line 1403 "dsproc3/core.pyx"
        }

#line 1403 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_7);

#line 1403 "dsproc3/core.pyx"
      }

#line 1403 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_v_i);

#line 1403 "dsproc3/core.pyx"
      __pyx_v_i = __pyx_t_7;

#line 1403 "dsproc3/core.pyx"
      __pyx_t_7 = 0;

      /* "dsproc3/core.pyx":1404
 *         c_dim_names = <char**>malloc(len(dim_names) * sizeof(char*))
 *         for i in range(len(dim_names)):
 *             c_dim_names[i] = PyString_AsString(dim_names[i])             # <<<<<<<<<<<<<<
 *     # cython doesn't like assigning NULL to char* variables!
 *     # but dsproc3 expects var_name to be NULL (we signal via empty string)
 */

#line 1404 "dsproc3/core.pyx"
      __pyx_t_7 = PyObject_GetItem(__pyx_v_dim_names, __pyx_v_i); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1404 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 1404 "dsproc3/core.pyx"
      __pyx_t_10 = PyString_AsString(__pyx_t_7); if (unlikely(__pyx_t_10 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1404 "dsproc3/core.pyx"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 1404 "dsproc3/core.pyx"
      __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1404 "dsproc3/core.pyx"
      (__pyx_v_c_dim_names[__pyx_t_11]) = __pyx_t_10;

#line 1404 "dsproc3/core.pyx"
    }

#line 1404 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 1404 "dsproc3/core.pyx"
    goto __pyx_L5;

#line 1404 "dsproc3/core.pyx"
  }

#line 1404 "dsproc3/core.pyx"
  __pyx_L5:;

  /* "dsproc3/core.pyx":1407
 *     # cython doesn't like assigning NULL to char* variables!
 *     # but dsproc3 expects var_name to be NULL (we signal via empty string)
 *     if len(var_name) > 0:             # <<<<<<<<<<<<<<
 *         cds_var = dsproc_clone_var(src_var.c_ob, cds_group, var_name, data_type,
 *                 c_dim_names, copy_data)
 */

#line 1407 "dsproc3/core.pyx"
  __pyx_t_12 = strlen(__pyx_v_var_name); 

#line 1407 "dsproc3/core.pyx"
  __pyx_t_6 = (__pyx_t_12 > 0);

#line 1407 "dsproc3/core.pyx"
  if (__pyx_t_6) {

    /* "dsproc3/core.pyx":1409
 *     if len(var_name) > 0:
 *         cds_var = dsproc_clone_var(src_var.c_ob, cds_group, var_name, data_type,
 *                 c_dim_names, copy_data)             # <<<<<<<<<<<<<<
 *     else:
 *         cds_var = dsproc_clone_var(src_var.c_ob, cds_group, NULL, data_type,
 */

#line 1409 "dsproc3/core.pyx"
    __pyx_v_cds_var = dsproc_clone_var(__pyx_v_src_var->c_ob, __pyx_v_cds_group, __pyx_v_var_name, __pyx_v_data_type, __pyx_v_c_dim_names, __pyx_v_copy_data);

#line 1409 "dsproc3/core.pyx"
    goto __pyx_L8;

#line 1409 "dsproc3/core.pyx"
  }

#line 1409 "dsproc3/core.pyx"
  /*else*/ {

    /* "dsproc3/core.pyx":1412
 *     else:
 *         cds_var = dsproc_clone_var(src_var.c_ob, cds_group, NULL, data_type,
 *                 c_dim_names, copy_data)             # <<<<<<<<<<<<<<
 *     if dim_names is not None:
 *         free(c_dim_names)
 */

#line 1412 "dsproc3/core.pyx"
    __pyx_v_cds_var = dsproc_clone_var(__pyx_v_src_var->c_ob, __pyx_v_cds_group, NULL, __pyx_v_data_type, __pyx_v_c_dim_names, __pyx_v_copy_data);

#line 1412 "dsproc3/core.pyx"
  }

#line 1412 "dsproc3/core.pyx"
  __pyx_L8:;

  /* "dsproc3/core.pyx":1413
 *         cds_var = dsproc_clone_var(src_var.c_ob, cds_group, NULL, data_type,
 *                 c_dim_names, copy_data)
 *     if dim_names is not None:             # <<<<<<<<<<<<<<
 *         free(c_dim_names)
 *     if cds_var == NULL:
 */

#line 1413 "dsproc3/core.pyx"
  __pyx_t_6 = (__pyx_v_dim_names != Py_None);

#line 1413 "dsproc3/core.pyx"
  if (__pyx_t_6) {

    /* "dsproc3/core.pyx":1414
 *                 c_dim_names, copy_data)
 *     if dim_names is not None:
 *         free(c_dim_names)             # <<<<<<<<<<<<<<
 *     if cds_var == NULL:
 *         return None
 */

#line 1414 "dsproc3/core.pyx"
    free(__pyx_v_c_dim_names);

#line 1414 "dsproc3/core.pyx"
    goto __pyx_L9;

#line 1414 "dsproc3/core.pyx"
  }

#line 1414 "dsproc3/core.pyx"
  __pyx_L9:;

  /* "dsproc3/core.pyx":1415
 *     if dim_names is not None:
 *         free(c_dim_names)
 *     if cds_var == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */

#line 1415 "dsproc3/core.pyx"
  __pyx_t_6 = (__pyx_v_cds_var == NULL);

#line 1415 "dsproc3/core.pyx"
  if (__pyx_t_6) {

    /* "dsproc3/core.pyx":1416
 *         free(c_dim_names)
 *     if cds_var == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         var = cds3.core.Var()
 */

#line 1416 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1416 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 1416 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 1416 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1416 "dsproc3/core.pyx"
    goto __pyx_L10;

#line 1416 "dsproc3/core.pyx"
  }

#line 1416 "dsproc3/core.pyx"
  /*else*/ {

    /* "dsproc3/core.pyx":1418
 *         return None
 *     else:
 *         var = cds3.core.Var()             # <<<<<<<<<<<<<<
 *         var.set_var(cds_var)
 *         return var
 */

#line 1418 "dsproc3/core.pyx"
    __pyx_t_8 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Var)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1418 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 1418 "dsproc3/core.pyx"
    __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)__pyx_t_8);

#line 1418 "dsproc3/core.pyx"
    __pyx_t_8 = 0;

    /* "dsproc3/core.pyx":1419
 *     else:
 *         var = cds3.core.Var()
 *         var.set_var(cds_var)             # <<<<<<<<<<<<<<
 *         return var
 * 
 */

#line 1419 "dsproc3/core.pyx"
    __pyx_t_8 = ((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_var->__pyx_base.__pyx_vtab)->set_var(__pyx_v_var, __pyx_v_cds_var); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1419 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 1419 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "dsproc3/core.pyx":1420
 *         var = cds3.core.Var()
 *         var.set_var(cds_var)
 *         return var             # <<<<<<<<<<<<<<
 * 
 * def define_var(
 */

#line 1420 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1420 "dsproc3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_var));

#line 1420 "dsproc3/core.pyx"
    __pyx_r = ((PyObject *)__pyx_v_var);

#line 1420 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1420 "dsproc3/core.pyx"
  }

#line 1420 "dsproc3/core.pyx"
  __pyx_L10:;

#line 1420 "dsproc3/core.pyx"


#line 1420 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1420 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1420 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1420 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 1420 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 1420 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.clone_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1420 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1420 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1420 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_var);

#line 1420 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_i);

#line 1420 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1420 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1420 "dsproc3/core.pyx"
  return __pyx_r;

#line 1420 "dsproc3/core.pyx"
}

#line 1420 "dsproc3/core.pyx"


#line 1420 "dsproc3/core.pyx"
/* Python wrapper */

#line 1420 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_111define_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1420 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_110define_var[] = "define_var(Group dataset, char *name, CDSDataType type, dim_names, char *long_name='', char *standard_name='', char *units='', valid_min=None, valid_max=None, missing_value=None, fill_value=None)\nDefine a new variable in an existing dataset.\n    \n    This function will define a new variable with all standard attributes.\n    Any of the attribute values can be NULL to indicate that the attribute\n    should not be created.\n    \n    Description of Attributes:\n    \n    <b>long_name:</b>\n    This is a one line description of the variable and should be suitable\n    to use as a plot title for the variable.\n    \n    <b>standard_name:</b>\n    This is defined in the CF Convention and describes the physical\n    quantities being represented by the variable. Please refer to the\n    \"CF Standard Names\" section of the CF Convention for the table of\n    standard names.\n    \n    <b>units:</b>\n    This is the units string to use for the variable and must be\n    recognized by the UDUNITS-2 libary.\n    \n    <b>valid_min:</b>\n    The smallest value that should be considered to be a valid data value.\n    The specified value must be the same data type as the variable.\n    \n    <b>valid_max:</b>\n    The largest value that should be considered to be a valid data value.\n    The specified value must be the same data type as the variable.\n    \n    <b>missing_value:</b>\n    This comes from an older NetCDF convention and has been used by ARM\n    for almost 2 decades. The specified value must be the same data type\n    as the variable.\n    \n    <b>_FillValue:</b>\n    Most newer conventions specify the use of _FillValue over missing_value.\n    The value of this attribute is also recognized by the NetCDF library and\n    will be used to initialize the data values on disk when the variable is\n    created. Tools like ncdump will also display fill values as _ so they\n    can be easily identified in a text dump. The libdsproc3 library allows\n    you to use both ""missing_value and _FillValue and they do not need to be\n    the same. The specified value must be the same data type as the variable.\n    \n    If an error occurs in this function it will be appended to the log and\n    error mail messages, and the process status will be set appropriately.\n    \n    @param dataset - pointer to the dataset\n    @param name - name of the variable\n    @param type - data type of the variable\n    @param ndims - number of variable dimensions\n    @param dim_names - array of pointers to the dimension names\n    @param long_name - string to use for the long_name attribute\n    @param standard_name - string to use for the standard_name attribute\n    @param units - string to use for the units attribute\n    @param valid_min - void pointer to the valid_min\n    @param valid_max - void pointer to the valid_max\n    @param missing_value - void pointer to the missing_value\n    @param fill_value - void pointer to the _FillValue\n    \n    @return\n    - pointer to the new variable\n    - NULL if an error occurred\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_111define_var = 
#line 1420 "dsproc3/core.pyx"
{__Pyx_NAMESTR("define_var"), (PyCFunction)__pyx_pw_7dsproc3_4core_111define_var, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_110define_var)};

#line 1420 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_111define_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Group *__pyx_v_dataset = 0
#line 1420 "dsproc3/core.pyx"
;
  char *__pyx_v_name
#line 1420 "dsproc3/core.pyx"
;
  CDSDataType __pyx_v_type
#line 1420 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_dim_names = 0
#line 1420 "dsproc3/core.pyx"
;
  char *__pyx_v_long_name
#line 1420 "dsproc3/core.pyx"
;
  char *__pyx_v_standard_name
#line 1420 "dsproc3/core.pyx"
;
  char *__pyx_v_units
#line 1420 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_valid_min = 0
#line 1420 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_valid_max = 0
#line 1420 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_missing_value = 0
#line 1420 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_fill_value = 0
#line 1420 "dsproc3/core.pyx"
;

#line 1420 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1420 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1420 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("define_var (wrapper)", 0);

#line 1420 "dsproc3/core.pyx"
  {

#line 1420 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__dataset,&__pyx_n_s__name,&__pyx_n_s__type,&__pyx_n_s__dim_names,&__pyx_n_s__long_name,&__pyx_n_s__standard_name,&__pyx_n_s__units,&__pyx_n_s__valid_min,&__pyx_n_s__valid_max,&__pyx_n_s__missing_value,&__pyx_n_s__fill_value,0};

#line 1420 "dsproc3/core.pyx"
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};

    /* "dsproc3/core.pyx":1431
 *             char *standard_name="",
 *             char *units="",
 *             object valid_min=None,             # <<<<<<<<<<<<<<
 *             object valid_max=None,
 *             object missing_value=None,
 */

#line 1431 "dsproc3/core.pyx"
    values[7] = ((PyObject *)Py_None);

    /* "dsproc3/core.pyx":1432
 *             char *units="",
 *             object valid_min=None,
 *             object valid_max=None,             # <<<<<<<<<<<<<<
 *             object missing_value=None,
 *             object fill_value=None):
 */

#line 1432 "dsproc3/core.pyx"
    values[8] = ((PyObject *)Py_None);

    /* "dsproc3/core.pyx":1433
 *             object valid_min=None,
 *             object valid_max=None,
 *             object missing_value=None,             # <<<<<<<<<<<<<<
 *             object fill_value=None):
 *     """Define a new variable in an existing dataset.
 */

#line 1433 "dsproc3/core.pyx"
    values[9] = ((PyObject *)Py_None);

    /* "dsproc3/core.pyx":1434
 *             object valid_max=None,
 *             object missing_value=None,
 *             object fill_value=None):             # <<<<<<<<<<<<<<
 *     """Define a new variable in an existing dataset.
 * 
 */

#line 1434 "dsproc3/core.pyx"
    values[10] = ((PyObject *)Py_None);

#line 1434 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1434 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 1434 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1434 "dsproc3/core.pyx"
      switch (pos_args) {
        case 11: 
#line 1434 "dsproc3/core.pyx"
values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: 
#line 1434 "dsproc3/core.pyx"
values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: 
#line 1434 "dsproc3/core.pyx"
values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: 
#line 1434 "dsproc3/core.pyx"
values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: 
#line 1434 "dsproc3/core.pyx"
values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: 
#line 1434 "dsproc3/core.pyx"
values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: 
#line 1434 "dsproc3/core.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 1434 "dsproc3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 1434 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1434 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1434 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1434 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 1434 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1434 "dsproc3/core.pyx"
      }

#line 1434 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1434 "dsproc3/core.pyx"
      switch (pos_args) {

#line 1434 "dsproc3/core.pyx"
        case  0:

#line 1434 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dataset)) != 0)) kw_args--;
        else 
#line 1434 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1434 "dsproc3/core.pyx"
        case  1:

#line 1434 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name)) != 0)) kw_args--;

#line 1434 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("define_var", 0, 4, 11, 1); 
#line 1434 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1422; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1434 "dsproc3/core.pyx"
        }

#line 1434 "dsproc3/core.pyx"
        case  2:

#line 1434 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__type)) != 0)) kw_args--;

#line 1434 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("define_var", 0, 4, 11, 2); 
#line 1434 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1422; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1434 "dsproc3/core.pyx"
        }

#line 1434 "dsproc3/core.pyx"
        case  3:

#line 1434 "dsproc3/core.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dim_names)) != 0)) kw_args--;

#line 1434 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("define_var", 0, 4, 11, 3); 
#line 1434 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1422; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1434 "dsproc3/core.pyx"
        }

#line 1434 "dsproc3/core.pyx"
        case  4:

#line 1434 "dsproc3/core.pyx"
        if (kw_args > 0) {

#line 1434 "dsproc3/core.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__long_name);

#line 1434 "dsproc3/core.pyx"
          if (value) { values[4] = value; kw_args--; }

#line 1434 "dsproc3/core.pyx"
        }

#line 1434 "dsproc3/core.pyx"
        case  5:

#line 1434 "dsproc3/core.pyx"
        if (kw_args > 0) {

#line 1434 "dsproc3/core.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__standard_name);

#line 1434 "dsproc3/core.pyx"
          if (value) { values[5] = value; kw_args--; }

#line 1434 "dsproc3/core.pyx"
        }

#line 1434 "dsproc3/core.pyx"
        case  6:

#line 1434 "dsproc3/core.pyx"
        if (kw_args > 0) {

#line 1434 "dsproc3/core.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__units);

#line 1434 "dsproc3/core.pyx"
          if (value) { values[6] = value; kw_args--; }

#line 1434 "dsproc3/core.pyx"
        }

#line 1434 "dsproc3/core.pyx"
        case  7:

#line 1434 "dsproc3/core.pyx"
        if (kw_args > 0) {

#line 1434 "dsproc3/core.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__valid_min);

#line 1434 "dsproc3/core.pyx"
          if (value) { values[7] = value; kw_args--; }

#line 1434 "dsproc3/core.pyx"
        }

#line 1434 "dsproc3/core.pyx"
        case  8:

#line 1434 "dsproc3/core.pyx"
        if (kw_args > 0) {

#line 1434 "dsproc3/core.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__valid_max);

#line 1434 "dsproc3/core.pyx"
          if (value) { values[8] = value; kw_args--; }

#line 1434 "dsproc3/core.pyx"
        }

#line 1434 "dsproc3/core.pyx"
        case  9:

#line 1434 "dsproc3/core.pyx"
        if (kw_args > 0) {

#line 1434 "dsproc3/core.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__missing_value);

#line 1434 "dsproc3/core.pyx"
          if (value) { values[9] = value; kw_args--; }

#line 1434 "dsproc3/core.pyx"
        }

#line 1434 "dsproc3/core.pyx"
        case 10:

#line 1434 "dsproc3/core.pyx"
        if (kw_args > 0) {

#line 1434 "dsproc3/core.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fill_value);

#line 1434 "dsproc3/core.pyx"
          if (value) { values[10] = value; kw_args--; }

#line 1434 "dsproc3/core.pyx"
        }

#line 1434 "dsproc3/core.pyx"
      }

#line 1434 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1434 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "define_var") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1422; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1434 "dsproc3/core.pyx"
      }

#line 1434 "dsproc3/core.pyx"
    } else {

#line 1434 "dsproc3/core.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 11: 
#line 1434 "dsproc3/core.pyx"
values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        case 10: 
#line 1434 "dsproc3/core.pyx"
values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        case  9: 
#line 1434 "dsproc3/core.pyx"
values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: 
#line 1434 "dsproc3/core.pyx"
values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: 
#line 1434 "dsproc3/core.pyx"
values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: 
#line 1434 "dsproc3/core.pyx"
values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: 
#line 1434 "dsproc3/core.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 1434 "dsproc3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 1434 "dsproc3/core.pyx"
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1434 "dsproc3/core.pyx"
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1434 "dsproc3/core.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1434 "dsproc3/core.pyx"
        break;
        default: 
#line 1434 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1434 "dsproc3/core.pyx"
      }

#line 1434 "dsproc3/core.pyx"
    }

#line 1434 "dsproc3/core.pyx"
    __pyx_v_dataset = ((struct __pyx_obj_4cds3_4core_Group *)values[0]);

#line 1434 "dsproc3/core.pyx"
    __pyx_v_name = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1424; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1434 "dsproc3/core.pyx"
    __pyx_v_type = ((CDSDataType)PyInt_AsLong(values[2])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1425; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1434 "dsproc3/core.pyx"
    __pyx_v_dim_names = values[3];

#line 1434 "dsproc3/core.pyx"
    if (values[4]) {

#line 1434 "dsproc3/core.pyx"
      __pyx_v_long_name = PyBytes_AsString(values[4]); if (unlikely((!__pyx_v_long_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1428; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1434 "dsproc3/core.pyx"
    } else {

#line 1434 "dsproc3/core.pyx"
      __pyx_v_long_name = ((char *)__pyx_k_54);

#line 1434 "dsproc3/core.pyx"
    }

#line 1434 "dsproc3/core.pyx"
    if (values[5]) {

#line 1434 "dsproc3/core.pyx"
      __pyx_v_standard_name = PyBytes_AsString(values[5]); if (unlikely((!__pyx_v_standard_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1429; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1434 "dsproc3/core.pyx"
    } else {

#line 1434 "dsproc3/core.pyx"
      __pyx_v_standard_name = ((char *)__pyx_k_54);

#line 1434 "dsproc3/core.pyx"
    }

#line 1434 "dsproc3/core.pyx"
    if (values[6]) {

#line 1434 "dsproc3/core.pyx"
      __pyx_v_units = PyBytes_AsString(values[6]); if (unlikely((!__pyx_v_units) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1430; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1434 "dsproc3/core.pyx"
    } else {

#line 1434 "dsproc3/core.pyx"
      __pyx_v_units = ((char *)__pyx_k_54);

#line 1434 "dsproc3/core.pyx"
    }

#line 1434 "dsproc3/core.pyx"
    __pyx_v_valid_min = values[7];

#line 1434 "dsproc3/core.pyx"
    __pyx_v_valid_max = values[8];

#line 1434 "dsproc3/core.pyx"
    __pyx_v_missing_value = values[9];

#line 1434 "dsproc3/core.pyx"
    __pyx_v_fill_value = values[10];

#line 1434 "dsproc3/core.pyx"
  }

#line 1434 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1434 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("define_var", 0, 4, 11, PyTuple_GET_SIZE(__pyx_args)); 
#line 1434 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1422; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1434 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 1434 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.define_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1434 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1434 "dsproc3/core.pyx"
  return NULL;

#line 1434 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1434 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dataset), __pyx_ptype_4cds3_4core_Group, 1, "dataset", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1434 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_110define_var(__pyx_self, __pyx_v_dataset, __pyx_v_name, __pyx_v_type, __pyx_v_dim_names, __pyx_v_long_name, __pyx_v_standard_name, __pyx_v_units, __pyx_v_valid_min, __pyx_v_valid_max, __pyx_v_missing_value, __pyx_v_fill_value);

#line 1434 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1434 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1434 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1434 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1434 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1434 "dsproc3/core.pyx"
  return __pyx_r;

#line 1434 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1422
 *         return var
 * 
 * def define_var(             # <<<<<<<<<<<<<<
 *             cds3.core.Group dataset,
 *             char *name,
 */

#line 1422 "dsproc3/core.pyx"


#line 1422 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_110define_var(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Group *__pyx_v_dataset, char *__pyx_v_name, CDSDataType __pyx_v_type, PyObject *__pyx_v_dim_names, char *__pyx_v_long_name, char *__pyx_v_standard_name, char *__pyx_v_units, PyObject *__pyx_v_valid_min, PyObject *__pyx_v_valid_max, PyObject *__pyx_v_missing_value, PyObject *__pyx_v_fill_value) {
  CYTHON_UNUSED struct CDSVar *__pyx_v_cds_var
#line 1422 "dsproc3/core.pyx"
;
  void *__pyx_v_min_ptr
#line 1422 "dsproc3/core.pyx"
;
  void *__pyx_v_max_ptr
#line 1422 "dsproc3/core.pyx"
;
  void *__pyx_v_missing_ptr
#line 1422 "dsproc3/core.pyx"
;
  void *__pyx_v_fill_ptr
#line 1422 "dsproc3/core.pyx"
;
  char __pyx_v_min_char
#line 1422 "dsproc3/core.pyx"
;
  char __pyx_v_max_char
#line 1422 "dsproc3/core.pyx"
;
  char __pyx_v_missing_char
#line 1422 "dsproc3/core.pyx"
;
  char __pyx_v_fill_char
#line 1422 "dsproc3/core.pyx"
;
  signed char __pyx_v_min_byte
#line 1422 "dsproc3/core.pyx"
;
  signed char __pyx_v_max_byte
#line 1422 "dsproc3/core.pyx"
;
  signed char __pyx_v_missing_byte
#line 1422 "dsproc3/core.pyx"
;
  signed char __pyx_v_fill_byte
#line 1422 "dsproc3/core.pyx"
;
  short __pyx_v_min_short
#line 1422 "dsproc3/core.pyx"
;
  short __pyx_v_max_short
#line 1422 "dsproc3/core.pyx"
;
  short __pyx_v_missing_short
#line 1422 "dsproc3/core.pyx"
;
  short __pyx_v_fill_short
#line 1422 "dsproc3/core.pyx"
;
  int __pyx_v_min_int
#line 1422 "dsproc3/core.pyx"
;
  int __pyx_v_max_int
#line 1422 "dsproc3/core.pyx"
;
  int __pyx_v_missing_int
#line 1422 "dsproc3/core.pyx"
;
  int __pyx_v_fill_int
#line 1422 "dsproc3/core.pyx"
;
  float __pyx_v_min_float
#line 1422 "dsproc3/core.pyx"
;
  float __pyx_v_max_float
#line 1422 "dsproc3/core.pyx"
;
  float __pyx_v_missing_float
#line 1422 "dsproc3/core.pyx"
;
  float __pyx_v_fill_float
#line 1422 "dsproc3/core.pyx"
;
  double __pyx_v_min_double
#line 1422 "dsproc3/core.pyx"
;
  double __pyx_v_max_double
#line 1422 "dsproc3/core.pyx"
;
  double __pyx_v_missing_double
#line 1422 "dsproc3/core.pyx"
;
  double __pyx_v_fill_double
#line 1422 "dsproc3/core.pyx"
;
  char **__pyx_v_c_dim_names
#line 1422 "dsproc3/core.pyx"
;
  char *__pyx_v_c_long_name
#line 1422 "dsproc3/core.pyx"
;
  char *__pyx_v_c_standard_name
#line 1422 "dsproc3/core.pyx"
;
  char *__pyx_v_c_units
#line 1422 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_i = NULL
#line 1422 "dsproc3/core.pyx"
;

#line 1422 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  char *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  char __pyx_t_8;
  signed char __pyx_t_9;
  short __pyx_t_10;
  int __pyx_t_11;
  float __pyx_t_12;
  double __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1422 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("define_var", 0);

  /* "dsproc3/core.pyx":1499
 *     - NULL if an error occurred
 *     """
 *     cdef CDSVar *cds_var = NULL             # <<<<<<<<<<<<<<
 *     cdef cds3.core.Var var
 *     cdef np.dtype dtype
 */

#line 1499 "dsproc3/core.pyx"
  __pyx_v_cds_var = NULL;

  /* "dsproc3/core.pyx":1502
 *     cdef cds3.core.Var var
 *     cdef np.dtype dtype
 *     cdef void *min_ptr=NULL, *max_ptr=NULL, *missing_ptr=NULL, *fill_ptr=NULL             # <<<<<<<<<<<<<<
 *     cdef char min_char, max_char, missing_char, fill_char
 *     cdef signed char min_byte, max_byte, missing_byte, fill_byte
 */

#line 1502 "dsproc3/core.pyx"
  __pyx_v_min_ptr = NULL;

#line 1502 "dsproc3/core.pyx"
  __pyx_v_max_ptr = NULL;

#line 1502 "dsproc3/core.pyx"
  __pyx_v_missing_ptr = NULL;

#line 1502 "dsproc3/core.pyx"
  __pyx_v_fill_ptr = NULL;

  /* "dsproc3/core.pyx":1509
 *     cdef float min_float, max_float, missing_float, fill_float
 *     cdef double min_double, max_double, missing_double, fill_double
 *     cdef char **c_dim_names = <char**>malloc(len(dim_names) * sizeof(char*))             # <<<<<<<<<<<<<<
 *     cdef char *c_long_name
 *     cdef char *c_standard_name
 */

#line 1509 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_Length(__pyx_v_dim_names); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1509 "dsproc3/core.pyx"
  __pyx_v_c_dim_names = ((char **)malloc((__pyx_t_1 * (sizeof(char *)))));

  /* "dsproc3/core.pyx":1513
 *     cdef char *c_standard_name
 *     cdef char *c_units
 *     if long_name:             # <<<<<<<<<<<<<<
 *         c_long_name = long_name
 *     else:
 */

#line 1513 "dsproc3/core.pyx"
  __pyx_t_2 = (__pyx_v_long_name != 0);

#line 1513 "dsproc3/core.pyx"
  if (__pyx_t_2) {

    /* "dsproc3/core.pyx":1514
 *     cdef char *c_units
 *     if long_name:
 *         c_long_name = long_name             # <<<<<<<<<<<<<<
 *     else:
 *         c_long_name = NULL
 */

#line 1514 "dsproc3/core.pyx"
    __pyx_v_c_long_name = __pyx_v_long_name;

#line 1514 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 1514 "dsproc3/core.pyx"
  }

#line 1514 "dsproc3/core.pyx"
  /*else*/ {

    /* "dsproc3/core.pyx":1516
 *         c_long_name = long_name
 *     else:
 *         c_long_name = NULL             # <<<<<<<<<<<<<<
 *     if standard_name:
 *         c_standard_name = standard_name
 */

#line 1516 "dsproc3/core.pyx"
    __pyx_v_c_long_name = NULL;

#line 1516 "dsproc3/core.pyx"
  }

#line 1516 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":1517
 *     else:
 *         c_long_name = NULL
 *     if standard_name:             # <<<<<<<<<<<<<<
 *         c_standard_name = standard_name
 *     else:
 */

#line 1517 "dsproc3/core.pyx"
  __pyx_t_2 = (__pyx_v_standard_name != 0);

#line 1517 "dsproc3/core.pyx"
  if (__pyx_t_2) {

    /* "dsproc3/core.pyx":1518
 *         c_long_name = NULL
 *     if standard_name:
 *         c_standard_name = standard_name             # <<<<<<<<<<<<<<
 *     else:
 *         c_standard_name = NULL
 */

#line 1518 "dsproc3/core.pyx"
    __pyx_v_c_standard_name = __pyx_v_standard_name;

#line 1518 "dsproc3/core.pyx"
    goto __pyx_L4;

#line 1518 "dsproc3/core.pyx"
  }

#line 1518 "dsproc3/core.pyx"
  /*else*/ {

    /* "dsproc3/core.pyx":1520
 *         c_standard_name = standard_name
 *     else:
 *         c_standard_name = NULL             # <<<<<<<<<<<<<<
 *     if units:
 *         c_units = units
 */

#line 1520 "dsproc3/core.pyx"
    __pyx_v_c_standard_name = NULL;

#line 1520 "dsproc3/core.pyx"
  }

#line 1520 "dsproc3/core.pyx"
  __pyx_L4:;

  /* "dsproc3/core.pyx":1521
 *     else:
 *         c_standard_name = NULL
 *     if units:             # <<<<<<<<<<<<<<
 *         c_units = units
 *     else:
 */

#line 1521 "dsproc3/core.pyx"
  __pyx_t_2 = (__pyx_v_units != 0);

#line 1521 "dsproc3/core.pyx"
  if (__pyx_t_2) {

    /* "dsproc3/core.pyx":1522
 *         c_standard_name = NULL
 *     if units:
 *         c_units = units             # <<<<<<<<<<<<<<
 *     else:
 *         c_units = NULL
 */

#line 1522 "dsproc3/core.pyx"
    __pyx_v_c_units = __pyx_v_units;

#line 1522 "dsproc3/core.pyx"
    goto __pyx_L5;

#line 1522 "dsproc3/core.pyx"
  }

#line 1522 "dsproc3/core.pyx"
  /*else*/ {

    /* "dsproc3/core.pyx":1524
 *         c_units = units
 *     else:
 *         c_units = NULL             # <<<<<<<<<<<<<<
 *     for i in range(len(dim_names)):
 *         c_dim_names[i] = PyString_AsString(dim_names[i])
 */

#line 1524 "dsproc3/core.pyx"
    __pyx_v_c_units = NULL;

#line 1524 "dsproc3/core.pyx"
  }

#line 1524 "dsproc3/core.pyx"
  __pyx_L5:;

  /* "dsproc3/core.pyx":1525
 *     else:
 *         c_units = NULL
 *     for i in range(len(dim_names)):             # <<<<<<<<<<<<<<
 *         c_dim_names[i] = PyString_AsString(dim_names[i])
 *     if type == CDS_NAT:
 */

#line 1525 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_Length(__pyx_v_dim_names); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1525 "dsproc3/core.pyx"
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1525 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 1525 "dsproc3/core.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1525 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 1525 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);

#line 1525 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_3);

#line 1525 "dsproc3/core.pyx"
  __pyx_t_3 = 0;

#line 1525 "dsproc3/core.pyx"
  __pyx_t_3 = PyObject_Call(__pyx_builtin_range, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1525 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 1525 "dsproc3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;

#line 1525 "dsproc3/core.pyx"
  if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {

#line 1525 "dsproc3/core.pyx"
    __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_1 = 0;

#line 1525 "dsproc3/core.pyx"
    __pyx_t_5 = NULL;

#line 1525 "dsproc3/core.pyx"
  } else {
    __pyx_t_1 = -1; 
#line 1525 "dsproc3/core.pyx"
__pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1525 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 1525 "dsproc3/core.pyx"
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;

#line 1525 "dsproc3/core.pyx"
  }

#line 1525 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1525 "dsproc3/core.pyx"
  for (;;) {

#line 1525 "dsproc3/core.pyx"
    if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_4)) {

#line 1525 "dsproc3/core.pyx"
      if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_4)) break;

#line 1525 "dsproc3/core.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 1525 "dsproc3/core.pyx"
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1525 "dsproc3/core.pyx"
      #else

#line 1525 "dsproc3/core.pyx"
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1525 "dsproc3/core.pyx"
      #endif
    } else 
#line 1525 "dsproc3/core.pyx"
if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_4)) {

#line 1525 "dsproc3/core.pyx"
      if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_4)) break;

#line 1525 "dsproc3/core.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 1525 "dsproc3/core.pyx"
      __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1525 "dsproc3/core.pyx"
      #else

#line 1525 "dsproc3/core.pyx"
      __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1525 "dsproc3/core.pyx"
      #endif
    } else 
#line 1525 "dsproc3/core.pyx"
{

#line 1525 "dsproc3/core.pyx"
      __pyx_t_3 = __pyx_t_5(__pyx_t_4);

#line 1525 "dsproc3/core.pyx"
      if (unlikely(!__pyx_t_3)) {

#line 1525 "dsproc3/core.pyx"
        if (PyErr_Occurred()) {

#line 1525 "dsproc3/core.pyx"
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();

#line 1525 "dsproc3/core.pyx"
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1525 "dsproc3/core.pyx"
        }

#line 1525 "dsproc3/core.pyx"
        break;

#line 1525 "dsproc3/core.pyx"
      }

#line 1525 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 1525 "dsproc3/core.pyx"
    }

#line 1525 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_v_i);

#line 1525 "dsproc3/core.pyx"
    __pyx_v_i = __pyx_t_3;

#line 1525 "dsproc3/core.pyx"
    __pyx_t_3 = 0;

    /* "dsproc3/core.pyx":1526
 *         c_units = NULL
 *     for i in range(len(dim_names)):
 *         c_dim_names[i] = PyString_AsString(dim_names[i])             # <<<<<<<<<<<<<<
 *     if type == CDS_NAT:
 *         raise ValueError, "CDS_NAT"
 */

#line 1526 "dsproc3/core.pyx"
    __pyx_t_3 = PyObject_GetItem(__pyx_v_dim_names, __pyx_v_i); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1526 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 1526 "dsproc3/core.pyx"
    __pyx_t_6 = PyString_AsString(__pyx_t_3); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1526 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1526 "dsproc3/core.pyx"
    __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1526; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1526 "dsproc3/core.pyx"
    (__pyx_v_c_dim_names[__pyx_t_7]) = __pyx_t_6;

#line 1526 "dsproc3/core.pyx"
  }

#line 1526 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "dsproc3/core.pyx":1527
 *     for i in range(len(dim_names)):
 *         c_dim_names[i] = PyString_AsString(dim_names[i])
 *     if type == CDS_NAT:             # <<<<<<<<<<<<<<
 *         raise ValueError, "CDS_NAT"
 *     elif type == CDS_CHAR:
 */

#line 1527 "dsproc3/core.pyx"
  __pyx_t_2 = (__pyx_v_type == CDS_NAT);

#line 1527 "dsproc3/core.pyx"
  if (__pyx_t_2) {

    /* "dsproc3/core.pyx":1528
 *         c_dim_names[i] = PyString_AsString(dim_names[i])
 *     if type == CDS_NAT:
 *         raise ValueError, "CDS_NAT"             # <<<<<<<<<<<<<<
 *     elif type == CDS_CHAR:
 *         if valid_min is not None:
 */

#line 1528 "dsproc3/core.pyx"
    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_n_s__CDS_NAT), 0, 0);

#line 1528 "dsproc3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1528 "dsproc3/core.pyx"
    goto __pyx_L8;

#line 1528 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":1529
 *     if type == CDS_NAT:
 *         raise ValueError, "CDS_NAT"
 *     elif type == CDS_CHAR:             # <<<<<<<<<<<<<<
 *         if valid_min is not None:
 *             min_char = valid_min
 */

#line 1529 "dsproc3/core.pyx"
  __pyx_t_2 = (__pyx_v_type == CDS_CHAR);

#line 1529 "dsproc3/core.pyx"
  if (__pyx_t_2) {

    /* "dsproc3/core.pyx":1530
 *         raise ValueError, "CDS_NAT"
 *     elif type == CDS_CHAR:
 *         if valid_min is not None:             # <<<<<<<<<<<<<<
 *             min_char = valid_min
 *             min_ptr = &min_char
 */

#line 1530 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_valid_min != Py_None);

#line 1530 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":1531
 *     elif type == CDS_CHAR:
 *         if valid_min is not None:
 *             min_char = valid_min             # <<<<<<<<<<<<<<
 *             min_ptr = &min_char
 *         if valid_max is not None:
 */

#line 1531 "dsproc3/core.pyx"
      __pyx_t_8 = __Pyx_PyInt_AsChar(__pyx_v_valid_min); if (unlikely((__pyx_t_8 == (char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1531 "dsproc3/core.pyx"
      __pyx_v_min_char = __pyx_t_8;

      /* "dsproc3/core.pyx":1532
 *         if valid_min is not None:
 *             min_char = valid_min
 *             min_ptr = &min_char             # <<<<<<<<<<<<<<
 *         if valid_max is not None:
 *             max_char = valid_max
 */

#line 1532 "dsproc3/core.pyx"
      __pyx_v_min_ptr = (&__pyx_v_min_char);

#line 1532 "dsproc3/core.pyx"
      goto __pyx_L9;

#line 1532 "dsproc3/core.pyx"
    }

#line 1532 "dsproc3/core.pyx"
    __pyx_L9:;

    /* "dsproc3/core.pyx":1533
 *             min_char = valid_min
 *             min_ptr = &min_char
 *         if valid_max is not None:             # <<<<<<<<<<<<<<
 *             max_char = valid_max
 *             max_ptr = &max_char
 */

#line 1533 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_valid_max != Py_None);

#line 1533 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":1534
 *             min_ptr = &min_char
 *         if valid_max is not None:
 *             max_char = valid_max             # <<<<<<<<<<<<<<
 *             max_ptr = &max_char
 *         if missing_value is not None:
 */

#line 1534 "dsproc3/core.pyx"
      __pyx_t_8 = __Pyx_PyInt_AsChar(__pyx_v_valid_max); if (unlikely((__pyx_t_8 == (char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1534 "dsproc3/core.pyx"
      __pyx_v_max_char = __pyx_t_8;

      /* "dsproc3/core.pyx":1535
 *         if valid_max is not None:
 *             max_char = valid_max
 *             max_ptr = &max_char             # <<<<<<<<<<<<<<
 *         if missing_value is not None:
 *             missing_char = missing_value
 */

#line 1535 "dsproc3/core.pyx"
      __pyx_v_max_ptr = (&__pyx_v_max_char);

#line 1535 "dsproc3/core.pyx"
      goto __pyx_L10;

#line 1535 "dsproc3/core.pyx"
    }

#line 1535 "dsproc3/core.pyx"
    __pyx_L10:;

    /* "dsproc3/core.pyx":1536
 *             max_char = valid_max
 *             max_ptr = &max_char
 *         if missing_value is not None:             # <<<<<<<<<<<<<<
 *             missing_char = missing_value
 *             missing_ptr = &missing_char
 */

#line 1536 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_missing_value != Py_None);

#line 1536 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":1537
 *             max_ptr = &max_char
 *         if missing_value is not None:
 *             missing_char = missing_value             # <<<<<<<<<<<<<<
 *             missing_ptr = &missing_char
 *         if fill_value is not None:
 */

#line 1537 "dsproc3/core.pyx"
      __pyx_t_8 = __Pyx_PyInt_AsChar(__pyx_v_missing_value); if (unlikely((__pyx_t_8 == (char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1537; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1537 "dsproc3/core.pyx"
      __pyx_v_missing_char = __pyx_t_8;

      /* "dsproc3/core.pyx":1538
 *         if missing_value is not None:
 *             missing_char = missing_value
 *             missing_ptr = &missing_char             # <<<<<<<<<<<<<<
 *         if fill_value is not None:
 *             fill_char = fill_value
 */

#line 1538 "dsproc3/core.pyx"
      __pyx_v_missing_ptr = (&__pyx_v_missing_char);

#line 1538 "dsproc3/core.pyx"
      goto __pyx_L11;

#line 1538 "dsproc3/core.pyx"
    }

#line 1538 "dsproc3/core.pyx"
    __pyx_L11:;

    /* "dsproc3/core.pyx":1539
 *             missing_char = missing_value
 *             missing_ptr = &missing_char
 *         if fill_value is not None:             # <<<<<<<<<<<<<<
 *             fill_char = fill_value
 *             fill_ptr = &fill_char
 */

#line 1539 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_fill_value != Py_None);

#line 1539 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":1540
 *             missing_ptr = &missing_char
 *         if fill_value is not None:
 *             fill_char = fill_value             # <<<<<<<<<<<<<<
 *             fill_ptr = &fill_char
 *     elif type == CDS_BYTE:
 */

#line 1540 "dsproc3/core.pyx"
      __pyx_t_8 = __Pyx_PyInt_AsChar(__pyx_v_fill_value); if (unlikely((__pyx_t_8 == (char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1540 "dsproc3/core.pyx"
      __pyx_v_fill_char = __pyx_t_8;

      /* "dsproc3/core.pyx":1541
 *         if fill_value is not None:
 *             fill_char = fill_value
 *             fill_ptr = &fill_char             # <<<<<<<<<<<<<<
 *     elif type == CDS_BYTE:
 *         if valid_min is not None:
 */

#line 1541 "dsproc3/core.pyx"
      __pyx_v_fill_ptr = (&__pyx_v_fill_char);

#line 1541 "dsproc3/core.pyx"
      goto __pyx_L12;

#line 1541 "dsproc3/core.pyx"
    }

#line 1541 "dsproc3/core.pyx"
    __pyx_L12:;

#line 1541 "dsproc3/core.pyx"
    goto __pyx_L8;

#line 1541 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":1542
 *             fill_char = fill_value
 *             fill_ptr = &fill_char
 *     elif type == CDS_BYTE:             # <<<<<<<<<<<<<<
 *         if valid_min is not None:
 *             min_byte = valid_min
 */

#line 1542 "dsproc3/core.pyx"
  __pyx_t_2 = (__pyx_v_type == CDS_BYTE);

#line 1542 "dsproc3/core.pyx"
  if (__pyx_t_2) {

    /* "dsproc3/core.pyx":1543
 *             fill_ptr = &fill_char
 *     elif type == CDS_BYTE:
 *         if valid_min is not None:             # <<<<<<<<<<<<<<
 *             min_byte = valid_min
 *             min_ptr = &min_byte
 */

#line 1543 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_valid_min != Py_None);

#line 1543 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":1544
 *     elif type == CDS_BYTE:
 *         if valid_min is not None:
 *             min_byte = valid_min             # <<<<<<<<<<<<<<
 *             min_ptr = &min_byte
 *         if valid_max is not None:
 */

#line 1544 "dsproc3/core.pyx"
      __pyx_t_9 = __Pyx_PyInt_AsSignedChar(__pyx_v_valid_min); if (unlikely((__pyx_t_9 == (signed char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1544 "dsproc3/core.pyx"
      __pyx_v_min_byte = __pyx_t_9;

      /* "dsproc3/core.pyx":1545
 *         if valid_min is not None:
 *             min_byte = valid_min
 *             min_ptr = &min_byte             # <<<<<<<<<<<<<<
 *         if valid_max is not None:
 *             max_byte = valid_max
 */

#line 1545 "dsproc3/core.pyx"
      __pyx_v_min_ptr = (&__pyx_v_min_byte);

#line 1545 "dsproc3/core.pyx"
      goto __pyx_L13;

#line 1545 "dsproc3/core.pyx"
    }

#line 1545 "dsproc3/core.pyx"
    __pyx_L13:;

    /* "dsproc3/core.pyx":1546
 *             min_byte = valid_min
 *             min_ptr = &min_byte
 *         if valid_max is not None:             # <<<<<<<<<<<<<<
 *             max_byte = valid_max
 *             max_ptr = &max_byte
 */

#line 1546 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_valid_max != Py_None);

#line 1546 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":1547
 *             min_ptr = &min_byte
 *         if valid_max is not None:
 *             max_byte = valid_max             # <<<<<<<<<<<<<<
 *             max_ptr = &max_byte
 *         if missing_value is not None:
 */

#line 1547 "dsproc3/core.pyx"
      __pyx_t_9 = __Pyx_PyInt_AsSignedChar(__pyx_v_valid_max); if (unlikely((__pyx_t_9 == (signed char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1547; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1547 "dsproc3/core.pyx"
      __pyx_v_max_byte = __pyx_t_9;

      /* "dsproc3/core.pyx":1548
 *         if valid_max is not None:
 *             max_byte = valid_max
 *             max_ptr = &max_byte             # <<<<<<<<<<<<<<
 *         if missing_value is not None:
 *             missing_byte = missing_value
 */

#line 1548 "dsproc3/core.pyx"
      __pyx_v_max_ptr = (&__pyx_v_max_byte);

#line 1548 "dsproc3/core.pyx"
      goto __pyx_L14;

#line 1548 "dsproc3/core.pyx"
    }

#line 1548 "dsproc3/core.pyx"
    __pyx_L14:;

    /* "dsproc3/core.pyx":1549
 *             max_byte = valid_max
 *             max_ptr = &max_byte
 *         if missing_value is not None:             # <<<<<<<<<<<<<<
 *             missing_byte = missing_value
 *             missing_ptr = &missing_byte
 */

#line 1549 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_missing_value != Py_None);

#line 1549 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":1550
 *             max_ptr = &max_byte
 *         if missing_value is not None:
 *             missing_byte = missing_value             # <<<<<<<<<<<<<<
 *             missing_ptr = &missing_byte
 *         if fill_value is not None:
 */

#line 1550 "dsproc3/core.pyx"
      __pyx_t_9 = __Pyx_PyInt_AsSignedChar(__pyx_v_missing_value); if (unlikely((__pyx_t_9 == (signed char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1550; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1550 "dsproc3/core.pyx"
      __pyx_v_missing_byte = __pyx_t_9;

      /* "dsproc3/core.pyx":1551
 *         if missing_value is not None:
 *             missing_byte = missing_value
 *             missing_ptr = &missing_byte             # <<<<<<<<<<<<<<
 *         if fill_value is not None:
 *             fill_byte = fill_value
 */

#line 1551 "dsproc3/core.pyx"
      __pyx_v_missing_ptr = (&__pyx_v_missing_byte);

#line 1551 "dsproc3/core.pyx"
      goto __pyx_L15;

#line 1551 "dsproc3/core.pyx"
    }

#line 1551 "dsproc3/core.pyx"
    __pyx_L15:;

    /* "dsproc3/core.pyx":1552
 *             missing_byte = missing_value
 *             missing_ptr = &missing_byte
 *         if fill_value is not None:             # <<<<<<<<<<<<<<
 *             fill_byte = fill_value
 *             fill_ptr = &fill_byte
 */

#line 1552 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_fill_value != Py_None);

#line 1552 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":1553
 *             missing_ptr = &missing_byte
 *         if fill_value is not None:
 *             fill_byte = fill_value             # <<<<<<<<<<<<<<
 *             fill_ptr = &fill_byte
 *     elif type == CDS_SHORT:
 */

#line 1553 "dsproc3/core.pyx"
      __pyx_t_9 = __Pyx_PyInt_AsSignedChar(__pyx_v_fill_value); if (unlikely((__pyx_t_9 == (signed char)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1553; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1553 "dsproc3/core.pyx"
      __pyx_v_fill_byte = __pyx_t_9;

      /* "dsproc3/core.pyx":1554
 *         if fill_value is not None:
 *             fill_byte = fill_value
 *             fill_ptr = &fill_byte             # <<<<<<<<<<<<<<
 *     elif type == CDS_SHORT:
 *         if valid_min is not None:
 */

#line 1554 "dsproc3/core.pyx"
      __pyx_v_fill_ptr = (&__pyx_v_fill_byte);

#line 1554 "dsproc3/core.pyx"
      goto __pyx_L16;

#line 1554 "dsproc3/core.pyx"
    }

#line 1554 "dsproc3/core.pyx"
    __pyx_L16:;

#line 1554 "dsproc3/core.pyx"
    goto __pyx_L8;

#line 1554 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":1555
 *             fill_byte = fill_value
 *             fill_ptr = &fill_byte
 *     elif type == CDS_SHORT:             # <<<<<<<<<<<<<<
 *         if valid_min is not None:
 *             min_short = valid_min
 */

#line 1555 "dsproc3/core.pyx"
  __pyx_t_2 = (__pyx_v_type == CDS_SHORT);

#line 1555 "dsproc3/core.pyx"
  if (__pyx_t_2) {

    /* "dsproc3/core.pyx":1556
 *             fill_ptr = &fill_byte
 *     elif type == CDS_SHORT:
 *         if valid_min is not None:             # <<<<<<<<<<<<<<
 *             min_short = valid_min
 *             min_ptr = &min_short
 */

#line 1556 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_valid_min != Py_None);

#line 1556 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":1557
 *     elif type == CDS_SHORT:
 *         if valid_min is not None:
 *             min_short = valid_min             # <<<<<<<<<<<<<<
 *             min_ptr = &min_short
 *         if valid_max is not None:
 */

#line 1557 "dsproc3/core.pyx"
      __pyx_t_10 = __Pyx_PyInt_AsShort(__pyx_v_valid_min); if (unlikely((__pyx_t_10 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1557 "dsproc3/core.pyx"
      __pyx_v_min_short = __pyx_t_10;

      /* "dsproc3/core.pyx":1558
 *         if valid_min is not None:
 *             min_short = valid_min
 *             min_ptr = &min_short             # <<<<<<<<<<<<<<
 *         if valid_max is not None:
 *             max_short = valid_max
 */

#line 1558 "dsproc3/core.pyx"
      __pyx_v_min_ptr = (&__pyx_v_min_short);

#line 1558 "dsproc3/core.pyx"
      goto __pyx_L17;

#line 1558 "dsproc3/core.pyx"
    }

#line 1558 "dsproc3/core.pyx"
    __pyx_L17:;

    /* "dsproc3/core.pyx":1559
 *             min_short = valid_min
 *             min_ptr = &min_short
 *         if valid_max is not None:             # <<<<<<<<<<<<<<
 *             max_short = valid_max
 *             max_ptr = &max_short
 */

#line 1559 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_valid_max != Py_None);

#line 1559 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":1560
 *             min_ptr = &min_short
 *         if valid_max is not None:
 *             max_short = valid_max             # <<<<<<<<<<<<<<
 *             max_ptr = &max_short
 *         if missing_value is not None:
 */

#line 1560 "dsproc3/core.pyx"
      __pyx_t_10 = __Pyx_PyInt_AsShort(__pyx_v_valid_max); if (unlikely((__pyx_t_10 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1560 "dsproc3/core.pyx"
      __pyx_v_max_short = __pyx_t_10;

      /* "dsproc3/core.pyx":1561
 *         if valid_max is not None:
 *             max_short = valid_max
 *             max_ptr = &max_short             # <<<<<<<<<<<<<<
 *         if missing_value is not None:
 *             missing_short = missing_value
 */

#line 1561 "dsproc3/core.pyx"
      __pyx_v_max_ptr = (&__pyx_v_max_short);

#line 1561 "dsproc3/core.pyx"
      goto __pyx_L18;

#line 1561 "dsproc3/core.pyx"
    }

#line 1561 "dsproc3/core.pyx"
    __pyx_L18:;

    /* "dsproc3/core.pyx":1562
 *             max_short = valid_max
 *             max_ptr = &max_short
 *         if missing_value is not None:             # <<<<<<<<<<<<<<
 *             missing_short = missing_value
 *             missing_ptr = &missing_short
 */

#line 1562 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_missing_value != Py_None);

#line 1562 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":1563
 *             max_ptr = &max_short
 *         if missing_value is not None:
 *             missing_short = missing_value             # <<<<<<<<<<<<<<
 *             missing_ptr = &missing_short
 *         if fill_value is not None:
 */

#line 1563 "dsproc3/core.pyx"
      __pyx_t_10 = __Pyx_PyInt_AsShort(__pyx_v_missing_value); if (unlikely((__pyx_t_10 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1563; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1563 "dsproc3/core.pyx"
      __pyx_v_missing_short = __pyx_t_10;

      /* "dsproc3/core.pyx":1564
 *         if missing_value is not None:
 *             missing_short = missing_value
 *             missing_ptr = &missing_short             # <<<<<<<<<<<<<<
 *         if fill_value is not None:
 *             fill_short = fill_value
 */

#line 1564 "dsproc3/core.pyx"
      __pyx_v_missing_ptr = (&__pyx_v_missing_short);

#line 1564 "dsproc3/core.pyx"
      goto __pyx_L19;

#line 1564 "dsproc3/core.pyx"
    }

#line 1564 "dsproc3/core.pyx"
    __pyx_L19:;

    /* "dsproc3/core.pyx":1565
 *             missing_short = missing_value
 *             missing_ptr = &missing_short
 *         if fill_value is not None:             # <<<<<<<<<<<<<<
 *             fill_short = fill_value
 *             fill_ptr = &fill_short
 */

#line 1565 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_fill_value != Py_None);

#line 1565 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":1566
 *             missing_ptr = &missing_short
 *         if fill_value is not None:
 *             fill_short = fill_value             # <<<<<<<<<<<<<<
 *             fill_ptr = &fill_short
 *     elif type == CDS_INT:
 */

#line 1566 "dsproc3/core.pyx"
      __pyx_t_10 = __Pyx_PyInt_AsShort(__pyx_v_fill_value); if (unlikely((__pyx_t_10 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1566; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1566 "dsproc3/core.pyx"
      __pyx_v_fill_short = __pyx_t_10;

      /* "dsproc3/core.pyx":1567
 *         if fill_value is not None:
 *             fill_short = fill_value
 *             fill_ptr = &fill_short             # <<<<<<<<<<<<<<
 *     elif type == CDS_INT:
 *         if valid_min is not None:
 */

#line 1567 "dsproc3/core.pyx"
      __pyx_v_fill_ptr = (&__pyx_v_fill_short);

#line 1567 "dsproc3/core.pyx"
      goto __pyx_L20;

#line 1567 "dsproc3/core.pyx"
    }

#line 1567 "dsproc3/core.pyx"
    __pyx_L20:;

#line 1567 "dsproc3/core.pyx"
    goto __pyx_L8;

#line 1567 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":1568
 *             fill_short = fill_value
 *             fill_ptr = &fill_short
 *     elif type == CDS_INT:             # <<<<<<<<<<<<<<
 *         if valid_min is not None:
 *             min_int = valid_min
 */

#line 1568 "dsproc3/core.pyx"
  __pyx_t_2 = (__pyx_v_type == CDS_INT);

#line 1568 "dsproc3/core.pyx"
  if (__pyx_t_2) {

    /* "dsproc3/core.pyx":1569
 *             fill_ptr = &fill_short
 *     elif type == CDS_INT:
 *         if valid_min is not None:             # <<<<<<<<<<<<<<
 *             min_int = valid_min
 *             min_ptr = &min_int
 */

#line 1569 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_valid_min != Py_None);

#line 1569 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":1570
 *     elif type == CDS_INT:
 *         if valid_min is not None:
 *             min_int = valid_min             # <<<<<<<<<<<<<<
 *             min_ptr = &min_int
 *         if valid_max is not None:
 */

#line 1570 "dsproc3/core.pyx"
      __pyx_t_11 = __Pyx_PyInt_AsInt(__pyx_v_valid_min); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1570 "dsproc3/core.pyx"
      __pyx_v_min_int = __pyx_t_11;

      /* "dsproc3/core.pyx":1571
 *         if valid_min is not None:
 *             min_int = valid_min
 *             min_ptr = &min_int             # <<<<<<<<<<<<<<
 *         if valid_max is not None:
 *             max_int = valid_max
 */

#line 1571 "dsproc3/core.pyx"
      __pyx_v_min_ptr = (&__pyx_v_min_int);

#line 1571 "dsproc3/core.pyx"
      goto __pyx_L21;

#line 1571 "dsproc3/core.pyx"
    }

#line 1571 "dsproc3/core.pyx"
    __pyx_L21:;

    /* "dsproc3/core.pyx":1572
 *             min_int = valid_min
 *             min_ptr = &min_int
 *         if valid_max is not None:             # <<<<<<<<<<<<<<
 *             max_int = valid_max
 *             max_ptr = &max_int
 */

#line 1572 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_valid_max != Py_None);

#line 1572 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":1573
 *             min_ptr = &min_int
 *         if valid_max is not None:
 *             max_int = valid_max             # <<<<<<<<<<<<<<
 *             max_ptr = &max_int
 *         if missing_value is not None:
 */

#line 1573 "dsproc3/core.pyx"
      __pyx_t_11 = __Pyx_PyInt_AsInt(__pyx_v_valid_max); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1573 "dsproc3/core.pyx"
      __pyx_v_max_int = __pyx_t_11;

      /* "dsproc3/core.pyx":1574
 *         if valid_max is not None:
 *             max_int = valid_max
 *             max_ptr = &max_int             # <<<<<<<<<<<<<<
 *         if missing_value is not None:
 *             missing_int = missing_value
 */

#line 1574 "dsproc3/core.pyx"
      __pyx_v_max_ptr = (&__pyx_v_max_int);

#line 1574 "dsproc3/core.pyx"
      goto __pyx_L22;

#line 1574 "dsproc3/core.pyx"
    }

#line 1574 "dsproc3/core.pyx"
    __pyx_L22:;

    /* "dsproc3/core.pyx":1575
 *             max_int = valid_max
 *             max_ptr = &max_int
 *         if missing_value is not None:             # <<<<<<<<<<<<<<
 *             missing_int = missing_value
 *             missing_ptr = &missing_int
 */

#line 1575 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_missing_value != Py_None);

#line 1575 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":1576
 *             max_ptr = &max_int
 *         if missing_value is not None:
 *             missing_int = missing_value             # <<<<<<<<<<<<<<
 *             missing_ptr = &missing_int
 *         if fill_value is not None:
 */

#line 1576 "dsproc3/core.pyx"
      __pyx_t_11 = __Pyx_PyInt_AsInt(__pyx_v_missing_value); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1576 "dsproc3/core.pyx"
      __pyx_v_missing_int = __pyx_t_11;

      /* "dsproc3/core.pyx":1577
 *         if missing_value is not None:
 *             missing_int = missing_value
 *             missing_ptr = &missing_int             # <<<<<<<<<<<<<<
 *         if fill_value is not None:
 *             fill_int = fill_value
 */

#line 1577 "dsproc3/core.pyx"
      __pyx_v_missing_ptr = (&__pyx_v_missing_int);

#line 1577 "dsproc3/core.pyx"
      goto __pyx_L23;

#line 1577 "dsproc3/core.pyx"
    }

#line 1577 "dsproc3/core.pyx"
    __pyx_L23:;

    /* "dsproc3/core.pyx":1578
 *             missing_int = missing_value
 *             missing_ptr = &missing_int
 *         if fill_value is not None:             # <<<<<<<<<<<<<<
 *             fill_int = fill_value
 *             fill_ptr = &fill_int
 */

#line 1578 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_fill_value != Py_None);

#line 1578 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":1579
 *             missing_ptr = &missing_int
 *         if fill_value is not None:
 *             fill_int = fill_value             # <<<<<<<<<<<<<<
 *             fill_ptr = &fill_int
 *     elif type == CDS_FLOAT:
 */

#line 1579 "dsproc3/core.pyx"
      __pyx_t_11 = __Pyx_PyInt_AsInt(__pyx_v_fill_value); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1579; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1579 "dsproc3/core.pyx"
      __pyx_v_fill_int = __pyx_t_11;

      /* "dsproc3/core.pyx":1580
 *         if fill_value is not None:
 *             fill_int = fill_value
 *             fill_ptr = &fill_int             # <<<<<<<<<<<<<<
 *     elif type == CDS_FLOAT:
 *         if valid_min is not None:
 */

#line 1580 "dsproc3/core.pyx"
      __pyx_v_fill_ptr = (&__pyx_v_fill_int);

#line 1580 "dsproc3/core.pyx"
      goto __pyx_L24;

#line 1580 "dsproc3/core.pyx"
    }

#line 1580 "dsproc3/core.pyx"
    __pyx_L24:;

#line 1580 "dsproc3/core.pyx"
    goto __pyx_L8;

#line 1580 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":1581
 *             fill_int = fill_value
 *             fill_ptr = &fill_int
 *     elif type == CDS_FLOAT:             # <<<<<<<<<<<<<<
 *         if valid_min is not None:
 *             min_float = valid_min
 */

#line 1581 "dsproc3/core.pyx"
  __pyx_t_2 = (__pyx_v_type == CDS_FLOAT);

#line 1581 "dsproc3/core.pyx"
  if (__pyx_t_2) {

    /* "dsproc3/core.pyx":1582
 *             fill_ptr = &fill_int
 *     elif type == CDS_FLOAT:
 *         if valid_min is not None:             # <<<<<<<<<<<<<<
 *             min_float = valid_min
 *             min_ptr = &min_float
 */

#line 1582 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_valid_min != Py_None);

#line 1582 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":1583
 *     elif type == CDS_FLOAT:
 *         if valid_min is not None:
 *             min_float = valid_min             # <<<<<<<<<<<<<<
 *             min_ptr = &min_float
 *         if valid_max is not None:
 */

#line 1583 "dsproc3/core.pyx"
      __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_v_valid_min); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1583 "dsproc3/core.pyx"
      __pyx_v_min_float = __pyx_t_12;

      /* "dsproc3/core.pyx":1584
 *         if valid_min is not None:
 *             min_float = valid_min
 *             min_ptr = &min_float             # <<<<<<<<<<<<<<
 *         if valid_max is not None:
 *             max_float = valid_max
 */

#line 1584 "dsproc3/core.pyx"
      __pyx_v_min_ptr = (&__pyx_v_min_float);

#line 1584 "dsproc3/core.pyx"
      goto __pyx_L25;

#line 1584 "dsproc3/core.pyx"
    }

#line 1584 "dsproc3/core.pyx"
    __pyx_L25:;

    /* "dsproc3/core.pyx":1585
 *             min_float = valid_min
 *             min_ptr = &min_float
 *         if valid_max is not None:             # <<<<<<<<<<<<<<
 *             max_float = valid_max
 *             max_ptr = &max_float
 */

#line 1585 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_valid_max != Py_None);

#line 1585 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":1586
 *             min_ptr = &min_float
 *         if valid_max is not None:
 *             max_float = valid_max             # <<<<<<<<<<<<<<
 *             max_ptr = &max_float
 *         if missing_value is not None:
 */

#line 1586 "dsproc3/core.pyx"
      __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_v_valid_max); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1586 "dsproc3/core.pyx"
      __pyx_v_max_float = __pyx_t_12;

      /* "dsproc3/core.pyx":1587
 *         if valid_max is not None:
 *             max_float = valid_max
 *             max_ptr = &max_float             # <<<<<<<<<<<<<<
 *         if missing_value is not None:
 *             missing_float = missing_value
 */

#line 1587 "dsproc3/core.pyx"
      __pyx_v_max_ptr = (&__pyx_v_max_float);

#line 1587 "dsproc3/core.pyx"
      goto __pyx_L26;

#line 1587 "dsproc3/core.pyx"
    }

#line 1587 "dsproc3/core.pyx"
    __pyx_L26:;

    /* "dsproc3/core.pyx":1588
 *             max_float = valid_max
 *             max_ptr = &max_float
 *         if missing_value is not None:             # <<<<<<<<<<<<<<
 *             missing_float = missing_value
 *             missing_ptr = &missing_float
 */

#line 1588 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_missing_value != Py_None);

#line 1588 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":1589
 *             max_ptr = &max_float
 *         if missing_value is not None:
 *             missing_float = missing_value             # <<<<<<<<<<<<<<
 *             missing_ptr = &missing_float
 *         if fill_value is not None:
 */

#line 1589 "dsproc3/core.pyx"
      __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_v_missing_value); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1589 "dsproc3/core.pyx"
      __pyx_v_missing_float = __pyx_t_12;

      /* "dsproc3/core.pyx":1590
 *         if missing_value is not None:
 *             missing_float = missing_value
 *             missing_ptr = &missing_float             # <<<<<<<<<<<<<<
 *         if fill_value is not None:
 *             fill_float = fill_value
 */

#line 1590 "dsproc3/core.pyx"
      __pyx_v_missing_ptr = (&__pyx_v_missing_float);

#line 1590 "dsproc3/core.pyx"
      goto __pyx_L27;

#line 1590 "dsproc3/core.pyx"
    }

#line 1590 "dsproc3/core.pyx"
    __pyx_L27:;

    /* "dsproc3/core.pyx":1591
 *             missing_float = missing_value
 *             missing_ptr = &missing_float
 *         if fill_value is not None:             # <<<<<<<<<<<<<<
 *             fill_float = fill_value
 *             fill_ptr = &fill_float
 */

#line 1591 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_fill_value != Py_None);

#line 1591 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":1592
 *             missing_ptr = &missing_float
 *         if fill_value is not None:
 *             fill_float = fill_value             # <<<<<<<<<<<<<<
 *             fill_ptr = &fill_float
 *     elif type == CDS_DOUBLE:
 */

#line 1592 "dsproc3/core.pyx"
      __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_v_fill_value); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1592 "dsproc3/core.pyx"
      __pyx_v_fill_float = __pyx_t_12;

      /* "dsproc3/core.pyx":1593
 *         if fill_value is not None:
 *             fill_float = fill_value
 *             fill_ptr = &fill_float             # <<<<<<<<<<<<<<
 *     elif type == CDS_DOUBLE:
 *         if valid_min is not None:
 */

#line 1593 "dsproc3/core.pyx"
      __pyx_v_fill_ptr = (&__pyx_v_fill_float);

#line 1593 "dsproc3/core.pyx"
      goto __pyx_L28;

#line 1593 "dsproc3/core.pyx"
    }

#line 1593 "dsproc3/core.pyx"
    __pyx_L28:;

#line 1593 "dsproc3/core.pyx"
    goto __pyx_L8;

#line 1593 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":1594
 *             fill_float = fill_value
 *             fill_ptr = &fill_float
 *     elif type == CDS_DOUBLE:             # <<<<<<<<<<<<<<
 *         if valid_min is not None:
 *             min_double = valid_min
 */

#line 1594 "dsproc3/core.pyx"
  __pyx_t_2 = (__pyx_v_type == CDS_DOUBLE);

#line 1594 "dsproc3/core.pyx"
  if (__pyx_t_2) {

    /* "dsproc3/core.pyx":1595
 *             fill_ptr = &fill_float
 *     elif type == CDS_DOUBLE:
 *         if valid_min is not None:             # <<<<<<<<<<<<<<
 *             min_double = valid_min
 *             min_ptr = &min_double
 */

#line 1595 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_valid_min != Py_None);

#line 1595 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":1596
 *     elif type == CDS_DOUBLE:
 *         if valid_min is not None:
 *             min_double = valid_min             # <<<<<<<<<<<<<<
 *             min_ptr = &min_double
 *         if valid_max is not None:
 */

#line 1596 "dsproc3/core.pyx"
      __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_v_valid_min); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1596 "dsproc3/core.pyx"
      __pyx_v_min_double = __pyx_t_13;

      /* "dsproc3/core.pyx":1597
 *         if valid_min is not None:
 *             min_double = valid_min
 *             min_ptr = &min_double             # <<<<<<<<<<<<<<
 *         if valid_max is not None:
 *             max_double = valid_max
 */

#line 1597 "dsproc3/core.pyx"
      __pyx_v_min_ptr = (&__pyx_v_min_double);

#line 1597 "dsproc3/core.pyx"
      goto __pyx_L29;

#line 1597 "dsproc3/core.pyx"
    }

#line 1597 "dsproc3/core.pyx"
    __pyx_L29:;

    /* "dsproc3/core.pyx":1598
 *             min_double = valid_min
 *             min_ptr = &min_double
 *         if valid_max is not None:             # <<<<<<<<<<<<<<
 *             max_double = valid_max
 *             max_ptr = &max_double
 */

#line 1598 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_valid_max != Py_None);

#line 1598 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":1599
 *             min_ptr = &min_double
 *         if valid_max is not None:
 *             max_double = valid_max             # <<<<<<<<<<<<<<
 *             max_ptr = &max_double
 *         if missing_value is not None:
 */

#line 1599 "dsproc3/core.pyx"
      __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_v_valid_max); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1599 "dsproc3/core.pyx"
      __pyx_v_max_double = __pyx_t_13;

      /* "dsproc3/core.pyx":1600
 *         if valid_max is not None:
 *             max_double = valid_max
 *             max_ptr = &max_double             # <<<<<<<<<<<<<<
 *         if missing_value is not None:
 *             missing_double = missing_value
 */

#line 1600 "dsproc3/core.pyx"
      __pyx_v_max_ptr = (&__pyx_v_max_double);

#line 1600 "dsproc3/core.pyx"
      goto __pyx_L30;

#line 1600 "dsproc3/core.pyx"
    }

#line 1600 "dsproc3/core.pyx"
    __pyx_L30:;

    /* "dsproc3/core.pyx":1601
 *             max_double = valid_max
 *             max_ptr = &max_double
 *         if missing_value is not None:             # <<<<<<<<<<<<<<
 *             missing_double = missing_value
 *             missing_ptr = &missing_double
 */

#line 1601 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_missing_value != Py_None);

#line 1601 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":1602
 *             max_ptr = &max_double
 *         if missing_value is not None:
 *             missing_double = missing_value             # <<<<<<<<<<<<<<
 *             missing_ptr = &missing_double
 *         if fill_value is not None:
 */

#line 1602 "dsproc3/core.pyx"
      __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_v_missing_value); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1602 "dsproc3/core.pyx"
      __pyx_v_missing_double = __pyx_t_13;

      /* "dsproc3/core.pyx":1603
 *         if missing_value is not None:
 *             missing_double = missing_value
 *             missing_ptr = &missing_double             # <<<<<<<<<<<<<<
 *         if fill_value is not None:
 *             fill_double = fill_value
 */

#line 1603 "dsproc3/core.pyx"
      __pyx_v_missing_ptr = (&__pyx_v_missing_double);

#line 1603 "dsproc3/core.pyx"
      goto __pyx_L31;

#line 1603 "dsproc3/core.pyx"
    }

#line 1603 "dsproc3/core.pyx"
    __pyx_L31:;

    /* "dsproc3/core.pyx":1604
 *             missing_double = missing_value
 *             missing_ptr = &missing_double
 *         if fill_value is not None:             # <<<<<<<<<<<<<<
 *             fill_double = fill_value
 *             fill_ptr = &fill_double
 */

#line 1604 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_fill_value != Py_None);

#line 1604 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":1605
 *             missing_ptr = &missing_double
 *         if fill_value is not None:
 *             fill_double = fill_value             # <<<<<<<<<<<<<<
 *             fill_ptr = &fill_double
 *     else:
 */

#line 1605 "dsproc3/core.pyx"
      __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_v_fill_value); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1605 "dsproc3/core.pyx"
      __pyx_v_fill_double = __pyx_t_13;

      /* "dsproc3/core.pyx":1606
 *         if fill_value is not None:
 *             fill_double = fill_value
 *             fill_ptr = &fill_double             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError, "invalid CDSType"
 */

#line 1606 "dsproc3/core.pyx"
      __pyx_v_fill_ptr = (&__pyx_v_fill_double);

#line 1606 "dsproc3/core.pyx"
      goto __pyx_L32;

#line 1606 "dsproc3/core.pyx"
    }

#line 1606 "dsproc3/core.pyx"
    __pyx_L32:;

#line 1606 "dsproc3/core.pyx"
    goto __pyx_L8;

#line 1606 "dsproc3/core.pyx"
  }

#line 1606 "dsproc3/core.pyx"
  /*else*/ {

    /* "dsproc3/core.pyx":1608
 *             fill_ptr = &fill_double
 *     else:
 *         raise ValueError, "invalid CDSType"             # <<<<<<<<<<<<<<
 *     cds_var = dsproc_define_var(dataset.c_ob, name, type, len(dim_names),
 *             c_dim_names, c_long_name, c_standard_name, c_units,
 */

#line 1608 "dsproc3/core.pyx"
    __Pyx_Raise(__pyx_builtin_ValueError, ((PyObject *)__pyx_kp_s_56), 0, 0);

#line 1608 "dsproc3/core.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1608 "dsproc3/core.pyx"
  }

#line 1608 "dsproc3/core.pyx"
  __pyx_L8:;

  /* "dsproc3/core.pyx":1609
 *     else:
 *         raise ValueError, "invalid CDSType"
 *     cds_var = dsproc_define_var(dataset.c_ob, name, type, len(dim_names),             # <<<<<<<<<<<<<<
 *             c_dim_names, c_long_name, c_standard_name, c_units,
 *             min_ptr, max_ptr, missing_ptr, fill_ptr)
 */

#line 1609 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_Length(__pyx_v_dim_names); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1609; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1611
 *     cds_var = dsproc_define_var(dataset.c_ob, name, type, len(dim_names),
 *             c_dim_names, c_long_name, c_standard_name, c_units,
 *             min_ptr, max_ptr, missing_ptr, fill_ptr)             # <<<<<<<<<<<<<<
 *     free(c_dim_names)
 *     return None
 */

#line 1611 "dsproc3/core.pyx"
  __pyx_v_cds_var = dsproc_define_var(__pyx_v_dataset->c_ob, __pyx_v_name, __pyx_v_type, __pyx_t_1, __pyx_v_c_dim_names, __pyx_v_c_long_name, __pyx_v_c_standard_name, __pyx_v_c_units, __pyx_v_min_ptr, __pyx_v_max_ptr, __pyx_v_missing_ptr, __pyx_v_fill_ptr);

  /* "dsproc3/core.pyx":1612
 *             c_dim_names, c_long_name, c_standard_name, c_units,
 *             min_ptr, max_ptr, missing_ptr, fill_ptr)
 *     free(c_dim_names)             # <<<<<<<<<<<<<<
 *     return None
 * 
 */

#line 1612 "dsproc3/core.pyx"
  free(__pyx_v_c_dim_names);

  /* "dsproc3/core.pyx":1613
 *             min_ptr, max_ptr, missing_ptr, fill_ptr)
 *     free(c_dim_names)
 *     return None             # <<<<<<<<<<<<<<
 * 
 * def delete_var(cds3.core.Var var):
 */

#line 1613 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1613 "dsproc3/core.pyx"
  __Pyx_INCREF(Py_None);

#line 1613 "dsproc3/core.pyx"
  __pyx_r = Py_None;

#line 1613 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1613 "dsproc3/core.pyx"


#line 1613 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1613 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1613 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1613 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 1613 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 1613 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.define_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1613 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1613 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1613 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_i);

#line 1613 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1613 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1613 "dsproc3/core.pyx"
  return __pyx_r;

#line 1613 "dsproc3/core.pyx"
}

#line 1613 "dsproc3/core.pyx"


#line 1613 "dsproc3/core.pyx"
/* Python wrapper */

#line 1613 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_113delete_var(PyObject *__pyx_self, PyObject *__pyx_v_var); /*proto*/

#line 1613 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_112delete_var[] = "delete_var(Var var)\nDelete a variable from a dataset.\n    \n    If an error occurs in this function it will be appended to the log and\n    error mail messages, and the process status will be set appropriately.\n    \n    @param var - pointer to the variable\n    \n    @retval 1 if the variable was deleted (or the input var was NULL)\n    @retval 0 if the variable is locked\n    @retval 0 if the group is locked\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_113delete_var = 
#line 1613 "dsproc3/core.pyx"
{__Pyx_NAMESTR("delete_var"), (PyCFunction)__pyx_pw_7dsproc3_4core_113delete_var, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_112delete_var)};

#line 1613 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_113delete_var(PyObject *__pyx_self, PyObject *__pyx_v_var) {

#line 1613 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1613 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1613 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("delete_var (wrapper)", 0);

#line 1613 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_var), __pyx_ptype_4cds3_4core_Var, 1, "var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1613 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_112delete_var(__pyx_self, ((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_var));

#line 1613 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1613 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1613 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1613 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1613 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1613 "dsproc3/core.pyx"
  return __pyx_r;

#line 1613 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1615
 *     return None
 * 
 * def delete_var(cds3.core.Var var):             # <<<<<<<<<<<<<<
 *     """Delete a variable from a dataset.
 * 
 */

#line 1615 "dsproc3/core.pyx"


#line 1615 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_112delete_var(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var) {
  int __pyx_v_return_value
#line 1615 "dsproc3/core.pyx"
;

#line 1615 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1615 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("delete_var", 0);

  /* "dsproc3/core.pyx":1628
 * 
 *     """
 *     cdef int return_value = dsproc_delete_var(var.c_ob)             # <<<<<<<<<<<<<<
 *     if return_value == 1:
 *         var.set_var(NULL)
 */

#line 1628 "dsproc3/core.pyx"
  __pyx_v_return_value = dsproc_delete_var(__pyx_v_var->c_ob);

  /* "dsproc3/core.pyx":1629
 *     """
 *     cdef int return_value = dsproc_delete_var(var.c_ob)
 *     if return_value == 1:             # <<<<<<<<<<<<<<
 *         var.set_var(NULL)
 *     return return_value
 */

#line 1629 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_return_value == 1);

#line 1629 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":1630
 *     cdef int return_value = dsproc_delete_var(var.c_ob)
 *     if return_value == 1:
 *         var.set_var(NULL)             # <<<<<<<<<<<<<<
 *     return return_value
 * 
 */

#line 1630 "dsproc3/core.pyx"
    __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_var->__pyx_base.__pyx_vtab)->set_var(__pyx_v_var, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1630 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 1630 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 1630 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 1630 "dsproc3/core.pyx"
  }

#line 1630 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":1631
 *     if return_value == 1:
 *         var.set_var(NULL)
 *     return return_value             # <<<<<<<<<<<<<<
 * 
 * def get_coord_var(cds3.core.Var _var, int dim_index):
 */

#line 1631 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1631 "dsproc3/core.pyx"
  __pyx_t_2 = PyInt_FromLong(__pyx_v_return_value); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1631 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1631 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_2;

#line 1631 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 1631 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1631 "dsproc3/core.pyx"


#line 1631 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1631 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1631 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1631 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1631 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.delete_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1631 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1631 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1631 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1631 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1631 "dsproc3/core.pyx"
  return __pyx_r;

#line 1631 "dsproc3/core.pyx"
}

#line 1631 "dsproc3/core.pyx"


#line 1631 "dsproc3/core.pyx"
/* Python wrapper */

#line 1631 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_115get_coord_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1631 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_114get_coord_var[] = "get_coord_var(Var _var, int dim_index)\nGet the coordinate variable for a variable's dimension.\n    \n    @param var - pointer to the variable\n    @param dim_index - index of the dimension\n    \n    @retval pointer to the coordinate variable\n    @retval None if not found\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_115get_coord_var = 
#line 1631 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_coord_var"), (PyCFunction)__pyx_pw_7dsproc3_4core_115get_coord_var, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_114get_coord_var)};

#line 1631 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_115get_coord_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Var *__pyx_v__var = 0
#line 1631 "dsproc3/core.pyx"
;
  int __pyx_v_dim_index
#line 1631 "dsproc3/core.pyx"
;

#line 1631 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1631 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1631 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_coord_var (wrapper)", 0);

#line 1631 "dsproc3/core.pyx"
  {

#line 1631 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s___var,&__pyx_n_s__dim_index,0};

#line 1631 "dsproc3/core.pyx"
    PyObject* values[2] = {0,0};

#line 1631 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1631 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 1631 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1631 "dsproc3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 1631 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1631 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1631 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 1631 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1631 "dsproc3/core.pyx"
      }

#line 1631 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1631 "dsproc3/core.pyx"
      switch (pos_args) {

#line 1631 "dsproc3/core.pyx"
        case  0:

#line 1631 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s___var)) != 0)) kw_args--;
        else 
#line 1631 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1631 "dsproc3/core.pyx"
        case  1:

#line 1631 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dim_index)) != 0)) kw_args--;

#line 1631 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("get_coord_var", 1, 2, 2, 1); 
#line 1631 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1631 "dsproc3/core.pyx"
        }

#line 1631 "dsproc3/core.pyx"
      }

#line 1631 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1631 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_coord_var") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1631 "dsproc3/core.pyx"
      }

#line 1631 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 1631 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1631 "dsproc3/core.pyx"
    } else {

#line 1631 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1631 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1631 "dsproc3/core.pyx"
    }

#line 1631 "dsproc3/core.pyx"
    __pyx_v__var = ((struct __pyx_obj_4cds3_4core_Var *)values[0]);

#line 1631 "dsproc3/core.pyx"
    __pyx_v_dim_index = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_dim_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1631 "dsproc3/core.pyx"
  }

#line 1631 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1631 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_coord_var", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 1631 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1631 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 1631 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_coord_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1631 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1631 "dsproc3/core.pyx"
  return NULL;

#line 1631 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1631 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v__var), __pyx_ptype_4cds3_4core_Var, 1, "_var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1631 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_114get_coord_var(__pyx_self, __pyx_v__var, __pyx_v_dim_index);

#line 1631 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1631 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1631 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1631 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1631 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1631 "dsproc3/core.pyx"
  return __pyx_r;

#line 1631 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1633
 *     return return_value
 * 
 * def get_coord_var(cds3.core.Var _var, int dim_index):             # <<<<<<<<<<<<<<
 *     """Get the coordinate variable for a variable's dimension.
 * 
 */

#line 1633 "dsproc3/core.pyx"


#line 1633 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_114get_coord_var(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v__var, int __pyx_v_dim_index) {
  struct CDSVar *__pyx_v_cds_var
#line 1633 "dsproc3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = 0
#line 1633 "dsproc3/core.pyx"
;

#line 1633 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1633 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_coord_var", 0);

  /* "dsproc3/core.pyx":1645
 *     cdef CDSVar *cds_var
 *     cdef cds3.core.Var var
 *     cds_var = dsproc_get_coord_var(_var.c_ob, dim_index)             # <<<<<<<<<<<<<<
 *     if cds_var == NULL:
 *         return None
 */

#line 1645 "dsproc3/core.pyx"
  __pyx_v_cds_var = dsproc_get_coord_var(__pyx_v__var->c_ob, __pyx_v_dim_index);

  /* "dsproc3/core.pyx":1646
 *     cdef cds3.core.Var var
 *     cds_var = dsproc_get_coord_var(_var.c_ob, dim_index)
 *     if cds_var == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     var = cds3.core.Var()
 */

#line 1646 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_cds_var == NULL);

#line 1646 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":1647
 *     cds_var = dsproc_get_coord_var(_var.c_ob, dim_index)
 *     if cds_var == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     var = cds3.core.Var()
 *     var.set_var(cds_var)
 */

#line 1647 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1647 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 1647 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 1647 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1647 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 1647 "dsproc3/core.pyx"
  }

#line 1647 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":1648
 *     if cds_var == NULL:
 *         return None
 *     var = cds3.core.Var()             # <<<<<<<<<<<<<<
 *     var.set_var(cds_var)
 *     return var
 */

#line 1648 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Var)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1648 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1648 "dsproc3/core.pyx"
  __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)__pyx_t_2);

#line 1648 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

  /* "dsproc3/core.pyx":1649
 *         return None
 *     var = cds3.core.Var()
 *     var.set_var(cds_var)             # <<<<<<<<<<<<<<
 *     return var
 * 
 */

#line 1649 "dsproc3/core.pyx"
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_var->__pyx_base.__pyx_vtab)->set_var(__pyx_v_var, __pyx_v_cds_var); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1649 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1649 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dsproc3/core.pyx":1650
 *     var = cds3.core.Var()
 *     var.set_var(cds_var)
 *     return var             # <<<<<<<<<<<<<<
 * 
 * def get_dataset_vars(
 */

#line 1650 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1650 "dsproc3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_var));

#line 1650 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_var);

#line 1650 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1650 "dsproc3/core.pyx"


#line 1650 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1650 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1650 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1650 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1650 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_coord_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1650 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1650 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1650 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_var);

#line 1650 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1650 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1650 "dsproc3/core.pyx"
  return __pyx_r;

#line 1650 "dsproc3/core.pyx"
}

#line 1650 "dsproc3/core.pyx"


#line 1650 "dsproc3/core.pyx"
/* Python wrapper */

#line 1650 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_117get_dataset_vars(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1650 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_116get_dataset_vars[] = "get_dataset_vars(Group dataset, var_names, int required, int qc_vars=False, int aqc_vars=False)\nGet variables and companion QC variables from a dataset.\n    \n    If nvars is 0 or var_names is None, the output vars array will contain\n    the pointers to the variables that are not companion QC variables. In\n    this case the variables in the vars array will be in the same order they\n    appear in the dataset. The following time and location variables will be\n    excluded from this array:\n    \n    - base_time\n    - time_offset\n    - time\n    - lat\n    - lon\n    - alt\n    \n    If nvars and var_names are specified, the output vars array will contain\n    an entry for every variable in the var_names list, and will be in the\n    specified order. Variables that are not found in the dataset will have\n    a NULL value if the required flag is set to 0. If the required flag is\n    set to 1 and a variable does not exist, an error will be generated.\n    \n    If the qc_vars argument is not NULL it will contain the pointers to the\n    companion qc_ variables. Likewise, if the aqc_vars argument is not NULL\n    it will contain the pointers to the companion aqc_ variables. If a\n    companion QC variable does not exist for a variable, the corresponding\n    entry in the QC array will be NULL.\n    \n    The memory used by the returned arrays belongs to a 'dsproc_user_...'\n    CDSVarGroup defined in the dataset and must *NOT* be freed by the calling\n    process.\n    \n    If an error occurs in this function it will be appended to the log and\n    error mail messages, and the process status will be set appropriately.\n    \n    @param dataset - the dataset\n    @param var_names - list of variable names\n    @param required - specifies if all variables in the names list are required\n\n    @retval variables if qc_vars==False and aqc_vars==False\n    @retval variables,qc_vars if qc_vars==True and aqc_vars==False\n    @retval variables,aqc_vars if qc_vars==False a""nd aqc_vars==True\n    @retval variables,qc_vars,aqc_vars if qc_vars==True and aqc_vars==True\n    @retval if error, None if qc_vars==False and aqc_vars==False\n    @retval if error, None,None if qc_vars==True and aqc_vars==False\n    @retval if error, None,None if qc_vars==False and aqc_vars==True\n    @retval if error, None,None,None if qc_vars==True and aqc_vars==True\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_117get_dataset_vars = 
#line 1650 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_dataset_vars"), (PyCFunction)__pyx_pw_7dsproc3_4core_117get_dataset_vars, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_116get_dataset_vars)};

#line 1650 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_117get_dataset_vars(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Group *__pyx_v_dataset = 0
#line 1650 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_var_names = 0
#line 1650 "dsproc3/core.pyx"
;
  int __pyx_v_required
#line 1650 "dsproc3/core.pyx"
;
  int __pyx_v_qc_vars
#line 1650 "dsproc3/core.pyx"
;
  int __pyx_v_aqc_vars
#line 1650 "dsproc3/core.pyx"
;

#line 1650 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1650 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1650 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_dataset_vars (wrapper)", 0);

#line 1650 "dsproc3/core.pyx"
  {

#line 1650 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__dataset,&__pyx_n_s__var_names,&__pyx_n_s__required,&__pyx_n_s__qc_vars,&__pyx_n_s__aqc_vars,0};

#line 1650 "dsproc3/core.pyx"
    PyObject* values[5] = {0,0,0,0,0};

#line 1650 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1650 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 1650 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1650 "dsproc3/core.pyx"
      switch (pos_args) {
        case  5: 
#line 1650 "dsproc3/core.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 1650 "dsproc3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 1650 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1650 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1650 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1650 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 1650 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1650 "dsproc3/core.pyx"
      }

#line 1650 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1650 "dsproc3/core.pyx"
      switch (pos_args) {

#line 1650 "dsproc3/core.pyx"
        case  0:

#line 1650 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dataset)) != 0)) kw_args--;
        else 
#line 1650 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1650 "dsproc3/core.pyx"
        case  1:

#line 1650 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__var_names)) != 0)) kw_args--;

#line 1650 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("get_dataset_vars", 0, 3, 5, 1); 
#line 1650 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1650 "dsproc3/core.pyx"
        }

#line 1650 "dsproc3/core.pyx"
        case  2:

#line 1650 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__required)) != 0)) kw_args--;

#line 1650 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("get_dataset_vars", 0, 3, 5, 2); 
#line 1650 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1650 "dsproc3/core.pyx"
        }

#line 1650 "dsproc3/core.pyx"
        case  3:

#line 1650 "dsproc3/core.pyx"
        if (kw_args > 0) {

#line 1650 "dsproc3/core.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__qc_vars);

#line 1650 "dsproc3/core.pyx"
          if (value) { values[3] = value; kw_args--; }

#line 1650 "dsproc3/core.pyx"
        }

#line 1650 "dsproc3/core.pyx"
        case  4:

#line 1650 "dsproc3/core.pyx"
        if (kw_args > 0) {

#line 1650 "dsproc3/core.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__aqc_vars);

#line 1650 "dsproc3/core.pyx"
          if (value) { values[4] = value; kw_args--; }

#line 1650 "dsproc3/core.pyx"
        }

#line 1650 "dsproc3/core.pyx"
      }

#line 1650 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1650 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_dataset_vars") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1650 "dsproc3/core.pyx"
      }

#line 1650 "dsproc3/core.pyx"
    } else {

#line 1650 "dsproc3/core.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: 
#line 1650 "dsproc3/core.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 1650 "dsproc3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 1650 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1650 "dsproc3/core.pyx"
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1650 "dsproc3/core.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1650 "dsproc3/core.pyx"
        break;
        default: 
#line 1650 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1650 "dsproc3/core.pyx"
      }

#line 1650 "dsproc3/core.pyx"
    }

#line 1650 "dsproc3/core.pyx"
    __pyx_v_dataset = ((struct __pyx_obj_4cds3_4core_Group *)values[0]);

#line 1650 "dsproc3/core.pyx"
    __pyx_v_var_names = values[1];

#line 1650 "dsproc3/core.pyx"
    __pyx_v_required = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_required == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1655; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1650 "dsproc3/core.pyx"
    if (values[3]) {

#line 1650 "dsproc3/core.pyx"
      __pyx_v_qc_vars = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_qc_vars == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1656; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1650 "dsproc3/core.pyx"
    } else {

      /* "dsproc3/core.pyx":1656
 *             object var_names, # iterable of strings
 *             bint required,
 *             bint qc_vars=False, # whether to also return qc_vars             # <<<<<<<<<<<<<<
 *             bint aqc_vars=False): # whether to also return aqc_vars
 *     """Get variables and companion QC variables from a dataset.
 */

#line 1656 "dsproc3/core.pyx"
      __pyx_v_qc_vars = ((int)0);

#line 1656 "dsproc3/core.pyx"
    }

#line 1656 "dsproc3/core.pyx"
    if (values[4]) {

#line 1656 "dsproc3/core.pyx"
      __pyx_v_aqc_vars = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_aqc_vars == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1657; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1656 "dsproc3/core.pyx"
    } else {

      /* "dsproc3/core.pyx":1657
 *             bint required,
 *             bint qc_vars=False, # whether to also return qc_vars
 *             bint aqc_vars=False): # whether to also return aqc_vars             # <<<<<<<<<<<<<<
 *     """Get variables and companion QC variables from a dataset.
 * 
 */

#line 1657 "dsproc3/core.pyx"
      __pyx_v_aqc_vars = ((int)0);

#line 1657 "dsproc3/core.pyx"
    }

#line 1657 "dsproc3/core.pyx"
  }

#line 1657 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1657 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_dataset_vars", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); 
#line 1657 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1657 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 1657 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_dataset_vars", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1657 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1657 "dsproc3/core.pyx"
  return NULL;

#line 1657 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1657 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dataset), __pyx_ptype_4cds3_4core_Group, 1, "dataset", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1657 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_116get_dataset_vars(__pyx_self, __pyx_v_dataset, __pyx_v_var_names, __pyx_v_required, __pyx_v_qc_vars, __pyx_v_aqc_vars);

#line 1657 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1657 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1657 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1657 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1657 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1657 "dsproc3/core.pyx"
  return __pyx_r;

#line 1657 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1652
 *     return var
 * 
 * def get_dataset_vars(             # <<<<<<<<<<<<<<
 *             cds3.core.Group dataset,
 *             object var_names, # iterable of strings
 */

#line 1652 "dsproc3/core.pyx"


#line 1652 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_116get_dataset_vars(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Group *__pyx_v_dataset, PyObject *__pyx_v_var_names, int __pyx_v_required, int __pyx_v_qc_vars, int __pyx_v_aqc_vars) {
  int __pyx_v_length
#line 1652 "dsproc3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var_tmp = 0
#line 1652 "dsproc3/core.pyx"
;
  struct CDSVar **__pyx_v__vars
#line 1652 "dsproc3/core.pyx"
;
  struct CDSVar **__pyx_v__qc_vars
#line 1652 "dsproc3/core.pyx"
;
  struct CDSVar **__pyx_v__aqc_vars
#line 1652 "dsproc3/core.pyx"
;
  char **__pyx_v_c_var_names
#line 1652 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_i = NULL
#line 1652 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_ret_vars = NULL
#line 1652 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_ret_qc_vars = NULL
#line 1652 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_ret_aqc_vars = NULL
#line 1652 "dsproc3/core.pyx"
;

#line 1652 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  char *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1652 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_dataset_vars", 0);

  /* "dsproc3/core.pyx":1708
 *     cdef int length
 *     cdef cds3.core.Var var_tmp
 *     cdef CDSVar **_vars = NULL             # <<<<<<<<<<<<<<
 *     cdef CDSVar **_qc_vars = NULL
 *     cdef CDSVar **_aqc_vars = NULL
 */

#line 1708 "dsproc3/core.pyx"
  __pyx_v__vars = NULL;

  /* "dsproc3/core.pyx":1709
 *     cdef cds3.core.Var var_tmp
 *     cdef CDSVar **_vars = NULL
 *     cdef CDSVar **_qc_vars = NULL             # <<<<<<<<<<<<<<
 *     cdef CDSVar **_aqc_vars = NULL
 *     cdef char **c_var_names = NULL
 */

#line 1709 "dsproc3/core.pyx"
  __pyx_v__qc_vars = NULL;

  /* "dsproc3/core.pyx":1710
 *     cdef CDSVar **_vars = NULL
 *     cdef CDSVar **_qc_vars = NULL
 *     cdef CDSVar **_aqc_vars = NULL             # <<<<<<<<<<<<<<
 *     cdef char **c_var_names = NULL
 *     if var_names:
 */

#line 1710 "dsproc3/core.pyx"
  __pyx_v__aqc_vars = NULL;

  /* "dsproc3/core.pyx":1711
 *     cdef CDSVar **_qc_vars = NULL
 *     cdef CDSVar **_aqc_vars = NULL
 *     cdef char **c_var_names = NULL             # <<<<<<<<<<<<<<
 *     if var_names:
 *         c_var_names = <char**>malloc((len(var_names)+1) * sizeof(char*))
 */

#line 1711 "dsproc3/core.pyx"
  __pyx_v_c_var_names = NULL;

  /* "dsproc3/core.pyx":1712
 *     cdef CDSVar **_aqc_vars = NULL
 *     cdef char **c_var_names = NULL
 *     if var_names:             # <<<<<<<<<<<<<<
 *         c_var_names = <char**>malloc((len(var_names)+1) * sizeof(char*))
 *         for i in range(len(var_names)):
 */

#line 1712 "dsproc3/core.pyx"
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_var_names); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1712 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":1713
 *     cdef char **c_var_names = NULL
 *     if var_names:
 *         c_var_names = <char**>malloc((len(var_names)+1) * sizeof(char*))             # <<<<<<<<<<<<<<
 *         for i in range(len(var_names)):
 *             c_var_names[i] = PyString_AsString(var_names[i])
 */

#line 1713 "dsproc3/core.pyx"
    __pyx_t_2 = PyObject_Length(__pyx_v_var_names); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1713 "dsproc3/core.pyx"
    __pyx_v_c_var_names = ((char **)malloc(((__pyx_t_2 + 1) * (sizeof(char *)))));

    /* "dsproc3/core.pyx":1714
 *     if var_names:
 *         c_var_names = <char**>malloc((len(var_names)+1) * sizeof(char*))
 *         for i in range(len(var_names)):             # <<<<<<<<<<<<<<
 *             c_var_names[i] = PyString_AsString(var_names[i])
 *         c_var_names[len(var_names)] = NULL
 */

#line 1714 "dsproc3/core.pyx"
    __pyx_t_2 = PyObject_Length(__pyx_v_var_names); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1714 "dsproc3/core.pyx"
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1714 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 1714 "dsproc3/core.pyx"
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1714 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 1714 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);

#line 1714 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_3);

#line 1714 "dsproc3/core.pyx"
    __pyx_t_3 = 0;

#line 1714 "dsproc3/core.pyx"
    __pyx_t_3 = PyObject_Call(__pyx_builtin_range, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1714 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 1714 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;

#line 1714 "dsproc3/core.pyx"
    if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {

#line 1714 "dsproc3/core.pyx"
      __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4); __pyx_t_2 = 0;

#line 1714 "dsproc3/core.pyx"
      __pyx_t_5 = NULL;

#line 1714 "dsproc3/core.pyx"
    } else {
      __pyx_t_2 = -1; 
#line 1714 "dsproc3/core.pyx"
__pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1714 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 1714 "dsproc3/core.pyx"
      __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;

#line 1714 "dsproc3/core.pyx"
    }

#line 1714 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1714 "dsproc3/core.pyx"
    for (;;) {

#line 1714 "dsproc3/core.pyx"
      if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_4)) {

#line 1714 "dsproc3/core.pyx"
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_4)) break;

#line 1714 "dsproc3/core.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 1714 "dsproc3/core.pyx"
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1714 "dsproc3/core.pyx"
        #else

#line 1714 "dsproc3/core.pyx"
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1714 "dsproc3/core.pyx"
        #endif
      } else 
#line 1714 "dsproc3/core.pyx"
if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_4)) {

#line 1714 "dsproc3/core.pyx"
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_4)) break;

#line 1714 "dsproc3/core.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 1714 "dsproc3/core.pyx"
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1714 "dsproc3/core.pyx"
        #else

#line 1714 "dsproc3/core.pyx"
        __pyx_t_3 = PySequence_ITEM(__pyx_t_4, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1714 "dsproc3/core.pyx"
        #endif
      } else 
#line 1714 "dsproc3/core.pyx"
{

#line 1714 "dsproc3/core.pyx"
        __pyx_t_3 = __pyx_t_5(__pyx_t_4);

#line 1714 "dsproc3/core.pyx"
        if (unlikely(!__pyx_t_3)) {

#line 1714 "dsproc3/core.pyx"
          if (PyErr_Occurred()) {

#line 1714 "dsproc3/core.pyx"
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();

#line 1714 "dsproc3/core.pyx"
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1714 "dsproc3/core.pyx"
          }

#line 1714 "dsproc3/core.pyx"
          break;

#line 1714 "dsproc3/core.pyx"
        }

#line 1714 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 1714 "dsproc3/core.pyx"
      }

#line 1714 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_v_i);

#line 1714 "dsproc3/core.pyx"
      __pyx_v_i = __pyx_t_3;

#line 1714 "dsproc3/core.pyx"
      __pyx_t_3 = 0;

      /* "dsproc3/core.pyx":1715
 *         c_var_names = <char**>malloc((len(var_names)+1) * sizeof(char*))
 *         for i in range(len(var_names)):
 *             c_var_names[i] = PyString_AsString(var_names[i])             # <<<<<<<<<<<<<<
 *         c_var_names[len(var_names)] = NULL
 *     if qc_vars and aqc_vars:
 */

#line 1715 "dsproc3/core.pyx"
      __pyx_t_3 = PyObject_GetItem(__pyx_v_var_names, __pyx_v_i); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1715 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 1715 "dsproc3/core.pyx"
      __pyx_t_6 = PyString_AsString(__pyx_t_3); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1715 "dsproc3/core.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 1715 "dsproc3/core.pyx"
      __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1715 "dsproc3/core.pyx"
      (__pyx_v_c_var_names[__pyx_t_7]) = __pyx_t_6;

#line 1715 "dsproc3/core.pyx"
    }

#line 1715 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "dsproc3/core.pyx":1716
 *         for i in range(len(var_names)):
 *             c_var_names[i] = PyString_AsString(var_names[i])
 *         c_var_names[len(var_names)] = NULL             # <<<<<<<<<<<<<<
 *     if qc_vars and aqc_vars:
 *         length = dsproc_get_dataset_vars(dataset.c_ob, c_var_names, required,
 */

#line 1716 "dsproc3/core.pyx"
    __pyx_t_2 = PyObject_Length(__pyx_v_var_names); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1716 "dsproc3/core.pyx"
    (__pyx_v_c_var_names[__pyx_t_2]) = NULL;

#line 1716 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 1716 "dsproc3/core.pyx"
  }

#line 1716 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":1717
 *             c_var_names[i] = PyString_AsString(var_names[i])
 *         c_var_names[len(var_names)] = NULL
 *     if qc_vars and aqc_vars:             # <<<<<<<<<<<<<<
 *         length = dsproc_get_dataset_vars(dataset.c_ob, c_var_names, required,
 *                 &_vars, &_qc_vars, &_aqc_vars)
 */

#line 1717 "dsproc3/core.pyx"
  if (__pyx_v_qc_vars) {

#line 1717 "dsproc3/core.pyx"
    __pyx_t_1 = __pyx_v_aqc_vars;

#line 1717 "dsproc3/core.pyx"
  } else {

#line 1717 "dsproc3/core.pyx"
    __pyx_t_1 = __pyx_v_qc_vars;

#line 1717 "dsproc3/core.pyx"
  }

#line 1717 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":1719
 *     if qc_vars and aqc_vars:
 *         length = dsproc_get_dataset_vars(dataset.c_ob, c_var_names, required,
 *                 &_vars, &_qc_vars, &_aqc_vars)             # <<<<<<<<<<<<<<
 *     elif qc_vars:
 *         length = dsproc_get_dataset_vars(dataset.c_ob, c_var_names, required,
 */

#line 1719 "dsproc3/core.pyx"
    __pyx_v_length = dsproc_get_dataset_vars(__pyx_v_dataset->c_ob, __pyx_v_c_var_names, __pyx_v_required, (&__pyx_v__vars), (&__pyx_v__qc_vars), (&__pyx_v__aqc_vars));

#line 1719 "dsproc3/core.pyx"
    goto __pyx_L6;

#line 1719 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":1720
 *         length = dsproc_get_dataset_vars(dataset.c_ob, c_var_names, required,
 *                 &_vars, &_qc_vars, &_aqc_vars)
 *     elif qc_vars:             # <<<<<<<<<<<<<<
 *         length = dsproc_get_dataset_vars(dataset.c_ob, c_var_names, required,
 *                 &_vars, &_qc_vars, NULL)
 */

#line 1720 "dsproc3/core.pyx"
  if (__pyx_v_qc_vars) {

    /* "dsproc3/core.pyx":1722
 *     elif qc_vars:
 *         length = dsproc_get_dataset_vars(dataset.c_ob, c_var_names, required,
 *                 &_vars, &_qc_vars, NULL)             # <<<<<<<<<<<<<<
 *     elif aqc_vars:
 *         length = dsproc_get_dataset_vars(dataset.c_ob, c_var_names, required,
 */

#line 1722 "dsproc3/core.pyx"
    __pyx_v_length = dsproc_get_dataset_vars(__pyx_v_dataset->c_ob, __pyx_v_c_var_names, __pyx_v_required, (&__pyx_v__vars), (&__pyx_v__qc_vars), NULL);

#line 1722 "dsproc3/core.pyx"
    goto __pyx_L6;

#line 1722 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":1723
 *         length = dsproc_get_dataset_vars(dataset.c_ob, c_var_names, required,
 *                 &_vars, &_qc_vars, NULL)
 *     elif aqc_vars:             # <<<<<<<<<<<<<<
 *         length = dsproc_get_dataset_vars(dataset.c_ob, c_var_names, required,
 *                 &_vars, NULL, &_aqc_vars)
 */

#line 1723 "dsproc3/core.pyx"
  if (__pyx_v_aqc_vars) {

    /* "dsproc3/core.pyx":1725
 *     elif aqc_vars:
 *         length = dsproc_get_dataset_vars(dataset.c_ob, c_var_names, required,
 *                 &_vars, NULL, &_aqc_vars)             # <<<<<<<<<<<<<<
 *     else:
 *         length = dsproc_get_dataset_vars(dataset.c_ob, c_var_names, required,
 */

#line 1725 "dsproc3/core.pyx"
    __pyx_v_length = dsproc_get_dataset_vars(__pyx_v_dataset->c_ob, __pyx_v_c_var_names, __pyx_v_required, (&__pyx_v__vars), NULL, (&__pyx_v__aqc_vars));

#line 1725 "dsproc3/core.pyx"
    goto __pyx_L6;

#line 1725 "dsproc3/core.pyx"
  }

#line 1725 "dsproc3/core.pyx"
  /*else*/ {

    /* "dsproc3/core.pyx":1728
 *     else:
 *         length = dsproc_get_dataset_vars(dataset.c_ob, c_var_names, required,
 *                 &_vars, NULL, NULL)             # <<<<<<<<<<<<<<
 *     if var_names:
 *         free(c_var_names)
 */

#line 1728 "dsproc3/core.pyx"
    __pyx_v_length = dsproc_get_dataset_vars(__pyx_v_dataset->c_ob, __pyx_v_c_var_names, __pyx_v_required, (&__pyx_v__vars), NULL, NULL);

#line 1728 "dsproc3/core.pyx"
  }

#line 1728 "dsproc3/core.pyx"
  __pyx_L6:;

  /* "dsproc3/core.pyx":1729
 *         length = dsproc_get_dataset_vars(dataset.c_ob, c_var_names, required,
 *                 &_vars, NULL, NULL)
 *     if var_names:             # <<<<<<<<<<<<<<
 *         free(c_var_names)
 *     if -1 == length:
 */

#line 1729 "dsproc3/core.pyx"
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_var_names); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1729 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":1730
 *                 &_vars, NULL, NULL)
 *     if var_names:
 *         free(c_var_names)             # <<<<<<<<<<<<<<
 *     if -1 == length:
 *         if qc_vars and aqc_vars:
 */

#line 1730 "dsproc3/core.pyx"
    free(__pyx_v_c_var_names);

#line 1730 "dsproc3/core.pyx"
    goto __pyx_L7;

#line 1730 "dsproc3/core.pyx"
  }

#line 1730 "dsproc3/core.pyx"
  __pyx_L7:;

  /* "dsproc3/core.pyx":1731
 *     if var_names:
 *         free(c_var_names)
 *     if -1 == length:             # <<<<<<<<<<<<<<
 *         if qc_vars and aqc_vars:
 *             return None,None,None
 */

#line 1731 "dsproc3/core.pyx"
  __pyx_t_1 = (-1 == __pyx_v_length);

#line 1731 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":1732
 *         free(c_var_names)
 *     if -1 == length:
 *         if qc_vars and aqc_vars:             # <<<<<<<<<<<<<<
 *             return None,None,None
 *         elif qc_vars or aqc_vars:
 */

#line 1732 "dsproc3/core.pyx"
    if (__pyx_v_qc_vars) {

#line 1732 "dsproc3/core.pyx"
      __pyx_t_1 = __pyx_v_aqc_vars;

#line 1732 "dsproc3/core.pyx"
    } else {

#line 1732 "dsproc3/core.pyx"
      __pyx_t_1 = __pyx_v_qc_vars;

#line 1732 "dsproc3/core.pyx"
    }

#line 1732 "dsproc3/core.pyx"
    if (__pyx_t_1) {

      /* "dsproc3/core.pyx":1733
 *     if -1 == length:
 *         if qc_vars and aqc_vars:
 *             return None,None,None             # <<<<<<<<<<<<<<
 *         elif qc_vars or aqc_vars:
 *             return None,None
 */

#line 1733 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_r);

#line 1733 "dsproc3/core.pyx"
      __Pyx_INCREF(((PyObject *)__pyx_k_tuple_57));

#line 1733 "dsproc3/core.pyx"
      __pyx_r = ((PyObject *)__pyx_k_tuple_57);

#line 1733 "dsproc3/core.pyx"
      goto __pyx_L0;

#line 1733 "dsproc3/core.pyx"
      goto __pyx_L9;

#line 1733 "dsproc3/core.pyx"
    }

    /* "dsproc3/core.pyx":1734
 *         if qc_vars and aqc_vars:
 *             return None,None,None
 *         elif qc_vars or aqc_vars:             # <<<<<<<<<<<<<<
 *             return None,None
 *         else:
 */

#line 1734 "dsproc3/core.pyx"
    if (!__pyx_v_qc_vars) {

#line 1734 "dsproc3/core.pyx"
      __pyx_t_1 = __pyx_v_aqc_vars;

#line 1734 "dsproc3/core.pyx"
    } else {

#line 1734 "dsproc3/core.pyx"
      __pyx_t_1 = __pyx_v_qc_vars;

#line 1734 "dsproc3/core.pyx"
    }

#line 1734 "dsproc3/core.pyx"
    if (__pyx_t_1) {

      /* "dsproc3/core.pyx":1735
 *             return None,None,None
 *         elif qc_vars or aqc_vars:
 *             return None,None             # <<<<<<<<<<<<<<
 *         else:
 *             return None
 */

#line 1735 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_r);

#line 1735 "dsproc3/core.pyx"
      __Pyx_INCREF(((PyObject *)__pyx_k_tuple_58));

#line 1735 "dsproc3/core.pyx"
      __pyx_r = ((PyObject *)__pyx_k_tuple_58);

#line 1735 "dsproc3/core.pyx"
      goto __pyx_L0;

#line 1735 "dsproc3/core.pyx"
      goto __pyx_L9;

#line 1735 "dsproc3/core.pyx"
    }

#line 1735 "dsproc3/core.pyx"
    /*else*/ {

      /* "dsproc3/core.pyx":1737
 *             return None,None
 *         else:
 *             return None             # <<<<<<<<<<<<<<
 *     ret_vars = [None]*length
 *     ret_qc_vars = [None]*length
 */

#line 1737 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_r);

#line 1737 "dsproc3/core.pyx"
      __Pyx_INCREF(Py_None);

#line 1737 "dsproc3/core.pyx"
      __pyx_r = Py_None;

#line 1737 "dsproc3/core.pyx"
      goto __pyx_L0;

#line 1737 "dsproc3/core.pyx"
    }

#line 1737 "dsproc3/core.pyx"
    __pyx_L9:;

#line 1737 "dsproc3/core.pyx"
    goto __pyx_L8;

#line 1737 "dsproc3/core.pyx"
  }

#line 1737 "dsproc3/core.pyx"
  __pyx_L8:;

  /* "dsproc3/core.pyx":1738
 *         else:
 *             return None
 *     ret_vars = [None]*length             # <<<<<<<<<<<<<<
 *     ret_qc_vars = [None]*length
 *     ret_aqc_vars = [None]*length
 */

#line 1738 "dsproc3/core.pyx"
  __pyx_t_4 = PyList_New(1 * ((__pyx_v_length<0) ? 0:__pyx_v_length)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1738 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 1738 "dsproc3/core.pyx"
  { Py_ssize_t __pyx_temp;

#line 1738 "dsproc3/core.pyx"
    for (__pyx_temp=0; __pyx_temp < __pyx_v_length; __pyx_temp++) {

#line 1738 "dsproc3/core.pyx"
      __Pyx_INCREF(Py_None);

#line 1738 "dsproc3/core.pyx"
      PyList_SET_ITEM(__pyx_t_4, __pyx_temp, Py_None);

#line 1738 "dsproc3/core.pyx"
      __Pyx_GIVEREF(Py_None);

#line 1738 "dsproc3/core.pyx"
    }

#line 1738 "dsproc3/core.pyx"
  }

#line 1738 "dsproc3/core.pyx"
  __pyx_v_ret_vars = ((PyObject*)__pyx_t_4);

#line 1738 "dsproc3/core.pyx"
  __pyx_t_4 = 0;

  /* "dsproc3/core.pyx":1739
 *             return None
 *     ret_vars = [None]*length
 *     ret_qc_vars = [None]*length             # <<<<<<<<<<<<<<
 *     ret_aqc_vars = [None]*length
 *     for i in range(length):
 */

#line 1739 "dsproc3/core.pyx"
  __pyx_t_4 = PyList_New(1 * ((__pyx_v_length<0) ? 0:__pyx_v_length)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1739; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1739 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 1739 "dsproc3/core.pyx"
  { Py_ssize_t __pyx_temp;

#line 1739 "dsproc3/core.pyx"
    for (__pyx_temp=0; __pyx_temp < __pyx_v_length; __pyx_temp++) {

#line 1739 "dsproc3/core.pyx"
      __Pyx_INCREF(Py_None);

#line 1739 "dsproc3/core.pyx"
      PyList_SET_ITEM(__pyx_t_4, __pyx_temp, Py_None);

#line 1739 "dsproc3/core.pyx"
      __Pyx_GIVEREF(Py_None);

#line 1739 "dsproc3/core.pyx"
    }

#line 1739 "dsproc3/core.pyx"
  }

#line 1739 "dsproc3/core.pyx"
  __pyx_v_ret_qc_vars = ((PyObject*)__pyx_t_4);

#line 1739 "dsproc3/core.pyx"
  __pyx_t_4 = 0;

  /* "dsproc3/core.pyx":1740
 *     ret_vars = [None]*length
 *     ret_qc_vars = [None]*length
 *     ret_aqc_vars = [None]*length             # <<<<<<<<<<<<<<
 *     for i in range(length):
 *         if _vars and _vars[i]:
 */

#line 1740 "dsproc3/core.pyx"
  __pyx_t_4 = PyList_New(1 * ((__pyx_v_length<0) ? 0:__pyx_v_length)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1740 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 1740 "dsproc3/core.pyx"
  { Py_ssize_t __pyx_temp;

#line 1740 "dsproc3/core.pyx"
    for (__pyx_temp=0; __pyx_temp < __pyx_v_length; __pyx_temp++) {

#line 1740 "dsproc3/core.pyx"
      __Pyx_INCREF(Py_None);

#line 1740 "dsproc3/core.pyx"
      PyList_SET_ITEM(__pyx_t_4, __pyx_temp, Py_None);

#line 1740 "dsproc3/core.pyx"
      __Pyx_GIVEREF(Py_None);

#line 1740 "dsproc3/core.pyx"
    }

#line 1740 "dsproc3/core.pyx"
  }

#line 1740 "dsproc3/core.pyx"
  __pyx_v_ret_aqc_vars = ((PyObject*)__pyx_t_4);

#line 1740 "dsproc3/core.pyx"
  __pyx_t_4 = 0;

  /* "dsproc3/core.pyx":1741
 *     ret_qc_vars = [None]*length
 *     ret_aqc_vars = [None]*length
 *     for i in range(length):             # <<<<<<<<<<<<<<
 *         if _vars and _vars[i]:
 *             var_tmp = cds3.core.Var()
 */

#line 1741 "dsproc3/core.pyx"
  __pyx_t_4 = PyInt_FromLong(__pyx_v_length); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1741 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 1741 "dsproc3/core.pyx"
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1741 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 1741 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);

#line 1741 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 1741 "dsproc3/core.pyx"
  __pyx_t_4 = 0;

#line 1741 "dsproc3/core.pyx"
  __pyx_t_4 = PyObject_Call(__pyx_builtin_range, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1741 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 1741 "dsproc3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 1741 "dsproc3/core.pyx"
  if (PyList_CheckExact(__pyx_t_4) || PyTuple_CheckExact(__pyx_t_4)) {

#line 1741 "dsproc3/core.pyx"
    __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_2 = 0;

#line 1741 "dsproc3/core.pyx"
    __pyx_t_5 = NULL;

#line 1741 "dsproc3/core.pyx"
  } else {
    __pyx_t_2 = -1; 
#line 1741 "dsproc3/core.pyx"
__pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1741 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 1741 "dsproc3/core.pyx"
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext;

#line 1741 "dsproc3/core.pyx"
  }

#line 1741 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 1741 "dsproc3/core.pyx"
  for (;;) {

#line 1741 "dsproc3/core.pyx"
    if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_3)) {

#line 1741 "dsproc3/core.pyx"
      if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_3)) break;

#line 1741 "dsproc3/core.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 1741 "dsproc3/core.pyx"
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1741 "dsproc3/core.pyx"
      #else

#line 1741 "dsproc3/core.pyx"
      __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1741 "dsproc3/core.pyx"
      #endif
    } else 
#line 1741 "dsproc3/core.pyx"
if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_3)) {

#line 1741 "dsproc3/core.pyx"
      if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_3)) break;

#line 1741 "dsproc3/core.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 1741 "dsproc3/core.pyx"
      __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1741 "dsproc3/core.pyx"
      #else

#line 1741 "dsproc3/core.pyx"
      __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1741 "dsproc3/core.pyx"
      #endif
    } else 
#line 1741 "dsproc3/core.pyx"
{

#line 1741 "dsproc3/core.pyx"
      __pyx_t_4 = __pyx_t_5(__pyx_t_3);

#line 1741 "dsproc3/core.pyx"
      if (unlikely(!__pyx_t_4)) {

#line 1741 "dsproc3/core.pyx"
        if (PyErr_Occurred()) {

#line 1741 "dsproc3/core.pyx"
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();

#line 1741 "dsproc3/core.pyx"
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1741; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1741 "dsproc3/core.pyx"
        }

#line 1741 "dsproc3/core.pyx"
        break;

#line 1741 "dsproc3/core.pyx"
      }

#line 1741 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 1741 "dsproc3/core.pyx"
    }

#line 1741 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_v_i);

#line 1741 "dsproc3/core.pyx"
    __pyx_v_i = __pyx_t_4;

#line 1741 "dsproc3/core.pyx"
    __pyx_t_4 = 0;

    /* "dsproc3/core.pyx":1742
 *     ret_aqc_vars = [None]*length
 *     for i in range(length):
 *         if _vars and _vars[i]:             # <<<<<<<<<<<<<<
 *             var_tmp = cds3.core.Var()
 *             var_tmp.set_var(_vars[i])
 */

#line 1742 "dsproc3/core.pyx"
    if ((__pyx_v__vars != 0)) {

#line 1742 "dsproc3/core.pyx"
      __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1742; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1742 "dsproc3/core.pyx"
      __pyx_t_1 = ((__pyx_v__vars[__pyx_t_7]) != 0);

#line 1742 "dsproc3/core.pyx"
    } else {

#line 1742 "dsproc3/core.pyx"
      __pyx_t_1 = (__pyx_v__vars != 0);

#line 1742 "dsproc3/core.pyx"
    }

#line 1742 "dsproc3/core.pyx"
    if (__pyx_t_1) {

      /* "dsproc3/core.pyx":1743
 *     for i in range(length):
 *         if _vars and _vars[i]:
 *             var_tmp = cds3.core.Var()             # <<<<<<<<<<<<<<
 *             var_tmp.set_var(_vars[i])
 *             ret_vars[i] = var_tmp
 */

#line 1743 "dsproc3/core.pyx"
      __pyx_t_4 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Var)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1743 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 1743 "dsproc3/core.pyx"
      __Pyx_XDECREF(((PyObject *)__pyx_v_var_tmp));

#line 1743 "dsproc3/core.pyx"
      __pyx_v_var_tmp = ((struct __pyx_obj_4cds3_4core_Var *)__pyx_t_4);

#line 1743 "dsproc3/core.pyx"
      __pyx_t_4 = 0;

      /* "dsproc3/core.pyx":1744
 *         if _vars and _vars[i]:
 *             var_tmp = cds3.core.Var()
 *             var_tmp.set_var(_vars[i])             # <<<<<<<<<<<<<<
 *             ret_vars[i] = var_tmp
 *         if qc_vars and _qc_vars and _qc_vars[i]:
 */

#line 1744 "dsproc3/core.pyx"
      __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1744 "dsproc3/core.pyx"
      __pyx_t_4 = ((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_var_tmp->__pyx_base.__pyx_vtab)->set_var(__pyx_v_var_tmp, (__pyx_v__vars[__pyx_t_7])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1744 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 1744 "dsproc3/core.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "dsproc3/core.pyx":1745
 *             var_tmp = cds3.core.Var()
 *             var_tmp.set_var(_vars[i])
 *             ret_vars[i] = var_tmp             # <<<<<<<<<<<<<<
 *         if qc_vars and _qc_vars and _qc_vars[i]:
 *             var_tmp = cds3.core.Var()
 */

#line 1745 "dsproc3/core.pyx"
      if (PyObject_SetItem(((PyObject *)__pyx_v_ret_vars), __pyx_v_i, ((PyObject *)__pyx_v_var_tmp)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1745 "dsproc3/core.pyx"
      goto __pyx_L12;

#line 1745 "dsproc3/core.pyx"
    }

#line 1745 "dsproc3/core.pyx"
    __pyx_L12:;

    /* "dsproc3/core.pyx":1746
 *             var_tmp.set_var(_vars[i])
 *             ret_vars[i] = var_tmp
 *         if qc_vars and _qc_vars and _qc_vars[i]:             # <<<<<<<<<<<<<<
 *             var_tmp = cds3.core.Var()
 *             var_tmp.set_var(_qc_vars[i])
 */

#line 1746 "dsproc3/core.pyx"
    if (__pyx_v_qc_vars) {

#line 1746 "dsproc3/core.pyx"
      if ((__pyx_v__qc_vars != 0)) {

#line 1746 "dsproc3/core.pyx"
        __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1746 "dsproc3/core.pyx"
        __pyx_t_1 = ((__pyx_v__qc_vars[__pyx_t_7]) != 0);

#line 1746 "dsproc3/core.pyx"
      } else {

#line 1746 "dsproc3/core.pyx"
        __pyx_t_1 = (__pyx_v__qc_vars != 0);

#line 1746 "dsproc3/core.pyx"
      }

#line 1746 "dsproc3/core.pyx"
      __pyx_t_8 = __pyx_t_1;

#line 1746 "dsproc3/core.pyx"
    } else {

#line 1746 "dsproc3/core.pyx"
      __pyx_t_8 = __pyx_v_qc_vars;

#line 1746 "dsproc3/core.pyx"
    }

#line 1746 "dsproc3/core.pyx"
    if (__pyx_t_8) {

      /* "dsproc3/core.pyx":1747
 *             ret_vars[i] = var_tmp
 *         if qc_vars and _qc_vars and _qc_vars[i]:
 *             var_tmp = cds3.core.Var()             # <<<<<<<<<<<<<<
 *             var_tmp.set_var(_qc_vars[i])
 *             ret_qc_vars[i] = var_tmp
 */

#line 1747 "dsproc3/core.pyx"
      __pyx_t_4 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Var)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1747 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 1747 "dsproc3/core.pyx"
      __Pyx_XDECREF(((PyObject *)__pyx_v_var_tmp));

#line 1747 "dsproc3/core.pyx"
      __pyx_v_var_tmp = ((struct __pyx_obj_4cds3_4core_Var *)__pyx_t_4);

#line 1747 "dsproc3/core.pyx"
      __pyx_t_4 = 0;

      /* "dsproc3/core.pyx":1748
 *         if qc_vars and _qc_vars and _qc_vars[i]:
 *             var_tmp = cds3.core.Var()
 *             var_tmp.set_var(_qc_vars[i])             # <<<<<<<<<<<<<<
 *             ret_qc_vars[i] = var_tmp
 *         if aqc_vars and _aqc_vars and _aqc_vars[i]:
 */

#line 1748 "dsproc3/core.pyx"
      __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1748 "dsproc3/core.pyx"
      __pyx_t_4 = ((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_var_tmp->__pyx_base.__pyx_vtab)->set_var(__pyx_v_var_tmp, (__pyx_v__qc_vars[__pyx_t_7])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1748 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 1748 "dsproc3/core.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "dsproc3/core.pyx":1749
 *             var_tmp = cds3.core.Var()
 *             var_tmp.set_var(_qc_vars[i])
 *             ret_qc_vars[i] = var_tmp             # <<<<<<<<<<<<<<
 *         if aqc_vars and _aqc_vars and _aqc_vars[i]:
 *             var_tmp = cds3.core.Var()
 */

#line 1749 "dsproc3/core.pyx"
      if (PyObject_SetItem(((PyObject *)__pyx_v_ret_qc_vars), __pyx_v_i, ((PyObject *)__pyx_v_var_tmp)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1749 "dsproc3/core.pyx"
      goto __pyx_L13;

#line 1749 "dsproc3/core.pyx"
    }

#line 1749 "dsproc3/core.pyx"
    __pyx_L13:;

    /* "dsproc3/core.pyx":1750
 *             var_tmp.set_var(_qc_vars[i])
 *             ret_qc_vars[i] = var_tmp
 *         if aqc_vars and _aqc_vars and _aqc_vars[i]:             # <<<<<<<<<<<<<<
 *             var_tmp = cds3.core.Var()
 *             var_tmp.set_var(_aqc_vars[i])
 */

#line 1750 "dsproc3/core.pyx"
    if (__pyx_v_aqc_vars) {

#line 1750 "dsproc3/core.pyx"
      if ((__pyx_v__aqc_vars != 0)) {

#line 1750 "dsproc3/core.pyx"
        __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1750 "dsproc3/core.pyx"
        __pyx_t_8 = ((__pyx_v__aqc_vars[__pyx_t_7]) != 0);

#line 1750 "dsproc3/core.pyx"
      } else {

#line 1750 "dsproc3/core.pyx"
        __pyx_t_8 = (__pyx_v__aqc_vars != 0);

#line 1750 "dsproc3/core.pyx"
      }

#line 1750 "dsproc3/core.pyx"
      __pyx_t_1 = __pyx_t_8;

#line 1750 "dsproc3/core.pyx"
    } else {

#line 1750 "dsproc3/core.pyx"
      __pyx_t_1 = __pyx_v_aqc_vars;

#line 1750 "dsproc3/core.pyx"
    }

#line 1750 "dsproc3/core.pyx"
    if (__pyx_t_1) {

      /* "dsproc3/core.pyx":1751
 *             ret_qc_vars[i] = var_tmp
 *         if aqc_vars and _aqc_vars and _aqc_vars[i]:
 *             var_tmp = cds3.core.Var()             # <<<<<<<<<<<<<<
 *             var_tmp.set_var(_aqc_vars[i])
 *             ret_aqc_vars[i] = var_tmp
 */

#line 1751 "dsproc3/core.pyx"
      __pyx_t_4 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Var)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1751; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1751 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 1751 "dsproc3/core.pyx"
      __Pyx_XDECREF(((PyObject *)__pyx_v_var_tmp));

#line 1751 "dsproc3/core.pyx"
      __pyx_v_var_tmp = ((struct __pyx_obj_4cds3_4core_Var *)__pyx_t_4);

#line 1751 "dsproc3/core.pyx"
      __pyx_t_4 = 0;

      /* "dsproc3/core.pyx":1752
 *         if aqc_vars and _aqc_vars and _aqc_vars[i]:
 *             var_tmp = cds3.core.Var()
 *             var_tmp.set_var(_aqc_vars[i])             # <<<<<<<<<<<<<<
 *             ret_aqc_vars[i] = var_tmp
 *     if qc_vars and aqc_vars:
 */

#line 1752 "dsproc3/core.pyx"
      __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1752 "dsproc3/core.pyx"
      __pyx_t_4 = ((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_var_tmp->__pyx_base.__pyx_vtab)->set_var(__pyx_v_var_tmp, (__pyx_v__aqc_vars[__pyx_t_7])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1752 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 1752 "dsproc3/core.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "dsproc3/core.pyx":1753
 *             var_tmp = cds3.core.Var()
 *             var_tmp.set_var(_aqc_vars[i])
 *             ret_aqc_vars[i] = var_tmp             # <<<<<<<<<<<<<<
 *     if qc_vars and aqc_vars:
 *         return ret_vars,ret_qc_vars,ret_aqc_vars
 */

#line 1753 "dsproc3/core.pyx"
      if (PyObject_SetItem(((PyObject *)__pyx_v_ret_aqc_vars), __pyx_v_i, ((PyObject *)__pyx_v_var_tmp)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1753 "dsproc3/core.pyx"
      goto __pyx_L14;

#line 1753 "dsproc3/core.pyx"
    }

#line 1753 "dsproc3/core.pyx"
    __pyx_L14:;

#line 1753 "dsproc3/core.pyx"
  }

#line 1753 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "dsproc3/core.pyx":1754
 *             var_tmp.set_var(_aqc_vars[i])
 *             ret_aqc_vars[i] = var_tmp
 *     if qc_vars and aqc_vars:             # <<<<<<<<<<<<<<
 *         return ret_vars,ret_qc_vars,ret_aqc_vars
 *     elif qc_vars:
 */

#line 1754 "dsproc3/core.pyx"
  if (__pyx_v_qc_vars) {

#line 1754 "dsproc3/core.pyx"
    __pyx_t_1 = __pyx_v_aqc_vars;

#line 1754 "dsproc3/core.pyx"
  } else {

#line 1754 "dsproc3/core.pyx"
    __pyx_t_1 = __pyx_v_qc_vars;

#line 1754 "dsproc3/core.pyx"
  }

#line 1754 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":1755
 *             ret_aqc_vars[i] = var_tmp
 *     if qc_vars and aqc_vars:
 *         return ret_vars,ret_qc_vars,ret_aqc_vars             # <<<<<<<<<<<<<<
 *     elif qc_vars:
 *         return ret_vars,ret_qc_vars
 */

#line 1755 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1755 "dsproc3/core.pyx"
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1755; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1755 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 1755 "dsproc3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_ret_vars));

#line 1755 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_ret_vars));

#line 1755 "dsproc3/core.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_v_ret_vars));

#line 1755 "dsproc3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_ret_qc_vars));

#line 1755 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_ret_qc_vars));

#line 1755 "dsproc3/core.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_v_ret_qc_vars));

#line 1755 "dsproc3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_ret_aqc_vars));

#line 1755 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 2, ((PyObject *)__pyx_v_ret_aqc_vars));

#line 1755 "dsproc3/core.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_v_ret_aqc_vars));

#line 1755 "dsproc3/core.pyx"
    __pyx_r = ((PyObject *)__pyx_t_3);

#line 1755 "dsproc3/core.pyx"
    __pyx_t_3 = 0;

#line 1755 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1755 "dsproc3/core.pyx"
    goto __pyx_L15;

#line 1755 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":1756
 *     if qc_vars and aqc_vars:
 *         return ret_vars,ret_qc_vars,ret_aqc_vars
 *     elif qc_vars:             # <<<<<<<<<<<<<<
 *         return ret_vars,ret_qc_vars
 *     elif aqc_vars:
 */

#line 1756 "dsproc3/core.pyx"
  if (__pyx_v_qc_vars) {

    /* "dsproc3/core.pyx":1757
 *         return ret_vars,ret_qc_vars,ret_aqc_vars
 *     elif qc_vars:
 *         return ret_vars,ret_qc_vars             # <<<<<<<<<<<<<<
 *     elif aqc_vars:
 *         return ret_vars,ret_aqc_vars
 */

#line 1757 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1757 "dsproc3/core.pyx"
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1757; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1757 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 1757 "dsproc3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_ret_vars));

#line 1757 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_ret_vars));

#line 1757 "dsproc3/core.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_v_ret_vars));

#line 1757 "dsproc3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_ret_qc_vars));

#line 1757 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_ret_qc_vars));

#line 1757 "dsproc3/core.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_v_ret_qc_vars));

#line 1757 "dsproc3/core.pyx"
    __pyx_r = ((PyObject *)__pyx_t_3);

#line 1757 "dsproc3/core.pyx"
    __pyx_t_3 = 0;

#line 1757 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1757 "dsproc3/core.pyx"
    goto __pyx_L15;

#line 1757 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":1758
 *     elif qc_vars:
 *         return ret_vars,ret_qc_vars
 *     elif aqc_vars:             # <<<<<<<<<<<<<<
 *         return ret_vars,ret_aqc_vars
 *     else:
 */

#line 1758 "dsproc3/core.pyx"
  if (__pyx_v_aqc_vars) {

    /* "dsproc3/core.pyx":1759
 *         return ret_vars,ret_qc_vars
 *     elif aqc_vars:
 *         return ret_vars,ret_aqc_vars             # <<<<<<<<<<<<<<
 *     else:
 *         return ret_vars
 */

#line 1759 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1759 "dsproc3/core.pyx"
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1759; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1759 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 1759 "dsproc3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_ret_vars));

#line 1759 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_ret_vars));

#line 1759 "dsproc3/core.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_v_ret_vars));

#line 1759 "dsproc3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_ret_aqc_vars));

#line 1759 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_ret_aqc_vars));

#line 1759 "dsproc3/core.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_v_ret_aqc_vars));

#line 1759 "dsproc3/core.pyx"
    __pyx_r = ((PyObject *)__pyx_t_3);

#line 1759 "dsproc3/core.pyx"
    __pyx_t_3 = 0;

#line 1759 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1759 "dsproc3/core.pyx"
    goto __pyx_L15;

#line 1759 "dsproc3/core.pyx"
  }

#line 1759 "dsproc3/core.pyx"
  /*else*/ {

    /* "dsproc3/core.pyx":1761
 *         return ret_vars,ret_aqc_vars
 *     else:
 *         return ret_vars             # <<<<<<<<<<<<<<
 * 
 * def get_metric_var(cds3.core.Var var, char *metric):
 */

#line 1761 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1761 "dsproc3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_ret_vars));

#line 1761 "dsproc3/core.pyx"
    __pyx_r = ((PyObject *)__pyx_v_ret_vars);

#line 1761 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1761 "dsproc3/core.pyx"
  }

#line 1761 "dsproc3/core.pyx"
  __pyx_L15:;

#line 1761 "dsproc3/core.pyx"


#line 1761 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1761 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1761 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1761 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 1761 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 1761 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_dataset_vars", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1761 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1761 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1761 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_var_tmp);

#line 1761 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_i);

#line 1761 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_ret_vars);

#line 1761 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_ret_qc_vars);

#line 1761 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_ret_aqc_vars);

#line 1761 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1761 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1761 "dsproc3/core.pyx"
  return __pyx_r;

#line 1761 "dsproc3/core.pyx"
}

#line 1761 "dsproc3/core.pyx"


#line 1761 "dsproc3/core.pyx"
/* Python wrapper */

#line 1761 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_119get_metric_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1761 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_118get_metric_var[] = "get_metric_var(Var var, char *metric)\nGet a companion metric variable for a variable.\n    \n    Known metrics at the time of this writing (so there may be others):\n    \n    - \"frac\": the fraction of available input values used\n    - \"std\": the standard deviation of the calculated value\n    \n    @param var - pointer to the variable\n    @param metric - name of the metric\n    \n    @retval the metric variable\n    @retval None if not found\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_119get_metric_var = 
#line 1761 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_metric_var"), (PyCFunction)__pyx_pw_7dsproc3_4core_119get_metric_var, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_118get_metric_var)};

#line 1761 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_119get_metric_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = 0
#line 1761 "dsproc3/core.pyx"
;
  char *__pyx_v_metric
#line 1761 "dsproc3/core.pyx"
;

#line 1761 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1761 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1761 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_metric_var (wrapper)", 0);

#line 1761 "dsproc3/core.pyx"
  {

#line 1761 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__var,&__pyx_n_s__metric,0};

#line 1761 "dsproc3/core.pyx"
    PyObject* values[2] = {0,0};

#line 1761 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1761 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 1761 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1761 "dsproc3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 1761 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1761 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1761 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 1761 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1761 "dsproc3/core.pyx"
      }

#line 1761 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1761 "dsproc3/core.pyx"
      switch (pos_args) {

#line 1761 "dsproc3/core.pyx"
        case  0:

#line 1761 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__var)) != 0)) kw_args--;
        else 
#line 1761 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1761 "dsproc3/core.pyx"
        case  1:

#line 1761 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__metric)) != 0)) kw_args--;

#line 1761 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("get_metric_var", 1, 2, 2, 1); 
#line 1761 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1763; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1761 "dsproc3/core.pyx"
        }

#line 1761 "dsproc3/core.pyx"
      }

#line 1761 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1761 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_metric_var") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1763; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1761 "dsproc3/core.pyx"
      }

#line 1761 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 1761 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1761 "dsproc3/core.pyx"
    } else {

#line 1761 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1761 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1761 "dsproc3/core.pyx"
    }

#line 1761 "dsproc3/core.pyx"
    __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)values[0]);

#line 1761 "dsproc3/core.pyx"
    __pyx_v_metric = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_metric) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1763; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1761 "dsproc3/core.pyx"
  }

#line 1761 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1761 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_metric_var", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 1761 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1763; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1761 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 1761 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_metric_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1761 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1761 "dsproc3/core.pyx"
  return NULL;

#line 1761 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1761 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_var), __pyx_ptype_4cds3_4core_Var, 1, "var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1761 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_118get_metric_var(__pyx_self, __pyx_v_var, __pyx_v_metric);

#line 1761 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1761 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1761 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1761 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1761 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1761 "dsproc3/core.pyx"
  return __pyx_r;

#line 1761 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1763
 *         return ret_vars
 * 
 * def get_metric_var(cds3.core.Var var, char *metric):             # <<<<<<<<<<<<<<
 *     """Get a companion metric variable for a variable.
 * 
 */

#line 1763 "dsproc3/core.pyx"


#line 1763 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_118get_metric_var(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var, char *__pyx_v_metric) {
  struct CDSVar *__pyx_v_cds_var
#line 1763 "dsproc3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_metric_var = 0
#line 1763 "dsproc3/core.pyx"
;

#line 1763 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1763 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_metric_var", 0);

  /* "dsproc3/core.pyx":1780
 *     cdef CDSVar *cds_var
 *     cdef cds3.core.Var metric_var
 *     cds_var = dsproc_get_metric_var(var.c_ob, metric)             # <<<<<<<<<<<<<<
 *     if cds_var == NULL:
 *         return None
 */

#line 1780 "dsproc3/core.pyx"
  __pyx_v_cds_var = dsproc_get_metric_var(__pyx_v_var->c_ob, __pyx_v_metric);

  /* "dsproc3/core.pyx":1781
 *     cdef cds3.core.Var metric_var
 *     cds_var = dsproc_get_metric_var(var.c_ob, metric)
 *     if cds_var == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     metric_var = cds3.core.Var()
 */

#line 1781 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_cds_var == NULL);

#line 1781 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":1782
 *     cds_var = dsproc_get_metric_var(var.c_ob, metric)
 *     if cds_var == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     metric_var = cds3.core.Var()
 *     metric_var.set_var(cds_var)
 */

#line 1782 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1782 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 1782 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 1782 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1782 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 1782 "dsproc3/core.pyx"
  }

#line 1782 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":1783
 *     if cds_var == NULL:
 *         return None
 *     metric_var = cds3.core.Var()             # <<<<<<<<<<<<<<
 *     metric_var.set_var(cds_var)
 *     return metric_var
 */

#line 1783 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Var)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1783; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1783 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1783 "dsproc3/core.pyx"
  __pyx_v_metric_var = ((struct __pyx_obj_4cds3_4core_Var *)__pyx_t_2);

#line 1783 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

  /* "dsproc3/core.pyx":1784
 *         return None
 *     metric_var = cds3.core.Var()
 *     metric_var.set_var(cds_var)             # <<<<<<<<<<<<<<
 *     return metric_var
 * 
 */

#line 1784 "dsproc3/core.pyx"
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_metric_var->__pyx_base.__pyx_vtab)->set_var(__pyx_v_metric_var, __pyx_v_cds_var); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1784; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1784 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1784 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dsproc3/core.pyx":1785
 *     metric_var = cds3.core.Var()
 *     metric_var.set_var(cds_var)
 *     return metric_var             # <<<<<<<<<<<<<<
 * 
 * def get_output_var(int ds_id, char *var_name, int obs_index=0):
 */

#line 1785 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1785 "dsproc3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_metric_var));

#line 1785 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_metric_var);

#line 1785 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1785 "dsproc3/core.pyx"


#line 1785 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1785 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1785 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1785 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1785 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_metric_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1785 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1785 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1785 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_metric_var);

#line 1785 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1785 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1785 "dsproc3/core.pyx"
  return __pyx_r;

#line 1785 "dsproc3/core.pyx"
}

#line 1785 "dsproc3/core.pyx"


#line 1785 "dsproc3/core.pyx"
/* Python wrapper */

#line 1785 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_121get_output_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1785 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_120get_output_var[] = "get_output_var(int ds_id, char *var_name, int obs_index=0)\nGet a variable from an output dataset.\n    \n    The obs_index should always be zero unless observation based processing is\n    being used. This is because all input observations should have been merged\n    into a single observation in the output datasets.\n    \n    @param ds_id - output datastream ID\n    @param var_name - variable name\n    @param obs_index - the index of the obervation to get the dataset for\n    \n    @retval pointer to the output variable\n    @retval None if it does not exist\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_121get_output_var = 
#line 1785 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_output_var"), (PyCFunction)__pyx_pw_7dsproc3_4core_121get_output_var, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_120get_output_var)};

#line 1785 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_121get_output_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_ds_id
#line 1785 "dsproc3/core.pyx"
;
  char *__pyx_v_var_name
#line 1785 "dsproc3/core.pyx"
;
  int __pyx_v_obs_index
#line 1785 "dsproc3/core.pyx"
;

#line 1785 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1785 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1785 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_output_var (wrapper)", 0);

#line 1785 "dsproc3/core.pyx"
  {

#line 1785 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__ds_id,&__pyx_n_s__var_name,&__pyx_n_s__obs_index,0};

#line 1785 "dsproc3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 1785 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1785 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 1785 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1785 "dsproc3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 1785 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1785 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1785 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1785 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 1785 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1785 "dsproc3/core.pyx"
      }

#line 1785 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1785 "dsproc3/core.pyx"
      switch (pos_args) {

#line 1785 "dsproc3/core.pyx"
        case  0:

#line 1785 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ds_id)) != 0)) kw_args--;
        else 
#line 1785 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1785 "dsproc3/core.pyx"
        case  1:

#line 1785 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__var_name)) != 0)) kw_args--;

#line 1785 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("get_output_var", 0, 2, 3, 1); 
#line 1785 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1787; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1785 "dsproc3/core.pyx"
        }

#line 1785 "dsproc3/core.pyx"
        case  2:

#line 1785 "dsproc3/core.pyx"
        if (kw_args > 0) {

#line 1785 "dsproc3/core.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__obs_index);

#line 1785 "dsproc3/core.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 1785 "dsproc3/core.pyx"
        }

#line 1785 "dsproc3/core.pyx"
      }

#line 1785 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1785 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_output_var") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1787; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1785 "dsproc3/core.pyx"
      }

#line 1785 "dsproc3/core.pyx"
    } else {

#line 1785 "dsproc3/core.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: 
#line 1785 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1785 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1785 "dsproc3/core.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1785 "dsproc3/core.pyx"
        break;
        default: 
#line 1785 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1785 "dsproc3/core.pyx"
      }

#line 1785 "dsproc3/core.pyx"
    }

#line 1785 "dsproc3/core.pyx"
    __pyx_v_ds_id = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_ds_id == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1787; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1785 "dsproc3/core.pyx"
    __pyx_v_var_name = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_var_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1787; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1785 "dsproc3/core.pyx"
    if (values[2]) {

#line 1785 "dsproc3/core.pyx"
      __pyx_v_obs_index = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_obs_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1787; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1785 "dsproc3/core.pyx"
    } else {

#line 1785 "dsproc3/core.pyx"
      __pyx_v_obs_index = ((int)0);

#line 1785 "dsproc3/core.pyx"
    }

#line 1785 "dsproc3/core.pyx"
  }

#line 1785 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1785 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_output_var", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 1785 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1787; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1785 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 1785 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_output_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1785 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1785 "dsproc3/core.pyx"
  return NULL;

#line 1785 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1785 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_120get_output_var(__pyx_self, __pyx_v_ds_id, __pyx_v_var_name, __pyx_v_obs_index);

#line 1785 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1785 "dsproc3/core.pyx"
  return __pyx_r;

#line 1785 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1787
 *     return metric_var
 * 
 * def get_output_var(int ds_id, char *var_name, int obs_index=0):             # <<<<<<<<<<<<<<
 *     """Get a variable from an output dataset.
 * 
 */

#line 1787 "dsproc3/core.pyx"


#line 1787 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_120get_output_var(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id, char *__pyx_v_var_name, int __pyx_v_obs_index) {
  struct CDSVar *__pyx_v_cds_var
#line 1787 "dsproc3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = 0
#line 1787 "dsproc3/core.pyx"
;

#line 1787 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1787 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_output_var", 0);

  /* "dsproc3/core.pyx":1804
 *     cdef CDSVar *cds_var
 *     cdef cds3.core.Var var
 *     cds_var = dsproc_get_output_var(ds_id, var_name, obs_index)             # <<<<<<<<<<<<<<
 *     if cds_var == NULL:
 *         return None
 */

#line 1804 "dsproc3/core.pyx"
  __pyx_v_cds_var = dsproc_get_output_var(__pyx_v_ds_id, __pyx_v_var_name, __pyx_v_obs_index);

  /* "dsproc3/core.pyx":1805
 *     cdef cds3.core.Var var
 *     cds_var = dsproc_get_output_var(ds_id, var_name, obs_index)
 *     if cds_var == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     var = cds3.core.Var()
 */

#line 1805 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_cds_var == NULL);

#line 1805 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":1806
 *     cds_var = dsproc_get_output_var(ds_id, var_name, obs_index)
 *     if cds_var == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     var = cds3.core.Var()
 *     var.set_var(cds_var)
 */

#line 1806 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1806 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 1806 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 1806 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1806 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 1806 "dsproc3/core.pyx"
  }

#line 1806 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":1807
 *     if cds_var == NULL:
 *         return None
 *     var = cds3.core.Var()             # <<<<<<<<<<<<<<
 *     var.set_var(cds_var)
 *     return var
 */

#line 1807 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Var)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1807 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1807 "dsproc3/core.pyx"
  __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)__pyx_t_2);

#line 1807 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

  /* "dsproc3/core.pyx":1808
 *         return None
 *     var = cds3.core.Var()
 *     var.set_var(cds_var)             # <<<<<<<<<<<<<<
 *     return var
 * 
 */

#line 1808 "dsproc3/core.pyx"
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_var->__pyx_base.__pyx_vtab)->set_var(__pyx_v_var, __pyx_v_cds_var); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1808; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1808 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1808 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dsproc3/core.pyx":1809
 *     var = cds3.core.Var()
 *     var.set_var(cds_var)
 *     return var             # <<<<<<<<<<<<<<
 * 
 * def get_qc_var(cds3.core.Var _var):
 */

#line 1809 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1809 "dsproc3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_var));

#line 1809 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_var);

#line 1809 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1809 "dsproc3/core.pyx"


#line 1809 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1809 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1809 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1809 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1809 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_output_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1809 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1809 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1809 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_var);

#line 1809 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1809 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1809 "dsproc3/core.pyx"
  return __pyx_r;

#line 1809 "dsproc3/core.pyx"
}

#line 1809 "dsproc3/core.pyx"


#line 1809 "dsproc3/core.pyx"
/* Python wrapper */

#line 1809 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_123get_qc_var(PyObject *__pyx_self, PyObject *__pyx_v__var); /*proto*/

#line 1809 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_122get_qc_var[] = "get_qc_var(Var _var)\nGet the companion QC variable for a variable.\n    \n    @param var - pointer to the variable\n    \n    @retval pointer to the QC variable\n    @retval None if not found\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_123get_qc_var = 
#line 1809 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_qc_var"), (PyCFunction)__pyx_pw_7dsproc3_4core_123get_qc_var, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_122get_qc_var)};

#line 1809 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_123get_qc_var(PyObject *__pyx_self, PyObject *__pyx_v__var) {

#line 1809 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1809 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1809 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_qc_var (wrapper)", 0);

#line 1809 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v__var), __pyx_ptype_4cds3_4core_Var, 1, "_var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1809 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_122get_qc_var(__pyx_self, ((struct __pyx_obj_4cds3_4core_Var *)__pyx_v__var));

#line 1809 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1809 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1809 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1809 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1809 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1809 "dsproc3/core.pyx"
  return __pyx_r;

#line 1809 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1811
 *     return var
 * 
 * def get_qc_var(cds3.core.Var _var):             # <<<<<<<<<<<<<<
 *     """Get the companion QC variable for a variable.
 * 
 */

#line 1811 "dsproc3/core.pyx"


#line 1811 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_122get_qc_var(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v__var) {
  struct CDSVar *__pyx_v_cds_var
#line 1811 "dsproc3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = 0
#line 1811 "dsproc3/core.pyx"
;

#line 1811 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1811 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_qc_var", 0);

  /* "dsproc3/core.pyx":1822
 *     cdef CDSVar *cds_var
 *     cdef cds3.core.Var var
 *     cds_var = dsproc_get_qc_var(_var.c_ob)             # <<<<<<<<<<<<<<
 *     if cds_var == NULL:
 *         return None
 */

#line 1822 "dsproc3/core.pyx"
  __pyx_v_cds_var = dsproc_get_qc_var(__pyx_v__var->c_ob);

  /* "dsproc3/core.pyx":1823
 *     cdef cds3.core.Var var
 *     cds_var = dsproc_get_qc_var(_var.c_ob)
 *     if cds_var == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     var = cds3.core.Var()
 */

#line 1823 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_cds_var == NULL);

#line 1823 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":1824
 *     cds_var = dsproc_get_qc_var(_var.c_ob)
 *     if cds_var == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     var = cds3.core.Var()
 *     var.set_var(cds_var)
 */

#line 1824 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1824 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 1824 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 1824 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1824 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 1824 "dsproc3/core.pyx"
  }

#line 1824 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":1825
 *     if cds_var == NULL:
 *         return None
 *     var = cds3.core.Var()             # <<<<<<<<<<<<<<
 *     var.set_var(cds_var)
 *     return var
 */

#line 1825 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Var)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1825 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1825 "dsproc3/core.pyx"
  __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)__pyx_t_2);

#line 1825 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

  /* "dsproc3/core.pyx":1826
 *         return None
 *     var = cds3.core.Var()
 *     var.set_var(cds_var)             # <<<<<<<<<<<<<<
 *     return var
 * 
 */

#line 1826 "dsproc3/core.pyx"
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_var->__pyx_base.__pyx_vtab)->set_var(__pyx_v_var, __pyx_v_cds_var); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1826 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1826 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dsproc3/core.pyx":1827
 *     var = cds3.core.Var()
 *     var.set_var(cds_var)
 *     return var             # <<<<<<<<<<<<<<
 * 
 * def get_retrieved_var(char *var_name, int obs_index=0):
 */

#line 1827 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1827 "dsproc3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_var));

#line 1827 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_var);

#line 1827 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1827 "dsproc3/core.pyx"


#line 1827 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1827 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1827 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1827 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1827 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_qc_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1827 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1827 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1827 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_var);

#line 1827 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1827 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1827 "dsproc3/core.pyx"
  return __pyx_r;

#line 1827 "dsproc3/core.pyx"
}

#line 1827 "dsproc3/core.pyx"


#line 1827 "dsproc3/core.pyx"
/* Python wrapper */

#line 1827 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_125get_retrieved_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1827 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_124get_retrieved_var[] = "get_retrieved_var(char *var_name, int obs_index=0)\nGet a primary variable from the retrieved data.\n    \n    This function will find a variable in the retrieved data that was\n    explicitly requested by the user in the retriever definition.\n    \n    The obs_index is used to specify which observation to pull the variable\n    from. This value will typically be zero unless this function is called\n    from a post_retrieval_hook() function, or the process is using observation\n    based processing. In either of these cases the retrieved data will\n    contain one \"observation\" for every file the data was read from on disk.\n    \n    It is also possible to have multiple observations in the retrieved data\n    when a pre_transform_hook() is called if a dimensionality conflict\n    prevented all observations from being merged.\n    \n    @param var_name - variable name\n    @param obs_index - the index of the obervation to get the variable from\n    \n    @retval pointer to the retrieved variable\n    @retval None if not found\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_125get_retrieved_var = 
#line 1827 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_retrieved_var"), (PyCFunction)__pyx_pw_7dsproc3_4core_125get_retrieved_var, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_124get_retrieved_var)};

#line 1827 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_125get_retrieved_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_var_name
#line 1827 "dsproc3/core.pyx"
;
  int __pyx_v_obs_index
#line 1827 "dsproc3/core.pyx"
;

#line 1827 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1827 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1827 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_retrieved_var (wrapper)", 0);

#line 1827 "dsproc3/core.pyx"
  {

#line 1827 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__var_name,&__pyx_n_s__obs_index,0};

#line 1827 "dsproc3/core.pyx"
    PyObject* values[2] = {0,0};

#line 1827 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1827 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 1827 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1827 "dsproc3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 1827 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1827 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1827 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 1827 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1827 "dsproc3/core.pyx"
      }

#line 1827 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1827 "dsproc3/core.pyx"
      switch (pos_args) {

#line 1827 "dsproc3/core.pyx"
        case  0:

#line 1827 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__var_name)) != 0)) kw_args--;
        else 
#line 1827 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1827 "dsproc3/core.pyx"
        case  1:

#line 1827 "dsproc3/core.pyx"
        if (kw_args > 0) {

#line 1827 "dsproc3/core.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__obs_index);

#line 1827 "dsproc3/core.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 1827 "dsproc3/core.pyx"
        }

#line 1827 "dsproc3/core.pyx"
      }

#line 1827 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1827 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_retrieved_var") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1829; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1827 "dsproc3/core.pyx"
      }

#line 1827 "dsproc3/core.pyx"
    } else {

#line 1827 "dsproc3/core.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: 
#line 1827 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1827 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1827 "dsproc3/core.pyx"
        break;
        default: 
#line 1827 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1827 "dsproc3/core.pyx"
      }

#line 1827 "dsproc3/core.pyx"
    }

#line 1827 "dsproc3/core.pyx"
    __pyx_v_var_name = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_var_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1829; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1827 "dsproc3/core.pyx"
    if (values[1]) {

#line 1827 "dsproc3/core.pyx"
      __pyx_v_obs_index = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_obs_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1829; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1827 "dsproc3/core.pyx"
    } else {

#line 1827 "dsproc3/core.pyx"
      __pyx_v_obs_index = ((int)0);

#line 1827 "dsproc3/core.pyx"
    }

#line 1827 "dsproc3/core.pyx"
  }

#line 1827 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1827 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_retrieved_var", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 1827 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1829; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1827 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 1827 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_retrieved_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1827 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1827 "dsproc3/core.pyx"
  return NULL;

#line 1827 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1827 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_124get_retrieved_var(__pyx_self, __pyx_v_var_name, __pyx_v_obs_index);

#line 1827 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1827 "dsproc3/core.pyx"
  return __pyx_r;

#line 1827 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1829
 *     return var
 * 
 * def get_retrieved_var(char *var_name, int obs_index=0):             # <<<<<<<<<<<<<<
 *     """Get a primary variable from the retrieved data.
 * 
 */

#line 1829 "dsproc3/core.pyx"


#line 1829 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_124get_retrieved_var(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_var_name, int __pyx_v_obs_index) {
  struct CDSVar *__pyx_v_cds_var
#line 1829 "dsproc3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = 0
#line 1829 "dsproc3/core.pyx"
;

#line 1829 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1829 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_retrieved_var", 0);

  /* "dsproc3/core.pyx":1854
 *     cdef CDSVar *cds_var
 *     cdef cds3.core.Var var
 *     cds_var = dsproc_get_retrieved_var(var_name, obs_index)             # <<<<<<<<<<<<<<
 *     if cds_var == NULL:
 *         return None
 */

#line 1854 "dsproc3/core.pyx"
  __pyx_v_cds_var = dsproc_get_retrieved_var(__pyx_v_var_name, __pyx_v_obs_index);

  /* "dsproc3/core.pyx":1855
 *     cdef cds3.core.Var var
 *     cds_var = dsproc_get_retrieved_var(var_name, obs_index)
 *     if cds_var == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     var = cds3.core.Var()
 */

#line 1855 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_cds_var == NULL);

#line 1855 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":1856
 *     cds_var = dsproc_get_retrieved_var(var_name, obs_index)
 *     if cds_var == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     var = cds3.core.Var()
 *     var.set_var(cds_var)
 */

#line 1856 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1856 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 1856 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 1856 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1856 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 1856 "dsproc3/core.pyx"
  }

#line 1856 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":1857
 *     if cds_var == NULL:
 *         return None
 *     var = cds3.core.Var()             # <<<<<<<<<<<<<<
 *     var.set_var(cds_var)
 *     return var
 */

#line 1857 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Var)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1857 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1857 "dsproc3/core.pyx"
  __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)__pyx_t_2);

#line 1857 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

  /* "dsproc3/core.pyx":1858
 *         return None
 *     var = cds3.core.Var()
 *     var.set_var(cds_var)             # <<<<<<<<<<<<<<
 *     return var
 * 
 */

#line 1858 "dsproc3/core.pyx"
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_var->__pyx_base.__pyx_vtab)->set_var(__pyx_v_var, __pyx_v_cds_var); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1858; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1858 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1858 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dsproc3/core.pyx":1859
 *     var = cds3.core.Var()
 *     var.set_var(cds_var)
 *     return var             # <<<<<<<<<<<<<<
 * 
 * def get_transformed_var(char *var_name, int obs_index=0):
 */

#line 1859 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1859 "dsproc3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_var));

#line 1859 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_var);

#line 1859 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1859 "dsproc3/core.pyx"


#line 1859 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1859 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1859 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1859 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1859 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_retrieved_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1859 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1859 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1859 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_var);

#line 1859 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1859 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1859 "dsproc3/core.pyx"
  return __pyx_r;

#line 1859 "dsproc3/core.pyx"
}

#line 1859 "dsproc3/core.pyx"


#line 1859 "dsproc3/core.pyx"
/* Python wrapper */

#line 1859 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_127get_transformed_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1859 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_126get_transformed_var[] = "get_transformed_var(char *var_name, int obs_index=0)\nGet a primary variable from the transformed data.\n    \n    This function will find a variable in the transformed data that was\n    explicitly requested by the user in the retriever definition.\n    \n    The obs_index is used to specify which observation to pull the variable\n    from. This value will typically be zero unless the process is using\n    observation based processing. If this is the case the transformed data will\n    contain one \"observation\" for every file the data was read from on disk.\n    \n    @param var_name - variable name\n    @param obs_index - the index of the obervation to get the variable from\n    \n    @retval pointer to the transformed variable\n    @retval None if not found\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_127get_transformed_var = 
#line 1859 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_transformed_var"), (PyCFunction)__pyx_pw_7dsproc3_4core_127get_transformed_var, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_126get_transformed_var)};

#line 1859 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_127get_transformed_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_var_name
#line 1859 "dsproc3/core.pyx"
;
  int __pyx_v_obs_index
#line 1859 "dsproc3/core.pyx"
;

#line 1859 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1859 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1859 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_transformed_var (wrapper)", 0);

#line 1859 "dsproc3/core.pyx"
  {

#line 1859 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__var_name,&__pyx_n_s__obs_index,0};

#line 1859 "dsproc3/core.pyx"
    PyObject* values[2] = {0,0};

#line 1859 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1859 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 1859 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1859 "dsproc3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 1859 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1859 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1859 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 1859 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1859 "dsproc3/core.pyx"
      }

#line 1859 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1859 "dsproc3/core.pyx"
      switch (pos_args) {

#line 1859 "dsproc3/core.pyx"
        case  0:

#line 1859 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__var_name)) != 0)) kw_args--;
        else 
#line 1859 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1859 "dsproc3/core.pyx"
        case  1:

#line 1859 "dsproc3/core.pyx"
        if (kw_args > 0) {

#line 1859 "dsproc3/core.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__obs_index);

#line 1859 "dsproc3/core.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 1859 "dsproc3/core.pyx"
        }

#line 1859 "dsproc3/core.pyx"
      }

#line 1859 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1859 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_transformed_var") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1861; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1859 "dsproc3/core.pyx"
      }

#line 1859 "dsproc3/core.pyx"
    } else {

#line 1859 "dsproc3/core.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: 
#line 1859 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1859 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1859 "dsproc3/core.pyx"
        break;
        default: 
#line 1859 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1859 "dsproc3/core.pyx"
      }

#line 1859 "dsproc3/core.pyx"
    }

#line 1859 "dsproc3/core.pyx"
    __pyx_v_var_name = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_var_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1861; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1859 "dsproc3/core.pyx"
    if (values[1]) {

#line 1859 "dsproc3/core.pyx"
      __pyx_v_obs_index = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_obs_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1861; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1859 "dsproc3/core.pyx"
    } else {

#line 1859 "dsproc3/core.pyx"
      __pyx_v_obs_index = ((int)0);

#line 1859 "dsproc3/core.pyx"
    }

#line 1859 "dsproc3/core.pyx"
  }

#line 1859 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1859 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_transformed_var", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 1859 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1861; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1859 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 1859 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_transformed_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1859 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1859 "dsproc3/core.pyx"
  return NULL;

#line 1859 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1859 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_126get_transformed_var(__pyx_self, __pyx_v_var_name, __pyx_v_obs_index);

#line 1859 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1859 "dsproc3/core.pyx"
  return __pyx_r;

#line 1859 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1861
 *     return var
 * 
 * def get_transformed_var(char *var_name, int obs_index=0):             # <<<<<<<<<<<<<<
 *     """Get a primary variable from the transformed data.
 * 
 */

#line 1861 "dsproc3/core.pyx"


#line 1861 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_126get_transformed_var(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_var_name, int __pyx_v_obs_index) {
  struct CDSVar *__pyx_v_cds_var
#line 1861 "dsproc3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = 0
#line 1861 "dsproc3/core.pyx"
;

#line 1861 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1861 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_transformed_var", 0);

  /* "dsproc3/core.pyx":1881
 *     cdef CDSVar *cds_var
 *     cdef cds3.core.Var var
 *     cds_var = dsproc_get_transformed_var(var_name, obs_index)             # <<<<<<<<<<<<<<
 *     if cds_var == NULL:
 *         return None
 */

#line 1881 "dsproc3/core.pyx"
  __pyx_v_cds_var = dsproc_get_transformed_var(__pyx_v_var_name, __pyx_v_obs_index);

  /* "dsproc3/core.pyx":1882
 *     cdef cds3.core.Var var
 *     cds_var = dsproc_get_transformed_var(var_name, obs_index)
 *     if cds_var == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     var = cds3.core.Var()
 */

#line 1882 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_cds_var == NULL);

#line 1882 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":1883
 *     cds_var = dsproc_get_transformed_var(var_name, obs_index)
 *     if cds_var == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     var = cds3.core.Var()
 *     var.set_var(cds_var)
 */

#line 1883 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1883 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 1883 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 1883 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1883 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 1883 "dsproc3/core.pyx"
  }

#line 1883 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":1884
 *     if cds_var == NULL:
 *         return None
 *     var = cds3.core.Var()             # <<<<<<<<<<<<<<
 *     var.set_var(cds_var)
 *     return var
 */

#line 1884 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Var)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1884; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1884 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1884 "dsproc3/core.pyx"
  __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)__pyx_t_2);

#line 1884 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

  /* "dsproc3/core.pyx":1885
 *         return None
 *     var = cds3.core.Var()
 *     var.set_var(cds_var)             # <<<<<<<<<<<<<<
 *     return var
 * 
 */

#line 1885 "dsproc3/core.pyx"
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_var->__pyx_base.__pyx_vtab)->set_var(__pyx_v_var, __pyx_v_cds_var); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1885; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1885 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1885 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dsproc3/core.pyx":1886
 *     var = cds3.core.Var()
 *     var.set_var(cds_var)
 *     return var             # <<<<<<<<<<<<<<
 * 
 * def get_trans_coordsys_var(char *coordsys_name, char *var_name, int obs_index=0):
 */

#line 1886 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1886 "dsproc3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_var));

#line 1886 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_var);

#line 1886 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1886 "dsproc3/core.pyx"


#line 1886 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1886 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1886 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1886 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1886 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_transformed_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1886 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1886 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1886 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_var);

#line 1886 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1886 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1886 "dsproc3/core.pyx"
  return __pyx_r;

#line 1886 "dsproc3/core.pyx"
}

#line 1886 "dsproc3/core.pyx"


#line 1886 "dsproc3/core.pyx"
/* Python wrapper */

#line 1886 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_129get_trans_coordsys_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1886 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_128get_trans_coordsys_var[] = "get_trans_coordsys_var(char *coordsys_name, char *var_name, int obs_index=0)\nGet a variable from a transformation coordinate system.\n    \n    Unlike the dsproc_get_transformed_var() function, this function will find\n    any variable in the specified transformation coordinate system.\n    \n    The obs_index is used to specify which observation to pull the variable\n    from. This value will typically be zero unless the process is using\n    observation based processing. If this is the case the transformed data will\n    contain one \"observation\" for every file the data was read from on disk.\n    \n    @param coordsys_name - coordinate system name\n    @param var_name - variable name\n    @param obs_index - the index of the obervation to get the variable from\n    \n    @retval the transformed variable\n    @retval None if not found\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_129get_trans_coordsys_var = 
#line 1886 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_trans_coordsys_var"), (PyCFunction)__pyx_pw_7dsproc3_4core_129get_trans_coordsys_var, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_128get_trans_coordsys_var)};

#line 1886 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_129get_trans_coordsys_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_coordsys_name
#line 1886 "dsproc3/core.pyx"
;
  char *__pyx_v_var_name
#line 1886 "dsproc3/core.pyx"
;
  int __pyx_v_obs_index
#line 1886 "dsproc3/core.pyx"
;

#line 1886 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1886 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1886 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_trans_coordsys_var (wrapper)", 0);

#line 1886 "dsproc3/core.pyx"
  {

#line 1886 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__coordsys_name,&__pyx_n_s__var_name,&__pyx_n_s__obs_index,0};

#line 1886 "dsproc3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 1886 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1886 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 1886 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1886 "dsproc3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 1886 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1886 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1886 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1886 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 1886 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1886 "dsproc3/core.pyx"
      }

#line 1886 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1886 "dsproc3/core.pyx"
      switch (pos_args) {

#line 1886 "dsproc3/core.pyx"
        case  0:

#line 1886 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__coordsys_name)) != 0)) kw_args--;
        else 
#line 1886 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1886 "dsproc3/core.pyx"
        case  1:

#line 1886 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__var_name)) != 0)) kw_args--;

#line 1886 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("get_trans_coordsys_var", 0, 2, 3, 1); 
#line 1886 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1888; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1886 "dsproc3/core.pyx"
        }

#line 1886 "dsproc3/core.pyx"
        case  2:

#line 1886 "dsproc3/core.pyx"
        if (kw_args > 0) {

#line 1886 "dsproc3/core.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__obs_index);

#line 1886 "dsproc3/core.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 1886 "dsproc3/core.pyx"
        }

#line 1886 "dsproc3/core.pyx"
      }

#line 1886 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1886 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_trans_coordsys_var") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1888; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1886 "dsproc3/core.pyx"
      }

#line 1886 "dsproc3/core.pyx"
    } else {

#line 1886 "dsproc3/core.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: 
#line 1886 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1886 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1886 "dsproc3/core.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1886 "dsproc3/core.pyx"
        break;
        default: 
#line 1886 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1886 "dsproc3/core.pyx"
      }

#line 1886 "dsproc3/core.pyx"
    }

#line 1886 "dsproc3/core.pyx"
    __pyx_v_coordsys_name = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_coordsys_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1888; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1886 "dsproc3/core.pyx"
    __pyx_v_var_name = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_var_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1888; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1886 "dsproc3/core.pyx"
    if (values[2]) {

#line 1886 "dsproc3/core.pyx"
      __pyx_v_obs_index = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_obs_index == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1888; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1886 "dsproc3/core.pyx"
    } else {

#line 1886 "dsproc3/core.pyx"
      __pyx_v_obs_index = ((int)0);

#line 1886 "dsproc3/core.pyx"
    }

#line 1886 "dsproc3/core.pyx"
  }

#line 1886 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1886 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_trans_coordsys_var", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 1886 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1888; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1886 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 1886 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_trans_coordsys_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1886 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1886 "dsproc3/core.pyx"
  return NULL;

#line 1886 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 1886 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_128get_trans_coordsys_var(__pyx_self, __pyx_v_coordsys_name, __pyx_v_var_name, __pyx_v_obs_index);

#line 1886 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1886 "dsproc3/core.pyx"
  return __pyx_r;

#line 1886 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1888
 *     return var
 * 
 * def get_trans_coordsys_var(char *coordsys_name, char *var_name, int obs_index=0):             # <<<<<<<<<<<<<<
 *     """Get a variable from a transformation coordinate system.
 * 
 */

#line 1888 "dsproc3/core.pyx"


#line 1888 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_128get_trans_coordsys_var(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_coordsys_name, char *__pyx_v_var_name, int __pyx_v_obs_index) {
  struct CDSVar *__pyx_v_cds_var
#line 1888 "dsproc3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = 0
#line 1888 "dsproc3/core.pyx"
;

#line 1888 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1888 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_trans_coordsys_var", 0);

  /* "dsproc3/core.pyx":1909
 *     cdef CDSVar *cds_var
 *     cdef cds3.core.Var var
 *     cds_var = dsproc_get_trans_coordsys_var(coordsys_name, var_name, obs_index)             # <<<<<<<<<<<<<<
 *     if cds_var == NULL:
 *         return None
 */

#line 1909 "dsproc3/core.pyx"
  __pyx_v_cds_var = dsproc_get_trans_coordsys_var(__pyx_v_coordsys_name, __pyx_v_var_name, __pyx_v_obs_index);

  /* "dsproc3/core.pyx":1910
 *     cdef cds3.core.Var var
 *     cds_var = dsproc_get_trans_coordsys_var(coordsys_name, var_name, obs_index)
 *     if cds_var == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     var = cds3.core.Var()
 */

#line 1910 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_cds_var == NULL);

#line 1910 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":1911
 *     cds_var = dsproc_get_trans_coordsys_var(coordsys_name, var_name, obs_index)
 *     if cds_var == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     var = cds3.core.Var()
 *     var.set_var(cds_var)
 */

#line 1911 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1911 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 1911 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 1911 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1911 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 1911 "dsproc3/core.pyx"
  }

#line 1911 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":1912
 *     if cds_var == NULL:
 *         return None
 *     var = cds3.core.Var()             # <<<<<<<<<<<<<<
 *     var.set_var(cds_var)
 *     return var
 */

#line 1912 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Var)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1912; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1912 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1912 "dsproc3/core.pyx"
  __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)__pyx_t_2);

#line 1912 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

  /* "dsproc3/core.pyx":1913
 *         return None
 *     var = cds3.core.Var()
 *     var.set_var(cds_var)             # <<<<<<<<<<<<<<
 *     return var
 * 
 */

#line 1913 "dsproc3/core.pyx"
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_var->__pyx_base.__pyx_vtab)->set_var(__pyx_v_var, __pyx_v_cds_var); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1913; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1913 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1913 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dsproc3/core.pyx":1914
 *     var = cds3.core.Var()
 *     var.set_var(cds_var)
 *     return var             # <<<<<<<<<<<<<<
 * 
 * def get_var(cds3.core.Group dataset, char *name):
 */

#line 1914 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1914 "dsproc3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_var));

#line 1914 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_var);

#line 1914 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1914 "dsproc3/core.pyx"


#line 1914 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1914 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1914 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1914 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1914 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_trans_coordsys_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1914 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1914 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1914 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_var);

#line 1914 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1914 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1914 "dsproc3/core.pyx"
  return __pyx_r;

#line 1914 "dsproc3/core.pyx"
}

#line 1914 "dsproc3/core.pyx"


#line 1914 "dsproc3/core.pyx"
/* Python wrapper */

#line 1914 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_131get_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1914 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_130get_var[] = "get_var(Group dataset, char *name)\nGet a variable from a dataset.\n    \n    @param dataset - pointer to the dataset\n    @param name - name of the variable\n    \n    @retval the variable\n    @retval None if the variable does not exist\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_131get_var = 
#line 1914 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_var"), (PyCFunction)__pyx_pw_7dsproc3_4core_131get_var, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_130get_var)};

#line 1914 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_131get_var(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Group *__pyx_v_dataset = 0
#line 1914 "dsproc3/core.pyx"
;
  char *__pyx_v_name
#line 1914 "dsproc3/core.pyx"
;

#line 1914 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1914 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1914 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_var (wrapper)", 0);

#line 1914 "dsproc3/core.pyx"
  {

#line 1914 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__dataset,&__pyx_n_s__name,0};

#line 1914 "dsproc3/core.pyx"
    PyObject* values[2] = {0,0};

#line 1914 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1914 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 1914 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1914 "dsproc3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 1914 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1914 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1914 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 1914 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1914 "dsproc3/core.pyx"
      }

#line 1914 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1914 "dsproc3/core.pyx"
      switch (pos_args) {

#line 1914 "dsproc3/core.pyx"
        case  0:

#line 1914 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dataset)) != 0)) kw_args--;
        else 
#line 1914 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1914 "dsproc3/core.pyx"
        case  1:

#line 1914 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__name)) != 0)) kw_args--;

#line 1914 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("get_var", 1, 2, 2, 1); 
#line 1914 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1916; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1914 "dsproc3/core.pyx"
        }

#line 1914 "dsproc3/core.pyx"
      }

#line 1914 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1914 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_var") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1916; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1914 "dsproc3/core.pyx"
      }

#line 1914 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 1914 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1914 "dsproc3/core.pyx"
    } else {

#line 1914 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1914 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1914 "dsproc3/core.pyx"
    }

#line 1914 "dsproc3/core.pyx"
    __pyx_v_dataset = ((struct __pyx_obj_4cds3_4core_Group *)values[0]);

#line 1914 "dsproc3/core.pyx"
    __pyx_v_name = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1916; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1914 "dsproc3/core.pyx"
  }

#line 1914 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1914 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_var", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 1914 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1916; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1914 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 1914 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1914 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1914 "dsproc3/core.pyx"
  return NULL;

#line 1914 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1914 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dataset), __pyx_ptype_4cds3_4core_Group, 1, "dataset", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1914 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_130get_var(__pyx_self, __pyx_v_dataset, __pyx_v_name);

#line 1914 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1914 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1914 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1914 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1914 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1914 "dsproc3/core.pyx"
  return __pyx_r;

#line 1914 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1916
 *     return var
 * 
 * def get_var(cds3.core.Group dataset, char *name):             # <<<<<<<<<<<<<<
 *     """Get a variable from a dataset.
 * 
 */

#line 1916 "dsproc3/core.pyx"


#line 1916 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_130get_var(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Group *__pyx_v_dataset, char *__pyx_v_name) {
  struct CDSVar *__pyx_v_cds_var
#line 1916 "dsproc3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = 0
#line 1916 "dsproc3/core.pyx"
;

#line 1916 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1916 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_var", 0);

  /* "dsproc3/core.pyx":1928
 *     cdef CDSVar *cds_var
 *     cdef cds3.core.Var var
 *     cds_var = dsproc_get_var(dataset.c_ob, name)             # <<<<<<<<<<<<<<
 *     if cds_var == NULL:
 *         return None
 */

#line 1928 "dsproc3/core.pyx"
  __pyx_v_cds_var = dsproc_get_var(__pyx_v_dataset->c_ob, __pyx_v_name);

  /* "dsproc3/core.pyx":1929
 *     cdef cds3.core.Var var
 *     cds_var = dsproc_get_var(dataset.c_ob, name)
 *     if cds_var == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     var = cds3.core.Var()
 */

#line 1929 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_cds_var == NULL);

#line 1929 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":1930
 *     cds_var = dsproc_get_var(dataset.c_ob, name)
 *     if cds_var == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     var = cds3.core.Var()
 *     var.set_var(cds_var)
 */

#line 1930 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1930 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 1930 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 1930 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1930 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 1930 "dsproc3/core.pyx"
  }

#line 1930 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":1931
 *     if cds_var == NULL:
 *         return None
 *     var = cds3.core.Var()             # <<<<<<<<<<<<<<
 *     var.set_var(cds_var)
 *     return var
 */

#line 1931 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Var)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1931; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1931 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1931 "dsproc3/core.pyx"
  __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)__pyx_t_2);

#line 1931 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

  /* "dsproc3/core.pyx":1932
 *         return None
 *     var = cds3.core.Var()
 *     var.set_var(cds_var)             # <<<<<<<<<<<<<<
 *     return var
 * 
 */

#line 1932 "dsproc3/core.pyx"
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_var->__pyx_base.__pyx_vtab)->set_var(__pyx_v_var, __pyx_v_cds_var); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1932; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1932 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 1932 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dsproc3/core.pyx":1933
 *     var = cds3.core.Var()
 *     var.set_var(cds_var)
 *     return var             # <<<<<<<<<<<<<<
 * 
 * def var_name(cds3.core.Var var):
 */

#line 1933 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1933 "dsproc3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_var));

#line 1933 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_var);

#line 1933 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1933 "dsproc3/core.pyx"


#line 1933 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1933 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1933 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1933 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1933 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1933 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1933 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1933 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_var);

#line 1933 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1933 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1933 "dsproc3/core.pyx"
  return __pyx_r;

#line 1933 "dsproc3/core.pyx"
}

#line 1933 "dsproc3/core.pyx"


#line 1933 "dsproc3/core.pyx"
/* Python wrapper */

#line 1933 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_133var_name(PyObject *__pyx_self, PyObject *__pyx_v_var); /*proto*/

#line 1933 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_132var_name[] = "var_name(Var var)\nReturns the variable name.\n    \n    @param var - the variable\n    \n    @retval the variable name\n    @retval None if the specified variable is None\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_133var_name = 
#line 1933 "dsproc3/core.pyx"
{__Pyx_NAMESTR("var_name"), (PyCFunction)__pyx_pw_7dsproc3_4core_133var_name, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_132var_name)};

#line 1933 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_133var_name(PyObject *__pyx_self, PyObject *__pyx_v_var) {

#line 1933 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1933 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1933 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("var_name (wrapper)", 0);

#line 1933 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_var), __pyx_ptype_4cds3_4core_Var, 1, "var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1933 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_132var_name(__pyx_self, ((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_var));

#line 1933 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1933 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1933 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1933 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1933 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1933 "dsproc3/core.pyx"
  return __pyx_r;

#line 1933 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1935
 *     return var
 * 
 * def var_name(cds3.core.Var var):             # <<<<<<<<<<<<<<
 *     """Returns the variable name.
 * 
 */

#line 1935 "dsproc3/core.pyx"


#line 1935 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_132var_name(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var) {
  char *__pyx_v_retval
#line 1935 "dsproc3/core.pyx"
;

#line 1935 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1935 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("var_name", 0);

  /* "dsproc3/core.pyx":1945
 *     """
 *     cdef char *retval
 *     if var is None:             # <<<<<<<<<<<<<<
 *         return None
 *     retval = dsproc_var_name(var.c_ob)
 */

#line 1945 "dsproc3/core.pyx"
  __pyx_t_1 = (((PyObject *)__pyx_v_var) == Py_None);

#line 1945 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":1946
 *     cdef char *retval
 *     if var is None:
 *         return None             # <<<<<<<<<<<<<<
 *     retval = dsproc_var_name(var.c_ob)
 *     if retval == NULL:
 */

#line 1946 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1946 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 1946 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 1946 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1946 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 1946 "dsproc3/core.pyx"
  }

#line 1946 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":1947
 *     if var is None:
 *         return None
 *     retval = dsproc_var_name(var.c_ob)             # <<<<<<<<<<<<<<
 *     if retval == NULL:
 *         return None
 */

#line 1947 "dsproc3/core.pyx"
  __pyx_v_retval = dsproc_var_name(__pyx_v_var->c_ob);

  /* "dsproc3/core.pyx":1948
 *         return None
 *     retval = dsproc_var_name(var.c_ob)
 *     if retval == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return retval
 */

#line 1948 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_retval == NULL);

#line 1948 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":1949
 *     retval = dsproc_var_name(var.c_ob)
 *     if retval == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return retval
 * 
 */

#line 1949 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 1949 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 1949 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 1949 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 1949 "dsproc3/core.pyx"
    goto __pyx_L4;

#line 1949 "dsproc3/core.pyx"
  }

#line 1949 "dsproc3/core.pyx"
  __pyx_L4:;

  /* "dsproc3/core.pyx":1950
 *     if retval == NULL:
 *         return None
 *     return retval             # <<<<<<<<<<<<<<
 * 
 * def var_sample_count(cds3.core.Var var):
 */

#line 1950 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1950 "dsproc3/core.pyx"
  __pyx_t_2 = PyBytes_FromString(__pyx_v_retval); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1950; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1950 "dsproc3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));

#line 1950 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_t_2);

#line 1950 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 1950 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1950 "dsproc3/core.pyx"


#line 1950 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1950 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1950 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1950 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1950 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.var_name", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1950 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1950 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1950 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1950 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1950 "dsproc3/core.pyx"
  return __pyx_r;

#line 1950 "dsproc3/core.pyx"
}

#line 1950 "dsproc3/core.pyx"


#line 1950 "dsproc3/core.pyx"
/* Python wrapper */

#line 1950 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_135var_sample_count(PyObject *__pyx_self, PyObject *__pyx_v_var); /*proto*/

#line 1950 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_134var_sample_count[] = "var_sample_count(Var var)\nReturns the number of samples in a variable's data array.\n    \n    The sample_count for a variable is the number of samples stored\n    along the variable's first dimension.\n    \n    @param var - the variable\n    \n    @retval number of samples in the variable's data array\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_135var_sample_count = 
#line 1950 "dsproc3/core.pyx"
{__Pyx_NAMESTR("var_sample_count"), (PyCFunction)__pyx_pw_7dsproc3_4core_135var_sample_count, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_134var_sample_count)};

#line 1950 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_135var_sample_count(PyObject *__pyx_self, PyObject *__pyx_v_var) {

#line 1950 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1950 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1950 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("var_sample_count (wrapper)", 0);

#line 1950 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_var), __pyx_ptype_4cds3_4core_Var, 1, "var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1950 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_134var_sample_count(__pyx_self, ((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_var));

#line 1950 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1950 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1950 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1950 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1950 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1950 "dsproc3/core.pyx"
  return __pyx_r;

#line 1950 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1952
 *     return retval
 * 
 * def var_sample_count(cds3.core.Var var):             # <<<<<<<<<<<<<<
 *     """Returns the number of samples in a variable's data array.
 * 
 */

#line 1952 "dsproc3/core.pyx"


#line 1952 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_134var_sample_count(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var) {

#line 1952 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1952 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("var_sample_count", 0);

  /* "dsproc3/core.pyx":1963
 * 
 *     """
 *     return dsproc_var_sample_count(var.c_ob)             # <<<<<<<<<<<<<<
 * 
 * def var_sample_size(cds3.core.Var var):
 */

#line 1963 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1963 "dsproc3/core.pyx"
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(dsproc_var_sample_count(__pyx_v_var->c_ob)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1963; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1963 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1963 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 1963 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 1963 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1963 "dsproc3/core.pyx"


#line 1963 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1963 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1963 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1963 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1963 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.var_sample_count", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1963 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1963 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1963 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1963 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1963 "dsproc3/core.pyx"
  return __pyx_r;

#line 1963 "dsproc3/core.pyx"
}

#line 1963 "dsproc3/core.pyx"


#line 1963 "dsproc3/core.pyx"
/* Python wrapper */

#line 1963 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_137var_sample_size(PyObject *__pyx_self, PyObject *__pyx_v_var); /*proto*/

#line 1963 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_136var_sample_size[] = "var_sample_size(Var var)\nReturns the sample size of a variable.\n    \n    Variables with less than 2 dimensions will always have a sample_size of 1.\n    The sample_size for variables with 2 or more dimensions is the product of\n    all the dimension lengths starting with the 2nd dimension.\n    \n    @param var - pointer to the variable\n    \n    @return sample size of the variable\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_137var_sample_size = 
#line 1963 "dsproc3/core.pyx"
{__Pyx_NAMESTR("var_sample_size"), (PyCFunction)__pyx_pw_7dsproc3_4core_137var_sample_size, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_136var_sample_size)};

#line 1963 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_137var_sample_size(PyObject *__pyx_self, PyObject *__pyx_v_var) {

#line 1963 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1963 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1963 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("var_sample_size (wrapper)", 0);

#line 1963 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_var), __pyx_ptype_4cds3_4core_Var, 1, "var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1965; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1963 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_136var_sample_size(__pyx_self, ((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_var));

#line 1963 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1963 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1963 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1963 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1963 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1963 "dsproc3/core.pyx"
  return __pyx_r;

#line 1963 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1965
 *     return dsproc_var_sample_count(var.c_ob)
 * 
 * def var_sample_size(cds3.core.Var var):             # <<<<<<<<<<<<<<
 *     """Returns the sample size of a variable.
 * 
 */

#line 1965 "dsproc3/core.pyx"


#line 1965 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_136var_sample_size(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var) {

#line 1965 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1965 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("var_sample_size", 0);

  /* "dsproc3/core.pyx":1977
 * 
 *     """
 *     return dsproc_var_sample_size(var.c_ob)             # <<<<<<<<<<<<<<
 * 
 * def alloc_var_data(cds3.core.Var var, size_t sample_start, size_t sample_count):
 */

#line 1977 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 1977 "dsproc3/core.pyx"
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(dsproc_var_sample_size(__pyx_v_var->c_ob)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1977; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1977 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1977 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 1977 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 1977 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1977 "dsproc3/core.pyx"


#line 1977 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1977 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1977 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1977 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 1977 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.var_sample_size", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1977 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1977 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1977 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1977 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1977 "dsproc3/core.pyx"
  return __pyx_r;

#line 1977 "dsproc3/core.pyx"
}

#line 1977 "dsproc3/core.pyx"


#line 1977 "dsproc3/core.pyx"
/* Python wrapper */

#line 1977 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_139alloc_var_data(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 1977 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_138alloc_var_data[] = "alloc_var_data(Var var, size_t sample_start, size_t sample_count)\nAllocate memory for a variable's data array.\n    \n    This function will allocate memory as necessary to ensure that the\n    variable's data array is large enough to store another sample_count\n    samples starting from sample_start.\n    \n    The data type of the returned array will be the same as the variable\342\200\231s\n    data type.\n\n    If an error occurs in this function it will be appended to the log and\n    error mail messages, and the process status will be set appropriately.\n    \n    @param var - the variable\n    @param sample_start - start sample (0 based indexing)\n    @param sample_count - number of new samples\n    \n    @retval data array starting at the specified start sample\n    @retval None if one of the variable's static dimensions has 0 length\n    @retval None if the variable has no dimensions, and sample_start is not\n            equal to 0 or sample_count is not equal to 1.\n    @retval None if the first variable dimension is not unlimited, and\n            sample_start + sample_count would exceed the dimension length.\n    @retval None if a memory allocation error occurred\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_139alloc_var_data = 
#line 1977 "dsproc3/core.pyx"
{__Pyx_NAMESTR("alloc_var_data"), (PyCFunction)__pyx_pw_7dsproc3_4core_139alloc_var_data, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_138alloc_var_data)};

#line 1977 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_139alloc_var_data(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = 0
#line 1977 "dsproc3/core.pyx"
;
  size_t __pyx_v_sample_start
#line 1977 "dsproc3/core.pyx"
;
  size_t __pyx_v_sample_count
#line 1977 "dsproc3/core.pyx"
;

#line 1977 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 1977 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 1977 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("alloc_var_data (wrapper)", 0);

#line 1977 "dsproc3/core.pyx"
  {

#line 1977 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__var,&__pyx_n_s__sample_start,&__pyx_n_s__sample_count,0};

#line 1977 "dsproc3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 1977 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1977 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 1977 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1977 "dsproc3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 1977 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 1977 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1977 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1977 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 1977 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1977 "dsproc3/core.pyx"
      }

#line 1977 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1977 "dsproc3/core.pyx"
      switch (pos_args) {

#line 1977 "dsproc3/core.pyx"
        case  0:

#line 1977 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__var)) != 0)) kw_args--;
        else 
#line 1977 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 1977 "dsproc3/core.pyx"
        case  1:

#line 1977 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_start)) != 0)) kw_args--;

#line 1977 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("alloc_var_data", 1, 3, 3, 1); 
#line 1977 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1979; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1977 "dsproc3/core.pyx"
        }

#line 1977 "dsproc3/core.pyx"
        case  2:

#line 1977 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_count)) != 0)) kw_args--;

#line 1977 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("alloc_var_data", 1, 3, 3, 2); 
#line 1977 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1979; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1977 "dsproc3/core.pyx"
        }

#line 1977 "dsproc3/core.pyx"
      }

#line 1977 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 1977 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "alloc_var_data") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1979; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1977 "dsproc3/core.pyx"
      }

#line 1977 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 1977 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 1977 "dsproc3/core.pyx"
    } else {

#line 1977 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1977 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1977 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 1977 "dsproc3/core.pyx"
    }

#line 1977 "dsproc3/core.pyx"
    __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)values[0]);

#line 1977 "dsproc3/core.pyx"
    __pyx_v_sample_start = __Pyx_PyInt_AsSize_t(values[1]); if (unlikely((__pyx_v_sample_start == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1979; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1977 "dsproc3/core.pyx"
    __pyx_v_sample_count = __Pyx_PyInt_AsSize_t(values[2]); if (unlikely((__pyx_v_sample_count == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1979; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1977 "dsproc3/core.pyx"
  }

#line 1977 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1977 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("alloc_var_data", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 1977 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 1979; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1977 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 1977 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.alloc_var_data", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1977 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1977 "dsproc3/core.pyx"
  return NULL;

#line 1977 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1977 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_var), __pyx_ptype_4cds3_4core_Var, 1, "var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1979; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1977 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_138alloc_var_data(__pyx_self, __pyx_v_var, __pyx_v_sample_start, __pyx_v_sample_count);

#line 1977 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 1977 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 1977 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 1977 "dsproc3/core.pyx"
  __pyx_L0:;

#line 1977 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 1977 "dsproc3/core.pyx"
  return __pyx_r;

#line 1977 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":1979
 *     return dsproc_var_sample_size(var.c_ob)
 * 
 * def alloc_var_data(cds3.core.Var var, size_t sample_start, size_t sample_count):             # <<<<<<<<<<<<<<
 *     """Allocate memory for a variable's data array.
 * 
 */

#line 1979 "dsproc3/core.pyx"


#line 1979 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_138alloc_var_data(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var, size_t __pyx_v_sample_start, size_t __pyx_v_sample_count) {
  void *__pyx_v_data
#line 1979 "dsproc3/core.pyx"
;

#line 1979 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_4cds3_4core_3Var_get_datap __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1979 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("alloc_var_data", 0);

  /* "dsproc3/core.pyx":2005
 * 
 *     """
 *     cdef void *data = NULL             # <<<<<<<<<<<<<<
 *     data = dsproc_alloc_var_data(var.c_ob, sample_start, sample_count)
 *     if data == NULL:
 */

#line 2005 "dsproc3/core.pyx"
  __pyx_v_data = NULL;

  /* "dsproc3/core.pyx":2006
 *     """
 *     cdef void *data = NULL
 *     data = dsproc_alloc_var_data(var.c_ob, sample_start, sample_count)             # <<<<<<<<<<<<<<
 *     if data == NULL:
 *         return None
 */

#line 2006 "dsproc3/core.pyx"
  __pyx_v_data = dsproc_alloc_var_data(__pyx_v_var->c_ob, __pyx_v_sample_start, __pyx_v_sample_count);

  /* "dsproc3/core.pyx":2007
 *     cdef void *data = NULL
 *     data = dsproc_alloc_var_data(var.c_ob, sample_start, sample_count)
 *     if data == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return var.get_datap(sample_start)
 */

#line 2007 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_data == NULL);

#line 2007 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":2008
 *     data = dsproc_alloc_var_data(var.c_ob, sample_start, sample_count)
 *     if data == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return var.get_datap(sample_start)
 * 
 */

#line 2008 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 2008 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 2008 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 2008 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 2008 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 2008 "dsproc3/core.pyx"
  }

#line 2008 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":2009
 *     if data == NULL:
 *         return None
 *     return var.get_datap(sample_start)             # <<<<<<<<<<<<<<
 * 
 * def alloc_var_data_index(cds3.core.Var var, size_t sample_start,
 */

#line 2009 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2009 "dsproc3/core.pyx"
  __pyx_t_3.__pyx_n = 1;

#line 2009 "dsproc3/core.pyx"
  __pyx_t_3.sample_start = __pyx_v_sample_start;

#line 2009 "dsproc3/core.pyx"
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_var->__pyx_base.__pyx_vtab)->get_datap(__pyx_v_var, 0, &__pyx_t_3)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2009; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2009 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 2009 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_2;

#line 2009 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 2009 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2009 "dsproc3/core.pyx"


#line 2009 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2009 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2009 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2009 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 2009 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.alloc_var_data", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2009 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2009 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2009 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2009 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2009 "dsproc3/core.pyx"
  return __pyx_r;

#line 2009 "dsproc3/core.pyx"
}

#line 2009 "dsproc3/core.pyx"


#line 2009 "dsproc3/core.pyx"
/* Python wrapper */

#line 2009 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_141alloc_var_data_index(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2009 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_140alloc_var_data_index[] = "alloc_var_data_index(Var var, size_t sample_start, size_t sample_count)\nAllocate memory for a variable's data array.\n    \n    This function is the same as dsproc.alloc_var_data() except that\n    it returns a data index starting at the specified start sample\n    (see dsproc.get_var_data_index()). For variables that have less than\n    two dimensions this function is identical to dsproc_alloc_var_data().\n    It is up to the calling process to cast the return value of this\n    function into the proper data type.\n    \n    If an error occurs in this function it will be appended to the log and\n    error mail messages, and the process status will be set appropriately.\n    \n    @param var - pointer to the variable\n    @param sample_start - start sample (0 based indexing)\n    @param sample_count - number of new samples\n    \n    @retval the data index into the variable's data array starting at the\n            specified start sample\n    @retval None if one of the variable's static dimensions has 0 length\n    @retval None if the variable has no dimensions, and sample_start is not\n            equal to 0 or sample_count is not equal to 1.\n    @retval None if the first variable dimension is not unlimited, and\n            sample_start + sample_count would exceed the dimension length.\n    @retval None if a memory allocation error occurred\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_141alloc_var_data_index = 
#line 2009 "dsproc3/core.pyx"
{__Pyx_NAMESTR("alloc_var_data_index"), (PyCFunction)__pyx_pw_7dsproc3_4core_141alloc_var_data_index, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_140alloc_var_data_index)};

#line 2009 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_141alloc_var_data_index(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = 0
#line 2009 "dsproc3/core.pyx"
;
  size_t __pyx_v_sample_start
#line 2009 "dsproc3/core.pyx"
;
  size_t __pyx_v_sample_count
#line 2009 "dsproc3/core.pyx"
;

#line 2009 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2009 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2009 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("alloc_var_data_index (wrapper)", 0);

#line 2009 "dsproc3/core.pyx"
  {

#line 2009 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__var,&__pyx_n_s__sample_start,&__pyx_n_s__sample_count,0};

#line 2009 "dsproc3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 2009 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2009 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2009 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2009 "dsproc3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 2009 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 2009 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2009 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2009 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2009 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2009 "dsproc3/core.pyx"
      }

#line 2009 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2009 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2009 "dsproc3/core.pyx"
        case  0:

#line 2009 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__var)) != 0)) kw_args--;
        else 
#line 2009 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2009 "dsproc3/core.pyx"
        case  1:

#line 2009 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_start)) != 0)) kw_args--;

#line 2009 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("alloc_var_data_index", 1, 3, 3, 1); 
#line 2009 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2011; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2009 "dsproc3/core.pyx"
        }

#line 2009 "dsproc3/core.pyx"
        case  2:

#line 2009 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_count)) != 0)) kw_args--;

#line 2009 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("alloc_var_data_index", 1, 3, 3, 2); 
#line 2009 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2011; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2009 "dsproc3/core.pyx"
        }

#line 2009 "dsproc3/core.pyx"
      }

#line 2009 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2009 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "alloc_var_data_index") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2011; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2009 "dsproc3/core.pyx"
      }

#line 2009 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 2009 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 2009 "dsproc3/core.pyx"
    } else {

#line 2009 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2009 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2009 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 2009 "dsproc3/core.pyx"
    }

#line 2009 "dsproc3/core.pyx"
    __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)values[0]);

#line 2009 "dsproc3/core.pyx"
    __pyx_v_sample_start = __Pyx_PyInt_AsSize_t(values[1]); if (unlikely((__pyx_v_sample_start == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2011; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2009 "dsproc3/core.pyx"
    __pyx_v_sample_count = __Pyx_PyInt_AsSize_t(values[2]); if (unlikely((__pyx_v_sample_count == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2012; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2009 "dsproc3/core.pyx"
  }

#line 2009 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2009 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("alloc_var_data_index", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 2009 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2011; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2009 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2009 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.alloc_var_data_index", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2009 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2009 "dsproc3/core.pyx"
  return NULL;

#line 2009 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 2009 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_var), __pyx_ptype_4cds3_4core_Var, 1, "var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 2009 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_140alloc_var_data_index(__pyx_self, __pyx_v_var, __pyx_v_sample_start, __pyx_v_sample_count);

#line 2009 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2009 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2009 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2009 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2009 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2009 "dsproc3/core.pyx"
  return __pyx_r;

#line 2009 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2011
 *     return var.get_datap(sample_start)
 * 
 * def alloc_var_data_index(cds3.core.Var var, size_t sample_start,             # <<<<<<<<<<<<<<
 *         size_t sample_count):
 *     """Allocate memory for a variable's data array.
 */

#line 2011 "dsproc3/core.pyx"


#line 2011 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_140alloc_var_data_index(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var, size_t __pyx_v_sample_start, size_t __pyx_v_sample_count) {
  void *__pyx_v_data
#line 2011 "dsproc3/core.pyx"
;

#line 2011 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_4cds3_4core_3Var_get_datap __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2011 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("alloc_var_data_index", 0);

  /* "dsproc3/core.pyx":2039
 * 
 *     """
 *     cdef void *data = NULL             # <<<<<<<<<<<<<<
 *     data = dsproc_alloc_var_data_index(var.c_ob, sample_start, sample_count)
 *     if data == NULL:
 */

#line 2039 "dsproc3/core.pyx"
  __pyx_v_data = NULL;

  /* "dsproc3/core.pyx":2040
 *     """
 *     cdef void *data = NULL
 *     data = dsproc_alloc_var_data_index(var.c_ob, sample_start, sample_count)             # <<<<<<<<<<<<<<
 *     if data == NULL:
 *         return None
 */

#line 2040 "dsproc3/core.pyx"
  __pyx_v_data = dsproc_alloc_var_data_index(__pyx_v_var->c_ob, __pyx_v_sample_start, __pyx_v_sample_count);

  /* "dsproc3/core.pyx":2041
 *     cdef void *data = NULL
 *     data = dsproc_alloc_var_data_index(var.c_ob, sample_start, sample_count)
 *     if data == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return var.get_datap(sample_start)
 */

#line 2041 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_data == NULL);

#line 2041 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":2042
 *     data = dsproc_alloc_var_data_index(var.c_ob, sample_start, sample_count)
 *     if data == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return var.get_datap(sample_start)
 * 
 */

#line 2042 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 2042 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 2042 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 2042 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 2042 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 2042 "dsproc3/core.pyx"
  }

#line 2042 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":2043
 *     if data == NULL:
 *         return None
 *     return var.get_datap(sample_start)             # <<<<<<<<<<<<<<
 * 
 * def get_var_data_index(cds3.core.Var var):
 */

#line 2043 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2043 "dsproc3/core.pyx"
  __pyx_t_3.__pyx_n = 1;

#line 2043 "dsproc3/core.pyx"
  __pyx_t_3.sample_start = __pyx_v_sample_start;

#line 2043 "dsproc3/core.pyx"
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_var->__pyx_base.__pyx_vtab)->get_datap(__pyx_v_var, 0, &__pyx_t_3)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2043; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2043 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 2043 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_2;

#line 2043 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 2043 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2043 "dsproc3/core.pyx"


#line 2043 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2043 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2043 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2043 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 2043 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.alloc_var_data_index", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2043 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2043 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2043 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2043 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2043 "dsproc3/core.pyx"
  return __pyx_r;

#line 2043 "dsproc3/core.pyx"
}

#line 2043 "dsproc3/core.pyx"


#line 2043 "dsproc3/core.pyx"
/* Python wrapper */

#line 2043 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_143get_var_data_index(PyObject *__pyx_self, PyObject *__pyx_v_var); /*proto*/

#line 2043 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_142get_var_data_index[] = "get_var_data_index(Var var)\nGet a data index for a multi-dimensional variable.\n    \n    This function will return a data index that can be used to access the data\n    in a variable using the traditional x[i][j][k] syntax.  It is up to the\n    calling process to cast the return value of this function into the proper\n    data type.\n    \n    Note: If the variable has less than 2 dimensions, the pointer to the\n    variable\342\200\231s data array will be returned.\n    \n    If an error occurs in this function it will be appended to the log and\n    error mail messages, and the process status will be set appropriately.\n    \n    @param var - the variable\n    \n    @retval the data index into the variable\342\200\231s data array\n    @retval None if the pointer to the variable was NULL\n    @retval None if no data has been stored in the variable (var.sample_count == 0)\n    @retval None if a memory allocation error occurs\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_143get_var_data_index = 
#line 2043 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_var_data_index"), (PyCFunction)__pyx_pw_7dsproc3_4core_143get_var_data_index, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_142get_var_data_index)};

#line 2043 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_143get_var_data_index(PyObject *__pyx_self, PyObject *__pyx_v_var) {

#line 2043 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2043 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2043 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_var_data_index (wrapper)", 0);

#line 2043 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_var), __pyx_ptype_4cds3_4core_Var, 1, "var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2045; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 2043 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_142get_var_data_index(__pyx_self, ((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_var));

#line 2043 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2043 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2043 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2043 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2043 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2043 "dsproc3/core.pyx"
  return __pyx_r;

#line 2043 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2045
 *     return var.get_datap(sample_start)
 * 
 * def get_var_data_index(cds3.core.Var var):             # <<<<<<<<<<<<<<
 *     """Get a data index for a multi-dimensional variable.
 * 
 */

#line 2045 "dsproc3/core.pyx"


#line 2045 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_142get_var_data_index(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var) {
  void *__pyx_v_data
#line 2045 "dsproc3/core.pyx"
;

#line 2045 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2045 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_var_data_index", 0);

  /* "dsproc3/core.pyx":2067
 * 
 *     """
 *     cdef void *data = NULL             # <<<<<<<<<<<<<<
 *     data = dsproc_get_var_data_index(var.c_ob)
 *     if data == NULL:
 */

#line 2067 "dsproc3/core.pyx"
  __pyx_v_data = NULL;

  /* "dsproc3/core.pyx":2068
 *     """
 *     cdef void *data = NULL
 *     data = dsproc_get_var_data_index(var.c_ob)             # <<<<<<<<<<<<<<
 *     if data == NULL:
 *         return None
 */

#line 2068 "dsproc3/core.pyx"
  __pyx_v_data = dsproc_get_var_data_index(__pyx_v_var->c_ob);

  /* "dsproc3/core.pyx":2069
 *     cdef void *data = NULL
 *     data = dsproc_get_var_data_index(var.c_ob)
 *     if data == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return var.get_datap()
 */

#line 2069 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_data == NULL);

#line 2069 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":2070
 *     data = dsproc_get_var_data_index(var.c_ob)
 *     if data == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return var.get_datap()
 * 
 */

#line 2070 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 2070 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 2070 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 2070 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 2070 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 2070 "dsproc3/core.pyx"
  }

#line 2070 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":2071
 *     if data == NULL:
 *         return None
 *     return var.get_datap()             # <<<<<<<<<<<<<<
 * 
 * def get_var_data(cds3.core.Var var, CDSDataType type, size_t sample_start,
 */

#line 2071 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2071 "dsproc3/core.pyx"
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_var->__pyx_base.__pyx_vtab)->get_datap(__pyx_v_var, 0, NULL)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2071; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2071 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 2071 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_2;

#line 2071 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 2071 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2071 "dsproc3/core.pyx"


#line 2071 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2071 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2071 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2071 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 2071 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_var_data_index", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2071 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2071 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2071 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2071 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2071 "dsproc3/core.pyx"
  return __pyx_r;

#line 2071 "dsproc3/core.pyx"
}

#line 2071 "dsproc3/core.pyx"


#line 2071 "dsproc3/core.pyx"
/* Python wrapper */

#line 2071 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_145get_var_data(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2071 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_144get_var_data[] = "get_var_data(Var var, CDSDataType type, size_t sample_start, size_t sample_count=0, ndarray data=None)\nGet a copy of the data from a dataset variable.\n\n    This function will get the data from a variable casted into the specified\n    data type. All missing values used in the data will be converted to a single\n    missing value appropriate for the requested data type. The missing value\n    used will be the first value returned by cds_get_var_missing_values() if\n    that value is within the range of the requested data type, otherwise, the\n    default fill value for the requested data type will be used.\n    \n    If an error occurs in this function it will be appended to the log and\n    error mail messages, and the process status will be set appropriately.\n    \n    @todo TODO: \n    @param var - pointer to the variable\n    @param type - data type of the output missing_value and data array\n    @param sample_start - start sample (0 based indexing)\n    \n    @retval the output data array and missing value\n    @retval None if the pointer to the variable was NULL\n    @retval None if the variable has no data for sample_start (sample_count == 0)\n    @retval None if a memory allocation error occurs (sample_count == (size_t)-1)\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_145get_var_data = 
#line 2071 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_var_data"), (PyCFunction)__pyx_pw_7dsproc3_4core_145get_var_data, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_144get_var_data)};

#line 2071 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_145get_var_data(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = 0
#line 2071 "dsproc3/core.pyx"
;
  CDSDataType __pyx_v_type
#line 2071 "dsproc3/core.pyx"
;
  size_t __pyx_v_sample_start
#line 2071 "dsproc3/core.pyx"
;
  size_t __pyx_v_sample_count
#line 2071 "dsproc3/core.pyx"
;
  PyArrayObject *__pyx_v_data = 0
#line 2071 "dsproc3/core.pyx"
;

#line 2071 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2071 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2071 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_var_data (wrapper)", 0);

#line 2071 "dsproc3/core.pyx"
  {

#line 2071 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__var,&__pyx_n_s__type,&__pyx_n_s__sample_start,&__pyx_n_s__sample_count,&__pyx_n_s__data,0};

#line 2071 "dsproc3/core.pyx"
    PyObject* values[5] = {0,0,0,0,0};

    /* "dsproc3/core.pyx":2074
 * 
 * def get_var_data(cds3.core.Var var, CDSDataType type, size_t sample_start,
 *         size_t sample_count=0, np.ndarray data=None):             # <<<<<<<<<<<<<<
 *     """Get a copy of the data from a dataset variable.
 * 
 */

#line 2074 "dsproc3/core.pyx"
    values[4] = (PyObject *)((PyArrayObject *)Py_None);

#line 2074 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2074 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2074 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2074 "dsproc3/core.pyx"
      switch (pos_args) {
        case  5: 
#line 2074 "dsproc3/core.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 2074 "dsproc3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 2074 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 2074 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2074 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2074 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2074 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2074 "dsproc3/core.pyx"
      }

#line 2074 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2074 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2074 "dsproc3/core.pyx"
        case  0:

#line 2074 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__var)) != 0)) kw_args--;
        else 
#line 2074 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2074 "dsproc3/core.pyx"
        case  1:

#line 2074 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__type)) != 0)) kw_args--;

#line 2074 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("get_var_data", 0, 3, 5, 1); 
#line 2074 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2073; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2074 "dsproc3/core.pyx"
        }

#line 2074 "dsproc3/core.pyx"
        case  2:

#line 2074 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_start)) != 0)) kw_args--;

#line 2074 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("get_var_data", 0, 3, 5, 2); 
#line 2074 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2073; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2074 "dsproc3/core.pyx"
        }

#line 2074 "dsproc3/core.pyx"
        case  3:

#line 2074 "dsproc3/core.pyx"
        if (kw_args > 0) {

#line 2074 "dsproc3/core.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_count);

#line 2074 "dsproc3/core.pyx"
          if (value) { values[3] = value; kw_args--; }

#line 2074 "dsproc3/core.pyx"
        }

#line 2074 "dsproc3/core.pyx"
        case  4:

#line 2074 "dsproc3/core.pyx"
        if (kw_args > 0) {

#line 2074 "dsproc3/core.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__data);

#line 2074 "dsproc3/core.pyx"
          if (value) { values[4] = value; kw_args--; }

#line 2074 "dsproc3/core.pyx"
        }

#line 2074 "dsproc3/core.pyx"
      }

#line 2074 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2074 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_var_data") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2073; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2074 "dsproc3/core.pyx"
      }

#line 2074 "dsproc3/core.pyx"
    } else {

#line 2074 "dsproc3/core.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: 
#line 2074 "dsproc3/core.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 2074 "dsproc3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 2074 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 2074 "dsproc3/core.pyx"
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2074 "dsproc3/core.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2074 "dsproc3/core.pyx"
        break;
        default: 
#line 2074 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2074 "dsproc3/core.pyx"
      }

#line 2074 "dsproc3/core.pyx"
    }

#line 2074 "dsproc3/core.pyx"
    __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)values[0]);

#line 2074 "dsproc3/core.pyx"
    __pyx_v_type = ((CDSDataType)PyInt_AsLong(values[1])); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2073; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2074 "dsproc3/core.pyx"
    __pyx_v_sample_start = __Pyx_PyInt_AsSize_t(values[2]); if (unlikely((__pyx_v_sample_start == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2073; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2074 "dsproc3/core.pyx"
    if (values[3]) {

#line 2074 "dsproc3/core.pyx"
      __pyx_v_sample_count = __Pyx_PyInt_AsSize_t(values[3]); if (unlikely((__pyx_v_sample_count == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2074; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2074 "dsproc3/core.pyx"
    } else {

#line 2074 "dsproc3/core.pyx"
      __pyx_v_sample_count = ((size_t)0);

#line 2074 "dsproc3/core.pyx"
    }

#line 2074 "dsproc3/core.pyx"
    __pyx_v_data = ((PyArrayObject *)values[4]);

#line 2074 "dsproc3/core.pyx"
  }

#line 2074 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2074 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_var_data", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); 
#line 2074 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2073; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2074 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2074 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_var_data", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2074 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2074 "dsproc3/core.pyx"
  return NULL;

#line 2074 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 2074 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_var), __pyx_ptype_4cds3_4core_Var, 1, "var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2074 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data), __pyx_ptype_5numpy_ndarray, 1, "data", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 2074 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_144get_var_data(__pyx_self, __pyx_v_var, __pyx_v_type, __pyx_v_sample_start, __pyx_v_sample_count, __pyx_v_data);

#line 2074 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2074 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2074 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2074 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2074 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2074 "dsproc3/core.pyx"
  return __pyx_r;

#line 2074 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2073
 *     return var.get_datap()
 * 
 * def get_var_data(cds3.core.Var var, CDSDataType type, size_t sample_start,             # <<<<<<<<<<<<<<
 *         size_t sample_count=0, np.ndarray data=None):
 *     """Get a copy of the data from a dataset variable.
 */

#line 2073 "dsproc3/core.pyx"


#line 2073 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_144get_var_data(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var, CDSDataType __pyx_v_type, size_t __pyx_v_sample_start, size_t __pyx_v_sample_count, PyArrayObject *__pyx_v_data) {
  void *__pyx_v_datap
#line 2073 "dsproc3/core.pyx"
;
  void *__pyx_v_missing_c
#line 2073 "dsproc3/core.pyx"
;
  int __pyx_v_ndims
#line 2073 "dsproc3/core.pyx"
;
  size_t __pyx_v_sample_size
#line 2073 "dsproc3/core.pyx"
;
  PyArray_Descr *__pyx_v_dtype = 0
#line 2073 "dsproc3/core.pyx"
;
  npy_intp *__pyx_v_dims
#line 2073 "dsproc3/core.pyx"
;
  int __pyx_v_i
#line 2073 "dsproc3/core.pyx"
;

#line 2073 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  size_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2073 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_var_data", 0);

#line 2073 "dsproc3/core.pyx"
  __Pyx_INCREF((PyObject *)__pyx_v_data);

  /* "dsproc3/core.pyx":2098
 * 
 *     """
 *     cdef void* datap = NULL             # <<<<<<<<<<<<<<
 *     cdef void* missing_c = _alloc_single(type)
 *     cdef int ndims = var.c_ob.ndims
 */

#line 2098 "dsproc3/core.pyx"
  __pyx_v_datap = NULL;

  /* "dsproc3/core.pyx":2099
 *     """
 *     cdef void* datap = NULL
 *     cdef void* missing_c = _alloc_single(type)             # <<<<<<<<<<<<<<
 *     cdef int ndims = var.c_ob.ndims
 *     cdef size_t sample_size = 0
 */

#line 2099 "dsproc3/core.pyx"
  __pyx_v_missing_c = __pyx_f_7dsproc3_4core__alloc_single(__pyx_v_type, NULL);

  /* "dsproc3/core.pyx":2100
 *     cdef void* datap = NULL
 *     cdef void* missing_c = _alloc_single(type)
 *     cdef int ndims = var.c_ob.ndims             # <<<<<<<<<<<<<<
 *     cdef size_t sample_size = 0
 *     cdef np.dtype dtype = cds_type_to_dtype_obj(type)
 */

#line 2100 "dsproc3/core.pyx"
  __pyx_t_1 = __pyx_v_var->c_ob->ndims;

#line 2100 "dsproc3/core.pyx"
  __pyx_v_ndims = __pyx_t_1;

  /* "dsproc3/core.pyx":2101
 *     cdef void* missing_c = _alloc_single(type)
 *     cdef int ndims = var.c_ob.ndims
 *     cdef size_t sample_size = 0             # <<<<<<<<<<<<<<
 *     cdef np.dtype dtype = cds_type_to_dtype_obj(type)
 *     if sample_count == 0 or data is None:
 */

#line 2101 "dsproc3/core.pyx"
  __pyx_v_sample_size = 0;

  /* "dsproc3/core.pyx":2102
 *     cdef int ndims = var.c_ob.ndims
 *     cdef size_t sample_size = 0
 *     cdef np.dtype dtype = cds_type_to_dtype_obj(type)             # <<<<<<<<<<<<<<
 *     if sample_count == 0 or data is None:
 *         datap = dsproc_get_var_data(var.c_ob, type, sample_start,
 */

#line 2102 "dsproc3/core.pyx"
  __pyx_t_2 = ((PyObject *)__pyx_f_7dsproc3_4core_cds_type_to_dtype_obj(__pyx_v_type)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2102 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 2102 "dsproc3/core.pyx"
  __pyx_v_dtype = ((PyArray_Descr *)__pyx_t_2);

#line 2102 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

  /* "dsproc3/core.pyx":2103
 *     cdef size_t sample_size = 0
 *     cdef np.dtype dtype = cds_type_to_dtype_obj(type)
 *     if sample_count == 0 or data is None:             # <<<<<<<<<<<<<<
 *         datap = dsproc_get_var_data(var.c_ob, type, sample_start,
 *                 &sample_count, missing_c, NULL)
 */

#line 2103 "dsproc3/core.pyx"
  __pyx_t_3 = (__pyx_v_sample_count == 0);

#line 2103 "dsproc3/core.pyx"
  if (!__pyx_t_3) {

#line 2103 "dsproc3/core.pyx"
    __pyx_t_4 = (((PyObject *)__pyx_v_data) == Py_None);

#line 2103 "dsproc3/core.pyx"
    __pyx_t_5 = __pyx_t_4;

#line 2103 "dsproc3/core.pyx"
  } else {

#line 2103 "dsproc3/core.pyx"
    __pyx_t_5 = __pyx_t_3;

#line 2103 "dsproc3/core.pyx"
  }

#line 2103 "dsproc3/core.pyx"
  if (__pyx_t_5) {

    /* "dsproc3/core.pyx":2105
 *     if sample_count == 0 or data is None:
 *         datap = dsproc_get_var_data(var.c_ob, type, sample_start,
 *                 &sample_count, missing_c, NULL)             # <<<<<<<<<<<<<<
 *         if datap == NULL:
 *             return None,None
 */

#line 2105 "dsproc3/core.pyx"
    __pyx_v_datap = dsproc_get_var_data(__pyx_v_var->c_ob, __pyx_v_type, __pyx_v_sample_start, (&__pyx_v_sample_count), __pyx_v_missing_c, NULL);

    /* "dsproc3/core.pyx":2106
 *         datap = dsproc_get_var_data(var.c_ob, type, sample_start,
 *                 &sample_count, missing_c, NULL)
 *         if datap == NULL:             # <<<<<<<<<<<<<<
 *             return None,None
 *         dims = <np.npy_intp*>malloc(sizeof(np.npy_intp) * ndims)
 */

#line 2106 "dsproc3/core.pyx"
    __pyx_t_5 = (__pyx_v_datap == NULL);

#line 2106 "dsproc3/core.pyx"
    if (__pyx_t_5) {

      /* "dsproc3/core.pyx":2107
 *                 &sample_count, missing_c, NULL)
 *         if datap == NULL:
 *             return None,None             # <<<<<<<<<<<<<<
 *         dims = <np.npy_intp*>malloc(sizeof(np.npy_intp) * ndims)
 *         for i in range(ndims):
 */

#line 2107 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_r);

#line 2107 "dsproc3/core.pyx"
      __Pyx_INCREF(((PyObject *)__pyx_k_tuple_59));

#line 2107 "dsproc3/core.pyx"
      __pyx_r = ((PyObject *)__pyx_k_tuple_59);

#line 2107 "dsproc3/core.pyx"
      goto __pyx_L0;

#line 2107 "dsproc3/core.pyx"
      goto __pyx_L4;

#line 2107 "dsproc3/core.pyx"
    }

#line 2107 "dsproc3/core.pyx"
    __pyx_L4:;

    /* "dsproc3/core.pyx":2108
 *         if datap == NULL:
 *             return None,None
 *         dims = <np.npy_intp*>malloc(sizeof(np.npy_intp) * ndims)             # <<<<<<<<<<<<<<
 *         for i in range(ndims):
 *             dims[i] = var.c_ob.dims[i].length
 */

#line 2108 "dsproc3/core.pyx"
    __pyx_v_dims = ((npy_intp *)malloc(((sizeof(npy_intp)) * __pyx_v_ndims)));

    /* "dsproc3/core.pyx":2109
 *             return None,None
 *         dims = <np.npy_intp*>malloc(sizeof(np.npy_intp) * ndims)
 *         for i in range(ndims):             # <<<<<<<<<<<<<<
 *             dims[i] = var.c_ob.dims[i].length
 *         dims[0] = sample_count
 */

#line 2109 "dsproc3/core.pyx"
    __pyx_t_1 = __pyx_v_ndims;

#line 2109 "dsproc3/core.pyx"
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_1; __pyx_t_6+=1) {

#line 2109 "dsproc3/core.pyx"
      __pyx_v_i = __pyx_t_6;

      /* "dsproc3/core.pyx":2110
 *         dims = <np.npy_intp*>malloc(sizeof(np.npy_intp) * ndims)
 *         for i in range(ndims):
 *             dims[i] = var.c_ob.dims[i].length             # <<<<<<<<<<<<<<
 *         dims[0] = sample_count
 *         data = np.PyArray_SimpleNewFromData(ndims, dims, dtype.num, datap)
 */

#line 2110 "dsproc3/core.pyx"
      __pyx_t_7 = (__pyx_v_var->c_ob->dims[__pyx_v_i])->length;

#line 2110 "dsproc3/core.pyx"
      (__pyx_v_dims[__pyx_v_i]) = __pyx_t_7;

#line 2110 "dsproc3/core.pyx"
    }

    /* "dsproc3/core.pyx":2111
 *         for i in range(ndims):
 *             dims[i] = var.c_ob.dims[i].length
 *         dims[0] = sample_count             # <<<<<<<<<<<<<<
 *         data = np.PyArray_SimpleNewFromData(ndims, dims, dtype.num, datap)
 *         free(dims)
 */

#line 2111 "dsproc3/core.pyx"
    (__pyx_v_dims[0]) = __pyx_v_sample_count;

    /* "dsproc3/core.pyx":2112
 *             dims[i] = var.c_ob.dims[i].length
 *         dims[0] = sample_count
 *         data = np.PyArray_SimpleNewFromData(ndims, dims, dtype.num, datap)             # <<<<<<<<<<<<<<
 *         free(dims)
 *         # allow numpy to reclaim memory when array goes out of scope
 */

#line 2112 "dsproc3/core.pyx"
    __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_v_dtype), __pyx_n_s__num); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2112 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 2112 "dsproc3/core.pyx"
    __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_t_2); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2112 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 2112 "dsproc3/core.pyx"
    __pyx_t_2 = PyArray_SimpleNewFromData(__pyx_v_ndims, __pyx_v_dims, __pyx_t_1, __pyx_v_datap); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2112 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 2112 "dsproc3/core.pyx"
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2112 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_v_data));

#line 2112 "dsproc3/core.pyx"
    __pyx_v_data = ((PyArrayObject *)__pyx_t_2);

#line 2112 "dsproc3/core.pyx"
    __pyx_t_2 = 0;

    /* "dsproc3/core.pyx":2113
 *         dims[0] = sample_count
 *         data = np.PyArray_SimpleNewFromData(ndims, dims, dtype.num, datap)
 *         free(dims)             # <<<<<<<<<<<<<<
 *         # allow numpy to reclaim memory when array goes out of scope
 *         data.base = PyCObject_FromVoidPtr(datap, _free)
 */

#line 2113 "dsproc3/core.pyx"
    free(__pyx_v_dims);

    /* "dsproc3/core.pyx":2115
 *         free(dims)
 *         # allow numpy to reclaim memory when array goes out of scope
 *         data.base = PyCObject_FromVoidPtr(datap, _free)             # <<<<<<<<<<<<<<
 *         return data, _convert_single(type, missing_c)
 *     else:
 */

#line 2115 "dsproc3/core.pyx"
    __pyx_v_data->base = PyCObject_FromVoidPtr(__pyx_v_datap, __pyx_f_7dsproc3_4core__free);

    /* "dsproc3/core.pyx":2116
 *         # allow numpy to reclaim memory when array goes out of scope
 *         data.base = PyCObject_FromVoidPtr(datap, _free)
 *         return data, _convert_single(type, missing_c)             # <<<<<<<<<<<<<<
 *     else:
 *         sample_size = cds_var_sample_size(var.c_ob)
 */

#line 2116 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 2116 "dsproc3/core.pyx"
    __pyx_t_2 = __pyx_f_7dsproc3_4core__convert_single(__pyx_v_type, __pyx_v_missing_c); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2116 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 2116 "dsproc3/core.pyx"
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2116 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 2116 "dsproc3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_data));

#line 2116 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_8, 0, ((PyObject *)__pyx_v_data));

#line 2116 "dsproc3/core.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_v_data));

#line 2116 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_2);

#line 2116 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_2);

#line 2116 "dsproc3/core.pyx"
    __pyx_t_2 = 0;

#line 2116 "dsproc3/core.pyx"
    __pyx_r = ((PyObject *)__pyx_t_8);

#line 2116 "dsproc3/core.pyx"
    __pyx_t_8 = 0;

#line 2116 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 2116 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 2116 "dsproc3/core.pyx"
  }

#line 2116 "dsproc3/core.pyx"
  /*else*/ {

    /* "dsproc3/core.pyx":2118
 *         return data, _convert_single(type, missing_c)
 *     else:
 *         sample_size = cds_var_sample_size(var.c_ob)             # <<<<<<<<<<<<<<
 *         assert data.flags['C_CONTIGUOUS']
 *         assert data.size >= sample_count*sample_size
 */

#line 2118 "dsproc3/core.pyx"
    __pyx_v_sample_size = cds_var_sample_size(__pyx_v_var->c_ob);

    /* "dsproc3/core.pyx":2119
 *     else:
 *         sample_size = cds_var_sample_size(var.c_ob)
 *         assert data.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert data.size >= sample_count*sample_size
 *         datap = dsproc_get_var_data(var.c_ob, type, sample_start,
 */

#line 2119 "dsproc3/core.pyx"
    #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 2119 "dsproc3/core.pyx"
    __pyx_t_8 = PyObject_GetAttr(((PyObject *)__pyx_v_data), __pyx_n_s__flags); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2119 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 2119 "dsproc3/core.pyx"
    __pyx_t_2 = PyObject_GetItem(__pyx_t_8, ((PyObject *)__pyx_n_s__C_CONTIGUOUS)); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2119 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 2119 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 2119 "dsproc3/core.pyx"
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2119 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 2119 "dsproc3/core.pyx"
    if (unlikely(!__pyx_t_5)) {

#line 2119 "dsproc3/core.pyx"
      PyErr_SetNone(PyExc_AssertionError);

#line 2119 "dsproc3/core.pyx"
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2119 "dsproc3/core.pyx"
    }

#line 2119 "dsproc3/core.pyx"
    #endif

    /* "dsproc3/core.pyx":2120
 *         sample_size = cds_var_sample_size(var.c_ob)
 *         assert data.flags['C_CONTIGUOUS']
 *         assert data.size >= sample_count*sample_size             # <<<<<<<<<<<<<<
 *         datap = dsproc_get_var_data(var.c_ob, type, sample_start,
 *                 &sample_count, missing_c, data.data)
 */

#line 2120 "dsproc3/core.pyx"
    #ifndef CYTHON_WITHOUT_ASSERTIONS

#line 2120 "dsproc3/core.pyx"
    __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_v_data), __pyx_n_s__size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2120 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 2120 "dsproc3/core.pyx"
    __pyx_t_8 = __Pyx_PyInt_FromSize_t((__pyx_v_sample_count * __pyx_v_sample_size)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2120 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 2120 "dsproc3/core.pyx"
    __pyx_t_9 = PyObject_RichCompare(__pyx_t_2, __pyx_t_8, Py_GE); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2120 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 2120 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 2120 "dsproc3/core.pyx"
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2120 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 2120 "dsproc3/core.pyx"
    if (unlikely(!__pyx_t_5)) {

#line 2120 "dsproc3/core.pyx"
      PyErr_SetNone(PyExc_AssertionError);

#line 2120 "dsproc3/core.pyx"
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2120 "dsproc3/core.pyx"
    }

#line 2120 "dsproc3/core.pyx"
    #endif

    /* "dsproc3/core.pyx":2122
 *         assert data.size >= sample_count*sample_size
 *         datap = dsproc_get_var_data(var.c_ob, type, sample_start,
 *                 &sample_count, missing_c, data.data)             # <<<<<<<<<<<<<<
 *         if datap == NULL:
 *             return None,None
 */

#line 2122 "dsproc3/core.pyx"
    __pyx_v_datap = dsproc_get_var_data(__pyx_v_var->c_ob, __pyx_v_type, __pyx_v_sample_start, (&__pyx_v_sample_count), __pyx_v_missing_c, __pyx_v_data->data);

    /* "dsproc3/core.pyx":2123
 *         datap = dsproc_get_var_data(var.c_ob, type, sample_start,
 *                 &sample_count, missing_c, data.data)
 *         if datap == NULL:             # <<<<<<<<<<<<<<
 *             return None,None
 *         return data, _convert_single(type, missing_c)
 */

#line 2123 "dsproc3/core.pyx"
    __pyx_t_5 = (__pyx_v_datap == NULL);

#line 2123 "dsproc3/core.pyx"
    if (__pyx_t_5) {

      /* "dsproc3/core.pyx":2124
 *                 &sample_count, missing_c, data.data)
 *         if datap == NULL:
 *             return None,None             # <<<<<<<<<<<<<<
 *         return data, _convert_single(type, missing_c)
 * 
 */

#line 2124 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_r);

#line 2124 "dsproc3/core.pyx"
      __Pyx_INCREF(((PyObject *)__pyx_k_tuple_60));

#line 2124 "dsproc3/core.pyx"
      __pyx_r = ((PyObject *)__pyx_k_tuple_60);

#line 2124 "dsproc3/core.pyx"
      goto __pyx_L0;

#line 2124 "dsproc3/core.pyx"
      goto __pyx_L7;

#line 2124 "dsproc3/core.pyx"
    }

#line 2124 "dsproc3/core.pyx"
    __pyx_L7:;

    /* "dsproc3/core.pyx":2125
 *         if datap == NULL:
 *             return None,None
 *         return data, _convert_single(type, missing_c)             # <<<<<<<<<<<<<<
 * 
 * def get_var_missing_values(cds3.core.Var var):
 */

#line 2125 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 2125 "dsproc3/core.pyx"
    __pyx_t_9 = __pyx_f_7dsproc3_4core__convert_single(__pyx_v_type, __pyx_v_missing_c); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2125 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_9);

#line 2125 "dsproc3/core.pyx"
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2125 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 2125 "dsproc3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_data));

#line 2125 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_8, 0, ((PyObject *)__pyx_v_data));

#line 2125 "dsproc3/core.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_v_data));

#line 2125 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);

#line 2125 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_9);

#line 2125 "dsproc3/core.pyx"
    __pyx_t_9 = 0;

#line 2125 "dsproc3/core.pyx"
    __pyx_r = ((PyObject *)__pyx_t_8);

#line 2125 "dsproc3/core.pyx"
    __pyx_t_8 = 0;

#line 2125 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 2125 "dsproc3/core.pyx"
  }

#line 2125 "dsproc3/core.pyx"
  __pyx_L3:;

#line 2125 "dsproc3/core.pyx"


#line 2125 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2125 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2125 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2125 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 2125 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 2125 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_9);

#line 2125 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_var_data", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2125 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2125 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2125 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_dtype);

#line 2125 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_data);

#line 2125 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2125 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2125 "dsproc3/core.pyx"
  return __pyx_r;

#line 2125 "dsproc3/core.pyx"
}

#line 2125 "dsproc3/core.pyx"


#line 2125 "dsproc3/core.pyx"
/* Python wrapper */

#line 2125 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_147get_var_missing_values(PyObject *__pyx_self, PyObject *__pyx_v_var); /*proto*/

#line 2125 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_146get_var_missing_values[] = "get_var_missing_values(Var var)\nGet the missing values for a CDS Variable.\n\n    This function will return an array containing all values specified by\n    the missing_value and _FillValue attributes (in that order), and will\n    be the same data type as the variable. If the _FillValue attribute does\n    not exist but a default fill value has been defined, it will be used\n    instead.\n    \n    If an error occurs in this function it will be appended to the log and\n    error mail messages, and the process status will be set appropriately.\n    \n    @param var - pointer to the variable\n    @param values - output: pointer to the array of missing values, the\n    data type of this array will be the same as the variable\n    \n    @retval number of missing values\n    @retval 0 if there are no missing or fill values\n    @retval -1 if a memory allocation error occurs\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_147get_var_missing_values = 
#line 2125 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_var_missing_values"), (PyCFunction)__pyx_pw_7dsproc3_4core_147get_var_missing_values, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_146get_var_missing_values)};

#line 2125 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_147get_var_missing_values(PyObject *__pyx_self, PyObject *__pyx_v_var) {

#line 2125 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2125 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2125 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_var_missing_values (wrapper)", 0);

#line 2125 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_var), __pyx_ptype_4cds3_4core_Var, 1, "var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 2125 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_146get_var_missing_values(__pyx_self, ((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_var));

#line 2125 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2125 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2125 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2125 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2125 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2125 "dsproc3/core.pyx"
  return __pyx_r;

#line 2125 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2127
 *         return data, _convert_single(type, missing_c)
 * 
 * def get_var_missing_values(cds3.core.Var var):             # <<<<<<<<<<<<<<
 *     """Get the missing values for a CDS Variable.
 * 
 */

#line 2127 "dsproc3/core.pyx"


#line 2127 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_146get_var_missing_values(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var) {
  int __pyx_v_retval
#line 2127 "dsproc3/core.pyx"
;
  npy_intp __pyx_v_size
#line 2127 "dsproc3/core.pyx"
;
  void *__pyx_v_values
#line 2127 "dsproc3/core.pyx"
;
  CDSDataType __pyx_v_type
#line 2127 "dsproc3/core.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 2127 "dsproc3/core.pyx"
;

#line 2127 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  CDSDataType __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2127 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_var_missing_values", 0);

  /* "dsproc3/core.pyx":2151
 *     cdef np.npy_intp size
 *     cdef void *values
 *     cdef CDSDataType type = var.c_ob.type             # <<<<<<<<<<<<<<
 *     cdef np.ndarray array
 *     retval = dsproc_get_var_missing_values(var.c_ob, &values)
 */

#line 2151 "dsproc3/core.pyx"
  __pyx_t_1 = __pyx_v_var->c_ob->type;

#line 2151 "dsproc3/core.pyx"
  __pyx_v_type = __pyx_t_1;

  /* "dsproc3/core.pyx":2153
 *     cdef CDSDataType type = var.c_ob.type
 *     cdef np.ndarray array
 *     retval = dsproc_get_var_missing_values(var.c_ob, &values)             # <<<<<<<<<<<<<<
 *     if retval < 0:
 *         return None
 */

#line 2153 "dsproc3/core.pyx"
  __pyx_v_retval = dsproc_get_var_missing_values(__pyx_v_var->c_ob, (&__pyx_v_values));

  /* "dsproc3/core.pyx":2154
 *     cdef np.ndarray array
 *     retval = dsproc_get_var_missing_values(var.c_ob, &values)
 *     if retval < 0:             # <<<<<<<<<<<<<<
 *         return None
 *     elif retval == 0:
 */

#line 2154 "dsproc3/core.pyx"
  __pyx_t_2 = (__pyx_v_retval < 0);

#line 2154 "dsproc3/core.pyx"
  if (__pyx_t_2) {

    /* "dsproc3/core.pyx":2155
 *     retval = dsproc_get_var_missing_values(var.c_ob, &values)
 *     if retval < 0:
 *         return None             # <<<<<<<<<<<<<<
 *     elif retval == 0:
 *         return np.array([]) # empty, size 0 array of some type
 */

#line 2155 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 2155 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 2155 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 2155 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 2155 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 2155 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":2156
 *     if retval < 0:
 *         return None
 *     elif retval == 0:             # <<<<<<<<<<<<<<
 *         return np.array([]) # empty, size 0 array of some type
 *     else:
 */

#line 2156 "dsproc3/core.pyx"
  __pyx_t_2 = (__pyx_v_retval == 0);

#line 2156 "dsproc3/core.pyx"
  if (__pyx_t_2) {

    /* "dsproc3/core.pyx":2157
 *         return None
 *     elif retval == 0:
 *         return np.array([]) # empty, size 0 array of some type             # <<<<<<<<<<<<<<
 *     else:
 *         size = retval
 */

#line 2157 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 2157 "dsproc3/core.pyx"
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__np); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2157 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 2157 "dsproc3/core.pyx"
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__array); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2157 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 2157 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 2157 "dsproc3/core.pyx"
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2157 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 2157 "dsproc3/core.pyx"
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2157 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 2157 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_t_3));

#line 2157 "dsproc3/core.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_t_3));

#line 2157 "dsproc3/core.pyx"
    __pyx_t_3 = 0;

#line 2157 "dsproc3/core.pyx"
    __pyx_t_3 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2157 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 2157 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 2157 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;

#line 2157 "dsproc3/core.pyx"
    __pyx_r = __pyx_t_3;

#line 2157 "dsproc3/core.pyx"
    __pyx_t_3 = 0;

#line 2157 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 2157 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 2157 "dsproc3/core.pyx"
  }

#line 2157 "dsproc3/core.pyx"
  /*else*/ {

    /* "dsproc3/core.pyx":2159
 *         return np.array([]) # empty, size 0 array of some type
 *     else:
 *         size = retval             # <<<<<<<<<<<<<<
 *         array = np.PyArray_SimpleNewFromData(1, &size,
 *                 cds_type_to_dtype(type), values)
 */

#line 2159 "dsproc3/core.pyx"
    __pyx_v_size = __pyx_v_retval;

    /* "dsproc3/core.pyx":2161
 *         size = retval
 *         array = np.PyArray_SimpleNewFromData(1, &size,
 *                 cds_type_to_dtype(type), values)             # <<<<<<<<<<<<<<
 *         # allow numpy to reclaim memory when array goes out of scope
 *         array.base = PyCObject_FromVoidPtr(values, _free)
 */

#line 2161 "dsproc3/core.pyx"
    __pyx_t_6 = __pyx_f_7dsproc3_4core_cds_type_to_dtype(__pyx_v_type); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2161 "dsproc3/core.pyx"
    __pyx_t_3 = PyArray_SimpleNewFromData(1, (&__pyx_v_size), __pyx_t_6, __pyx_v_values); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2161 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 2161 "dsproc3/core.pyx"
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2161 "dsproc3/core.pyx"
    __pyx_v_array = ((PyArrayObject *)__pyx_t_3);

#line 2161 "dsproc3/core.pyx"
    __pyx_t_3 = 0;

    /* "dsproc3/core.pyx":2163
 *                 cds_type_to_dtype(type), values)
 *         # allow numpy to reclaim memory when array goes out of scope
 *         array.base = PyCObject_FromVoidPtr(values, _free)             # <<<<<<<<<<<<<<
 *         return array
 * 
 */

#line 2163 "dsproc3/core.pyx"
    __pyx_v_array->base = PyCObject_FromVoidPtr(__pyx_v_values, __pyx_f_7dsproc3_4core__free);

    /* "dsproc3/core.pyx":2164
 *         # allow numpy to reclaim memory when array goes out of scope
 *         array.base = PyCObject_FromVoidPtr(values, _free)
 *         return array             # <<<<<<<<<<<<<<
 * 
 * def init_var_data(
 */

#line 2164 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 2164 "dsproc3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_array));

#line 2164 "dsproc3/core.pyx"
    __pyx_r = ((PyObject *)__pyx_v_array);

#line 2164 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 2164 "dsproc3/core.pyx"
  }

#line 2164 "dsproc3/core.pyx"
  __pyx_L3:;

#line 2164 "dsproc3/core.pyx"


#line 2164 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2164 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2164 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2164 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 2164 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 2164 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 2164 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_var_missing_values", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2164 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2164 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2164 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_array);

#line 2164 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2164 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2164 "dsproc3/core.pyx"
  return __pyx_r;

#line 2164 "dsproc3/core.pyx"
}

#line 2164 "dsproc3/core.pyx"


#line 2164 "dsproc3/core.pyx"
/* Python wrapper */

#line 2164 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_149init_var_data(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2164 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_148init_var_data[] = "init_var_data(Var var, size_t sample_start, size_t sample_count, int use_missing)\nInitialize the data values for a dataset variable.\n    \n    This function will make sure enough memory is allocated for the specified\n    samples and initializing the data values to either the variable's missing\n    value (use_missing == True), or 0 (use_missing == False).\n    \n    The search order for missing values is:\n    \n    - missing_value attribute\n    - _FillValue attribute\n    - variable's default missing value\n    \n    If the variable does not have any missing or fill values defined the\n    default fill value for the variable's data type will be used and the\n    default fill value for the variable will be set.\n    \n    If the specified start sample is greater than the variable's current sample\n    count, the hole between the two will be filled with the first missing or\n    fill value defined for the variable.\n    \n    If an error occurs in this function it will be appended to the log and\n    error mail messages, and the process status will be set appropriately.\n    \n    @param var - the variable\n    @param sample_start - start sample of the data to initialize\n            (0 based indexing)\n    @param sample_count - number of samples to initialize\n    @param use_missing - flag indicating if the variables missing value\n            should be used (1 == TRUE, 0 == fill with zeros)\n    \n    @retval the specifed start sample in the variable's data array\n    @retval None if the specified sample count is zero\n    @retval None if one of the variable's static dimensions has 0 length\n    @retval None if the variable has no dimensions, and sample_start is not\n            equal to 0 or sample_count is not equal to 1.\n    @retval None if the first variable dimension is not unlimited, and\n            sample_start + sample_count would exceed the dimension length.\n    @retval None if a memory allocation error occurred\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_149init_var_data = 
#line 2164 "dsproc3/core.pyx"
{__Pyx_NAMESTR("init_var_data"), (PyCFunction)__pyx_pw_7dsproc3_4core_149init_var_data, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_148init_var_data)};

#line 2164 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_149init_var_data(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = 0
#line 2164 "dsproc3/core.pyx"
;
  size_t __pyx_v_sample_start
#line 2164 "dsproc3/core.pyx"
;
  size_t __pyx_v_sample_count
#line 2164 "dsproc3/core.pyx"
;
  int __pyx_v_use_missing
#line 2164 "dsproc3/core.pyx"
;

#line 2164 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2164 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2164 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("init_var_data (wrapper)", 0);

#line 2164 "dsproc3/core.pyx"
  {

#line 2164 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__var,&__pyx_n_s__sample_start,&__pyx_n_s__sample_count,&__pyx_n_s__use_missing,0};

#line 2164 "dsproc3/core.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 2164 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2164 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2164 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2164 "dsproc3/core.pyx"
      switch (pos_args) {
        case  4: 
#line 2164 "dsproc3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 2164 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 2164 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2164 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2164 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2164 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2164 "dsproc3/core.pyx"
      }

#line 2164 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2164 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2164 "dsproc3/core.pyx"
        case  0:

#line 2164 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__var)) != 0)) kw_args--;
        else 
#line 2164 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2164 "dsproc3/core.pyx"
        case  1:

#line 2164 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_start)) != 0)) kw_args--;

#line 2164 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("init_var_data", 1, 4, 4, 1); 
#line 2164 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2166; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2164 "dsproc3/core.pyx"
        }

#line 2164 "dsproc3/core.pyx"
        case  2:

#line 2164 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_count)) != 0)) kw_args--;

#line 2164 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("init_var_data", 1, 4, 4, 2); 
#line 2164 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2166; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2164 "dsproc3/core.pyx"
        }

#line 2164 "dsproc3/core.pyx"
        case  3:

#line 2164 "dsproc3/core.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__use_missing)) != 0)) kw_args--;

#line 2164 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("init_var_data", 1, 4, 4, 3); 
#line 2164 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2166; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2164 "dsproc3/core.pyx"
        }

#line 2164 "dsproc3/core.pyx"
      }

#line 2164 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2164 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "init_var_data") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2166; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2164 "dsproc3/core.pyx"
      }

#line 2164 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {

#line 2164 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 2164 "dsproc3/core.pyx"
    } else {

#line 2164 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2164 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2164 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 2164 "dsproc3/core.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 2164 "dsproc3/core.pyx"
    }

#line 2164 "dsproc3/core.pyx"
    __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)values[0]);

#line 2164 "dsproc3/core.pyx"
    __pyx_v_sample_start = __Pyx_PyInt_AsSize_t(values[1]); if (unlikely((__pyx_v_sample_start == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2168; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2164 "dsproc3/core.pyx"
    __pyx_v_sample_count = __Pyx_PyInt_AsSize_t(values[2]); if (unlikely((__pyx_v_sample_count == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2169; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2164 "dsproc3/core.pyx"
    __pyx_v_use_missing = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_use_missing == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2164 "dsproc3/core.pyx"
  }

#line 2164 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2164 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init_var_data", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 2164 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2166; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2164 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2164 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.init_var_data", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2164 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2164 "dsproc3/core.pyx"
  return NULL;

#line 2164 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 2164 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_var), __pyx_ptype_4cds3_4core_Var, 1, "var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 2164 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_148init_var_data(__pyx_self, __pyx_v_var, __pyx_v_sample_start, __pyx_v_sample_count, __pyx_v_use_missing);

#line 2164 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2164 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2164 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2164 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2164 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2164 "dsproc3/core.pyx"
  return __pyx_r;

#line 2164 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2166
 *         return array
 * 
 * def init_var_data(             # <<<<<<<<<<<<<<
 *         cds3.core.Var var,
 *         size_t sample_start,
 */

#line 2166 "dsproc3/core.pyx"


#line 2166 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_148init_var_data(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var, size_t __pyx_v_sample_start, size_t __pyx_v_sample_count, int __pyx_v_use_missing) {
  void *__pyx_v_data
#line 2166 "dsproc3/core.pyx"
;

#line 2166 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_4cds3_4core_3Var_get_datap __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2166 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("init_var_data", 0);

  /* "dsproc3/core.pyx":2211
 * 
 *     """
 *     cdef void *data = NULL             # <<<<<<<<<<<<<<
 *     data = dsproc_init_var_data(var.c_ob, sample_start, sample_count,
 *             use_missing)
 */

#line 2211 "dsproc3/core.pyx"
  __pyx_v_data = NULL;

  /* "dsproc3/core.pyx":2213
 *     cdef void *data = NULL
 *     data = dsproc_init_var_data(var.c_ob, sample_start, sample_count,
 *             use_missing)             # <<<<<<<<<<<<<<
 *     if data == NULL:
 *         return None
 */

#line 2213 "dsproc3/core.pyx"
  __pyx_v_data = dsproc_init_var_data(__pyx_v_var->c_ob, __pyx_v_sample_start, __pyx_v_sample_count, __pyx_v_use_missing);

  /* "dsproc3/core.pyx":2214
 *     data = dsproc_init_var_data(var.c_ob, sample_start, sample_count,
 *             use_missing)
 *     if data == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return var.get_datap(sample_start)
 */

#line 2214 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_data == NULL);

#line 2214 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":2215
 *             use_missing)
 *     if data == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return var.get_datap(sample_start)
 * 
 */

#line 2215 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 2215 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 2215 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 2215 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 2215 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 2215 "dsproc3/core.pyx"
  }

#line 2215 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":2216
 *     if data == NULL:
 *         return None
 *     return var.get_datap(sample_start)             # <<<<<<<<<<<<<<
 * 
 * def init_var_data_index(
 */

#line 2216 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2216 "dsproc3/core.pyx"
  __pyx_t_3.__pyx_n = 1;

#line 2216 "dsproc3/core.pyx"
  __pyx_t_3.sample_start = __pyx_v_sample_start;

#line 2216 "dsproc3/core.pyx"
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_var->__pyx_base.__pyx_vtab)->get_datap(__pyx_v_var, 0, &__pyx_t_3)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2216 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 2216 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_2;

#line 2216 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 2216 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2216 "dsproc3/core.pyx"


#line 2216 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2216 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2216 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2216 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 2216 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.init_var_data", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2216 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2216 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2216 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2216 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2216 "dsproc3/core.pyx"
  return __pyx_r;

#line 2216 "dsproc3/core.pyx"
}

#line 2216 "dsproc3/core.pyx"


#line 2216 "dsproc3/core.pyx"
/* Python wrapper */

#line 2216 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_151init_var_data_index(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2216 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_150init_var_data_index[] = "init_var_data_index(Var var, size_t sample_start, size_t sample_count, int use_missing)\nInitialize the data values for a dataset variable.\n    \n    This function will make sure enough memory is allocated for the specified\n    samples and initializing the data values to either the variable's missing\n    value (use_missing == 1), or 0 (use_missing == 0).\n    \n    The search order for missing values is:\n    \n    - missing_value attribute\n    - _FillValue attribute\n    - variable's default missing value\n    \n    If the variable does not have any missing or fill values defined the\n    default fill value for the variable's data type will be used and the\n    default fill value for the variable will be set.\n    \n    If the specified start sample is greater than the variable's current sample\n    count, the hole between the two will be filled with the first missing or\n    fill value defined for the variable.\n    \n    If an error occurs in this function it will be appended to the log and\n    error mail messages, and the process status will be set appropriately.\n    \n    @param var - pointer to the variable\n    @param sample_start - start sample of the data to initialize (0 based indexing)\n    @param sample_count - number of samples to initialize\n    @param use_missing - flag indicating if the variables missing value\n            should be used (1 == TRUE, 0 == fill with zeros)\n    \n    @retval pointer to the specifed start sample in the variable's data array\n    @retval None if the specified sample count is zero\n    @retval None if one of the variable's static dimensions has 0 length\n    @retval None if the variable has no dimensions, and sample_start is not\n            equal to 0 or sample_count is not equal to 1.\n    @retval None if the first variable dimension is not unlimited, and\n            sample_start + sample_count would exceed the dimension length.\n    @retval None if a memory allocation error occurred\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_151init_var_data_index = 
#line 2216 "dsproc3/core.pyx"
{__Pyx_NAMESTR("init_var_data_index"), (PyCFunction)__pyx_pw_7dsproc3_4core_151init_var_data_index, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_150init_var_data_index)};

#line 2216 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_151init_var_data_index(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = 0
#line 2216 "dsproc3/core.pyx"
;
  size_t __pyx_v_sample_start
#line 2216 "dsproc3/core.pyx"
;
  size_t __pyx_v_sample_count
#line 2216 "dsproc3/core.pyx"
;
  int __pyx_v_use_missing
#line 2216 "dsproc3/core.pyx"
;

#line 2216 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2216 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2216 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("init_var_data_index (wrapper)", 0);

#line 2216 "dsproc3/core.pyx"
  {

#line 2216 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__var,&__pyx_n_s__sample_start,&__pyx_n_s__sample_count,&__pyx_n_s__use_missing,0};

#line 2216 "dsproc3/core.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 2216 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2216 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2216 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2216 "dsproc3/core.pyx"
      switch (pos_args) {
        case  4: 
#line 2216 "dsproc3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 2216 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 2216 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2216 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2216 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2216 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2216 "dsproc3/core.pyx"
      }

#line 2216 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2216 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2216 "dsproc3/core.pyx"
        case  0:

#line 2216 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__var)) != 0)) kw_args--;
        else 
#line 2216 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2216 "dsproc3/core.pyx"
        case  1:

#line 2216 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_start)) != 0)) kw_args--;

#line 2216 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("init_var_data_index", 1, 4, 4, 1); 
#line 2216 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2218; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2216 "dsproc3/core.pyx"
        }

#line 2216 "dsproc3/core.pyx"
        case  2:

#line 2216 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_count)) != 0)) kw_args--;

#line 2216 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("init_var_data_index", 1, 4, 4, 2); 
#line 2216 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2218; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2216 "dsproc3/core.pyx"
        }

#line 2216 "dsproc3/core.pyx"
        case  3:

#line 2216 "dsproc3/core.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__use_missing)) != 0)) kw_args--;

#line 2216 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("init_var_data_index", 1, 4, 4, 3); 
#line 2216 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2218; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2216 "dsproc3/core.pyx"
        }

#line 2216 "dsproc3/core.pyx"
      }

#line 2216 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2216 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "init_var_data_index") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2218; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2216 "dsproc3/core.pyx"
      }

#line 2216 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {

#line 2216 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 2216 "dsproc3/core.pyx"
    } else {

#line 2216 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2216 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2216 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 2216 "dsproc3/core.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 2216 "dsproc3/core.pyx"
    }

#line 2216 "dsproc3/core.pyx"
    __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)values[0]);

#line 2216 "dsproc3/core.pyx"
    __pyx_v_sample_start = __Pyx_PyInt_AsSize_t(values[1]); if (unlikely((__pyx_v_sample_start == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2220; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2216 "dsproc3/core.pyx"
    __pyx_v_sample_count = __Pyx_PyInt_AsSize_t(values[2]); if (unlikely((__pyx_v_sample_count == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2221; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2216 "dsproc3/core.pyx"
    __pyx_v_use_missing = __Pyx_PyInt_AsInt(values[3]); if (unlikely((__pyx_v_use_missing == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2222; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2216 "dsproc3/core.pyx"
  }

#line 2216 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2216 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init_var_data_index", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 2216 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2218; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2216 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2216 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.init_var_data_index", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2216 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2216 "dsproc3/core.pyx"
  return NULL;

#line 2216 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 2216 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_var), __pyx_ptype_4cds3_4core_Var, 1, "var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 2216 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_150init_var_data_index(__pyx_self, __pyx_v_var, __pyx_v_sample_start, __pyx_v_sample_count, __pyx_v_use_missing);

#line 2216 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2216 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2216 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2216 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2216 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2216 "dsproc3/core.pyx"
  return __pyx_r;

#line 2216 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2218
 *     return var.get_datap(sample_start)
 * 
 * def init_var_data_index(             # <<<<<<<<<<<<<<
 *             cds3.core.Var var,
 *             size_t sample_start,
 */

#line 2218 "dsproc3/core.pyx"


#line 2218 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_150init_var_data_index(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var, size_t __pyx_v_sample_start, size_t __pyx_v_sample_count, int __pyx_v_use_missing) {
  void *__pyx_v_data
#line 2218 "dsproc3/core.pyx"
;

#line 2218 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_4cds3_4core_3Var_get_datap __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2218 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("init_var_data_index", 0);

  /* "dsproc3/core.pyx":2262
 * 
 *     """
 *     cdef void *data = NULL             # <<<<<<<<<<<<<<
 *     data = dsproc_init_var_data_index(var.c_ob, sample_start, sample_count,
 *             use_missing)
 */

#line 2262 "dsproc3/core.pyx"
  __pyx_v_data = NULL;

  /* "dsproc3/core.pyx":2264
 *     cdef void *data = NULL
 *     data = dsproc_init_var_data_index(var.c_ob, sample_start, sample_count,
 *             use_missing)             # <<<<<<<<<<<<<<
 *     if data == NULL:
 *         return None
 */

#line 2264 "dsproc3/core.pyx"
  __pyx_v_data = dsproc_init_var_data_index(__pyx_v_var->c_ob, __pyx_v_sample_start, __pyx_v_sample_count, __pyx_v_use_missing);

  /* "dsproc3/core.pyx":2265
 *     data = dsproc_init_var_data_index(var.c_ob, sample_start, sample_count,
 *             use_missing)
 *     if data == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return var.get_datap(sample_start)
 */

#line 2265 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_data == NULL);

#line 2265 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":2266
 *             use_missing)
 *     if data == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return var.get_datap(sample_start)
 * 
 */

#line 2266 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 2266 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 2266 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 2266 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 2266 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 2266 "dsproc3/core.pyx"
  }

#line 2266 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":2267
 *     if data == NULL:
 *         return None
 *     return var.get_datap(sample_start)             # <<<<<<<<<<<<<<
 * 
 * def set_var_data(
 */

#line 2267 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2267 "dsproc3/core.pyx"
  __pyx_t_3.__pyx_n = 1;

#line 2267 "dsproc3/core.pyx"
  __pyx_t_3.sample_start = __pyx_v_sample_start;

#line 2267 "dsproc3/core.pyx"
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_var->__pyx_base.__pyx_vtab)->get_datap(__pyx_v_var, 0, &__pyx_t_3)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2267 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 2267 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_2;

#line 2267 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 2267 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2267 "dsproc3/core.pyx"


#line 2267 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2267 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2267 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2267 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 2267 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.init_var_data_index", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2267 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2267 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2267 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2267 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2267 "dsproc3/core.pyx"
  return __pyx_r;

#line 2267 "dsproc3/core.pyx"
}

#line 2267 "dsproc3/core.pyx"


#line 2267 "dsproc3/core.pyx"
/* Python wrapper */

#line 2267 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_153set_var_data(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2267 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_152set_var_data[] = "set_var_data(Var var, size_t sample_start, size_t sample_count, missing_value, ndarray data_nd)\nSet the data values for a dataset variable.\n    \n    This function will set the data values of a variable by casting the values\n    in the input data array into the data type of the variable. All missing\n    values in the input data array will be converted to the first missing value\n    used by the variable as returned by cds_get_var_missing_values(). If the\n    variable does not have a missing_value or _FillValue attribute defined, the\n    default fill value for the variable's data type will be used.\n    \n    For multi-dimensional variables, the specified data array must be stored\n    linearly in memory with the last dimension varying the fastest.\n    \n    If an error occurs in this function it will be appended to the log and\n    error mail messages, and the process status will be set appropriately.\n    \n    @param var - pointer to the variable\n    @param type - data type of the input missing_value and data array\n    @param sample_start - start sample of the new data (0 based indexing)\n    @param sample_count - number of new samples\n    @param missing_value - pointer to the missing value used in the data array,\n    or None if the data does not contain any missing values\n    @param data - pointer to the input data array\n    \n    @retval the specifed start sample in the variable's data array\n    @retval None if one of the variable's static dimensions has 0 length\n    @retval None if the variable has no dimensions, and sample_start is not\n            equal to 0 or sample_count is not equal to 1.\n    @retval None if the first variable dimension is not unlimited, and\n            sample_start + sample_count would exceed the dimension length.\n    @retval None if a memory allocation error occurred\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_153set_var_data = 
#line 2267 "dsproc3/core.pyx"
{__Pyx_NAMESTR("set_var_data"), (PyCFunction)__pyx_pw_7dsproc3_4core_153set_var_data, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_152set_var_data)};

#line 2267 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_153set_var_data(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = 0
#line 2267 "dsproc3/core.pyx"
;
  size_t __pyx_v_sample_start
#line 2267 "dsproc3/core.pyx"
;
  size_t __pyx_v_sample_count
#line 2267 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_missing_value = 0
#line 2267 "dsproc3/core.pyx"
;
  PyArrayObject *__pyx_v_data_nd = 0
#line 2267 "dsproc3/core.pyx"
;

#line 2267 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2267 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2267 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_var_data (wrapper)", 0);

#line 2267 "dsproc3/core.pyx"
  {

#line 2267 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__var,&__pyx_n_s__sample_start,&__pyx_n_s__sample_count,&__pyx_n_s__missing_value,&__pyx_n_s__data_nd,0};

#line 2267 "dsproc3/core.pyx"
    PyObject* values[5] = {0,0,0,0,0};

#line 2267 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2267 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2267 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2267 "dsproc3/core.pyx"
      switch (pos_args) {
        case  5: 
#line 2267 "dsproc3/core.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 2267 "dsproc3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 2267 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 2267 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2267 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2267 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2267 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2267 "dsproc3/core.pyx"
      }

#line 2267 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2267 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2267 "dsproc3/core.pyx"
        case  0:

#line 2267 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__var)) != 0)) kw_args--;
        else 
#line 2267 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2267 "dsproc3/core.pyx"
        case  1:

#line 2267 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_start)) != 0)) kw_args--;

#line 2267 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_var_data", 1, 5, 5, 1); 
#line 2267 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2269; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2267 "dsproc3/core.pyx"
        }

#line 2267 "dsproc3/core.pyx"
        case  2:

#line 2267 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_count)) != 0)) kw_args--;

#line 2267 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_var_data", 1, 5, 5, 2); 
#line 2267 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2269; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2267 "dsproc3/core.pyx"
        }

#line 2267 "dsproc3/core.pyx"
        case  3:

#line 2267 "dsproc3/core.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__missing_value)) != 0)) kw_args--;

#line 2267 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_var_data", 1, 5, 5, 3); 
#line 2267 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2269; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2267 "dsproc3/core.pyx"
        }

#line 2267 "dsproc3/core.pyx"
        case  4:

#line 2267 "dsproc3/core.pyx"
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__data_nd)) != 0)) kw_args--;

#line 2267 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_var_data", 1, 5, 5, 4); 
#line 2267 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2269; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2267 "dsproc3/core.pyx"
        }

#line 2267 "dsproc3/core.pyx"
      }

#line 2267 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2267 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_var_data") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2269; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2267 "dsproc3/core.pyx"
      }

#line 2267 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {

#line 2267 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 2267 "dsproc3/core.pyx"
    } else {

#line 2267 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2267 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2267 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 2267 "dsproc3/core.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 2267 "dsproc3/core.pyx"
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 2267 "dsproc3/core.pyx"
    }

#line 2267 "dsproc3/core.pyx"
    __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)values[0]);

#line 2267 "dsproc3/core.pyx"
    __pyx_v_sample_start = __Pyx_PyInt_AsSize_t(values[1]); if (unlikely((__pyx_v_sample_start == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2271; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2267 "dsproc3/core.pyx"
    __pyx_v_sample_count = __Pyx_PyInt_AsSize_t(values[2]); if (unlikely((__pyx_v_sample_count == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2272; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2267 "dsproc3/core.pyx"
    __pyx_v_missing_value = values[3];

#line 2267 "dsproc3/core.pyx"
    __pyx_v_data_nd = ((PyArrayObject *)values[4]);

#line 2267 "dsproc3/core.pyx"
  }

#line 2267 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2267 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_var_data", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); 
#line 2267 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2269; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2267 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2267 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_var_data", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2267 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2267 "dsproc3/core.pyx"
  return NULL;

#line 2267 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 2267 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_var), __pyx_ptype_4cds3_4core_Var, 1, "var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2267 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data_nd), __pyx_ptype_5numpy_ndarray, 1, "data_nd", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 2267 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_152set_var_data(__pyx_self, __pyx_v_var, __pyx_v_sample_start, __pyx_v_sample_count, __pyx_v_missing_value, __pyx_v_data_nd);

#line 2267 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2267 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2267 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2267 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2267 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2267 "dsproc3/core.pyx"
  return __pyx_r;

#line 2267 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2269
 *     return var.get_datap(sample_start)
 * 
 * def set_var_data(             # <<<<<<<<<<<<<<
 *             cds3.core.Var var,
 *             size_t sample_start,
 */

#line 2269 "dsproc3/core.pyx"


#line 2269 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_152set_var_data(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var, size_t __pyx_v_sample_start, size_t __pyx_v_sample_count, PyObject *__pyx_v_missing_value, PyArrayObject *__pyx_v_data_nd) {
  void *__pyx_v_data
#line 2269 "dsproc3/core.pyx"
;
  CDSDataType __pyx_v_type
#line 2269 "dsproc3/core.pyx"
;
  void *__pyx_v_missing_c
#line 2269 "dsproc3/core.pyx"
;

#line 2269 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  void *__pyx_t_4;
  struct __pyx_opt_args_7dsproc3_4core__alloc_single __pyx_t_5;
  struct __pyx_opt_args_4cds3_4core_3Var_get_datap __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2269 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_var_data", 0);

  /* "dsproc3/core.pyx":2307
 * 
 *     """
 *     cdef void *data = NULL             # <<<<<<<<<<<<<<
 *     cdef CDSDataType type
 *     cdef void *missing_c = NULL
 */

#line 2307 "dsproc3/core.pyx"
  __pyx_v_data = NULL;

  /* "dsproc3/core.pyx":2309
 *     cdef void *data = NULL
 *     cdef CDSDataType type
 *     cdef void *missing_c = NULL             # <<<<<<<<<<<<<<
 *     type = <CDSDataType>dtype_to_cds_type(data_nd.dtype)
 *     if missing_value is not None:
 */

#line 2309 "dsproc3/core.pyx"
  __pyx_v_missing_c = NULL;

  /* "dsproc3/core.pyx":2310
 *     cdef CDSDataType type
 *     cdef void *missing_c = NULL
 *     type = <CDSDataType>dtype_to_cds_type(data_nd.dtype)             # <<<<<<<<<<<<<<
 *     if missing_value is not None:
 *         missing_c = _alloc_single(type, missing_value)
 */

#line 2310 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_GetAttr(((PyObject *)__pyx_v_data_nd), __pyx_n_s__dtype); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2310 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2310 "dsproc3/core.pyx"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_dtype))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2310 "dsproc3/core.pyx"
  __pyx_t_2 = __pyx_f_7dsproc3_4core_dtype_to_cds_type(((PyArray_Descr *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2310 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 2310 "dsproc3/core.pyx"
  __pyx_v_type = ((CDSDataType)__pyx_t_2);

  /* "dsproc3/core.pyx":2311
 *     cdef void *missing_c = NULL
 *     type = <CDSDataType>dtype_to_cds_type(data_nd.dtype)
 *     if missing_value is not None:             # <<<<<<<<<<<<<<
 *         missing_c = _alloc_single(type, missing_value)
 *     data = dsproc_set_var_data(var.c_ob, type, sample_start, sample_count,
 */

#line 2311 "dsproc3/core.pyx"
  __pyx_t_3 = (__pyx_v_missing_value != Py_None);

#line 2311 "dsproc3/core.pyx"
  if (__pyx_t_3) {

    /* "dsproc3/core.pyx":2312
 *     type = <CDSDataType>dtype_to_cds_type(data_nd.dtype)
 *     if missing_value is not None:
 *         missing_c = _alloc_single(type, missing_value)             # <<<<<<<<<<<<<<
 *     data = dsproc_set_var_data(var.c_ob, type, sample_start, sample_count,
 *             missing_c, data_nd.data)
 */

#line 2312 "dsproc3/core.pyx"
    __pyx_t_5.__pyx_n = 1;

#line 2312 "dsproc3/core.pyx"
    __pyx_t_5.initial_value = __pyx_v_missing_value;

#line 2312 "dsproc3/core.pyx"
    __pyx_t_4 = __pyx_f_7dsproc3_4core__alloc_single(__pyx_v_type, &__pyx_t_5); 

#line 2312 "dsproc3/core.pyx"
    __pyx_v_missing_c = __pyx_t_4;

#line 2312 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 2312 "dsproc3/core.pyx"
  }

#line 2312 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":2314
 *         missing_c = _alloc_single(type, missing_value)
 *     data = dsproc_set_var_data(var.c_ob, type, sample_start, sample_count,
 *             missing_c, data_nd.data)             # <<<<<<<<<<<<<<
 *     if missing_value is not None:
 *         free(missing_c)
 */

#line 2314 "dsproc3/core.pyx"
  __pyx_v_data = dsproc_set_var_data(__pyx_v_var->c_ob, __pyx_v_type, __pyx_v_sample_start, __pyx_v_sample_count, __pyx_v_missing_c, __pyx_v_data_nd->data);

  /* "dsproc3/core.pyx":2315
 *     data = dsproc_set_var_data(var.c_ob, type, sample_start, sample_count,
 *             missing_c, data_nd.data)
 *     if missing_value is not None:             # <<<<<<<<<<<<<<
 *         free(missing_c)
 *     if data == NULL:
 */

#line 2315 "dsproc3/core.pyx"
  __pyx_t_3 = (__pyx_v_missing_value != Py_None);

#line 2315 "dsproc3/core.pyx"
  if (__pyx_t_3) {

    /* "dsproc3/core.pyx":2316
 *             missing_c, data_nd.data)
 *     if missing_value is not None:
 *         free(missing_c)             # <<<<<<<<<<<<<<
 *     if data == NULL:
 *         return None
 */

#line 2316 "dsproc3/core.pyx"
    free(__pyx_v_missing_c);

#line 2316 "dsproc3/core.pyx"
    goto __pyx_L4;

#line 2316 "dsproc3/core.pyx"
  }

#line 2316 "dsproc3/core.pyx"
  __pyx_L4:;

  /* "dsproc3/core.pyx":2317
 *     if missing_value is not None:
 *         free(missing_c)
 *     if data == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return var.get_datap(sample_start)
 */

#line 2317 "dsproc3/core.pyx"
  __pyx_t_3 = (__pyx_v_data == NULL);

#line 2317 "dsproc3/core.pyx"
  if (__pyx_t_3) {

    /* "dsproc3/core.pyx":2318
 *         free(missing_c)
 *     if data == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return var.get_datap(sample_start)
 * 
 */

#line 2318 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 2318 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 2318 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 2318 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 2318 "dsproc3/core.pyx"
    goto __pyx_L5;

#line 2318 "dsproc3/core.pyx"
  }

#line 2318 "dsproc3/core.pyx"
  __pyx_L5:;

  /* "dsproc3/core.pyx":2319
 *     if data == NULL:
 *         return None
 *     return var.get_datap(sample_start)             # <<<<<<<<<<<<<<
 * 
 * def get_base_time(cds3.core.Object cds_object):
 */

#line 2319 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2319 "dsproc3/core.pyx"
  __pyx_t_6.__pyx_n = 1;

#line 2319 "dsproc3/core.pyx"
  __pyx_t_6.sample_start = __pyx_v_sample_start;

#line 2319 "dsproc3/core.pyx"
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_var->__pyx_base.__pyx_vtab)->get_datap(__pyx_v_var, 0, &__pyx_t_6)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2319 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2319 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 2319 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 2319 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2319 "dsproc3/core.pyx"


#line 2319 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2319 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2319 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2319 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 2319 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_var_data", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2319 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2319 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2319 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2319 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2319 "dsproc3/core.pyx"
  return __pyx_r;

#line 2319 "dsproc3/core.pyx"
}

#line 2319 "dsproc3/core.pyx"


#line 2319 "dsproc3/core.pyx"
/* Python wrapper */

#line 2319 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_155get_base_time(PyObject *__pyx_self, PyObject *__pyx_v_cds_object); /*proto*/

#line 2319 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_154get_base_time[] = "get_base_time(Object cds_object)\nGet the base time of a dataset or time variable.\n    \n    This function will convert the units attribute of a time variable to\n    seconds since 1970. If the input object is a CDSGroup, the specified\n    dataset and then its parent datasets will be searched until a \"time\"\n    or \"time_offset\" variable is found.\n    \n    @param cds_object - a CDSGroup or CDSVar\n    \n    @retval base time in seconds since 1970 UTC\n    @retval 0 if not found\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_155get_base_time = 
#line 2319 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_base_time"), (PyCFunction)__pyx_pw_7dsproc3_4core_155get_base_time, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_154get_base_time)};

#line 2319 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_155get_base_time(PyObject *__pyx_self, PyObject *__pyx_v_cds_object) {

#line 2319 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2319 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2319 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_base_time (wrapper)", 0);

#line 2319 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cds_object), __pyx_ptype_4cds3_4core_Object, 1, "cds_object", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 2319 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_154get_base_time(__pyx_self, ((struct __pyx_obj_4cds3_4core_Object *)__pyx_v_cds_object));

#line 2319 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2319 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2319 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2319 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2319 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2319 "dsproc3/core.pyx"
  return __pyx_r;

#line 2319 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2321
 *     return var.get_datap(sample_start)
 * 
 * def get_base_time(cds3.core.Object cds_object):             # <<<<<<<<<<<<<<
 *     """Get the base time of a dataset or time variable.
 * 
 */

#line 2321 "dsproc3/core.pyx"


#line 2321 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_154get_base_time(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_cds_object) {

#line 2321 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2321 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_base_time", 0);

  /* "dsproc3/core.pyx":2335
 * 
 *     """
 *     return dsproc_get_base_time(cds_object.cds_object)             # <<<<<<<<<<<<<<
 * 
 * #size_t  dsproc_get_time_range(
 */

#line 2335 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2335 "dsproc3/core.pyx"
  __pyx_t_1 = __Pyx_PyInt_to_py_time_t(dsproc_get_base_time(__pyx_v_cds_object->cds_object)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2335 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2335 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 2335 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 2335 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2335 "dsproc3/core.pyx"


#line 2335 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2335 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2335 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2335 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 2335 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_base_time", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2335 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2335 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2335 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2335 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2335 "dsproc3/core.pyx"
  return __pyx_r;

#line 2335 "dsproc3/core.pyx"
}

#line 2335 "dsproc3/core.pyx"


#line 2335 "dsproc3/core.pyx"
/* Python wrapper */

#line 2335 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_157get_time_range(PyObject *__pyx_self, PyObject *__pyx_v_cds_object); /*proto*/

#line 2335 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_156get_time_range[] = "get_time_range(Object cds_object)\nGet the time range of a dataset or time variable.\n    \n    This function will get the start and end times of a time variable.\n    If the input object is a CDSGroup, the specified dataset and then\n    its parent datasets will be searched until a \"time\" or \"time_offset\"\n    variable is found.\n    \n    @param cds_object - a CDSGroup or CDSVar\n    @param start_time - pointer to the timeval_t structure to store the\n    start time in.\n    @param end_time - pointer to the timeval_t structure to store the\n    end time in.\n    \n    @retval number of time values, start=(sec,ms), end=(sec,ms)\n    @retval empty list, empty list if no time values were found\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_157get_time_range = 
#line 2335 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_time_range"), (PyCFunction)__pyx_pw_7dsproc3_4core_157get_time_range, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_156get_time_range)};

#line 2335 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_157get_time_range(PyObject *__pyx_self, PyObject *__pyx_v_cds_object) {

#line 2335 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2335 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2335 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_time_range (wrapper)", 0);

#line 2335 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cds_object), __pyx_ptype_4cds3_4core_Object, 1, "cds_object", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 2335 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_156get_time_range(__pyx_self, ((struct __pyx_obj_4cds3_4core_Object *)__pyx_v_cds_object));

#line 2335 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2335 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2335 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2335 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2335 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2335 "dsproc3/core.pyx"
  return __pyx_r;

#line 2335 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2341
 * #            timeval_t *start_time,
 * #            timeval_t *end_time)
 * def get_time_range(cds3.core.Object cds_object):             # <<<<<<<<<<<<<<
 *     """Get the time range of a dataset or time variable.
 * 
 */

#line 2341 "dsproc3/core.pyx"


#line 2341 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_156get_time_range(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_cds_object) {
  timeval_t __pyx_v_start
#line 2341 "dsproc3/core.pyx"
;
  timeval_t __pyx_v_end
#line 2341 "dsproc3/core.pyx"
;
  size_t __pyx_v_num_times
#line 2341 "dsproc3/core.pyx"
;

#line 2341 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2341 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_time_range", 0);

  /* "dsproc3/core.pyx":2362
 *     cdef timeval_t end
 *     cdef size_t num_times
 *     num_times = dsproc_get_time_range(cds_object.cds_object, &start, &end)             # <<<<<<<<<<<<<<
 *     return num_times, (start.tv_sec, start.tv_usec), (end.tv_sec, end.tv_usec)
 * 
 */

#line 2362 "dsproc3/core.pyx"
  __pyx_v_num_times = dsproc_get_time_range(__pyx_v_cds_object->cds_object, (&__pyx_v_start), (&__pyx_v_end));

  /* "dsproc3/core.pyx":2363
 *     cdef size_t num_times
 *     num_times = dsproc_get_time_range(cds_object.cds_object, &start, &end)
 *     return num_times, (start.tv_sec, start.tv_usec), (end.tv_sec, end.tv_usec)             # <<<<<<<<<<<<<<
 * 
 * def get_time_var(cds3.core.Object cds_object):
 */

#line 2363 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2363 "dsproc3/core.pyx"
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_num_times); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2363 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2363 "dsproc3/core.pyx"
  __pyx_t_2 = __Pyx_PyInt_to_py_time_t(__pyx_v_start.tv_sec); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2363 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 2363 "dsproc3/core.pyx"
  __pyx_t_3 = __Pyx_PyInt_to_py_suseconds_t(__pyx_v_start.tv_usec); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2363 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 2363 "dsproc3/core.pyx"
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2363 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 2363 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 2363 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 2363 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);

#line 2363 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_3);

#line 2363 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 2363 "dsproc3/core.pyx"
  __pyx_t_3 = 0;

#line 2363 "dsproc3/core.pyx"
  __pyx_t_3 = __Pyx_PyInt_to_py_time_t(__pyx_v_end.tv_sec); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2363 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 2363 "dsproc3/core.pyx"
  __pyx_t_2 = __Pyx_PyInt_to_py_suseconds_t(__pyx_v_end.tv_usec); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2363 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 2363 "dsproc3/core.pyx"
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2363 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 2363 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);

#line 2363 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_3);

#line 2363 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);

#line 2363 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 2363 "dsproc3/core.pyx"
  __pyx_t_3 = 0;

#line 2363 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 2363 "dsproc3/core.pyx"
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2363 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 2363 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 2363 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 2363 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_t_4));

#line 2363 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_t_4));

#line 2363 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_t_5));

#line 2363 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_t_5));

#line 2363 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 2363 "dsproc3/core.pyx"
  __pyx_t_4 = 0;

#line 2363 "dsproc3/core.pyx"
  __pyx_t_5 = 0;

#line 2363 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_t_2);

#line 2363 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 2363 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2363 "dsproc3/core.pyx"


#line 2363 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2363 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2363 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2363 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 2363 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 2363 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 2363 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 2363 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 2363 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_time_range", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2363 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2363 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2363 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2363 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2363 "dsproc3/core.pyx"
  return __pyx_r;

#line 2363 "dsproc3/core.pyx"
}

#line 2363 "dsproc3/core.pyx"


#line 2363 "dsproc3/core.pyx"
/* Python wrapper */

#line 2363 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_159get_time_var(PyObject *__pyx_self, PyObject *__pyx_v_cds_object); /*proto*/

#line 2363 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_158get_time_var[] = "get_time_var(Object cds_object)\nGet the time variable used by a dataset.\n    \n    This function will find the first dataset that contains either the \"time\"\n    or \"time_offset\" variable and return a pointer to that variable.\n    \n    @param cds_object - pointer to a CDSGroup or CDSVar\n    \n    @retval the time variable\n    @retval None if not found\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_159get_time_var = 
#line 2363 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_time_var"), (PyCFunction)__pyx_pw_7dsproc3_4core_159get_time_var, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_158get_time_var)};

#line 2363 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_159get_time_var(PyObject *__pyx_self, PyObject *__pyx_v_cds_object) {

#line 2363 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2363 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2363 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_time_var (wrapper)", 0);

#line 2363 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cds_object), __pyx_ptype_4cds3_4core_Object, 1, "cds_object", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 2363 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_158get_time_var(__pyx_self, ((struct __pyx_obj_4cds3_4core_Object *)__pyx_v_cds_object));

#line 2363 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2363 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2363 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2363 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2363 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2363 "dsproc3/core.pyx"
  return __pyx_r;

#line 2363 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2365
 *     return num_times, (start.tv_sec, start.tv_usec), (end.tv_sec, end.tv_usec)
 * 
 * def get_time_var(cds3.core.Object cds_object):             # <<<<<<<<<<<<<<
 *     """Get the time variable used by a dataset.
 * 
 */

#line 2365 "dsproc3/core.pyx"


#line 2365 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_158get_time_var(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_cds_object) {
  struct CDSVar *__pyx_v_cds_var
#line 2365 "dsproc3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = 0
#line 2365 "dsproc3/core.pyx"
;

#line 2365 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2365 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_time_var", 0);

  /* "dsproc3/core.pyx":2379
 *     cdef CDSVar *cds_var
 *     cdef cds3.core.Var var
 *     cds_var = dsproc_get_time_var(cds_object.cds_object)             # <<<<<<<<<<<<<<
 *     if cds_var == NULL:
 *         return None
 */

#line 2379 "dsproc3/core.pyx"
  __pyx_v_cds_var = dsproc_get_time_var(__pyx_v_cds_object->cds_object);

  /* "dsproc3/core.pyx":2380
 *     cdef cds3.core.Var var
 *     cds_var = dsproc_get_time_var(cds_object.cds_object)
 *     if cds_var == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     var = cds3.core.Var()
 */

#line 2380 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_cds_var == NULL);

#line 2380 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":2381
 *     cds_var = dsproc_get_time_var(cds_object.cds_object)
 *     if cds_var == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     var = cds3.core.Var()
 *     var.set_var(cds_var)
 */

#line 2381 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 2381 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 2381 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 2381 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 2381 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 2381 "dsproc3/core.pyx"
  }

#line 2381 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":2382
 *     if cds_var == NULL:
 *         return None
 *     var = cds3.core.Var()             # <<<<<<<<<<<<<<
 *     var.set_var(cds_var)
 *     return var
 */

#line 2382 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Var)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2382 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 2382 "dsproc3/core.pyx"
  __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)__pyx_t_2);

#line 2382 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

  /* "dsproc3/core.pyx":2383
 *         return None
 *     var = cds3.core.Var()
 *     var.set_var(cds_var)             # <<<<<<<<<<<<<<
 *     return var
 * 
 */

#line 2383 "dsproc3/core.pyx"
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Var *)__pyx_v_var->__pyx_base.__pyx_vtab)->set_var(__pyx_v_var, __pyx_v_cds_var); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2383 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 2383 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dsproc3/core.pyx":2384
 *     var = cds3.core.Var()
 *     var.set_var(cds_var)
 *     return var             # <<<<<<<<<<<<<<
 * 
 * def get_sample_times(cds3.core.Object cds_object, size_t sample_start):
 */

#line 2384 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2384 "dsproc3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_var));

#line 2384 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_var);

#line 2384 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2384 "dsproc3/core.pyx"


#line 2384 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2384 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2384 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2384 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 2384 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_time_var", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2384 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2384 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2384 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_var);

#line 2384 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2384 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2384 "dsproc3/core.pyx"
  return __pyx_r;

#line 2384 "dsproc3/core.pyx"
}

#line 2384 "dsproc3/core.pyx"


#line 2384 "dsproc3/core.pyx"
/* Python wrapper */

#line 2384 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_161get_sample_times(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2384 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_160get_sample_times[] = "get_sample_times(Object cds_object, size_t sample_start)\nGet the sample times for a dataset or time variable.\n    \n    This function will convert the data values of a time variable to seconds\n    since 1970. If the input object is a CDSGroup, the specified dataset and\n    then its parent datasets will be searched until a \"time\" or \"time_offset\"\n    variable is found.\n    \n    Note: If the sample times can have fractional seconds the\n    dsproc_get_sample_timevals() function should be used instead.\n    \n    If an error occurs in this function it will be appended to the log\n    \n    error mail messages, and the process status will be set appropriately.\n    \n    @param cds_object - pointer to a CDSGroup or CDSVar\n    @param sample_start - start sample (0 based indexing)\n    \n    @retval list of sample times in seconds since 1970 \n    @retval None if there is no data for sample_start (sample_count == 0)\n    @retval None if an error occurred (sample_count == (size_t)-1)\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_161get_sample_times = 
#line 2384 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_sample_times"), (PyCFunction)__pyx_pw_7dsproc3_4core_161get_sample_times, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_160get_sample_times)};

#line 2384 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_161get_sample_times(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Object *__pyx_v_cds_object = 0
#line 2384 "dsproc3/core.pyx"
;
  size_t __pyx_v_sample_start
#line 2384 "dsproc3/core.pyx"
;

#line 2384 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2384 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2384 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_sample_times (wrapper)", 0);

#line 2384 "dsproc3/core.pyx"
  {

#line 2384 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__cds_object,&__pyx_n_s__sample_start,0};

#line 2384 "dsproc3/core.pyx"
    PyObject* values[2] = {0,0};

#line 2384 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2384 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2384 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2384 "dsproc3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 2384 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2384 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2384 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2384 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2384 "dsproc3/core.pyx"
      }

#line 2384 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2384 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2384 "dsproc3/core.pyx"
        case  0:

#line 2384 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__cds_object)) != 0)) kw_args--;
        else 
#line 2384 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2384 "dsproc3/core.pyx"
        case  1:

#line 2384 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_start)) != 0)) kw_args--;

#line 2384 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("get_sample_times", 1, 2, 2, 1); 
#line 2384 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2386; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2384 "dsproc3/core.pyx"
        }

#line 2384 "dsproc3/core.pyx"
      }

#line 2384 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2384 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_sample_times") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2386; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2384 "dsproc3/core.pyx"
      }

#line 2384 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 2384 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 2384 "dsproc3/core.pyx"
    } else {

#line 2384 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2384 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2384 "dsproc3/core.pyx"
    }

#line 2384 "dsproc3/core.pyx"
    __pyx_v_cds_object = ((struct __pyx_obj_4cds3_4core_Object *)values[0]);

#line 2384 "dsproc3/core.pyx"
    __pyx_v_sample_start = __Pyx_PyInt_AsSize_t(values[1]); if (unlikely((__pyx_v_sample_start == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2386; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2384 "dsproc3/core.pyx"
  }

#line 2384 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2384 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_sample_times", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 2384 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2386; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2384 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2384 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_sample_times", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2384 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2384 "dsproc3/core.pyx"
  return NULL;

#line 2384 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 2384 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cds_object), __pyx_ptype_4cds3_4core_Object, 1, "cds_object", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 2384 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_160get_sample_times(__pyx_self, __pyx_v_cds_object, __pyx_v_sample_start);

#line 2384 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2384 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2384 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2384 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2384 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2384 "dsproc3/core.pyx"
  return __pyx_r;

#line 2384 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2386
 *     return var
 * 
 * def get_sample_times(cds3.core.Object cds_object, size_t sample_start):             # <<<<<<<<<<<<<<
 *     """Get the sample times for a dataset or time variable.
 * 
 */

#line 2386 "dsproc3/core.pyx"


#line 2386 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_160get_sample_times(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_cds_object, size_t __pyx_v_sample_start) {
  PyObject *__pyx_v_retval = 0
#line 2386 "dsproc3/core.pyx"
;
  time_t *__pyx_v_sample_times
#line 2386 "dsproc3/core.pyx"
;
  size_t __pyx_v_sample_count
#line 2386 "dsproc3/core.pyx"
;
  size_t __pyx_v_i
#line 2386 "dsproc3/core.pyx"
;

#line 2386 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2386 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_sample_times", 0);

  /* "dsproc3/core.pyx":2410
 *     """
 *     cdef list retval
 *     cdef time_t *sample_times = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t sample_count = 0
 *     sample_times = dsproc_get_sample_times(cds_object.cds_object,
 */

#line 2410 "dsproc3/core.pyx"
  __pyx_v_sample_times = NULL;

  /* "dsproc3/core.pyx":2411
 *     cdef list retval
 *     cdef time_t *sample_times = NULL
 *     cdef size_t sample_count = 0             # <<<<<<<<<<<<<<
 *     sample_times = dsproc_get_sample_times(cds_object.cds_object,
 *             sample_start, &sample_count, NULL)
 */

#line 2411 "dsproc3/core.pyx"
  __pyx_v_sample_count = 0;

  /* "dsproc3/core.pyx":2413
 *     cdef size_t sample_count = 0
 *     sample_times = dsproc_get_sample_times(cds_object.cds_object,
 *             sample_start, &sample_count, NULL)             # <<<<<<<<<<<<<<
 *     if sample_times == NULL:
 *         return None
 */

#line 2413 "dsproc3/core.pyx"
  __pyx_v_sample_times = dsproc_get_sample_times(__pyx_v_cds_object->cds_object, __pyx_v_sample_start, (&__pyx_v_sample_count), NULL);

  /* "dsproc3/core.pyx":2414
 *     sample_times = dsproc_get_sample_times(cds_object.cds_object,
 *             sample_start, &sample_count, NULL)
 *     if sample_times == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     retval = [long(sample_times[i]) for i in range(sample_count)]
 */

#line 2414 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_sample_times == NULL);

#line 2414 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":2415
 *             sample_start, &sample_count, NULL)
 *     if sample_times == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     retval = [long(sample_times[i]) for i in range(sample_count)]
 *     free(sample_times)
 */

#line 2415 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 2415 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 2415 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 2415 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 2415 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 2415 "dsproc3/core.pyx"
  }

#line 2415 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":2416
 *     if sample_times == NULL:
 *         return None
 *     retval = [long(sample_times[i]) for i in range(sample_count)]             # <<<<<<<<<<<<<<
 *     free(sample_times)
 *     return retval
 */

#line 2416 "dsproc3/core.pyx"
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2416 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 2416 "dsproc3/core.pyx"
  __pyx_t_3 = __pyx_v_sample_count;

#line 2416 "dsproc3/core.pyx"
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {

#line 2416 "dsproc3/core.pyx"
    __pyx_v_i = __pyx_t_4;

#line 2416 "dsproc3/core.pyx"
    __pyx_t_5 = __Pyx_PyInt_to_py_time_t((__pyx_v_sample_times[__pyx_v_i])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2416 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 2416 "dsproc3/core.pyx"
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2416 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 2416 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);

#line 2416 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_5);

#line 2416 "dsproc3/core.pyx"
    __pyx_t_5 = 0;

#line 2416 "dsproc3/core.pyx"
    __pyx_t_5 = PyObject_Call(((PyObject *)((PyObject*)(&PyLong_Type))), ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2416 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 2416 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;

#line 2416 "dsproc3/core.pyx"
    if (unlikely(__Pyx_PyList_Append(__pyx_t_2, (PyObject*)__pyx_t_5))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2416 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 2416 "dsproc3/core.pyx"
  }

#line 2416 "dsproc3/core.pyx"
  __pyx_t_5 = ((PyObject *)__pyx_t_2);

#line 2416 "dsproc3/core.pyx"
  __Pyx_INCREF(__pyx_t_5);

#line 2416 "dsproc3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 2416 "dsproc3/core.pyx"
  __pyx_v_retval = ((PyObject*)__pyx_t_5);

#line 2416 "dsproc3/core.pyx"
  __pyx_t_5 = 0;

  /* "dsproc3/core.pyx":2417
 *         return None
 *     retval = [long(sample_times[i]) for i in range(sample_count)]
 *     free(sample_times)             # <<<<<<<<<<<<<<
 *     return retval
 * 
 */

#line 2417 "dsproc3/core.pyx"
  free(__pyx_v_sample_times);

  /* "dsproc3/core.pyx":2418
 *     retval = [long(sample_times[i]) for i in range(sample_count)]
 *     free(sample_times)
 *     return retval             # <<<<<<<<<<<<<<
 * 
 * #timeval_t *dsproc_get_sample_timevals(
 */

#line 2418 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2418 "dsproc3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_retval));

#line 2418 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_retval);

#line 2418 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2418 "dsproc3/core.pyx"


#line 2418 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2418 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2418 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2418 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 2418 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 2418 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 2418 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_sample_times", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2418 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2418 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2418 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_retval);

#line 2418 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2418 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2418 "dsproc3/core.pyx"
  return __pyx_r;

#line 2418 "dsproc3/core.pyx"
}

#line 2418 "dsproc3/core.pyx"


#line 2418 "dsproc3/core.pyx"
/* Python wrapper */

#line 2418 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_163get_sample_timevals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2418 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_162get_sample_timevals[] = "get_sample_timevals(Object cds_object, size_t sample_start)\nGet the sample times for a dataset or time variable.\n    \n    This function will convert the data values of a time variable to an\n    array of timeval_t structures. If the input object is a CDSGroup, the\n    specified dataset and then its parent datasets will be searched until\n    a \"time\" or \"time_offset\" variable is found.\n    \n    Note: Consider using the cds.get_sample_times() function if the sample\n    times can not have fractional seconds.\n    \n    If an error occurs in this function it will be appended to the log and\n    error mail messages, and the process status will be set appropriately.\n    \n    @param cds_object - pointer to a CDSGroup or CDSVar\n    @param sample_start - start sample (0 based indexing)\n    \n    @retval list of sample times in seconds since 1970\n    @retval None if the variable has no data for sample_start (sample_count == 0)\n    @retval None if an error occurred (sample_count == (size_t)-1)\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_163get_sample_timevals = 
#line 2418 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_sample_timevals"), (PyCFunction)__pyx_pw_7dsproc3_4core_163get_sample_timevals, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_162get_sample_timevals)};

#line 2418 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_163get_sample_timevals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Object *__pyx_v_cds_object = 0
#line 2418 "dsproc3/core.pyx"
;
  size_t __pyx_v_sample_start
#line 2418 "dsproc3/core.pyx"
;

#line 2418 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2418 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2418 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_sample_timevals (wrapper)", 0);

#line 2418 "dsproc3/core.pyx"
  {

#line 2418 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__cds_object,&__pyx_n_s__sample_start,0};

#line 2418 "dsproc3/core.pyx"
    PyObject* values[2] = {0,0};

#line 2418 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2418 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2418 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2418 "dsproc3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 2418 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2418 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2418 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2418 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2418 "dsproc3/core.pyx"
      }

#line 2418 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2418 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2418 "dsproc3/core.pyx"
        case  0:

#line 2418 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__cds_object)) != 0)) kw_args--;
        else 
#line 2418 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2418 "dsproc3/core.pyx"
        case  1:

#line 2418 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_start)) != 0)) kw_args--;

#line 2418 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("get_sample_timevals", 1, 2, 2, 1); 
#line 2418 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2425; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2418 "dsproc3/core.pyx"
        }

#line 2418 "dsproc3/core.pyx"
      }

#line 2418 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2418 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_sample_timevals") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2425; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2418 "dsproc3/core.pyx"
      }

#line 2418 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 2418 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 2418 "dsproc3/core.pyx"
    } else {

#line 2418 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2418 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2418 "dsproc3/core.pyx"
    }

#line 2418 "dsproc3/core.pyx"
    __pyx_v_cds_object = ((struct __pyx_obj_4cds3_4core_Object *)values[0]);

#line 2418 "dsproc3/core.pyx"
    __pyx_v_sample_start = __Pyx_PyInt_AsSize_t(values[1]); if (unlikely((__pyx_v_sample_start == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2427; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2418 "dsproc3/core.pyx"
  }

#line 2418 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2418 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_sample_timevals", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 2418 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2425; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2418 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2418 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_sample_timevals", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2418 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2418 "dsproc3/core.pyx"
  return NULL;

#line 2418 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 2418 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cds_object), __pyx_ptype_4cds3_4core_Object, 1, "cds_object", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 2418 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_162get_sample_timevals(__pyx_self, __pyx_v_cds_object, __pyx_v_sample_start);

#line 2418 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2418 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2418 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2418 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2418 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2418 "dsproc3/core.pyx"
  return __pyx_r;

#line 2418 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2425
 * #            size_t    *sample_count,
 * #            timeval_t *sample_times)
 * def get_sample_timevals(             # <<<<<<<<<<<<<<
 *             cds3.core.Object cds_object,
 *             size_t sample_start):
 */

#line 2425 "dsproc3/core.pyx"


#line 2425 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_162get_sample_timevals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_cds_object, size_t __pyx_v_sample_start) {
  PyObject *__pyx_v_retval = 0
#line 2425 "dsproc3/core.pyx"
;
  timeval_t *__pyx_v_sample_times
#line 2425 "dsproc3/core.pyx"
;
  size_t __pyx_v_sample_count
#line 2425 "dsproc3/core.pyx"
;
  size_t __pyx_v_i
#line 2425 "dsproc3/core.pyx"
;

#line 2425 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2425 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_sample_timevals", 0);

  /* "dsproc3/core.pyx":2452
 *     """
 *     cdef list retval
 *     cdef timeval_t *sample_times = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t sample_count = 0
 *     sample_times = dsproc_get_sample_timevals(cds_object.cds_object,
 */

#line 2452 "dsproc3/core.pyx"
  __pyx_v_sample_times = NULL;

  /* "dsproc3/core.pyx":2453
 *     cdef list retval
 *     cdef timeval_t *sample_times = NULL
 *     cdef size_t sample_count = 0             # <<<<<<<<<<<<<<
 *     sample_times = dsproc_get_sample_timevals(cds_object.cds_object,
 *             sample_start, &sample_count, NULL)
 */

#line 2453 "dsproc3/core.pyx"
  __pyx_v_sample_count = 0;

  /* "dsproc3/core.pyx":2455
 *     cdef size_t sample_count = 0
 *     sample_times = dsproc_get_sample_timevals(cds_object.cds_object,
 *             sample_start, &sample_count, NULL)             # <<<<<<<<<<<<<<
 *     if sample_times == NULL:
 *         return None
 */

#line 2455 "dsproc3/core.pyx"
  __pyx_v_sample_times = dsproc_get_sample_timevals(__pyx_v_cds_object->cds_object, __pyx_v_sample_start, (&__pyx_v_sample_count), NULL);

  /* "dsproc3/core.pyx":2456
 *     sample_times = dsproc_get_sample_timevals(cds_object.cds_object,
 *             sample_start, &sample_count, NULL)
 *     if sample_times == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     retval = [(long(sample_times[i].tv_sec),long(sample_times[i].tv_usec))
 */

#line 2456 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_sample_times == NULL);

#line 2456 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":2457
 *             sample_start, &sample_count, NULL)
 *     if sample_times == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     retval = [(long(sample_times[i].tv_sec),long(sample_times[i].tv_usec))
 *             for i in range(sample_count)]
 */

#line 2457 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 2457 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 2457 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 2457 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 2457 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 2457 "dsproc3/core.pyx"
  }

#line 2457 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":2458
 *     if sample_times == NULL:
 *         return None
 *     retval = [(long(sample_times[i].tv_sec),long(sample_times[i].tv_usec))             # <<<<<<<<<<<<<<
 *             for i in range(sample_count)]
 *     free(sample_times)
 */

#line 2458 "dsproc3/core.pyx"
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2458 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

  /* "dsproc3/core.pyx":2459
 *         return None
 *     retval = [(long(sample_times[i].tv_sec),long(sample_times[i].tv_usec))
 *             for i in range(sample_count)]             # <<<<<<<<<<<<<<
 *     free(sample_times)
 *     return retval
 */

#line 2459 "dsproc3/core.pyx"
  __pyx_t_3 = __pyx_v_sample_count;

#line 2459 "dsproc3/core.pyx"
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {

#line 2459 "dsproc3/core.pyx"
    __pyx_v_i = __pyx_t_4;

    /* "dsproc3/core.pyx":2458
 *     if sample_times == NULL:
 *         return None
 *     retval = [(long(sample_times[i].tv_sec),long(sample_times[i].tv_usec))             # <<<<<<<<<<<<<<
 *             for i in range(sample_count)]
 *     free(sample_times)
 */

#line 2458 "dsproc3/core.pyx"
    __pyx_t_5 = __Pyx_PyInt_to_py_time_t((__pyx_v_sample_times[__pyx_v_i]).tv_sec); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2458 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 2458 "dsproc3/core.pyx"
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2458 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 2458 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);

#line 2458 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_5);

#line 2458 "dsproc3/core.pyx"
    __pyx_t_5 = 0;

#line 2458 "dsproc3/core.pyx"
    __pyx_t_5 = PyObject_Call(((PyObject *)((PyObject*)(&PyLong_Type))), ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2458 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 2458 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;

#line 2458 "dsproc3/core.pyx"
    __pyx_t_6 = __Pyx_PyInt_to_py_suseconds_t((__pyx_v_sample_times[__pyx_v_i]).tv_usec); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2458 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 2458 "dsproc3/core.pyx"
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2458 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 2458 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);

#line 2458 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_6);

#line 2458 "dsproc3/core.pyx"
    __pyx_t_6 = 0;

#line 2458 "dsproc3/core.pyx"
    __pyx_t_6 = PyObject_Call(((PyObject *)((PyObject*)(&PyLong_Type))), ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2458 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 2458 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;

#line 2458 "dsproc3/core.pyx"
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2458 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 2458 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);

#line 2458 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_5);

#line 2458 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);

#line 2458 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_6);

#line 2458 "dsproc3/core.pyx"
    __pyx_t_5 = 0;

#line 2458 "dsproc3/core.pyx"
    __pyx_t_6 = 0;

#line 2458 "dsproc3/core.pyx"
    if (unlikely(__Pyx_PyList_Append(__pyx_t_2, (PyObject*)__pyx_t_7))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2458 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;

#line 2458 "dsproc3/core.pyx"
  }

#line 2458 "dsproc3/core.pyx"
  __pyx_t_7 = ((PyObject *)__pyx_t_2);

#line 2458 "dsproc3/core.pyx"
  __Pyx_INCREF(__pyx_t_7);

#line 2458 "dsproc3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 2458 "dsproc3/core.pyx"
  __pyx_v_retval = ((PyObject*)__pyx_t_7);

#line 2458 "dsproc3/core.pyx"
  __pyx_t_7 = 0;

  /* "dsproc3/core.pyx":2460
 *     retval = [(long(sample_times[i].tv_sec),long(sample_times[i].tv_usec))
 *             for i in range(sample_count)]
 *     free(sample_times)             # <<<<<<<<<<<<<<
 *     return retval
 * 
 */

#line 2460 "dsproc3/core.pyx"
  free(__pyx_v_sample_times);

  /* "dsproc3/core.pyx":2461
 *             for i in range(sample_count)]
 *     free(sample_times)
 *     return retval             # <<<<<<<<<<<<<<
 * 
 * def set_sample_times(cds3.core.Object obj, size_t sample_start,
 */

#line 2461 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2461 "dsproc3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_retval));

#line 2461 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_retval);

#line 2461 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2461 "dsproc3/core.pyx"


#line 2461 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2461 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2461 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2461 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 2461 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 2461 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 2461 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 2461 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_sample_timevals", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2461 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2461 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2461 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_retval);

#line 2461 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2461 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2461 "dsproc3/core.pyx"
  return __pyx_r;

#line 2461 "dsproc3/core.pyx"
}

#line 2461 "dsproc3/core.pyx"


#line 2461 "dsproc3/core.pyx"
/* Python wrapper */

#line 2461 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_165set_sample_times(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2461 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_164set_sample_times[] = "set_sample_times(Object obj, size_t sample_start, sample_times)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_165set_sample_times = 
#line 2461 "dsproc3/core.pyx"
{__Pyx_NAMESTR("set_sample_times"), (PyCFunction)__pyx_pw_7dsproc3_4core_165set_sample_times, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_164set_sample_times)};

#line 2461 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_165set_sample_times(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Object *__pyx_v_obj = 0
#line 2461 "dsproc3/core.pyx"
;
  size_t __pyx_v_sample_start
#line 2461 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_sample_times = 0
#line 2461 "dsproc3/core.pyx"
;

#line 2461 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2461 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2461 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_sample_times (wrapper)", 0);

#line 2461 "dsproc3/core.pyx"
  {

#line 2461 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__obj,&__pyx_n_s__sample_start,&__pyx_n_s__sample_times,0};

#line 2461 "dsproc3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 2461 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2461 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2461 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2461 "dsproc3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 2461 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 2461 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2461 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2461 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2461 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2461 "dsproc3/core.pyx"
      }

#line 2461 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2461 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2461 "dsproc3/core.pyx"
        case  0:

#line 2461 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__obj)) != 0)) kw_args--;
        else 
#line 2461 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2461 "dsproc3/core.pyx"
        case  1:

#line 2461 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_start)) != 0)) kw_args--;

#line 2461 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_sample_times", 1, 3, 3, 1); 
#line 2461 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2463; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2461 "dsproc3/core.pyx"
        }

#line 2461 "dsproc3/core.pyx"
        case  2:

#line 2461 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_times)) != 0)) kw_args--;

#line 2461 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_sample_times", 1, 3, 3, 2); 
#line 2461 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2463; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2461 "dsproc3/core.pyx"
        }

#line 2461 "dsproc3/core.pyx"
      }

#line 2461 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2461 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_sample_times") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2463; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2461 "dsproc3/core.pyx"
      }

#line 2461 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 2461 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 2461 "dsproc3/core.pyx"
    } else {

#line 2461 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2461 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2461 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 2461 "dsproc3/core.pyx"
    }

#line 2461 "dsproc3/core.pyx"
    __pyx_v_obj = ((struct __pyx_obj_4cds3_4core_Object *)values[0]);

#line 2461 "dsproc3/core.pyx"
    __pyx_v_sample_start = __Pyx_PyInt_AsSize_t(values[1]); if (unlikely((__pyx_v_sample_start == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2463; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2461 "dsproc3/core.pyx"
    __pyx_v_sample_times = values[2];

#line 2461 "dsproc3/core.pyx"
  }

#line 2461 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2461 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_sample_times", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 2461 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2463; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2461 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2461 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_sample_times", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2461 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2461 "dsproc3/core.pyx"
  return NULL;

#line 2461 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 2461 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_obj), __pyx_ptype_4cds3_4core_Object, 1, "obj", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 2461 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_164set_sample_times(__pyx_self, __pyx_v_obj, __pyx_v_sample_start, __pyx_v_sample_times);

#line 2461 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2461 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2461 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2461 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2461 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2461 "dsproc3/core.pyx"
  return __pyx_r;

#line 2461 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2463
 *     return retval
 * 
 * def set_sample_times(cds3.core.Object obj, size_t sample_start,             # <<<<<<<<<<<<<<
 *         object sample_times):
 *     cdef int retval
 */

#line 2463 "dsproc3/core.pyx"


#line 2463 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_164set_sample_times(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_obj, size_t __pyx_v_sample_start, PyObject *__pyx_v_sample_times) {
  int __pyx_v_retval
#line 2463 "dsproc3/core.pyx"
;
  time_t *__pyx_v_sample_times_c
#line 2463 "dsproc3/core.pyx"
;
  size_t __pyx_v_sample_count
#line 2463 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_i = NULL
#line 2463 "dsproc3/core.pyx"
;

#line 2463 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  time_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2463 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_sample_times", 0);

  /* "dsproc3/core.pyx":2466
 *         object sample_times):
 *     cdef int retval
 *     cdef time_t *sample_times_c = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t sample_count = len(sample_times)
 *     sample_times_c = <time_t*>malloc(sizeof(time_t) * sample_count)
 */

#line 2466 "dsproc3/core.pyx"
  __pyx_v_sample_times_c = NULL;

  /* "dsproc3/core.pyx":2467
 *     cdef int retval
 *     cdef time_t *sample_times_c = NULL
 *     cdef size_t sample_count = len(sample_times)             # <<<<<<<<<<<<<<
 *     sample_times_c = <time_t*>malloc(sizeof(time_t) * sample_count)
 *     for i in range(len(sample_times)):
 */

#line 2467 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_Length(__pyx_v_sample_times); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2467 "dsproc3/core.pyx"
  __pyx_v_sample_count = __pyx_t_1;

  /* "dsproc3/core.pyx":2468
 *     cdef time_t *sample_times_c = NULL
 *     cdef size_t sample_count = len(sample_times)
 *     sample_times_c = <time_t*>malloc(sizeof(time_t) * sample_count)             # <<<<<<<<<<<<<<
 *     for i in range(len(sample_times)):
 *         sample_times_c[i] = sample_times[i]
 */

#line 2468 "dsproc3/core.pyx"
  __pyx_v_sample_times_c = ((time_t *)malloc(((sizeof(time_t)) * __pyx_v_sample_count)));

  /* "dsproc3/core.pyx":2469
 *     cdef size_t sample_count = len(sample_times)
 *     sample_times_c = <time_t*>malloc(sizeof(time_t) * sample_count)
 *     for i in range(len(sample_times)):             # <<<<<<<<<<<<<<
 *         sample_times_c[i] = sample_times[i]
 *     retval = dsproc_set_sample_times(<void*>obj.cds_object,
 */

#line 2469 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_Length(__pyx_v_sample_times); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2469 "dsproc3/core.pyx"
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2469 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 2469 "dsproc3/core.pyx"
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2469 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 2469 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 2469 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 2469 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 2469 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_Call(__pyx_builtin_range, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2469 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 2469 "dsproc3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 2469 "dsproc3/core.pyx"
  if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {

#line 2469 "dsproc3/core.pyx"
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;

#line 2469 "dsproc3/core.pyx"
    __pyx_t_4 = NULL;

#line 2469 "dsproc3/core.pyx"
  } else {
    __pyx_t_1 = -1; 
#line 2469 "dsproc3/core.pyx"
__pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2469 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 2469 "dsproc3/core.pyx"
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;

#line 2469 "dsproc3/core.pyx"
  }

#line 2469 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 2469 "dsproc3/core.pyx"
  for (;;) {

#line 2469 "dsproc3/core.pyx"
    if (!__pyx_t_4 && PyList_CheckExact(__pyx_t_3)) {

#line 2469 "dsproc3/core.pyx"
      if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;

#line 2469 "dsproc3/core.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 2469 "dsproc3/core.pyx"
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2469 "dsproc3/core.pyx"
      #else

#line 2469 "dsproc3/core.pyx"
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2469 "dsproc3/core.pyx"
      #endif
    } else 
#line 2469 "dsproc3/core.pyx"
if (!__pyx_t_4 && PyTuple_CheckExact(__pyx_t_3)) {

#line 2469 "dsproc3/core.pyx"
      if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;

#line 2469 "dsproc3/core.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 2469 "dsproc3/core.pyx"
      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2469 "dsproc3/core.pyx"
      #else

#line 2469 "dsproc3/core.pyx"
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2469 "dsproc3/core.pyx"
      #endif
    } else 
#line 2469 "dsproc3/core.pyx"
{

#line 2469 "dsproc3/core.pyx"
      __pyx_t_2 = __pyx_t_4(__pyx_t_3);

#line 2469 "dsproc3/core.pyx"
      if (unlikely(!__pyx_t_2)) {

#line 2469 "dsproc3/core.pyx"
        if (PyErr_Occurred()) {

#line 2469 "dsproc3/core.pyx"
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();

#line 2469 "dsproc3/core.pyx"
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2469 "dsproc3/core.pyx"
        }

#line 2469 "dsproc3/core.pyx"
        break;

#line 2469 "dsproc3/core.pyx"
      }

#line 2469 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 2469 "dsproc3/core.pyx"
    }

#line 2469 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_v_i);

#line 2469 "dsproc3/core.pyx"
    __pyx_v_i = __pyx_t_2;

#line 2469 "dsproc3/core.pyx"
    __pyx_t_2 = 0;

    /* "dsproc3/core.pyx":2470
 *     sample_times_c = <time_t*>malloc(sizeof(time_t) * sample_count)
 *     for i in range(len(sample_times)):
 *         sample_times_c[i] = sample_times[i]             # <<<<<<<<<<<<<<
 *     retval = dsproc_set_sample_times(<void*>obj.cds_object,
 *             sample_start, sample_count, sample_times_c)
 */

#line 2470 "dsproc3/core.pyx"
    __pyx_t_2 = PyObject_GetItem(__pyx_v_sample_times, __pyx_v_i); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2470 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 2470 "dsproc3/core.pyx"
    __pyx_t_5 = __Pyx_PyInt_from_py_time_t(__pyx_t_2); if (unlikely((__pyx_t_5 == (time_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2470 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 2470 "dsproc3/core.pyx"
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2470 "dsproc3/core.pyx"
    (__pyx_v_sample_times_c[__pyx_t_6]) = __pyx_t_5;

#line 2470 "dsproc3/core.pyx"
  }

#line 2470 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "dsproc3/core.pyx":2472
 *         sample_times_c[i] = sample_times[i]
 *     retval = dsproc_set_sample_times(<void*>obj.cds_object,
 *             sample_start, sample_count, sample_times_c)             # <<<<<<<<<<<<<<
 *     free(sample_times_c)
 *     return retval
 */

#line 2472 "dsproc3/core.pyx"
  __pyx_v_retval = dsproc_set_sample_times(((void *)__pyx_v_obj->cds_object), __pyx_v_sample_start, __pyx_v_sample_count, __pyx_v_sample_times_c);

  /* "dsproc3/core.pyx":2473
 *     retval = dsproc_set_sample_times(<void*>obj.cds_object,
 *             sample_start, sample_count, sample_times_c)
 *     free(sample_times_c)             # <<<<<<<<<<<<<<
 *     return retval
 * 
 */

#line 2473 "dsproc3/core.pyx"
  free(__pyx_v_sample_times_c);

  /* "dsproc3/core.pyx":2474
 *             sample_start, sample_count, sample_times_c)
 *     free(sample_times_c)
 *     return retval             # <<<<<<<<<<<<<<
 * 
 * def set_sample_timevals(cds3.core.Object obj, size_t sample_start,
 */

#line 2474 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2474 "dsproc3/core.pyx"
  __pyx_t_3 = PyInt_FromLong(__pyx_v_retval); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2474 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 2474 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_3;

#line 2474 "dsproc3/core.pyx"
  __pyx_t_3 = 0;

#line 2474 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2474 "dsproc3/core.pyx"


#line 2474 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2474 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2474 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2474 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 2474 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 2474 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_sample_times", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2474 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2474 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2474 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_i);

#line 2474 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2474 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2474 "dsproc3/core.pyx"
  return __pyx_r;

#line 2474 "dsproc3/core.pyx"
}

#line 2474 "dsproc3/core.pyx"


#line 2474 "dsproc3/core.pyx"
/* Python wrapper */

#line 2474 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_167set_sample_timevals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2474 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_166set_sample_timevals[] = "set_sample_timevals(Object obj, size_t sample_start, sample_times)\nSet the sample times for a dataset or time variable.\n    \n    This function will set the data values for a time variable by subtracting\n    the base time (as defined by the units attribute) and converting the\n    remainder to the data type of the variable.\n    \n    If the input object is one of the standard time variables:\n    \n    - time\n    - time_offset\n    - base_time\n    \n    All standard time variables that exist in its parent dataset will also be\n    updated.\n    \n    If the input object is a CDSGroup, the specified dataset and then its parent\n    datasets will be searched until a \"time\" or \"time_offset\" variable is found.\n    All standard time variables that exist in this dataset will then be updated.\n    \n    If the specified sample_start value is 0 and a base time value has not\n    already been set, the base time will be set using the time of midnight\n    just prior to the first sample time.\n    \n    The data type of the time variable(s) must be either CDS_FLOAT or\n    or CDS_DOUBLE. However, CDS_DOUBLE is usually recommended.\n    \n    If an error occurs in this function it will be appended to the log and\n    error mail messages, and the process status will be set appropriately.\n    \n    @param cds_object - pointer to a CDSGroup or CDSVar\n    @param sample_start - start sample (0 based indexing)\n    @param sample_count - number of samples in the times array\n    @param sample_times - pointer to the array of sample times\n    in seconds since 1970 UTC.\n    \n    @return\n    - 1 if successful\n    - 0 if an error occurred\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_167set_sample_timevals = 
#line 2474 "dsproc3/core.pyx"
{__Pyx_NAMESTR("set_sample_timevals"), (PyCFunction)__pyx_pw_7dsproc3_4core_167set_sample_timevals, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_166set_sample_timevals)};

#line 2474 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_167set_sample_timevals(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Object *__pyx_v_obj = 0
#line 2474 "dsproc3/core.pyx"
;
  size_t __pyx_v_sample_start
#line 2474 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_sample_times = 0
#line 2474 "dsproc3/core.pyx"
;

#line 2474 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2474 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2474 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_sample_timevals (wrapper)", 0);

#line 2474 "dsproc3/core.pyx"
  {

#line 2474 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__obj,&__pyx_n_s__sample_start,&__pyx_n_s__sample_times,0};

#line 2474 "dsproc3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 2474 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2474 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2474 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2474 "dsproc3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 2474 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 2474 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2474 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2474 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2474 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2474 "dsproc3/core.pyx"
      }

#line 2474 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2474 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2474 "dsproc3/core.pyx"
        case  0:

#line 2474 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__obj)) != 0)) kw_args--;
        else 
#line 2474 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2474 "dsproc3/core.pyx"
        case  1:

#line 2474 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_start)) != 0)) kw_args--;

#line 2474 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_sample_timevals", 1, 3, 3, 1); 
#line 2474 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2476; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2474 "dsproc3/core.pyx"
        }

#line 2474 "dsproc3/core.pyx"
        case  2:

#line 2474 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sample_times)) != 0)) kw_args--;

#line 2474 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_sample_timevals", 1, 3, 3, 2); 
#line 2474 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2476; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2474 "dsproc3/core.pyx"
        }

#line 2474 "dsproc3/core.pyx"
      }

#line 2474 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2474 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_sample_timevals") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2476; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2474 "dsproc3/core.pyx"
      }

#line 2474 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 2474 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 2474 "dsproc3/core.pyx"
    } else {

#line 2474 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2474 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2474 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 2474 "dsproc3/core.pyx"
    }

#line 2474 "dsproc3/core.pyx"
    __pyx_v_obj = ((struct __pyx_obj_4cds3_4core_Object *)values[0]);

#line 2474 "dsproc3/core.pyx"
    __pyx_v_sample_start = __Pyx_PyInt_AsSize_t(values[1]); if (unlikely((__pyx_v_sample_start == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2476; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2474 "dsproc3/core.pyx"
    __pyx_v_sample_times = values[2];

#line 2474 "dsproc3/core.pyx"
  }

#line 2474 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2474 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_sample_timevals", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 2474 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2476; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2474 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2474 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_sample_timevals", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2474 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2474 "dsproc3/core.pyx"
  return NULL;

#line 2474 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 2474 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_obj), __pyx_ptype_4cds3_4core_Object, 1, "obj", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 2474 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_166set_sample_timevals(__pyx_self, __pyx_v_obj, __pyx_v_sample_start, __pyx_v_sample_times);

#line 2474 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2474 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2474 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2474 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2474 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2474 "dsproc3/core.pyx"
  return __pyx_r;

#line 2474 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2476
 *     return retval
 * 
 * def set_sample_timevals(cds3.core.Object obj, size_t sample_start,             # <<<<<<<<<<<<<<
 *         object sample_times):
 *     """Set the sample times for a dataset or time variable.
 */

#line 2476 "dsproc3/core.pyx"


#line 2476 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_166set_sample_timevals(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Object *__pyx_v_obj, size_t __pyx_v_sample_start, PyObject *__pyx_v_sample_times) {
  int __pyx_v_retval
#line 2476 "dsproc3/core.pyx"
;
  timeval_t *__pyx_v_sample_times_c
#line 2476 "dsproc3/core.pyx"
;
  size_t __pyx_v_sample_count
#line 2476 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_i = NULL
#line 2476 "dsproc3/core.pyx"
;

#line 2476 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  time_t __pyx_t_9;
  suseconds_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2476 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_sample_timevals", 0);

  /* "dsproc3/core.pyx":2519
 *     """
 *     cdef int retval
 *     cdef timeval_t *sample_times_c = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t sample_count = len(sample_times)
 *     sample_times_c = <timeval_t*>malloc(sizeof(timeval_t) * sample_count)
 */

#line 2519 "dsproc3/core.pyx"
  __pyx_v_sample_times_c = NULL;

  /* "dsproc3/core.pyx":2520
 *     cdef int retval
 *     cdef timeval_t *sample_times_c = NULL
 *     cdef size_t sample_count = len(sample_times)             # <<<<<<<<<<<<<<
 *     sample_times_c = <timeval_t*>malloc(sizeof(timeval_t) * sample_count)
 *     for i in range(len(sample_times)):
 */

#line 2520 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_Length(__pyx_v_sample_times); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2520 "dsproc3/core.pyx"
  __pyx_v_sample_count = __pyx_t_1;

  /* "dsproc3/core.pyx":2521
 *     cdef timeval_t *sample_times_c = NULL
 *     cdef size_t sample_count = len(sample_times)
 *     sample_times_c = <timeval_t*>malloc(sizeof(timeval_t) * sample_count)             # <<<<<<<<<<<<<<
 *     for i in range(len(sample_times)):
 *         sample_times_c[i].tv_sec,sample_times_c[i].tv_usec = sample_times[i]
 */

#line 2521 "dsproc3/core.pyx"
  __pyx_v_sample_times_c = ((timeval_t *)malloc(((sizeof(timeval_t)) * __pyx_v_sample_count)));

  /* "dsproc3/core.pyx":2522
 *     cdef size_t sample_count = len(sample_times)
 *     sample_times_c = <timeval_t*>malloc(sizeof(timeval_t) * sample_count)
 *     for i in range(len(sample_times)):             # <<<<<<<<<<<<<<
 *         sample_times_c[i].tv_sec,sample_times_c[i].tv_usec = sample_times[i]
 *     retval = dsproc_set_sample_timevals(obj.cds_object,
 */

#line 2522 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_Length(__pyx_v_sample_times); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2522 "dsproc3/core.pyx"
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2522 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 2522 "dsproc3/core.pyx"
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2522 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 2522 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 2522 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 2522 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 2522 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_Call(__pyx_builtin_range, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2522 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 2522 "dsproc3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 2522 "dsproc3/core.pyx"
  if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {

#line 2522 "dsproc3/core.pyx"
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;

#line 2522 "dsproc3/core.pyx"
    __pyx_t_4 = NULL;

#line 2522 "dsproc3/core.pyx"
  } else {
    __pyx_t_1 = -1; 
#line 2522 "dsproc3/core.pyx"
__pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2522 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 2522 "dsproc3/core.pyx"
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;

#line 2522 "dsproc3/core.pyx"
  }

#line 2522 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 2522 "dsproc3/core.pyx"
  for (;;) {

#line 2522 "dsproc3/core.pyx"
    if (!__pyx_t_4 && PyList_CheckExact(__pyx_t_3)) {

#line 2522 "dsproc3/core.pyx"
      if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;

#line 2522 "dsproc3/core.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 2522 "dsproc3/core.pyx"
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2522 "dsproc3/core.pyx"
      #else

#line 2522 "dsproc3/core.pyx"
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2522 "dsproc3/core.pyx"
      #endif
    } else 
#line 2522 "dsproc3/core.pyx"
if (!__pyx_t_4 && PyTuple_CheckExact(__pyx_t_3)) {

#line 2522 "dsproc3/core.pyx"
      if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;

#line 2522 "dsproc3/core.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 2522 "dsproc3/core.pyx"
      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2522 "dsproc3/core.pyx"
      #else

#line 2522 "dsproc3/core.pyx"
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2522 "dsproc3/core.pyx"
      #endif
    } else 
#line 2522 "dsproc3/core.pyx"
{

#line 2522 "dsproc3/core.pyx"
      __pyx_t_2 = __pyx_t_4(__pyx_t_3);

#line 2522 "dsproc3/core.pyx"
      if (unlikely(!__pyx_t_2)) {

#line 2522 "dsproc3/core.pyx"
        if (PyErr_Occurred()) {

#line 2522 "dsproc3/core.pyx"
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();

#line 2522 "dsproc3/core.pyx"
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2522 "dsproc3/core.pyx"
        }

#line 2522 "dsproc3/core.pyx"
        break;

#line 2522 "dsproc3/core.pyx"
      }

#line 2522 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 2522 "dsproc3/core.pyx"
    }

#line 2522 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_v_i);

#line 2522 "dsproc3/core.pyx"
    __pyx_v_i = __pyx_t_2;

#line 2522 "dsproc3/core.pyx"
    __pyx_t_2 = 0;

    /* "dsproc3/core.pyx":2523
 *     sample_times_c = <timeval_t*>malloc(sizeof(timeval_t) * sample_count)
 *     for i in range(len(sample_times)):
 *         sample_times_c[i].tv_sec,sample_times_c[i].tv_usec = sample_times[i]             # <<<<<<<<<<<<<<
 *     retval = dsproc_set_sample_timevals(obj.cds_object,
 *             sample_start, sample_count, sample_times_c)
 */

#line 2523 "dsproc3/core.pyx"
    __pyx_t_2 = PyObject_GetItem(__pyx_v_sample_times, __pyx_v_i); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2523 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 2523 "dsproc3/core.pyx"
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {

#line 2523 "dsproc3/core.pyx"
      PyObject* sequence = __pyx_t_2;

#line 2523 "dsproc3/core.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 2523 "dsproc3/core.pyx"
      Py_ssize_t size = Py_SIZE(sequence);

#line 2523 "dsproc3/core.pyx"
      #else

#line 2523 "dsproc3/core.pyx"
      Py_ssize_t size = PySequence_Size(sequence);

#line 2523 "dsproc3/core.pyx"
      #endif

#line 2523 "dsproc3/core.pyx"
      if (unlikely(size != 2)) {

#line 2523 "dsproc3/core.pyx"
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);

#line 2523 "dsproc3/core.pyx"
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 2523 "dsproc3/core.pyx"
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2523 "dsproc3/core.pyx"
      }

#line 2523 "dsproc3/core.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 2523 "dsproc3/core.pyx"
      if (likely(PyTuple_CheckExact(sequence))) {

#line 2523 "dsproc3/core.pyx"
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 

#line 2523 "dsproc3/core.pyx"
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 

#line 2523 "dsproc3/core.pyx"
      } else {

#line 2523 "dsproc3/core.pyx"
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 

#line 2523 "dsproc3/core.pyx"
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 

#line 2523 "dsproc3/core.pyx"
      }

#line 2523 "dsproc3/core.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 2523 "dsproc3/core.pyx"
      __Pyx_INCREF(__pyx_t_6);

#line 2523 "dsproc3/core.pyx"
      #else

#line 2523 "dsproc3/core.pyx"
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2523 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 2523 "dsproc3/core.pyx"
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2523 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 2523 "dsproc3/core.pyx"
      #endif

#line 2523 "dsproc3/core.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 2523 "dsproc3/core.pyx"
    } else

#line 2523 "dsproc3/core.pyx"
    {

#line 2523 "dsproc3/core.pyx"
      Py_ssize_t index = -1;

#line 2523 "dsproc3/core.pyx"
      __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2523 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 2523 "dsproc3/core.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 2523 "dsproc3/core.pyx"
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) 
#line 2523 "dsproc3/core.pyx"
goto __pyx_L5_unpacking_failed;

#line 2523 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) 
#line 2523 "dsproc3/core.pyx"
goto __pyx_L5_unpacking_failed;

#line 2523 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 2523 "dsproc3/core.pyx"
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2523 "dsproc3/core.pyx"
      __pyx_t_8 = NULL;

#line 2523 "dsproc3/core.pyx"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 2523 "dsproc3/core.pyx"
      goto __pyx_L6_unpacking_done;

#line 2523 "dsproc3/core.pyx"
      __pyx_L5_unpacking_failed:;

#line 2523 "dsproc3/core.pyx"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 2523 "dsproc3/core.pyx"
      __pyx_t_8 = NULL;

#line 2523 "dsproc3/core.pyx"
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 2523 "dsproc3/core.pyx"
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2523 "dsproc3/core.pyx"
      __pyx_L6_unpacking_done:;

#line 2523 "dsproc3/core.pyx"
    }

#line 2523 "dsproc3/core.pyx"
    __pyx_t_9 = __Pyx_PyInt_from_py_time_t(__pyx_t_5); if (unlikely((__pyx_t_9 == (time_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2523 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 2523 "dsproc3/core.pyx"
    __pyx_t_10 = __Pyx_PyInt_from_py_suseconds_t(__pyx_t_6); if (unlikely((__pyx_t_10 == (suseconds_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2523 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 2523 "dsproc3/core.pyx"
    __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2523 "dsproc3/core.pyx"
    (__pyx_v_sample_times_c[__pyx_t_11]).tv_sec = __pyx_t_9;

#line 2523 "dsproc3/core.pyx"
    __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2523 "dsproc3/core.pyx"
    (__pyx_v_sample_times_c[__pyx_t_11]).tv_usec = __pyx_t_10;

#line 2523 "dsproc3/core.pyx"
  }

#line 2523 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "dsproc3/core.pyx":2525
 *         sample_times_c[i].tv_sec,sample_times_c[i].tv_usec = sample_times[i]
 *     retval = dsproc_set_sample_timevals(obj.cds_object,
 *             sample_start, sample_count, sample_times_c)             # <<<<<<<<<<<<<<
 *     free(sample_times_c)
 *     return retval
 */

#line 2525 "dsproc3/core.pyx"
  __pyx_v_retval = dsproc_set_sample_timevals(__pyx_v_obj->cds_object, __pyx_v_sample_start, __pyx_v_sample_count, __pyx_v_sample_times_c);

  /* "dsproc3/core.pyx":2526
 *     retval = dsproc_set_sample_timevals(obj.cds_object,
 *             sample_start, sample_count, sample_times_c)
 *     free(sample_times_c)             # <<<<<<<<<<<<<<
 *     return retval
 * 
 */

#line 2526 "dsproc3/core.pyx"
  free(__pyx_v_sample_times_c);

  /* "dsproc3/core.pyx":2527
 *             sample_start, sample_count, sample_times_c)
 *     free(sample_times_c)
 *     return retval             # <<<<<<<<<<<<<<
 * 
 * def add_var_output_target(cds3.core.Var var, int ds_id, char *var_name):
 */

#line 2527 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2527 "dsproc3/core.pyx"
  __pyx_t_3 = PyInt_FromLong(__pyx_v_retval); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2527 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 2527 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_3;

#line 2527 "dsproc3/core.pyx"
  __pyx_t_3 = 0;

#line 2527 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2527 "dsproc3/core.pyx"


#line 2527 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2527 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2527 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2527 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 2527 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 2527 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 2527 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 2527 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 2527 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_sample_timevals", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2527 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2527 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2527 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_i);

#line 2527 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2527 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2527 "dsproc3/core.pyx"
  return __pyx_r;

#line 2527 "dsproc3/core.pyx"
}

#line 2527 "dsproc3/core.pyx"


#line 2527 "dsproc3/core.pyx"
/* Python wrapper */

#line 2527 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_169add_var_output_target(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2527 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_168add_var_output_target[] = "add_var_output_target(Var var, int ds_id, char *var_name)\nAdd an output target for a variable.\n    \n    This function will add an output target for the variable.\n    \n    If an error occurs in this function it will be appended to the log and\n    error mail messages, and the process status will be set appropriately.\n    \n    @param var - pointer to the variable\n    @param ds_id - output datastream ID\n    @param var_name - name of the variable in the output datastream\n    \n    @retval 1 if successful\n    @retval 0 if an error occurred\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_169add_var_output_target = 
#line 2527 "dsproc3/core.pyx"
{__Pyx_NAMESTR("add_var_output_target"), (PyCFunction)__pyx_pw_7dsproc3_4core_169add_var_output_target, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_168add_var_output_target)};

#line 2527 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_169add_var_output_target(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = 0
#line 2527 "dsproc3/core.pyx"
;
  int __pyx_v_ds_id
#line 2527 "dsproc3/core.pyx"
;
  char *__pyx_v_var_name
#line 2527 "dsproc3/core.pyx"
;

#line 2527 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2527 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2527 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("add_var_output_target (wrapper)", 0);

#line 2527 "dsproc3/core.pyx"
  {

#line 2527 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__var,&__pyx_n_s__ds_id,&__pyx_n_s__var_name,0};

#line 2527 "dsproc3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 2527 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2527 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2527 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2527 "dsproc3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 2527 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 2527 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2527 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2527 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2527 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2527 "dsproc3/core.pyx"
      }

#line 2527 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2527 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2527 "dsproc3/core.pyx"
        case  0:

#line 2527 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__var)) != 0)) kw_args--;
        else 
#line 2527 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2527 "dsproc3/core.pyx"
        case  1:

#line 2527 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ds_id)) != 0)) kw_args--;

#line 2527 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("add_var_output_target", 1, 3, 3, 1); 
#line 2527 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2529; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2527 "dsproc3/core.pyx"
        }

#line 2527 "dsproc3/core.pyx"
        case  2:

#line 2527 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__var_name)) != 0)) kw_args--;

#line 2527 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("add_var_output_target", 1, 3, 3, 2); 
#line 2527 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2529; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2527 "dsproc3/core.pyx"
        }

#line 2527 "dsproc3/core.pyx"
      }

#line 2527 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2527 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_var_output_target") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2529; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2527 "dsproc3/core.pyx"
      }

#line 2527 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 2527 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 2527 "dsproc3/core.pyx"
    } else {

#line 2527 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2527 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2527 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 2527 "dsproc3/core.pyx"
    }

#line 2527 "dsproc3/core.pyx"
    __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)values[0]);

#line 2527 "dsproc3/core.pyx"
    __pyx_v_ds_id = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_ds_id == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2529; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2527 "dsproc3/core.pyx"
    __pyx_v_var_name = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_var_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2529; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2527 "dsproc3/core.pyx"
  }

#line 2527 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2527 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_var_output_target", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 2527 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2529; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2527 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2527 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.add_var_output_target", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2527 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2527 "dsproc3/core.pyx"
  return NULL;

#line 2527 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 2527 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_var), __pyx_ptype_4cds3_4core_Var, 1, "var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 2527 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_168add_var_output_target(__pyx_self, __pyx_v_var, __pyx_v_ds_id, __pyx_v_var_name);

#line 2527 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2527 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2527 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2527 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2527 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2527 "dsproc3/core.pyx"
  return __pyx_r;

#line 2527 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2529
 *     return retval
 * 
 * def add_var_output_target(cds3.core.Var var, int ds_id, char *var_name):             # <<<<<<<<<<<<<<
 *     """Add an output target for a variable.
 * 
 */

#line 2529 "dsproc3/core.pyx"


#line 2529 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_168add_var_output_target(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var, int __pyx_v_ds_id, char *__pyx_v_var_name) {

#line 2529 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2529 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("add_var_output_target", 0);

  /* "dsproc3/core.pyx":2545
 * 
 *     """
 *     return dsproc_add_var_output_target(var.c_ob, ds_id, var_name)             # <<<<<<<<<<<<<<
 * 
 * def copy_var_tag(cds3.core.Var src_var, cds3.core.Var dest_var):
 */

#line 2545 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2545 "dsproc3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(dsproc_add_var_output_target(__pyx_v_var->c_ob, __pyx_v_ds_id, __pyx_v_var_name)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2545 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2545 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 2545 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 2545 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2545 "dsproc3/core.pyx"


#line 2545 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2545 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2545 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2545 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 2545 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.add_var_output_target", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2545 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2545 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2545 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2545 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2545 "dsproc3/core.pyx"
  return __pyx_r;

#line 2545 "dsproc3/core.pyx"
}

#line 2545 "dsproc3/core.pyx"


#line 2545 "dsproc3/core.pyx"
/* Python wrapper */

#line 2545 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_171copy_var_tag(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2545 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_170copy_var_tag[] = "copy_var_tag(Var src_var, Var dest_var)\nCopy a variable tag from one variable to another.\n    \n    If an error occurs in this function it will be appended to the log and\n    error mail messages, and the process status will be set appropriately.\n    \n    @param src_var - pointer to the source variable\n    @param dest_var - pointer to the destination variable\n    \n    @retval 1 if successful\n    @retval 0 if an error occurred\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_171copy_var_tag = 
#line 2545 "dsproc3/core.pyx"
{__Pyx_NAMESTR("copy_var_tag"), (PyCFunction)__pyx_pw_7dsproc3_4core_171copy_var_tag, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_170copy_var_tag)};

#line 2545 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_171copy_var_tag(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_src_var = 0
#line 2545 "dsproc3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_dest_var = 0
#line 2545 "dsproc3/core.pyx"
;

#line 2545 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2545 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2545 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("copy_var_tag (wrapper)", 0);

#line 2545 "dsproc3/core.pyx"
  {

#line 2545 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__src_var,&__pyx_n_s__dest_var,0};

#line 2545 "dsproc3/core.pyx"
    PyObject* values[2] = {0,0};

#line 2545 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2545 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2545 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2545 "dsproc3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 2545 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2545 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2545 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2545 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2545 "dsproc3/core.pyx"
      }

#line 2545 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2545 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2545 "dsproc3/core.pyx"
        case  0:

#line 2545 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__src_var)) != 0)) kw_args--;
        else 
#line 2545 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2545 "dsproc3/core.pyx"
        case  1:

#line 2545 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dest_var)) != 0)) kw_args--;

#line 2545 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("copy_var_tag", 1, 2, 2, 1); 
#line 2545 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2547; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2545 "dsproc3/core.pyx"
        }

#line 2545 "dsproc3/core.pyx"
      }

#line 2545 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2545 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "copy_var_tag") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2547; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2545 "dsproc3/core.pyx"
      }

#line 2545 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 2545 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 2545 "dsproc3/core.pyx"
    } else {

#line 2545 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2545 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2545 "dsproc3/core.pyx"
    }

#line 2545 "dsproc3/core.pyx"
    __pyx_v_src_var = ((struct __pyx_obj_4cds3_4core_Var *)values[0]);

#line 2545 "dsproc3/core.pyx"
    __pyx_v_dest_var = ((struct __pyx_obj_4cds3_4core_Var *)values[1]);

#line 2545 "dsproc3/core.pyx"
  }

#line 2545 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2545 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("copy_var_tag", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 2545 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2547; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2545 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2545 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.copy_var_tag", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2545 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2545 "dsproc3/core.pyx"
  return NULL;

#line 2545 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 2545 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_src_var), __pyx_ptype_4cds3_4core_Var, 1, "src_var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2547; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2545 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dest_var), __pyx_ptype_4cds3_4core_Var, 1, "dest_var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2547; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 2545 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_170copy_var_tag(__pyx_self, __pyx_v_src_var, __pyx_v_dest_var);

#line 2545 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2545 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2545 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2545 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2545 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2545 "dsproc3/core.pyx"
  return __pyx_r;

#line 2545 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2547
 *     return dsproc_add_var_output_target(var.c_ob, ds_id, var_name)
 * 
 * def copy_var_tag(cds3.core.Var src_var, cds3.core.Var dest_var):             # <<<<<<<<<<<<<<
 *     """Copy a variable tag from one variable to another.
 * 
 */

#line 2547 "dsproc3/core.pyx"


#line 2547 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_170copy_var_tag(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_src_var, struct __pyx_obj_4cds3_4core_Var *__pyx_v_dest_var) {

#line 2547 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2547 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("copy_var_tag", 0);

  /* "dsproc3/core.pyx":2560
 * 
 *     """
 *     return dsproc_copy_var_tag(src_var.c_ob, dest_var.c_ob)             # <<<<<<<<<<<<<<
 * 
 * def delete_var_tag(cds3.core.Var var):
 */

#line 2560 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2560 "dsproc3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(dsproc_copy_var_tag(__pyx_v_src_var->c_ob, __pyx_v_dest_var->c_ob)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2560 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2560 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 2560 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 2560 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2560 "dsproc3/core.pyx"


#line 2560 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2560 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2560 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2560 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 2560 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.copy_var_tag", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2560 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2560 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2560 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2560 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2560 "dsproc3/core.pyx"
  return __pyx_r;

#line 2560 "dsproc3/core.pyx"
}

#line 2560 "dsproc3/core.pyx"


#line 2560 "dsproc3/core.pyx"
/* Python wrapper */

#line 2560 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_173delete_var_tag(PyObject *__pyx_self, PyObject *__pyx_v_var); /*proto*/

#line 2560 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_172delete_var_tag[] = "delete_var_tag(Var var)\nDelete a variable tag.\n\n    @param var - pointer to the variable\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_173delete_var_tag = 
#line 2560 "dsproc3/core.pyx"
{__Pyx_NAMESTR("delete_var_tag"), (PyCFunction)__pyx_pw_7dsproc3_4core_173delete_var_tag, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_172delete_var_tag)};

#line 2560 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_173delete_var_tag(PyObject *__pyx_self, PyObject *__pyx_v_var) {

#line 2560 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2560 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2560 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("delete_var_tag (wrapper)", 0);

#line 2560 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_var), __pyx_ptype_4cds3_4core_Var, 1, "var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 2560 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_172delete_var_tag(__pyx_self, ((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_var));

#line 2560 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2560 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2560 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2560 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2560 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2560 "dsproc3/core.pyx"
  return __pyx_r;

#line 2560 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2562
 *     return dsproc_copy_var_tag(src_var.c_ob, dest_var.c_ob)
 * 
 * def delete_var_tag(cds3.core.Var var):             # <<<<<<<<<<<<<<
 *     """Delete a variable tag.
 * 
 */

#line 2562 "dsproc3/core.pyx"


#line 2562 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_172delete_var_tag(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var) {

#line 2562 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations

#line 2562 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("delete_var_tag", 0);

  /* "dsproc3/core.pyx":2568
 * 
 *     """
 *     dsproc_delete_var_tag(var.c_ob)             # <<<<<<<<<<<<<<
 * 
 * #int     dsproc_get_var_output_targets(
 */

#line 2568 "dsproc3/core.pyx"
  dsproc_delete_var_tag(__pyx_v_var->c_ob);

#line 2568 "dsproc3/core.pyx"


#line 2568 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2568 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2568 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2568 "dsproc3/core.pyx"
  return __pyx_r;

#line 2568 "dsproc3/core.pyx"
}

#line 2568 "dsproc3/core.pyx"


#line 2568 "dsproc3/core.pyx"
/* Python wrapper */

#line 2568 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_175get_var_output_targets(PyObject *__pyx_self, PyObject *__pyx_v_var); /*proto*/

#line 2568 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_174get_var_output_targets[] = "get_var_output_targets(Var var)\nGet the output targets defined for the specified variable.\n    \n    The memory used by the output array belongs to the internal variable\n    tag and must not be freed or altered by the calling process.\n    \n    @param var - pointer to the variable\n    @param targets - output: pointer to the array of pointers\n    to the VarTarget structures.\n    \n    @return\n    - number of variable targets\n    - 0 if no variable targets have been defined\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_175get_var_output_targets = 
#line 2568 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_var_output_targets"), (PyCFunction)__pyx_pw_7dsproc3_4core_175get_var_output_targets, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_174get_var_output_targets)};

#line 2568 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_175get_var_output_targets(PyObject *__pyx_self, PyObject *__pyx_v_var) {

#line 2568 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2568 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2568 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_var_output_targets (wrapper)", 0);

#line 2568 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_var), __pyx_ptype_4cds3_4core_Var, 1, "var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 2568 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_174get_var_output_targets(__pyx_self, ((struct __pyx_obj_4cds3_4core_Var *)__pyx_v_var));

#line 2568 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2568 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2568 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2568 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2568 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2568 "dsproc3/core.pyx"
  return __pyx_r;

#line 2568 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2573
 * #            CDSVar      *var,
 * #            VarTarget ***targets)
 * def get_var_output_targets(cds3.core.Var var):             # <<<<<<<<<<<<<<
 *     """Get the output targets defined for the specified variable.
 * 
 */

#line 2573 "dsproc3/core.pyx"


#line 2573 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_174get_var_output_targets(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var) {
  VarTarget **__pyx_v_targets
#line 2573 "dsproc3/core.pyx"
;
  int __pyx_v_count
#line 2573 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_retval = 0
#line 2573 "dsproc3/core.pyx"
;
  struct __pyx_obj_7dsproc3_4core_PyVarTarget *__pyx_v_target = 0
#line 2573 "dsproc3/core.pyx"
;
  int __pyx_v_i
#line 2573 "dsproc3/core.pyx"
;

#line 2573 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2573 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_var_output_targets", 0);

  /* "dsproc3/core.pyx":2590
 *     cdef VarTarget **targets
 *     cdef int count
 *     cdef list retval = []             # <<<<<<<<<<<<<<
 *     cdef PyVarTarget target
 *     count = dsproc_get_var_output_targets(var.c_ob, &targets)
 */

#line 2590 "dsproc3/core.pyx"
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2590; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2590 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2590 "dsproc3/core.pyx"
  __pyx_v_retval = ((PyObject*)__pyx_t_1);

#line 2590 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2592
 *     cdef list retval = []
 *     cdef PyVarTarget target
 *     count = dsproc_get_var_output_targets(var.c_ob, &targets)             # <<<<<<<<<<<<<<
 *     for i in range(count):
 *         target = PyVarTarget()
 */

#line 2592 "dsproc3/core.pyx"
  __pyx_v_count = dsproc_get_var_output_targets(__pyx_v_var->c_ob, (&__pyx_v_targets));

  /* "dsproc3/core.pyx":2593
 *     cdef PyVarTarget target
 *     count = dsproc_get_var_output_targets(var.c_ob, &targets)
 *     for i in range(count):             # <<<<<<<<<<<<<<
 *         target = PyVarTarget()
 *         target.set_vartarget(targets[i])
 */

#line 2593 "dsproc3/core.pyx"
  __pyx_t_2 = __pyx_v_count;

#line 2593 "dsproc3/core.pyx"
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {

#line 2593 "dsproc3/core.pyx"
    __pyx_v_i = __pyx_t_3;

    /* "dsproc3/core.pyx":2594
 *     count = dsproc_get_var_output_targets(var.c_ob, &targets)
 *     for i in range(count):
 *         target = PyVarTarget()             # <<<<<<<<<<<<<<
 *         target.set_vartarget(targets[i])
 *         retval.append(target)
 */

#line 2594 "dsproc3/core.pyx"
    __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_7dsproc3_4core_PyVarTarget)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2594 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 2594 "dsproc3/core.pyx"
    __Pyx_XDECREF(((PyObject *)__pyx_v_target));

#line 2594 "dsproc3/core.pyx"
    __pyx_v_target = ((struct __pyx_obj_7dsproc3_4core_PyVarTarget *)__pyx_t_1);

#line 2594 "dsproc3/core.pyx"
    __pyx_t_1 = 0;

    /* "dsproc3/core.pyx":2595
 *     for i in range(count):
 *         target = PyVarTarget()
 *         target.set_vartarget(targets[i])             # <<<<<<<<<<<<<<
 *         retval.append(target)
 *     return retval
 */

#line 2595 "dsproc3/core.pyx"
    __pyx_t_1 = ((struct __pyx_vtabstruct_7dsproc3_4core_PyVarTarget *)__pyx_v_target->__pyx_vtab)->set_vartarget(__pyx_v_target, (__pyx_v_targets[__pyx_v_i])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2595; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2595 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 2595 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "dsproc3/core.pyx":2596
 *         target = PyVarTarget()
 *         target.set_vartarget(targets[i])
 *         retval.append(target)             # <<<<<<<<<<<<<<
 *     return retval
 * 
 */

#line 2596 "dsproc3/core.pyx"
    __pyx_t_4 = PyList_Append(__pyx_v_retval, ((PyObject *)__pyx_v_target)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2596; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2596 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":2597
 *         target.set_vartarget(targets[i])
 *         retval.append(target)
 *     return retval             # <<<<<<<<<<<<<<
 * 
 * def set_var_coordsys_name(cds3.core.Var var, char *coordsys_name):
 */

#line 2597 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2597 "dsproc3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_retval));

#line 2597 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_retval);

#line 2597 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2597 "dsproc3/core.pyx"


#line 2597 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2597 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2597 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2597 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 2597 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_var_output_targets", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2597 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2597 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2597 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_retval);

#line 2597 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_target);

#line 2597 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2597 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2597 "dsproc3/core.pyx"
  return __pyx_r;

#line 2597 "dsproc3/core.pyx"
}

#line 2597 "dsproc3/core.pyx"


#line 2597 "dsproc3/core.pyx"
/* Python wrapper */

#line 2597 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_177set_var_coordsys_name(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2597 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_176set_var_coordsys_name[] = "set_var_coordsys_name(Var var, char *coordsys_name)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_177set_var_coordsys_name = 
#line 2597 "dsproc3/core.pyx"
{__Pyx_NAMESTR("set_var_coordsys_name"), (PyCFunction)__pyx_pw_7dsproc3_4core_177set_var_coordsys_name, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_176set_var_coordsys_name)};

#line 2597 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_177set_var_coordsys_name(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = 0
#line 2597 "dsproc3/core.pyx"
;
  char *__pyx_v_coordsys_name
#line 2597 "dsproc3/core.pyx"
;

#line 2597 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2597 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2597 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_var_coordsys_name (wrapper)", 0);

#line 2597 "dsproc3/core.pyx"
  {

#line 2597 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__var,&__pyx_n_s__coordsys_name,0};

#line 2597 "dsproc3/core.pyx"
    PyObject* values[2] = {0,0};

#line 2597 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2597 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2597 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2597 "dsproc3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 2597 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2597 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2597 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2597 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2597 "dsproc3/core.pyx"
      }

#line 2597 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2597 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2597 "dsproc3/core.pyx"
        case  0:

#line 2597 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__var)) != 0)) kw_args--;
        else 
#line 2597 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2597 "dsproc3/core.pyx"
        case  1:

#line 2597 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__coordsys_name)) != 0)) kw_args--;

#line 2597 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_var_coordsys_name", 1, 2, 2, 1); 
#line 2597 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2599; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2597 "dsproc3/core.pyx"
        }

#line 2597 "dsproc3/core.pyx"
      }

#line 2597 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2597 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_var_coordsys_name") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2599; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2597 "dsproc3/core.pyx"
      }

#line 2597 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 2597 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 2597 "dsproc3/core.pyx"
    } else {

#line 2597 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2597 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2597 "dsproc3/core.pyx"
    }

#line 2597 "dsproc3/core.pyx"
    __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)values[0]);

#line 2597 "dsproc3/core.pyx"
    __pyx_v_coordsys_name = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_coordsys_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2599; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2597 "dsproc3/core.pyx"
  }

#line 2597 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2597 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_var_coordsys_name", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 2597 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2599; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2597 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2597 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_var_coordsys_name", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2597 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2597 "dsproc3/core.pyx"
  return NULL;

#line 2597 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 2597 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_var), __pyx_ptype_4cds3_4core_Var, 1, "var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 2597 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_176set_var_coordsys_name(__pyx_self, __pyx_v_var, __pyx_v_coordsys_name);

#line 2597 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2597 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2597 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2597 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2597 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2597 "dsproc3/core.pyx"
  return __pyx_r;

#line 2597 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2599
 *     return retval
 * 
 * def set_var_coordsys_name(cds3.core.Var var, char *coordsys_name):             # <<<<<<<<<<<<<<
 *     return dsproc_set_var_coordsys_name(var.c_ob, coordsys_name)
 * 
 */

#line 2599 "dsproc3/core.pyx"


#line 2599 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_176set_var_coordsys_name(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var, char *__pyx_v_coordsys_name) {

#line 2599 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2599 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_var_coordsys_name", 0);

  /* "dsproc3/core.pyx":2600
 * 
 * def set_var_coordsys_name(cds3.core.Var var, char *coordsys_name):
 *     return dsproc_set_var_coordsys_name(var.c_ob, coordsys_name)             # <<<<<<<<<<<<<<
 * 
 * def set_var_flags(cds3.core.Var var, int flags):
 */

#line 2600 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2600 "dsproc3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(dsproc_set_var_coordsys_name(__pyx_v_var->c_ob, __pyx_v_coordsys_name)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2600 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2600 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 2600 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 2600 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2600 "dsproc3/core.pyx"


#line 2600 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2600 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2600 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2600 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 2600 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_var_coordsys_name", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2600 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2600 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2600 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2600 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2600 "dsproc3/core.pyx"
  return __pyx_r;

#line 2600 "dsproc3/core.pyx"
}

#line 2600 "dsproc3/core.pyx"


#line 2600 "dsproc3/core.pyx"
/* Python wrapper */

#line 2600 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_179set_var_flags(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2600 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_178set_var_flags[] = "set_var_flags(Var var, int flags)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_179set_var_flags = 
#line 2600 "dsproc3/core.pyx"
{__Pyx_NAMESTR("set_var_flags"), (PyCFunction)__pyx_pw_7dsproc3_4core_179set_var_flags, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_178set_var_flags)};

#line 2600 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_179set_var_flags(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = 0
#line 2600 "dsproc3/core.pyx"
;
  int __pyx_v_flags
#line 2600 "dsproc3/core.pyx"
;

#line 2600 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2600 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2600 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_var_flags (wrapper)", 0);

#line 2600 "dsproc3/core.pyx"
  {

#line 2600 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__var,&__pyx_n_s__flags,0};

#line 2600 "dsproc3/core.pyx"
    PyObject* values[2] = {0,0};

#line 2600 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2600 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2600 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2600 "dsproc3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 2600 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2600 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2600 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2600 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2600 "dsproc3/core.pyx"
      }

#line 2600 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2600 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2600 "dsproc3/core.pyx"
        case  0:

#line 2600 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__var)) != 0)) kw_args--;
        else 
#line 2600 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2600 "dsproc3/core.pyx"
        case  1:

#line 2600 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags)) != 0)) kw_args--;

#line 2600 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_var_flags", 1, 2, 2, 1); 
#line 2600 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2602; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2600 "dsproc3/core.pyx"
        }

#line 2600 "dsproc3/core.pyx"
      }

#line 2600 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2600 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_var_flags") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2602; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2600 "dsproc3/core.pyx"
      }

#line 2600 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 2600 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 2600 "dsproc3/core.pyx"
    } else {

#line 2600 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2600 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2600 "dsproc3/core.pyx"
    }

#line 2600 "dsproc3/core.pyx"
    __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)values[0]);

#line 2600 "dsproc3/core.pyx"
    __pyx_v_flags = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2602; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2600 "dsproc3/core.pyx"
  }

#line 2600 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2600 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_var_flags", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 2600 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2602; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2600 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2600 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_var_flags", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2600 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2600 "dsproc3/core.pyx"
  return NULL;

#line 2600 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 2600 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_var), __pyx_ptype_4cds3_4core_Var, 1, "var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 2600 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_178set_var_flags(__pyx_self, __pyx_v_var, __pyx_v_flags);

#line 2600 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2600 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2600 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2600 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2600 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2600 "dsproc3/core.pyx"
  return __pyx_r;

#line 2600 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2602
 *     return dsproc_set_var_coordsys_name(var.c_ob, coordsys_name)
 * 
 * def set_var_flags(cds3.core.Var var, int flags):             # <<<<<<<<<<<<<<
 *     return dsproc_set_var_flags(var.c_ob, flags)
 * 
 */

#line 2602 "dsproc3/core.pyx"


#line 2602 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_178set_var_flags(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var, int __pyx_v_flags) {

#line 2602 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2602 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_var_flags", 0);

  /* "dsproc3/core.pyx":2603
 * 
 * def set_var_flags(cds3.core.Var var, int flags):
 *     return dsproc_set_var_flags(var.c_ob, flags)             # <<<<<<<<<<<<<<
 * 
 * def set_var_output_target(cds3.core.Var var, int ds_id, char *var_name):
 */

#line 2603 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2603 "dsproc3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(dsproc_set_var_flags(__pyx_v_var->c_ob, __pyx_v_flags)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2603 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2603 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 2603 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 2603 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2603 "dsproc3/core.pyx"


#line 2603 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2603 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2603 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2603 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 2603 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_var_flags", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2603 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2603 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2603 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2603 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2603 "dsproc3/core.pyx"
  return __pyx_r;

#line 2603 "dsproc3/core.pyx"
}

#line 2603 "dsproc3/core.pyx"


#line 2603 "dsproc3/core.pyx"
/* Python wrapper */

#line 2603 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_181set_var_output_target(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2603 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_180set_var_output_target[] = "set_var_output_target(Var var, int ds_id, char *var_name)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_181set_var_output_target = 
#line 2603 "dsproc3/core.pyx"
{__Pyx_NAMESTR("set_var_output_target"), (PyCFunction)__pyx_pw_7dsproc3_4core_181set_var_output_target, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_180set_var_output_target)};

#line 2603 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_181set_var_output_target(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = 0
#line 2603 "dsproc3/core.pyx"
;
  int __pyx_v_ds_id
#line 2603 "dsproc3/core.pyx"
;
  char *__pyx_v_var_name
#line 2603 "dsproc3/core.pyx"
;

#line 2603 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2603 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2603 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_var_output_target (wrapper)", 0);

#line 2603 "dsproc3/core.pyx"
  {

#line 2603 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__var,&__pyx_n_s__ds_id,&__pyx_n_s__var_name,0};

#line 2603 "dsproc3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 2603 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2603 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2603 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2603 "dsproc3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 2603 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 2603 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2603 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2603 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2603 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2603 "dsproc3/core.pyx"
      }

#line 2603 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2603 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2603 "dsproc3/core.pyx"
        case  0:

#line 2603 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__var)) != 0)) kw_args--;
        else 
#line 2603 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2603 "dsproc3/core.pyx"
        case  1:

#line 2603 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ds_id)) != 0)) kw_args--;

#line 2603 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_var_output_target", 1, 3, 3, 1); 
#line 2603 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2605; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2603 "dsproc3/core.pyx"
        }

#line 2603 "dsproc3/core.pyx"
        case  2:

#line 2603 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__var_name)) != 0)) kw_args--;

#line 2603 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_var_output_target", 1, 3, 3, 2); 
#line 2603 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2605; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2603 "dsproc3/core.pyx"
        }

#line 2603 "dsproc3/core.pyx"
      }

#line 2603 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2603 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_var_output_target") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2605; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2603 "dsproc3/core.pyx"
      }

#line 2603 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 2603 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 2603 "dsproc3/core.pyx"
    } else {

#line 2603 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2603 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2603 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 2603 "dsproc3/core.pyx"
    }

#line 2603 "dsproc3/core.pyx"
    __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)values[0]);

#line 2603 "dsproc3/core.pyx"
    __pyx_v_ds_id = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_ds_id == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2605; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2603 "dsproc3/core.pyx"
    __pyx_v_var_name = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_var_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2605; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2603 "dsproc3/core.pyx"
  }

#line 2603 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2603 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_var_output_target", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 2603 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2605; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2603 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2603 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_var_output_target", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2603 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2603 "dsproc3/core.pyx"
  return NULL;

#line 2603 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 2603 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_var), __pyx_ptype_4cds3_4core_Var, 1, "var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 2603 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_180set_var_output_target(__pyx_self, __pyx_v_var, __pyx_v_ds_id, __pyx_v_var_name);

#line 2603 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2603 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2603 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2603 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2603 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2603 "dsproc3/core.pyx"
  return __pyx_r;

#line 2603 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2605
 *     return dsproc_set_var_flags(var.c_ob, flags)
 * 
 * def set_var_output_target(cds3.core.Var var, int ds_id, char *var_name):             # <<<<<<<<<<<<<<
 *     return dsproc_set_var_output_target(var.c_ob, ds_id, var_name)
 * 
 */

#line 2605 "dsproc3/core.pyx"


#line 2605 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_180set_var_output_target(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var, int __pyx_v_ds_id, char *__pyx_v_var_name) {

#line 2605 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2605 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_var_output_target", 0);

  /* "dsproc3/core.pyx":2606
 * 
 * def set_var_output_target(cds3.core.Var var, int ds_id, char *var_name):
 *     return dsproc_set_var_output_target(var.c_ob, ds_id, var_name)             # <<<<<<<<<<<<<<
 * 
 * def unset_var_flags(cds3.core.Var var, int flags):
 */

#line 2606 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2606 "dsproc3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(dsproc_set_var_output_target(__pyx_v_var->c_ob, __pyx_v_ds_id, __pyx_v_var_name)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2606 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2606 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 2606 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 2606 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2606 "dsproc3/core.pyx"


#line 2606 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2606 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2606 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2606 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 2606 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_var_output_target", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2606 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2606 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2606 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2606 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2606 "dsproc3/core.pyx"
  return __pyx_r;

#line 2606 "dsproc3/core.pyx"
}

#line 2606 "dsproc3/core.pyx"


#line 2606 "dsproc3/core.pyx"
/* Python wrapper */

#line 2606 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_183unset_var_flags(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2606 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_182unset_var_flags[] = "unset_var_flags(Var var, int flags)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_183unset_var_flags = 
#line 2606 "dsproc3/core.pyx"
{__Pyx_NAMESTR("unset_var_flags"), (PyCFunction)__pyx_pw_7dsproc3_4core_183unset_var_flags, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_182unset_var_flags)};

#line 2606 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_183unset_var_flags(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Var *__pyx_v_var = 0
#line 2606 "dsproc3/core.pyx"
;
  int __pyx_v_flags
#line 2606 "dsproc3/core.pyx"
;

#line 2606 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2606 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2606 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("unset_var_flags (wrapper)", 0);

#line 2606 "dsproc3/core.pyx"
  {

#line 2606 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__var,&__pyx_n_s__flags,0};

#line 2606 "dsproc3/core.pyx"
    PyObject* values[2] = {0,0};

#line 2606 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2606 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2606 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2606 "dsproc3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 2606 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2606 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2606 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2606 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2606 "dsproc3/core.pyx"
      }

#line 2606 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2606 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2606 "dsproc3/core.pyx"
        case  0:

#line 2606 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__var)) != 0)) kw_args--;
        else 
#line 2606 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2606 "dsproc3/core.pyx"
        case  1:

#line 2606 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags)) != 0)) kw_args--;

#line 2606 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("unset_var_flags", 1, 2, 2, 1); 
#line 2606 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2608; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2606 "dsproc3/core.pyx"
        }

#line 2606 "dsproc3/core.pyx"
      }

#line 2606 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2606 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "unset_var_flags") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2608; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2606 "dsproc3/core.pyx"
      }

#line 2606 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 2606 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 2606 "dsproc3/core.pyx"
    } else {

#line 2606 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2606 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2606 "dsproc3/core.pyx"
    }

#line 2606 "dsproc3/core.pyx"
    __pyx_v_var = ((struct __pyx_obj_4cds3_4core_Var *)values[0]);

#line 2606 "dsproc3/core.pyx"
    __pyx_v_flags = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2608; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2606 "dsproc3/core.pyx"
  }

#line 2606 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2606 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("unset_var_flags", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 2606 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2608; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2606 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2606 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.unset_var_flags", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2606 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2606 "dsproc3/core.pyx"
  return NULL;

#line 2606 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 2606 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_var), __pyx_ptype_4cds3_4core_Var, 1, "var", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 2606 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_182unset_var_flags(__pyx_self, __pyx_v_var, __pyx_v_flags);

#line 2606 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2606 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2606 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2606 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2606 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2606 "dsproc3/core.pyx"
  return __pyx_r;

#line 2606 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2608
 *     return dsproc_set_var_output_target(var.c_ob, ds_id, var_name)
 * 
 * def unset_var_flags(cds3.core.Var var, int flags):             # <<<<<<<<<<<<<<
 *     dsproc_unset_var_flags(var.c_ob, flags)
 * 
 */

#line 2608 "dsproc3/core.pyx"


#line 2608 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_182unset_var_flags(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Var *__pyx_v_var, int __pyx_v_flags) {

#line 2608 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations

#line 2608 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("unset_var_flags", 0);

  /* "dsproc3/core.pyx":2609
 * 
 * def unset_var_flags(cds3.core.Var var, int flags):
 *     dsproc_unset_var_flags(var.c_ob, flags)             # <<<<<<<<<<<<<<
 * 
 * #ctypedef struct VarDQR:
 */

#line 2609 "dsproc3/core.pyx"
  dsproc_unset_var_flags(__pyx_v_var->c_ob, __pyx_v_flags);

#line 2609 "dsproc3/core.pyx"


#line 2609 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2609 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2609 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2609 "dsproc3/core.pyx"
  return __pyx_r;

#line 2609 "dsproc3/core.pyx"
}

#line 2609 "dsproc3/core.pyx"


#line 2609 "dsproc3/core.pyx"
/* Python wrapper */

#line 2609 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_185dump_dataset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2609 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_184dump_dataset[] = "dump_dataset(Group dataset, char *outdir, char *prefix, time_t file_time, char *suffix, int flags)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_185dump_dataset = 
#line 2609 "dsproc3/core.pyx"
{__Pyx_NAMESTR("dump_dataset"), (PyCFunction)__pyx_pw_7dsproc3_4core_185dump_dataset, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_184dump_dataset)};

#line 2609 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_185dump_dataset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4cds3_4core_Group *__pyx_v_dataset = 0
#line 2609 "dsproc3/core.pyx"
;
  char *__pyx_v_outdir
#line 2609 "dsproc3/core.pyx"
;
  char *__pyx_v_prefix
#line 2609 "dsproc3/core.pyx"
;
  time_t __pyx_v_file_time
#line 2609 "dsproc3/core.pyx"
;
  char *__pyx_v_suffix
#line 2609 "dsproc3/core.pyx"
;
  int __pyx_v_flags
#line 2609 "dsproc3/core.pyx"
;

#line 2609 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2609 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2609 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("dump_dataset (wrapper)", 0);

#line 2609 "dsproc3/core.pyx"
  {

#line 2609 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__dataset,&__pyx_n_s__outdir,&__pyx_n_s__prefix,&__pyx_n_s__file_time,&__pyx_n_s__suffix,&__pyx_n_s__flags,0};

#line 2609 "dsproc3/core.pyx"
    PyObject* values[6] = {0,0,0,0,0,0};

#line 2609 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2609 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2609 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2609 "dsproc3/core.pyx"
      switch (pos_args) {
        case  6: 
#line 2609 "dsproc3/core.pyx"
values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: 
#line 2609 "dsproc3/core.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 2609 "dsproc3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 2609 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 2609 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2609 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2609 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2609 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2609 "dsproc3/core.pyx"
      }

#line 2609 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2609 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2609 "dsproc3/core.pyx"
        case  0:

#line 2609 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dataset)) != 0)) kw_args--;
        else 
#line 2609 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2609 "dsproc3/core.pyx"
        case  1:

#line 2609 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__outdir)) != 0)) kw_args--;

#line 2609 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("dump_dataset", 1, 6, 6, 1); 
#line 2609 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2626; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2609 "dsproc3/core.pyx"
        }

#line 2609 "dsproc3/core.pyx"
        case  2:

#line 2609 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__prefix)) != 0)) kw_args--;

#line 2609 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("dump_dataset", 1, 6, 6, 2); 
#line 2609 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2626; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2609 "dsproc3/core.pyx"
        }

#line 2609 "dsproc3/core.pyx"
        case  3:

#line 2609 "dsproc3/core.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__file_time)) != 0)) kw_args--;

#line 2609 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("dump_dataset", 1, 6, 6, 3); 
#line 2609 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2626; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2609 "dsproc3/core.pyx"
        }

#line 2609 "dsproc3/core.pyx"
        case  4:

#line 2609 "dsproc3/core.pyx"
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__suffix)) != 0)) kw_args--;

#line 2609 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("dump_dataset", 1, 6, 6, 4); 
#line 2609 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2626; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2609 "dsproc3/core.pyx"
        }

#line 2609 "dsproc3/core.pyx"
        case  5:

#line 2609 "dsproc3/core.pyx"
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags)) != 0)) kw_args--;

#line 2609 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("dump_dataset", 1, 6, 6, 5); 
#line 2609 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2626; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2609 "dsproc3/core.pyx"
        }

#line 2609 "dsproc3/core.pyx"
      }

#line 2609 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2609 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dump_dataset") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2626; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2609 "dsproc3/core.pyx"
      }

#line 2609 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {

#line 2609 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 2609 "dsproc3/core.pyx"
    } else {

#line 2609 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2609 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2609 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 2609 "dsproc3/core.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 2609 "dsproc3/core.pyx"
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 2609 "dsproc3/core.pyx"
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);

#line 2609 "dsproc3/core.pyx"
    }

#line 2609 "dsproc3/core.pyx"
    __pyx_v_dataset = ((struct __pyx_obj_4cds3_4core_Group *)values[0]);

#line 2609 "dsproc3/core.pyx"
    __pyx_v_outdir = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_outdir) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2628; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2609 "dsproc3/core.pyx"
    __pyx_v_prefix = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_prefix) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2629; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2609 "dsproc3/core.pyx"
    __pyx_v_file_time = __Pyx_PyInt_from_py_time_t(values[3]); if (unlikely((__pyx_v_file_time == (time_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2630; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2609 "dsproc3/core.pyx"
    __pyx_v_suffix = PyBytes_AsString(values[4]); if (unlikely((!__pyx_v_suffix) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2631; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2609 "dsproc3/core.pyx"
    __pyx_v_flags = __Pyx_PyInt_AsInt(values[5]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2632; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2609 "dsproc3/core.pyx"
  }

#line 2609 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2609 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dump_dataset", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); 
#line 2609 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2626; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2609 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2609 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.dump_dataset", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2609 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2609 "dsproc3/core.pyx"
  return NULL;

#line 2609 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 2609 "dsproc3/core.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dataset), __pyx_ptype_4cds3_4core_Group, 1, "dataset", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 2609 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_184dump_dataset(__pyx_self, __pyx_v_dataset, __pyx_v_outdir, __pyx_v_prefix, __pyx_v_file_time, __pyx_v_suffix, __pyx_v_flags);

#line 2609 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2609 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2609 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2609 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2609 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2609 "dsproc3/core.pyx"
  return __pyx_r;

#line 2609 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2626
 * #int dsproc_get_var_dqrs(CDSVar *var, VarDQR ***dqrs)
 * 
 * def dump_dataset(             # <<<<<<<<<<<<<<
 *         cds3.core.Group dataset,
 *         char *outdir,
 */

#line 2626 "dsproc3/core.pyx"


#line 2626 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_184dump_dataset(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_4cds3_4core_Group *__pyx_v_dataset, char *__pyx_v_outdir, char *__pyx_v_prefix, time_t __pyx_v_file_time, char *__pyx_v_suffix, int __pyx_v_flags) {

#line 2626 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2626 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("dump_dataset", 0);

  /* "dsproc3/core.pyx":2633
 *         char *suffix,
 *         int flags):
 *     return dsproc_dump_dataset(dataset.c_ob, outdir, prefix, file_time, suffix,             # <<<<<<<<<<<<<<
 *             flags)
 * 
 */

#line 2633 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

  /* "dsproc3/core.pyx":2634
 *         int flags):
 *     return dsproc_dump_dataset(dataset.c_ob, outdir, prefix, file_time, suffix,
 *             flags)             # <<<<<<<<<<<<<<
 * 
 * def dump_output_datasets(char *outdir, char *suffix, int flags):
 */

#line 2634 "dsproc3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(dsproc_dump_dataset(__pyx_v_dataset->c_ob, __pyx_v_outdir, __pyx_v_prefix, __pyx_v_file_time, __pyx_v_suffix, __pyx_v_flags)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2634 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2634 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 2634 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 2634 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2634 "dsproc3/core.pyx"


#line 2634 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2634 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2634 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2634 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 2634 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.dump_dataset", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2634 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2634 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2634 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2634 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2634 "dsproc3/core.pyx"
  return __pyx_r;

#line 2634 "dsproc3/core.pyx"
}

#line 2634 "dsproc3/core.pyx"


#line 2634 "dsproc3/core.pyx"
/* Python wrapper */

#line 2634 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_187dump_output_datasets(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2634 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_186dump_output_datasets[] = "dump_output_datasets(char *outdir, char *suffix, int flags)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_187dump_output_datasets = 
#line 2634 "dsproc3/core.pyx"
{__Pyx_NAMESTR("dump_output_datasets"), (PyCFunction)__pyx_pw_7dsproc3_4core_187dump_output_datasets, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_186dump_output_datasets)};

#line 2634 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_187dump_output_datasets(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_outdir
#line 2634 "dsproc3/core.pyx"
;
  char *__pyx_v_suffix
#line 2634 "dsproc3/core.pyx"
;
  int __pyx_v_flags
#line 2634 "dsproc3/core.pyx"
;

#line 2634 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2634 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2634 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("dump_output_datasets (wrapper)", 0);

#line 2634 "dsproc3/core.pyx"
  {

#line 2634 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__outdir,&__pyx_n_s__suffix,&__pyx_n_s__flags,0};

#line 2634 "dsproc3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 2634 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2634 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2634 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2634 "dsproc3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 2634 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 2634 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2634 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2634 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2634 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2634 "dsproc3/core.pyx"
      }

#line 2634 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2634 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2634 "dsproc3/core.pyx"
        case  0:

#line 2634 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__outdir)) != 0)) kw_args--;
        else 
#line 2634 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2634 "dsproc3/core.pyx"
        case  1:

#line 2634 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__suffix)) != 0)) kw_args--;

#line 2634 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("dump_output_datasets", 1, 3, 3, 1); 
#line 2634 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2636; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2634 "dsproc3/core.pyx"
        }

#line 2634 "dsproc3/core.pyx"
        case  2:

#line 2634 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags)) != 0)) kw_args--;

#line 2634 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("dump_output_datasets", 1, 3, 3, 2); 
#line 2634 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2636; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2634 "dsproc3/core.pyx"
        }

#line 2634 "dsproc3/core.pyx"
      }

#line 2634 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2634 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dump_output_datasets") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2636; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2634 "dsproc3/core.pyx"
      }

#line 2634 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 2634 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 2634 "dsproc3/core.pyx"
    } else {

#line 2634 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2634 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2634 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 2634 "dsproc3/core.pyx"
    }

#line 2634 "dsproc3/core.pyx"
    __pyx_v_outdir = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_outdir) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2636; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2634 "dsproc3/core.pyx"
    __pyx_v_suffix = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_suffix) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2636; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2634 "dsproc3/core.pyx"
    __pyx_v_flags = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2636; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2634 "dsproc3/core.pyx"
  }

#line 2634 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2634 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dump_output_datasets", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 2634 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2636; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2634 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2634 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.dump_output_datasets", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2634 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2634 "dsproc3/core.pyx"
  return NULL;

#line 2634 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 2634 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_186dump_output_datasets(__pyx_self, __pyx_v_outdir, __pyx_v_suffix, __pyx_v_flags);

#line 2634 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2634 "dsproc3/core.pyx"
  return __pyx_r;

#line 2634 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2636
 *             flags)
 * 
 * def dump_output_datasets(char *outdir, char *suffix, int flags):             # <<<<<<<<<<<<<<
 *     return dsproc_dump_output_datasets(outdir, suffix, flags)
 * 
 */

#line 2636 "dsproc3/core.pyx"


#line 2636 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_186dump_output_datasets(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_outdir, char *__pyx_v_suffix, int __pyx_v_flags) {

#line 2636 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2636 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("dump_output_datasets", 0);

  /* "dsproc3/core.pyx":2637
 * 
 * def dump_output_datasets(char *outdir, char *suffix, int flags):
 *     return dsproc_dump_output_datasets(outdir, suffix, flags)             # <<<<<<<<<<<<<<
 * 
 * def dump_retrieved_datasets(char *outdir, char *suffix, int flags):
 */

#line 2637 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2637 "dsproc3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(dsproc_dump_output_datasets(__pyx_v_outdir, __pyx_v_suffix, __pyx_v_flags)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2637 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2637 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 2637 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 2637 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2637 "dsproc3/core.pyx"


#line 2637 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2637 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2637 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2637 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 2637 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.dump_output_datasets", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2637 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2637 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2637 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2637 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2637 "dsproc3/core.pyx"
  return __pyx_r;

#line 2637 "dsproc3/core.pyx"
}

#line 2637 "dsproc3/core.pyx"


#line 2637 "dsproc3/core.pyx"
/* Python wrapper */

#line 2637 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_189dump_retrieved_datasets(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2637 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_188dump_retrieved_datasets[] = "dump_retrieved_datasets(char *outdir, char *suffix, int flags)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_189dump_retrieved_datasets = 
#line 2637 "dsproc3/core.pyx"
{__Pyx_NAMESTR("dump_retrieved_datasets"), (PyCFunction)__pyx_pw_7dsproc3_4core_189dump_retrieved_datasets, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_188dump_retrieved_datasets)};

#line 2637 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_189dump_retrieved_datasets(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_outdir
#line 2637 "dsproc3/core.pyx"
;
  char *__pyx_v_suffix
#line 2637 "dsproc3/core.pyx"
;
  int __pyx_v_flags
#line 2637 "dsproc3/core.pyx"
;

#line 2637 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2637 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2637 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("dump_retrieved_datasets (wrapper)", 0);

#line 2637 "dsproc3/core.pyx"
  {

#line 2637 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__outdir,&__pyx_n_s__suffix,&__pyx_n_s__flags,0};

#line 2637 "dsproc3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 2637 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2637 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2637 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2637 "dsproc3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 2637 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 2637 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2637 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2637 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2637 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2637 "dsproc3/core.pyx"
      }

#line 2637 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2637 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2637 "dsproc3/core.pyx"
        case  0:

#line 2637 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__outdir)) != 0)) kw_args--;
        else 
#line 2637 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2637 "dsproc3/core.pyx"
        case  1:

#line 2637 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__suffix)) != 0)) kw_args--;

#line 2637 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("dump_retrieved_datasets", 1, 3, 3, 1); 
#line 2637 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2639; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2637 "dsproc3/core.pyx"
        }

#line 2637 "dsproc3/core.pyx"
        case  2:

#line 2637 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags)) != 0)) kw_args--;

#line 2637 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("dump_retrieved_datasets", 1, 3, 3, 2); 
#line 2637 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2639; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2637 "dsproc3/core.pyx"
        }

#line 2637 "dsproc3/core.pyx"
      }

#line 2637 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2637 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dump_retrieved_datasets") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2639; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2637 "dsproc3/core.pyx"
      }

#line 2637 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 2637 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 2637 "dsproc3/core.pyx"
    } else {

#line 2637 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2637 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2637 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 2637 "dsproc3/core.pyx"
    }

#line 2637 "dsproc3/core.pyx"
    __pyx_v_outdir = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_outdir) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2639; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2637 "dsproc3/core.pyx"
    __pyx_v_suffix = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_suffix) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2639; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2637 "dsproc3/core.pyx"
    __pyx_v_flags = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2639; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2637 "dsproc3/core.pyx"
  }

#line 2637 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2637 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dump_retrieved_datasets", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 2637 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2639; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2637 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2637 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.dump_retrieved_datasets", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2637 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2637 "dsproc3/core.pyx"
  return NULL;

#line 2637 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 2637 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_188dump_retrieved_datasets(__pyx_self, __pyx_v_outdir, __pyx_v_suffix, __pyx_v_flags);

#line 2637 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2637 "dsproc3/core.pyx"
  return __pyx_r;

#line 2637 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2639
 *     return dsproc_dump_output_datasets(outdir, suffix, flags)
 * 
 * def dump_retrieved_datasets(char *outdir, char *suffix, int flags):             # <<<<<<<<<<<<<<
 *     return dsproc_dump_retrieved_datasets(outdir, suffix, flags)
 * 
 */

#line 2639 "dsproc3/core.pyx"


#line 2639 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_188dump_retrieved_datasets(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_outdir, char *__pyx_v_suffix, int __pyx_v_flags) {

#line 2639 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2639 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("dump_retrieved_datasets", 0);

  /* "dsproc3/core.pyx":2640
 * 
 * def dump_retrieved_datasets(char *outdir, char *suffix, int flags):
 *     return dsproc_dump_retrieved_datasets(outdir, suffix, flags)             # <<<<<<<<<<<<<<
 * 
 * def dump_transformed_datasets(char *outdir, char *suffix, int flags):
 */

#line 2640 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2640 "dsproc3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(dsproc_dump_retrieved_datasets(__pyx_v_outdir, __pyx_v_suffix, __pyx_v_flags)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2640; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2640 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2640 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 2640 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 2640 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2640 "dsproc3/core.pyx"


#line 2640 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2640 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2640 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2640 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 2640 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.dump_retrieved_datasets", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2640 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2640 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2640 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2640 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2640 "dsproc3/core.pyx"
  return __pyx_r;

#line 2640 "dsproc3/core.pyx"
}

#line 2640 "dsproc3/core.pyx"


#line 2640 "dsproc3/core.pyx"
/* Python wrapper */

#line 2640 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_191dump_transformed_datasets(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2640 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_190dump_transformed_datasets[] = "dump_transformed_datasets(char *outdir, char *suffix, int flags)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_191dump_transformed_datasets = 
#line 2640 "dsproc3/core.pyx"
{__Pyx_NAMESTR("dump_transformed_datasets"), (PyCFunction)__pyx_pw_7dsproc3_4core_191dump_transformed_datasets, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_190dump_transformed_datasets)};

#line 2640 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_191dump_transformed_datasets(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_outdir
#line 2640 "dsproc3/core.pyx"
;
  char *__pyx_v_suffix
#line 2640 "dsproc3/core.pyx"
;
  int __pyx_v_flags
#line 2640 "dsproc3/core.pyx"
;

#line 2640 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2640 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2640 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("dump_transformed_datasets (wrapper)", 0);

#line 2640 "dsproc3/core.pyx"
  {

#line 2640 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__outdir,&__pyx_n_s__suffix,&__pyx_n_s__flags,0};

#line 2640 "dsproc3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 2640 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2640 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2640 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2640 "dsproc3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 2640 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 2640 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2640 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2640 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2640 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2640 "dsproc3/core.pyx"
      }

#line 2640 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2640 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2640 "dsproc3/core.pyx"
        case  0:

#line 2640 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__outdir)) != 0)) kw_args--;
        else 
#line 2640 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2640 "dsproc3/core.pyx"
        case  1:

#line 2640 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__suffix)) != 0)) kw_args--;

#line 2640 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("dump_transformed_datasets", 1, 3, 3, 1); 
#line 2640 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2640 "dsproc3/core.pyx"
        }

#line 2640 "dsproc3/core.pyx"
        case  2:

#line 2640 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags)) != 0)) kw_args--;

#line 2640 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("dump_transformed_datasets", 1, 3, 3, 2); 
#line 2640 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2640 "dsproc3/core.pyx"
        }

#line 2640 "dsproc3/core.pyx"
      }

#line 2640 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2640 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dump_transformed_datasets") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2640 "dsproc3/core.pyx"
      }

#line 2640 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 2640 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 2640 "dsproc3/core.pyx"
    } else {

#line 2640 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2640 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2640 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 2640 "dsproc3/core.pyx"
    }

#line 2640 "dsproc3/core.pyx"
    __pyx_v_outdir = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_outdir) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2640 "dsproc3/core.pyx"
    __pyx_v_suffix = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_suffix) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2640 "dsproc3/core.pyx"
    __pyx_v_flags = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2640 "dsproc3/core.pyx"
  }

#line 2640 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2640 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dump_transformed_datasets", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 2640 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2640 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2640 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.dump_transformed_datasets", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2640 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2640 "dsproc3/core.pyx"
  return NULL;

#line 2640 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 2640 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_190dump_transformed_datasets(__pyx_self, __pyx_v_outdir, __pyx_v_suffix, __pyx_v_flags);

#line 2640 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2640 "dsproc3/core.pyx"
  return __pyx_r;

#line 2640 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2642
 *     return dsproc_dump_retrieved_datasets(outdir, suffix, flags)
 * 
 * def dump_transformed_datasets(char *outdir, char *suffix, int flags):             # <<<<<<<<<<<<<<
 *     return dsproc_dump_transformed_datasets(outdir, suffix, flags)
 * 
 */

#line 2642 "dsproc3/core.pyx"


#line 2642 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_190dump_transformed_datasets(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_outdir, char *__pyx_v_suffix, int __pyx_v_flags) {

#line 2642 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2642 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("dump_transformed_datasets", 0);

  /* "dsproc3/core.pyx":2643
 * 
 * def dump_transformed_datasets(char *outdir, char *suffix, int flags):
 *     return dsproc_dump_transformed_datasets(outdir, suffix, flags)             # <<<<<<<<<<<<<<
 * 
 * def copy_file(char *src_file, char *dest_file):
 */

#line 2643 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2643 "dsproc3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(dsproc_dump_transformed_datasets(__pyx_v_outdir, __pyx_v_suffix, __pyx_v_flags)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2643 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2643 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 2643 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 2643 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2643 "dsproc3/core.pyx"


#line 2643 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2643 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2643 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2643 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 2643 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.dump_transformed_datasets", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2643 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2643 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2643 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2643 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2643 "dsproc3/core.pyx"
  return __pyx_r;

#line 2643 "dsproc3/core.pyx"
}

#line 2643 "dsproc3/core.pyx"


#line 2643 "dsproc3/core.pyx"
/* Python wrapper */

#line 2643 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_193copy_file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2643 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_192copy_file[] = "copy_file(char *src_file, char *dest_file)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_193copy_file = 
#line 2643 "dsproc3/core.pyx"
{__Pyx_NAMESTR("copy_file"), (PyCFunction)__pyx_pw_7dsproc3_4core_193copy_file, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_192copy_file)};

#line 2643 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_193copy_file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_src_file
#line 2643 "dsproc3/core.pyx"
;
  char *__pyx_v_dest_file
#line 2643 "dsproc3/core.pyx"
;

#line 2643 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2643 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2643 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("copy_file (wrapper)", 0);

#line 2643 "dsproc3/core.pyx"
  {

#line 2643 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__src_file,&__pyx_n_s__dest_file,0};

#line 2643 "dsproc3/core.pyx"
    PyObject* values[2] = {0,0};

#line 2643 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2643 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2643 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2643 "dsproc3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 2643 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2643 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2643 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2643 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2643 "dsproc3/core.pyx"
      }

#line 2643 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2643 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2643 "dsproc3/core.pyx"
        case  0:

#line 2643 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__src_file)) != 0)) kw_args--;
        else 
#line 2643 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2643 "dsproc3/core.pyx"
        case  1:

#line 2643 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dest_file)) != 0)) kw_args--;

#line 2643 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("copy_file", 1, 2, 2, 1); 
#line 2643 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2645; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2643 "dsproc3/core.pyx"
        }

#line 2643 "dsproc3/core.pyx"
      }

#line 2643 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2643 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "copy_file") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2645; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2643 "dsproc3/core.pyx"
      }

#line 2643 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 2643 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 2643 "dsproc3/core.pyx"
    } else {

#line 2643 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2643 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2643 "dsproc3/core.pyx"
    }

#line 2643 "dsproc3/core.pyx"
    __pyx_v_src_file = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_src_file) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2645; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2643 "dsproc3/core.pyx"
    __pyx_v_dest_file = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_dest_file) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2645; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2643 "dsproc3/core.pyx"
  }

#line 2643 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2643 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("copy_file", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 2643 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2645; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2643 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2643 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.copy_file", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2643 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2643 "dsproc3/core.pyx"
  return NULL;

#line 2643 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 2643 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_192copy_file(__pyx_self, __pyx_v_src_file, __pyx_v_dest_file);

#line 2643 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2643 "dsproc3/core.pyx"
  return __pyx_r;

#line 2643 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2645
 *     return dsproc_dump_transformed_datasets(outdir, suffix, flags)
 * 
 * def copy_file(char *src_file, char *dest_file):             # <<<<<<<<<<<<<<
 *     return dsproc_copy_file(src_file, dest_file)
 * 
 */

#line 2645 "dsproc3/core.pyx"


#line 2645 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_192copy_file(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_src_file, char *__pyx_v_dest_file) {

#line 2645 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2645 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("copy_file", 0);

  /* "dsproc3/core.pyx":2646
 * 
 * def copy_file(char *src_file, char *dest_file):
 *     return dsproc_copy_file(src_file, dest_file)             # <<<<<<<<<<<<<<
 * 
 * def move_file(char *src_file, char *dest_file):
 */

#line 2646 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2646 "dsproc3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(dsproc_copy_file(__pyx_v_src_file, __pyx_v_dest_file)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2646 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2646 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 2646 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 2646 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2646 "dsproc3/core.pyx"


#line 2646 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2646 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2646 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2646 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 2646 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.copy_file", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2646 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2646 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2646 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2646 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2646 "dsproc3/core.pyx"
  return __pyx_r;

#line 2646 "dsproc3/core.pyx"
}

#line 2646 "dsproc3/core.pyx"


#line 2646 "dsproc3/core.pyx"
/* Python wrapper */

#line 2646 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_195move_file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2646 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_194move_file[] = "move_file(char *src_file, char *dest_file)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_195move_file = 
#line 2646 "dsproc3/core.pyx"
{__Pyx_NAMESTR("move_file"), (PyCFunction)__pyx_pw_7dsproc3_4core_195move_file, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_194move_file)};

#line 2646 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_195move_file(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_src_file
#line 2646 "dsproc3/core.pyx"
;
  char *__pyx_v_dest_file
#line 2646 "dsproc3/core.pyx"
;

#line 2646 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2646 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2646 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("move_file (wrapper)", 0);

#line 2646 "dsproc3/core.pyx"
  {

#line 2646 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__src_file,&__pyx_n_s__dest_file,0};

#line 2646 "dsproc3/core.pyx"
    PyObject* values[2] = {0,0};

#line 2646 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2646 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2646 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2646 "dsproc3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 2646 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2646 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2646 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2646 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2646 "dsproc3/core.pyx"
      }

#line 2646 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2646 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2646 "dsproc3/core.pyx"
        case  0:

#line 2646 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__src_file)) != 0)) kw_args--;
        else 
#line 2646 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2646 "dsproc3/core.pyx"
        case  1:

#line 2646 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__dest_file)) != 0)) kw_args--;

#line 2646 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("move_file", 1, 2, 2, 1); 
#line 2646 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2648; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2646 "dsproc3/core.pyx"
        }

#line 2646 "dsproc3/core.pyx"
      }

#line 2646 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2646 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "move_file") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2648; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2646 "dsproc3/core.pyx"
      }

#line 2646 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 2646 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 2646 "dsproc3/core.pyx"
    } else {

#line 2646 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2646 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2646 "dsproc3/core.pyx"
    }

#line 2646 "dsproc3/core.pyx"
    __pyx_v_src_file = PyBytes_AsString(values[0]); if (unlikely((!__pyx_v_src_file) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2648; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2646 "dsproc3/core.pyx"
    __pyx_v_dest_file = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_dest_file) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2648; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2646 "dsproc3/core.pyx"
  }

#line 2646 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2646 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("move_file", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 2646 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2648; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2646 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2646 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.move_file", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2646 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2646 "dsproc3/core.pyx"
  return NULL;

#line 2646 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 2646 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_194move_file(__pyx_self, __pyx_v_src_file, __pyx_v_dest_file);

#line 2646 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2646 "dsproc3/core.pyx"
  return __pyx_r;

#line 2646 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2648
 *     return dsproc_copy_file(src_file, dest_file)
 * 
 * def move_file(char *src_file, char *dest_file):             # <<<<<<<<<<<<<<
 *     return dsproc_move_file(src_file, dest_file)
 * 
 */

#line 2648 "dsproc3/core.pyx"


#line 2648 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_194move_file(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_src_file, char *__pyx_v_dest_file) {

#line 2648 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2648 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("move_file", 0);

  /* "dsproc3/core.pyx":2649
 * 
 * def move_file(char *src_file, char *dest_file):
 *     return dsproc_move_file(src_file, dest_file)             # <<<<<<<<<<<<<<
 * 
 * #FILE   *dsproc_open_file(char *file)
 */

#line 2649 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2649 "dsproc3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(dsproc_move_file(__pyx_v_src_file, __pyx_v_dest_file)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2649 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2649 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 2649 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 2649 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2649 "dsproc3/core.pyx"


#line 2649 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2649 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2649 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2649 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 2649 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.move_file", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2649 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2649 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2649 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2649 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2649 "dsproc3/core.pyx"
  return __pyx_r;

#line 2649 "dsproc3/core.pyx"
}

#line 2649 "dsproc3/core.pyx"


#line 2649 "dsproc3/core.pyx"
/* Python wrapper */

#line 2649 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_197add_datastream_file_patterns(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2649 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_196add_datastream_file_patterns[] = "add_datastream_file_patterns(int ds_id, patterns, int ignore_case)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_197add_datastream_file_patterns = 
#line 2649 "dsproc3/core.pyx"
{__Pyx_NAMESTR("add_datastream_file_patterns"), (PyCFunction)__pyx_pw_7dsproc3_4core_197add_datastream_file_patterns, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_196add_datastream_file_patterns)};

#line 2649 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_197add_datastream_file_patterns(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_ds_id
#line 2649 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_patterns = 0
#line 2649 "dsproc3/core.pyx"
;
  int __pyx_v_ignore_case
#line 2649 "dsproc3/core.pyx"
;

#line 2649 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2649 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2649 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("add_datastream_file_patterns (wrapper)", 0);

#line 2649 "dsproc3/core.pyx"
  {

#line 2649 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__ds_id,&__pyx_n_s__patterns,&__pyx_n_s__ignore_case,0};

#line 2649 "dsproc3/core.pyx"
    PyObject* values[3] = {0,0,0};

#line 2649 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2649 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2649 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2649 "dsproc3/core.pyx"
      switch (pos_args) {
        case  3: 
#line 2649 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 2649 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2649 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2649 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2649 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2649 "dsproc3/core.pyx"
      }

#line 2649 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2649 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2649 "dsproc3/core.pyx"
        case  0:

#line 2649 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ds_id)) != 0)) kw_args--;
        else 
#line 2649 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2649 "dsproc3/core.pyx"
        case  1:

#line 2649 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__patterns)) != 0)) kw_args--;

#line 2649 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("add_datastream_file_patterns", 1, 3, 3, 1); 
#line 2649 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2653; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2649 "dsproc3/core.pyx"
        }

#line 2649 "dsproc3/core.pyx"
        case  2:

#line 2649 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ignore_case)) != 0)) kw_args--;

#line 2649 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("add_datastream_file_patterns", 1, 3, 3, 2); 
#line 2649 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2653; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2649 "dsproc3/core.pyx"
        }

#line 2649 "dsproc3/core.pyx"
      }

#line 2649 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2649 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_datastream_file_patterns") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2653; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2649 "dsproc3/core.pyx"
      }

#line 2649 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 2649 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 2649 "dsproc3/core.pyx"
    } else {

#line 2649 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2649 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2649 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 2649 "dsproc3/core.pyx"
    }

#line 2649 "dsproc3/core.pyx"
    __pyx_v_ds_id = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_ds_id == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2653; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2649 "dsproc3/core.pyx"
    __pyx_v_patterns = values[1];

#line 2649 "dsproc3/core.pyx"
    __pyx_v_ignore_case = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_ignore_case == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2653; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2649 "dsproc3/core.pyx"
  }

#line 2649 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2649 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_datastream_file_patterns", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 2649 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2653; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2649 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2649 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.add_datastream_file_patterns", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2649 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2649 "dsproc3/core.pyx"
  return NULL;

#line 2649 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 2649 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_196add_datastream_file_patterns(__pyx_self, __pyx_v_ds_id, __pyx_v_patterns, __pyx_v_ignore_case);

#line 2649 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2649 "dsproc3/core.pyx"
  return __pyx_r;

#line 2649 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2653
 * #FILE   *dsproc_open_file(char *file)
 * #
 * def add_datastream_file_patterns(int ds_id, object patterns, int ignore_case):             # <<<<<<<<<<<<<<
 *     cdef int return_value
 *     cdef char **c_patterns = <char**>malloc(len(patterns) * sizeof(char*))
 */

#line 2653 "dsproc3/core.pyx"


#line 2653 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_196add_datastream_file_patterns(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id, PyObject *__pyx_v_patterns, int __pyx_v_ignore_case) {
  int __pyx_v_return_value
#line 2653 "dsproc3/core.pyx"
;
  char **__pyx_v_c_patterns
#line 2653 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_i = NULL
#line 2653 "dsproc3/core.pyx"
;

#line 2653 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  char *__pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2653 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("add_datastream_file_patterns", 0);

  /* "dsproc3/core.pyx":2655
 * def add_datastream_file_patterns(int ds_id, object patterns, int ignore_case):
 *     cdef int return_value
 *     cdef char **c_patterns = <char**>malloc(len(patterns) * sizeof(char*))             # <<<<<<<<<<<<<<
 *     for i in range(len(patterns)):
 *         c_patterns[i] = PyString_AsString(patterns[i])
 */

#line 2655 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_Length(__pyx_v_patterns); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2655 "dsproc3/core.pyx"
  __pyx_v_c_patterns = ((char **)malloc((__pyx_t_1 * (sizeof(char *)))));

  /* "dsproc3/core.pyx":2656
 *     cdef int return_value
 *     cdef char **c_patterns = <char**>malloc(len(patterns) * sizeof(char*))
 *     for i in range(len(patterns)):             # <<<<<<<<<<<<<<
 *         c_patterns[i] = PyString_AsString(patterns[i])
 *     return_value = dsproc_add_datastream_file_patterns(ds_id, len(patterns),
 */

#line 2656 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_Length(__pyx_v_patterns); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2656 "dsproc3/core.pyx"
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2656 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 2656 "dsproc3/core.pyx"
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2656 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 2656 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 2656 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 2656 "dsproc3/core.pyx"
  __pyx_t_2 = 0;

#line 2656 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_Call(__pyx_builtin_range, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2656 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 2656 "dsproc3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 2656 "dsproc3/core.pyx"
  if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {

#line 2656 "dsproc3/core.pyx"
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;

#line 2656 "dsproc3/core.pyx"
    __pyx_t_4 = NULL;

#line 2656 "dsproc3/core.pyx"
  } else {
    __pyx_t_1 = -1; 
#line 2656 "dsproc3/core.pyx"
__pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2656 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 2656 "dsproc3/core.pyx"
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;

#line 2656 "dsproc3/core.pyx"
  }

#line 2656 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 2656 "dsproc3/core.pyx"
  for (;;) {

#line 2656 "dsproc3/core.pyx"
    if (!__pyx_t_4 && PyList_CheckExact(__pyx_t_3)) {

#line 2656 "dsproc3/core.pyx"
      if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;

#line 2656 "dsproc3/core.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 2656 "dsproc3/core.pyx"
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2656 "dsproc3/core.pyx"
      #else

#line 2656 "dsproc3/core.pyx"
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2656 "dsproc3/core.pyx"
      #endif
    } else 
#line 2656 "dsproc3/core.pyx"
if (!__pyx_t_4 && PyTuple_CheckExact(__pyx_t_3)) {

#line 2656 "dsproc3/core.pyx"
      if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;

#line 2656 "dsproc3/core.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 2656 "dsproc3/core.pyx"
      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2656 "dsproc3/core.pyx"
      #else

#line 2656 "dsproc3/core.pyx"
      __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2656 "dsproc3/core.pyx"
      #endif
    } else 
#line 2656 "dsproc3/core.pyx"
{

#line 2656 "dsproc3/core.pyx"
      __pyx_t_2 = __pyx_t_4(__pyx_t_3);

#line 2656 "dsproc3/core.pyx"
      if (unlikely(!__pyx_t_2)) {

#line 2656 "dsproc3/core.pyx"
        if (PyErr_Occurred()) {

#line 2656 "dsproc3/core.pyx"
          if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();

#line 2656 "dsproc3/core.pyx"
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2656 "dsproc3/core.pyx"
        }

#line 2656 "dsproc3/core.pyx"
        break;

#line 2656 "dsproc3/core.pyx"
      }

#line 2656 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 2656 "dsproc3/core.pyx"
    }

#line 2656 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_v_i);

#line 2656 "dsproc3/core.pyx"
    __pyx_v_i = __pyx_t_2;

#line 2656 "dsproc3/core.pyx"
    __pyx_t_2 = 0;

    /* "dsproc3/core.pyx":2657
 *     cdef char **c_patterns = <char**>malloc(len(patterns) * sizeof(char*))
 *     for i in range(len(patterns)):
 *         c_patterns[i] = PyString_AsString(patterns[i])             # <<<<<<<<<<<<<<
 *     return_value = dsproc_add_datastream_file_patterns(ds_id, len(patterns),
 *             c_patterns, ignore_case)
 */

#line 2657 "dsproc3/core.pyx"
    __pyx_t_2 = PyObject_GetItem(__pyx_v_patterns, __pyx_v_i); if (!__pyx_t_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2657 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 2657 "dsproc3/core.pyx"
    __pyx_t_5 = PyString_AsString(__pyx_t_2); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2657 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 2657 "dsproc3/core.pyx"
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2657 "dsproc3/core.pyx"
    (__pyx_v_c_patterns[__pyx_t_6]) = __pyx_t_5;

#line 2657 "dsproc3/core.pyx"
  }

#line 2657 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "dsproc3/core.pyx":2658
 *     for i in range(len(patterns)):
 *         c_patterns[i] = PyString_AsString(patterns[i])
 *     return_value = dsproc_add_datastream_file_patterns(ds_id, len(patterns),             # <<<<<<<<<<<<<<
 *             c_patterns, ignore_case)
 *     free(c_patterns)
 */

#line 2658 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_Length(__pyx_v_patterns); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2659
 *         c_patterns[i] = PyString_AsString(patterns[i])
 *     return_value = dsproc_add_datastream_file_patterns(ds_id, len(patterns),
 *             c_patterns, ignore_case)             # <<<<<<<<<<<<<<
 *     free(c_patterns)
 *     return return_value
 */

#line 2659 "dsproc3/core.pyx"
  __pyx_v_return_value = dsproc_add_datastream_file_patterns(__pyx_v_ds_id, __pyx_t_1, __pyx_v_c_patterns, __pyx_v_ignore_case);

  /* "dsproc3/core.pyx":2660
 *     return_value = dsproc_add_datastream_file_patterns(ds_id, len(patterns),
 *             c_patterns, ignore_case)
 *     free(c_patterns)             # <<<<<<<<<<<<<<
 *     return return_value
 * 
 */

#line 2660 "dsproc3/core.pyx"
  free(__pyx_v_c_patterns);

  /* "dsproc3/core.pyx":2661
 *             c_patterns, ignore_case)
 *     free(c_patterns)
 *     return return_value             # <<<<<<<<<<<<<<
 * 
 * def get_datastream_files(int ds_id):
 */

#line 2661 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2661 "dsproc3/core.pyx"
  __pyx_t_3 = PyInt_FromLong(__pyx_v_return_value); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2661 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 2661 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_3;

#line 2661 "dsproc3/core.pyx"
  __pyx_t_3 = 0;

#line 2661 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2661 "dsproc3/core.pyx"


#line 2661 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2661 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2661 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2661 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 2661 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 2661 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.add_datastream_file_patterns", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2661 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2661 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2661 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_i);

#line 2661 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2661 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2661 "dsproc3/core.pyx"
  return __pyx_r;

#line 2661 "dsproc3/core.pyx"
}

#line 2661 "dsproc3/core.pyx"


#line 2661 "dsproc3/core.pyx"
/* Python wrapper */

#line 2661 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_199get_datastream_files(PyObject *__pyx_self, PyObject *__pyx_arg_ds_id); /*proto*/

#line 2661 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_198get_datastream_files[] = "get_datastream_files(int ds_id)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_199get_datastream_files = 
#line 2661 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_datastream_files"), (PyCFunction)__pyx_pw_7dsproc3_4core_199get_datastream_files, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_198get_datastream_files)};

#line 2661 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_199get_datastream_files(PyObject *__pyx_self, PyObject *__pyx_arg_ds_id) {
  int __pyx_v_ds_id
#line 2661 "dsproc3/core.pyx"
;

#line 2661 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2661 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2661 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_datastream_files (wrapper)", 0);

#line 2661 "dsproc3/core.pyx"
  assert(__pyx_arg_ds_id); {

#line 2661 "dsproc3/core.pyx"
    __pyx_v_ds_id = __Pyx_PyInt_AsInt(__pyx_arg_ds_id); if (unlikely((__pyx_v_ds_id == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2663; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2661 "dsproc3/core.pyx"
  }

#line 2661 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2661 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2661 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_datastream_files", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2661 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2661 "dsproc3/core.pyx"
  return NULL;

#line 2661 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 2661 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_198get_datastream_files(__pyx_self, ((int)__pyx_v_ds_id));

#line 2661 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2661 "dsproc3/core.pyx"
  return __pyx_r;

#line 2661 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2663
 *     return return_value
 * 
 * def get_datastream_files(int ds_id):             # <<<<<<<<<<<<<<
 *     cdef int count
 *     cdef char **file_list = NULL
 */

#line 2663 "dsproc3/core.pyx"


#line 2663 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_198get_datastream_files(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id) {
  int __pyx_v_count
#line 2663 "dsproc3/core.pyx"
;
  char **__pyx_v_file_list
#line 2663 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_list = NULL
#line 2663 "dsproc3/core.pyx"
;
  int __pyx_v_i
#line 2663 "dsproc3/core.pyx"
;

#line 2663 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2663 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_datastream_files", 0);

  /* "dsproc3/core.pyx":2665
 * def get_datastream_files(int ds_id):
 *     cdef int count
 *     cdef char **file_list = NULL             # <<<<<<<<<<<<<<
 *     list = []
 *     count = dsproc_get_datastream_files(ds_id, &file_list)
 */

#line 2665 "dsproc3/core.pyx"
  __pyx_v_file_list = NULL;

  /* "dsproc3/core.pyx":2666
 *     cdef int count
 *     cdef char **file_list = NULL
 *     list = []             # <<<<<<<<<<<<<<
 *     count = dsproc_get_datastream_files(ds_id, &file_list)
 *     for i in range(count):
 */

#line 2666 "dsproc3/core.pyx"
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2666 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2666 "dsproc3/core.pyx"
  __pyx_v_list = ((PyObject*)__pyx_t_1);

#line 2666 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2667
 *     cdef char **file_list = NULL
 *     list = []
 *     count = dsproc_get_datastream_files(ds_id, &file_list)             # <<<<<<<<<<<<<<
 *     for i in range(count):
 *         list.append(file_list[i])
 */

#line 2667 "dsproc3/core.pyx"
  __pyx_v_count = dsproc_get_datastream_files(__pyx_v_ds_id, (&__pyx_v_file_list));

  /* "dsproc3/core.pyx":2668
 *     list = []
 *     count = dsproc_get_datastream_files(ds_id, &file_list)
 *     for i in range(count):             # <<<<<<<<<<<<<<
 *         list.append(file_list[i])
 *     return list
 */

#line 2668 "dsproc3/core.pyx"
  __pyx_t_2 = __pyx_v_count;

#line 2668 "dsproc3/core.pyx"
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {

#line 2668 "dsproc3/core.pyx"
    __pyx_v_i = __pyx_t_3;

    /* "dsproc3/core.pyx":2669
 *     count = dsproc_get_datastream_files(ds_id, &file_list)
 *     for i in range(count):
 *         list.append(file_list[i])             # <<<<<<<<<<<<<<
 *     return list
 * 
 */

#line 2669 "dsproc3/core.pyx"
    __pyx_t_1 = PyBytes_FromString((__pyx_v_file_list[__pyx_v_i])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2669 "dsproc3/core.pyx"
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 2669 "dsproc3/core.pyx"
    __pyx_t_4 = PyList_Append(__pyx_v_list, ((PyObject *)__pyx_t_1)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2669 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

#line 2669 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":2670
 *     for i in range(count):
 *         list.append(file_list[i])
 *     return list             # <<<<<<<<<<<<<<
 * 
 * # KLG: v Ask Brian if we need a binding to this function
 */

#line 2670 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2670 "dsproc3/core.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_list));

#line 2670 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_v_list);

#line 2670 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2670 "dsproc3/core.pyx"


#line 2670 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2670 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2670 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2670 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 2670 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_datastream_files", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2670 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2670 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2670 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_list);

#line 2670 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2670 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2670 "dsproc3/core.pyx"
  return __pyx_r;

#line 2670 "dsproc3/core.pyx"
}

#line 2670 "dsproc3/core.pyx"


#line 2670 "dsproc3/core.pyx"
/* Python wrapper */

#line 2670 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_201rename(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2670 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_200rename[] = "rename(int ds_id, char *file_path, char *file_name, time_t begin_time, time_t end_time)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_201rename = 
#line 2670 "dsproc3/core.pyx"
{__Pyx_NAMESTR("rename"), (PyCFunction)__pyx_pw_7dsproc3_4core_201rename, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_200rename)};

#line 2670 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_201rename(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_ds_id
#line 2670 "dsproc3/core.pyx"
;
  char *__pyx_v_file_path
#line 2670 "dsproc3/core.pyx"
;
  char *__pyx_v_file_name
#line 2670 "dsproc3/core.pyx"
;
  time_t __pyx_v_begin_time
#line 2670 "dsproc3/core.pyx"
;
  time_t __pyx_v_end_time
#line 2670 "dsproc3/core.pyx"
;

#line 2670 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2670 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2670 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("rename (wrapper)", 0);

#line 2670 "dsproc3/core.pyx"
  {

#line 2670 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__ds_id,&__pyx_n_s__file_path,&__pyx_n_s__file_name,&__pyx_n_s__begin_time,&__pyx_n_s__end_time,0};

#line 2670 "dsproc3/core.pyx"
    PyObject* values[5] = {0,0,0,0,0};

#line 2670 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2670 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2670 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2670 "dsproc3/core.pyx"
      switch (pos_args) {
        case  5: 
#line 2670 "dsproc3/core.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 2670 "dsproc3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 2670 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 2670 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2670 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2670 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2670 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2670 "dsproc3/core.pyx"
      }

#line 2670 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2670 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2670 "dsproc3/core.pyx"
        case  0:

#line 2670 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ds_id)) != 0)) kw_args--;
        else 
#line 2670 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2670 "dsproc3/core.pyx"
        case  1:

#line 2670 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__file_path)) != 0)) kw_args--;

#line 2670 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("rename", 1, 5, 5, 1); 
#line 2670 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2678; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2670 "dsproc3/core.pyx"
        }

#line 2670 "dsproc3/core.pyx"
        case  2:

#line 2670 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__file_name)) != 0)) kw_args--;

#line 2670 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("rename", 1, 5, 5, 2); 
#line 2670 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2678; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2670 "dsproc3/core.pyx"
        }

#line 2670 "dsproc3/core.pyx"
        case  3:

#line 2670 "dsproc3/core.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__begin_time)) != 0)) kw_args--;

#line 2670 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("rename", 1, 5, 5, 3); 
#line 2670 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2678; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2670 "dsproc3/core.pyx"
        }

#line 2670 "dsproc3/core.pyx"
        case  4:

#line 2670 "dsproc3/core.pyx"
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__end_time)) != 0)) kw_args--;

#line 2670 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("rename", 1, 5, 5, 4); 
#line 2670 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2678; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2670 "dsproc3/core.pyx"
        }

#line 2670 "dsproc3/core.pyx"
      }

#line 2670 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2670 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rename") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2678; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2670 "dsproc3/core.pyx"
      }

#line 2670 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {

#line 2670 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 2670 "dsproc3/core.pyx"
    } else {

#line 2670 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2670 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2670 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 2670 "dsproc3/core.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 2670 "dsproc3/core.pyx"
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 2670 "dsproc3/core.pyx"
    }

#line 2670 "dsproc3/core.pyx"
    __pyx_v_ds_id = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_ds_id == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2679; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2670 "dsproc3/core.pyx"
    __pyx_v_file_path = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_file_path) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2680; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2670 "dsproc3/core.pyx"
    __pyx_v_file_name = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_file_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2681; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2670 "dsproc3/core.pyx"
    __pyx_v_begin_time = __Pyx_PyInt_from_py_time_t(values[3]); if (unlikely((__pyx_v_begin_time == (time_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2682; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2670 "dsproc3/core.pyx"
    __pyx_v_end_time = __Pyx_PyInt_from_py_time_t(values[4]); if (unlikely((__pyx_v_end_time == (time_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2683; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2670 "dsproc3/core.pyx"
  }

#line 2670 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2670 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rename", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); 
#line 2670 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2678; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2670 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2670 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.rename", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2670 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2670 "dsproc3/core.pyx"
  return NULL;

#line 2670 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 2670 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_200rename(__pyx_self, __pyx_v_ds_id, __pyx_v_file_path, __pyx_v_file_name, __pyx_v_begin_time, __pyx_v_end_time);

#line 2670 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2670 "dsproc3/core.pyx"
  return __pyx_r;

#line 2670 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2678
 * #            int    (*qsort_compare)(void *, void *))
 * 
 * def rename(             # <<<<<<<<<<<<<<
 *         int ds_id,
 *         char *file_path,
 */

#line 2678 "dsproc3/core.pyx"


#line 2678 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_200rename(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id, char *__pyx_v_file_path, char *__pyx_v_file_name, time_t __pyx_v_begin_time, time_t __pyx_v_end_time) {

#line 2678 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2678 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("rename", 0);

  /* "dsproc3/core.pyx":2684
 *         time_t begin_time,
 *         time_t end_time):
 *     return dsproc_rename(ds_id, file_path, file_name, begin_time, end_time)             # <<<<<<<<<<<<<<
 * 
 * #int     dsproc_rename_tv(
 */

#line 2684 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2684 "dsproc3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(dsproc_rename(__pyx_v_ds_id, __pyx_v_file_path, __pyx_v_file_name, __pyx_v_begin_time, __pyx_v_end_time)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2684 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2684 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 2684 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 2684 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2684 "dsproc3/core.pyx"


#line 2684 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2684 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2684 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2684 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 2684 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.rename", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2684 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2684 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2684 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2684 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2684 "dsproc3/core.pyx"
  return __pyx_r;

#line 2684 "dsproc3/core.pyx"
}

#line 2684 "dsproc3/core.pyx"


#line 2684 "dsproc3/core.pyx"
/* Python wrapper */

#line 2684 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_203rename_bad(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2684 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_202rename_bad[] = "rename_bad(int ds_id, char *file_path, char *file_name, time_t file_time)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_203rename_bad = 
#line 2684 "dsproc3/core.pyx"
{__Pyx_NAMESTR("rename_bad"), (PyCFunction)__pyx_pw_7dsproc3_4core_203rename_bad, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_202rename_bad)};

#line 2684 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_203rename_bad(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_ds_id
#line 2684 "dsproc3/core.pyx"
;
  char *__pyx_v_file_path
#line 2684 "dsproc3/core.pyx"
;
  char *__pyx_v_file_name
#line 2684 "dsproc3/core.pyx"
;
  time_t __pyx_v_file_time
#line 2684 "dsproc3/core.pyx"
;

#line 2684 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2684 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2684 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("rename_bad (wrapper)", 0);

#line 2684 "dsproc3/core.pyx"
  {

#line 2684 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__ds_id,&__pyx_n_s__file_path,&__pyx_n_s__file_name,&__pyx_n_s__file_time,0};

#line 2684 "dsproc3/core.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 2684 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2684 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2684 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2684 "dsproc3/core.pyx"
      switch (pos_args) {
        case  4: 
#line 2684 "dsproc3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 2684 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 2684 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2684 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2684 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2684 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2684 "dsproc3/core.pyx"
      }

#line 2684 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2684 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2684 "dsproc3/core.pyx"
        case  0:

#line 2684 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ds_id)) != 0)) kw_args--;
        else 
#line 2684 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2684 "dsproc3/core.pyx"
        case  1:

#line 2684 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__file_path)) != 0)) kw_args--;

#line 2684 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("rename_bad", 1, 4, 4, 1); 
#line 2684 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2693; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2684 "dsproc3/core.pyx"
        }

#line 2684 "dsproc3/core.pyx"
        case  2:

#line 2684 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__file_name)) != 0)) kw_args--;

#line 2684 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("rename_bad", 1, 4, 4, 2); 
#line 2684 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2693; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2684 "dsproc3/core.pyx"
        }

#line 2684 "dsproc3/core.pyx"
        case  3:

#line 2684 "dsproc3/core.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__file_time)) != 0)) kw_args--;

#line 2684 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("rename_bad", 1, 4, 4, 3); 
#line 2684 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2693; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2684 "dsproc3/core.pyx"
        }

#line 2684 "dsproc3/core.pyx"
      }

#line 2684 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2684 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rename_bad") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2693; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2684 "dsproc3/core.pyx"
      }

#line 2684 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {

#line 2684 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 2684 "dsproc3/core.pyx"
    } else {

#line 2684 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2684 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2684 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 2684 "dsproc3/core.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 2684 "dsproc3/core.pyx"
    }

#line 2684 "dsproc3/core.pyx"
    __pyx_v_ds_id = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_ds_id == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2693; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2684 "dsproc3/core.pyx"
    __pyx_v_file_path = PyBytes_AsString(values[1]); if (unlikely((!__pyx_v_file_path) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2693; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2684 "dsproc3/core.pyx"
    __pyx_v_file_name = PyBytes_AsString(values[2]); if (unlikely((!__pyx_v_file_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2693; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2684 "dsproc3/core.pyx"
    __pyx_v_file_time = __Pyx_PyInt_from_py_time_t(values[3]); if (unlikely((__pyx_v_file_time == (time_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2693; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2684 "dsproc3/core.pyx"
  }

#line 2684 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2684 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rename_bad", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 2684 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2693; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2684 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2684 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.rename_bad", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2684 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2684 "dsproc3/core.pyx"
  return NULL;

#line 2684 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 2684 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_202rename_bad(__pyx_self, __pyx_v_ds_id, __pyx_v_file_path, __pyx_v_file_name, __pyx_v_file_time);

#line 2684 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2684 "dsproc3/core.pyx"
  return __pyx_r;

#line 2684 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2693
 * #            timeval_t *end_time)
 * 
 * def rename_bad(int ds_id, char *file_path, char *file_name, time_t file_time):             # <<<<<<<<<<<<<<
 *     return dsproc_rename_bad(ds_id, file_path, file_name, file_time)
 * 
 */

#line 2693 "dsproc3/core.pyx"


#line 2693 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_202rename_bad(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id, char *__pyx_v_file_path, char *__pyx_v_file_name, time_t __pyx_v_file_time) {

#line 2693 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2693 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("rename_bad", 0);

  /* "dsproc3/core.pyx":2694
 * 
 * def rename_bad(int ds_id, char *file_path, char *file_name, time_t file_time):
 *     return dsproc_rename_bad(ds_id, file_path, file_name, file_time)             # <<<<<<<<<<<<<<
 * 
 * def set_rename_preserve_dots(int ds_id, int preserve_dots):
 */

#line 2694 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2694 "dsproc3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(dsproc_rename_bad(__pyx_v_ds_id, __pyx_v_file_path, __pyx_v_file_name, __pyx_v_file_time)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2694 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2694 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 2694 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 2694 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2694 "dsproc3/core.pyx"


#line 2694 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2694 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2694 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2694 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 2694 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.rename_bad", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2694 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2694 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2694 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2694 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2694 "dsproc3/core.pyx"
  return __pyx_r;

#line 2694 "dsproc3/core.pyx"
}

#line 2694 "dsproc3/core.pyx"


#line 2694 "dsproc3/core.pyx"
/* Python wrapper */

#line 2694 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_205set_rename_preserve_dots(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2694 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_204set_rename_preserve_dots[] = "set_rename_preserve_dots(int ds_id, int preserve_dots)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_205set_rename_preserve_dots = 
#line 2694 "dsproc3/core.pyx"
{__Pyx_NAMESTR("set_rename_preserve_dots"), (PyCFunction)__pyx_pw_7dsproc3_4core_205set_rename_preserve_dots, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_204set_rename_preserve_dots)};

#line 2694 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_205set_rename_preserve_dots(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_ds_id
#line 2694 "dsproc3/core.pyx"
;
  int __pyx_v_preserve_dots
#line 2694 "dsproc3/core.pyx"
;

#line 2694 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2694 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2694 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_rename_preserve_dots (wrapper)", 0);

#line 2694 "dsproc3/core.pyx"
  {

#line 2694 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__ds_id,&__pyx_n_s__preserve_dots,0};

#line 2694 "dsproc3/core.pyx"
    PyObject* values[2] = {0,0};

#line 2694 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2694 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2694 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2694 "dsproc3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 2694 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2694 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2694 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2694 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2694 "dsproc3/core.pyx"
      }

#line 2694 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2694 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2694 "dsproc3/core.pyx"
        case  0:

#line 2694 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ds_id)) != 0)) kw_args--;
        else 
#line 2694 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2694 "dsproc3/core.pyx"
        case  1:

#line 2694 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__preserve_dots)) != 0)) kw_args--;

#line 2694 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_rename_preserve_dots", 1, 2, 2, 1); 
#line 2694 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2696; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2694 "dsproc3/core.pyx"
        }

#line 2694 "dsproc3/core.pyx"
      }

#line 2694 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2694 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_rename_preserve_dots") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2696; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2694 "dsproc3/core.pyx"
      }

#line 2694 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 2694 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 2694 "dsproc3/core.pyx"
    } else {

#line 2694 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2694 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2694 "dsproc3/core.pyx"
    }

#line 2694 "dsproc3/core.pyx"
    __pyx_v_ds_id = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_ds_id == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2696; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2694 "dsproc3/core.pyx"
    __pyx_v_preserve_dots = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_preserve_dots == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2696; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2694 "dsproc3/core.pyx"
  }

#line 2694 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2694 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_rename_preserve_dots", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 2694 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2696; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2694 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2694 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_rename_preserve_dots", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2694 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2694 "dsproc3/core.pyx"
  return NULL;

#line 2694 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 2694 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_204set_rename_preserve_dots(__pyx_self, __pyx_v_ds_id, __pyx_v_preserve_dots);

#line 2694 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2694 "dsproc3/core.pyx"
  return __pyx_r;

#line 2694 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2696
 *     return dsproc_rename_bad(ds_id, file_path, file_name, file_time)
 * 
 * def set_rename_preserve_dots(int ds_id, int preserve_dots):             # <<<<<<<<<<<<<<
 *     dsproc_set_rename_preserve_dots(ds_id, preserve_dots)
 * 
 */

#line 2696 "dsproc3/core.pyx"


#line 2696 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_204set_rename_preserve_dots(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id, int __pyx_v_preserve_dots) {

#line 2696 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations

#line 2696 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_rename_preserve_dots", 0);

  /* "dsproc3/core.pyx":2697
 * 
 * def set_rename_preserve_dots(int ds_id, int preserve_dots):
 *     dsproc_set_rename_preserve_dots(ds_id, preserve_dots)             # <<<<<<<<<<<<<<
 * 
 * ##############################################################################
 */

#line 2697 "dsproc3/core.pyx"
  dsproc_set_rename_preserve_dots(__pyx_v_ds_id, __pyx_v_preserve_dots);

#line 2697 "dsproc3/core.pyx"


#line 2697 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2697 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2697 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2697 "dsproc3/core.pyx"
  return __pyx_r;

#line 2697 "dsproc3/core.pyx"
}

#line 2697 "dsproc3/core.pyx"


#line 2697 "dsproc3/core.pyx"
/* Python wrapper */

#line 2697 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_207initialize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2697 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_206initialize[] = "initialize(argv, proc_model, proc_version, proc_names)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_207initialize = 
#line 2697 "dsproc3/core.pyx"
{__Pyx_NAMESTR("initialize"), (PyCFunction)__pyx_pw_7dsproc3_4core_207initialize, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_206initialize)};

#line 2697 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_207initialize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_argv = 0
#line 2697 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_proc_model = 0
#line 2697 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_proc_version = 0
#line 2697 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_proc_names = 0
#line 2697 "dsproc3/core.pyx"
;

#line 2697 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2697 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2697 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);

#line 2697 "dsproc3/core.pyx"
  {

#line 2697 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__argv,&__pyx_n_s__proc_model,&__pyx_n_s__proc_version,&__pyx_n_s__proc_names,0};

#line 2697 "dsproc3/core.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 2697 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2697 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2697 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2697 "dsproc3/core.pyx"
      switch (pos_args) {
        case  4: 
#line 2697 "dsproc3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 2697 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 2697 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2697 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2697 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2697 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2697 "dsproc3/core.pyx"
      }

#line 2697 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2697 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2697 "dsproc3/core.pyx"
        case  0:

#line 2697 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__argv)) != 0)) kw_args--;
        else 
#line 2697 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2697 "dsproc3/core.pyx"
        case  1:

#line 2697 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__proc_model)) != 0)) kw_args--;

#line 2697 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 4, 4, 1); 
#line 2697 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2703; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2697 "dsproc3/core.pyx"
        }

#line 2697 "dsproc3/core.pyx"
        case  2:

#line 2697 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__proc_version)) != 0)) kw_args--;

#line 2697 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 4, 4, 2); 
#line 2697 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2703; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2697 "dsproc3/core.pyx"
        }

#line 2697 "dsproc3/core.pyx"
        case  3:

#line 2697 "dsproc3/core.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__proc_names)) != 0)) kw_args--;

#line 2697 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 4, 4, 3); 
#line 2697 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2703; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2697 "dsproc3/core.pyx"
        }

#line 2697 "dsproc3/core.pyx"
      }

#line 2697 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2697 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2703; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2697 "dsproc3/core.pyx"
      }

#line 2697 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {

#line 2697 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 2697 "dsproc3/core.pyx"
    } else {

#line 2697 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2697 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2697 "dsproc3/core.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 2697 "dsproc3/core.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 2697 "dsproc3/core.pyx"
    }

#line 2697 "dsproc3/core.pyx"
    __pyx_v_argv = values[0];

#line 2697 "dsproc3/core.pyx"
    __pyx_v_proc_model = values[1];

#line 2697 "dsproc3/core.pyx"
    __pyx_v_proc_version = values[2];

#line 2697 "dsproc3/core.pyx"
    __pyx_v_proc_names = values[3];

#line 2697 "dsproc3/core.pyx"
  }

#line 2697 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2697 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 2697 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2703; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2697 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2697 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2697 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2697 "dsproc3/core.pyx"
  return NULL;

#line 2697 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 2697 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_206initialize(__pyx_self, __pyx_v_argv, __pyx_v_proc_model, __pyx_v_proc_version, __pyx_v_proc_names);

#line 2697 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2697 "dsproc3/core.pyx"
  return __pyx_r;

#line 2697 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2703
 * ##############################################################################
 * 
 * def initialize(argv, proc_model, proc_version, proc_names):             # <<<<<<<<<<<<<<
 *     cdef char **c_argv = NULL
 *     cdef char **c_proc_names = NULL
 */

#line 2703 "dsproc3/core.pyx"


#line 2703 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_206initialize(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_argv, PyObject *__pyx_v_proc_model, PyObject *__pyx_v_proc_version, PyObject *__pyx_v_proc_names) {
  char **__pyx_v_c_argv
#line 2703 "dsproc3/core.pyx"
;
  char **__pyx_v_c_proc_names
#line 2703 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_idx = NULL
#line 2703 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_s = NULL
#line 2703 "dsproc3/core.pyx"
;

#line 2703 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  Py_ssize_t __pyx_t_8;
  ProcModel __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2703 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "dsproc3/core.pyx":2704
 * 
 * def initialize(argv, proc_model, proc_version, proc_names):
 *     cdef char **c_argv = NULL             # <<<<<<<<<<<<<<
 *     cdef char **c_proc_names = NULL
 *     if argv:
 */

#line 2704 "dsproc3/core.pyx"
  __pyx_v_c_argv = NULL;

  /* "dsproc3/core.pyx":2705
 * def initialize(argv, proc_model, proc_version, proc_names):
 *     cdef char **c_argv = NULL
 *     cdef char **c_proc_names = NULL             # <<<<<<<<<<<<<<
 *     if argv:
 *         c_argv = <char**>malloc(sizeof(char*) * len(argv))
 */

#line 2705 "dsproc3/core.pyx"
  __pyx_v_c_proc_names = NULL;

  /* "dsproc3/core.pyx":2706
 *     cdef char **c_argv = NULL
 *     cdef char **c_proc_names = NULL
 *     if argv:             # <<<<<<<<<<<<<<
 *         c_argv = <char**>malloc(sizeof(char*) * len(argv))
 *         if c_argv is NULL:
 */

#line 2706 "dsproc3/core.pyx"
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_argv); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2706 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":2707
 *     cdef char **c_proc_names = NULL
 *     if argv:
 *         c_argv = <char**>malloc(sizeof(char*) * len(argv))             # <<<<<<<<<<<<<<
 *         if c_argv is NULL:
 *             raise MemoryError()
 */

#line 2707 "dsproc3/core.pyx"
    __pyx_t_2 = PyObject_Length(__pyx_v_argv); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2707 "dsproc3/core.pyx"
    __pyx_v_c_argv = ((char **)malloc(((sizeof(char *)) * __pyx_t_2)));

    /* "dsproc3/core.pyx":2708
 *     if argv:
 *         c_argv = <char**>malloc(sizeof(char*) * len(argv))
 *         if c_argv is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         for idx,s in enumerate(argv):
 */

#line 2708 "dsproc3/core.pyx"
    __pyx_t_1 = (__pyx_v_c_argv == NULL);

#line 2708 "dsproc3/core.pyx"
    if (__pyx_t_1) {

      /* "dsproc3/core.pyx":2709
 *         c_argv = <char**>malloc(sizeof(char*) * len(argv))
 *         if c_argv is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         for idx,s in enumerate(argv):
 *             c_argv[idx] = s
 */

#line 2709 "dsproc3/core.pyx"
      PyErr_NoMemory(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2709 "dsproc3/core.pyx"
      goto __pyx_L4;

#line 2709 "dsproc3/core.pyx"
    }

#line 2709 "dsproc3/core.pyx"
    __pyx_L4:;

    /* "dsproc3/core.pyx":2710
 *         if c_argv is NULL:
 *             raise MemoryError()
 *         for idx,s in enumerate(argv):             # <<<<<<<<<<<<<<
 *             c_argv[idx] = s
 *     if proc_names:
 */

#line 2710 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_int_0);

#line 2710 "dsproc3/core.pyx"
    __pyx_t_3 = __pyx_int_0;

#line 2710 "dsproc3/core.pyx"
    if (PyList_CheckExact(__pyx_v_argv) || PyTuple_CheckExact(__pyx_v_argv)) {

#line 2710 "dsproc3/core.pyx"
      __pyx_t_4 = __pyx_v_argv; __Pyx_INCREF(__pyx_t_4); __pyx_t_2 = 0;

#line 2710 "dsproc3/core.pyx"
      __pyx_t_5 = NULL;

#line 2710 "dsproc3/core.pyx"
    } else {
      __pyx_t_2 = -1; 
#line 2710 "dsproc3/core.pyx"
__pyx_t_4 = PyObject_GetIter(__pyx_v_argv); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2710 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 2710 "dsproc3/core.pyx"
      __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;

#line 2710 "dsproc3/core.pyx"
    }

#line 2710 "dsproc3/core.pyx"
    for (;;) {

#line 2710 "dsproc3/core.pyx"
      if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_4)) {

#line 2710 "dsproc3/core.pyx"
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_4)) break;

#line 2710 "dsproc3/core.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 2710 "dsproc3/core.pyx"
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_6); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2710 "dsproc3/core.pyx"
        #else

#line 2710 "dsproc3/core.pyx"
        __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2710 "dsproc3/core.pyx"
        #endif
      } else 
#line 2710 "dsproc3/core.pyx"
if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_4)) {

#line 2710 "dsproc3/core.pyx"
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_4)) break;

#line 2710 "dsproc3/core.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 2710 "dsproc3/core.pyx"
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_6); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2710 "dsproc3/core.pyx"
        #else

#line 2710 "dsproc3/core.pyx"
        __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2710 "dsproc3/core.pyx"
        #endif
      } else 
#line 2710 "dsproc3/core.pyx"
{

#line 2710 "dsproc3/core.pyx"
        __pyx_t_6 = __pyx_t_5(__pyx_t_4);

#line 2710 "dsproc3/core.pyx"
        if (unlikely(!__pyx_t_6)) {

#line 2710 "dsproc3/core.pyx"
          if (PyErr_Occurred()) {

#line 2710 "dsproc3/core.pyx"
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();

#line 2710 "dsproc3/core.pyx"
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2710 "dsproc3/core.pyx"
          }

#line 2710 "dsproc3/core.pyx"
          break;

#line 2710 "dsproc3/core.pyx"
        }

#line 2710 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 2710 "dsproc3/core.pyx"
      }

#line 2710 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_v_s);

#line 2710 "dsproc3/core.pyx"
      __pyx_v_s = __pyx_t_6;

#line 2710 "dsproc3/core.pyx"
      __pyx_t_6 = 0;

#line 2710 "dsproc3/core.pyx"
      __Pyx_INCREF(__pyx_t_3);

#line 2710 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_v_idx);

#line 2710 "dsproc3/core.pyx"
      __pyx_v_idx = __pyx_t_3;

#line 2710 "dsproc3/core.pyx"
      __pyx_t_6 = PyNumber_Add(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2710 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 2710 "dsproc3/core.pyx"
      __Pyx_DECREF(__pyx_t_3);

#line 2710 "dsproc3/core.pyx"
      __pyx_t_3 = __pyx_t_6;

#line 2710 "dsproc3/core.pyx"
      __pyx_t_6 = 0;

      /* "dsproc3/core.pyx":2711
 *             raise MemoryError()
 *         for idx,s in enumerate(argv):
 *             c_argv[idx] = s             # <<<<<<<<<<<<<<
 *     if proc_names:
 *         c_proc_names = <char**>malloc(sizeof(char*) * len(proc_names))
 */

#line 2711 "dsproc3/core.pyx"
      __pyx_t_7 = PyBytes_AsString(__pyx_v_s); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2711; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2711 "dsproc3/core.pyx"
      __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2711; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2711 "dsproc3/core.pyx"
      (__pyx_v_c_argv[__pyx_t_8]) = __pyx_t_7;

#line 2711 "dsproc3/core.pyx"
    }

#line 2711 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 2711 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 2711 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 2711 "dsproc3/core.pyx"
  }

#line 2711 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":2712
 *         for idx,s in enumerate(argv):
 *             c_argv[idx] = s
 *     if proc_names:             # <<<<<<<<<<<<<<
 *         c_proc_names = <char**>malloc(sizeof(char*) * len(proc_names))
 *         if c_proc_names is NULL:
 */

#line 2712 "dsproc3/core.pyx"
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_proc_names); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2712 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":2713
 *             c_argv[idx] = s
 *     if proc_names:
 *         c_proc_names = <char**>malloc(sizeof(char*) * len(proc_names))             # <<<<<<<<<<<<<<
 *         if c_proc_names is NULL:
 *             raise MemoryError()
 */

#line 2713 "dsproc3/core.pyx"
    __pyx_t_2 = PyObject_Length(__pyx_v_proc_names); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2713 "dsproc3/core.pyx"
    __pyx_v_c_proc_names = ((char **)malloc(((sizeof(char *)) * __pyx_t_2)));

    /* "dsproc3/core.pyx":2714
 *     if proc_names:
 *         c_proc_names = <char**>malloc(sizeof(char*) * len(proc_names))
 *         if c_proc_names is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         for idx,s in enumerate(proc_names):
 */

#line 2714 "dsproc3/core.pyx"
    __pyx_t_1 = (__pyx_v_c_proc_names == NULL);

#line 2714 "dsproc3/core.pyx"
    if (__pyx_t_1) {

      /* "dsproc3/core.pyx":2715
 *         c_proc_names = <char**>malloc(sizeof(char*) * len(proc_names))
 *         if c_proc_names is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         for idx,s in enumerate(proc_names):
 *             c_proc_names[idx] = s
 */

#line 2715 "dsproc3/core.pyx"
      PyErr_NoMemory(); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2715 "dsproc3/core.pyx"
      goto __pyx_L8;

#line 2715 "dsproc3/core.pyx"
    }

#line 2715 "dsproc3/core.pyx"
    __pyx_L8:;

    /* "dsproc3/core.pyx":2716
 *         if c_proc_names is NULL:
 *             raise MemoryError()
 *         for idx,s in enumerate(proc_names):             # <<<<<<<<<<<<<<
 *             c_proc_names[idx] = s
 *     try:
 */

#line 2716 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_int_0);

#line 2716 "dsproc3/core.pyx"
    __pyx_t_3 = __pyx_int_0;

#line 2716 "dsproc3/core.pyx"
    if (PyList_CheckExact(__pyx_v_proc_names) || PyTuple_CheckExact(__pyx_v_proc_names)) {

#line 2716 "dsproc3/core.pyx"
      __pyx_t_4 = __pyx_v_proc_names; __Pyx_INCREF(__pyx_t_4); __pyx_t_2 = 0;

#line 2716 "dsproc3/core.pyx"
      __pyx_t_5 = NULL;

#line 2716 "dsproc3/core.pyx"
    } else {
      __pyx_t_2 = -1; 
#line 2716 "dsproc3/core.pyx"
__pyx_t_4 = PyObject_GetIter(__pyx_v_proc_names); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2716 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 2716 "dsproc3/core.pyx"
      __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;

#line 2716 "dsproc3/core.pyx"
    }

#line 2716 "dsproc3/core.pyx"
    for (;;) {

#line 2716 "dsproc3/core.pyx"
      if (!__pyx_t_5 && PyList_CheckExact(__pyx_t_4)) {

#line 2716 "dsproc3/core.pyx"
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_4)) break;

#line 2716 "dsproc3/core.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 2716 "dsproc3/core.pyx"
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_6); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2716 "dsproc3/core.pyx"
        #else

#line 2716 "dsproc3/core.pyx"
        __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2716 "dsproc3/core.pyx"
        #endif
      } else 
#line 2716 "dsproc3/core.pyx"
if (!__pyx_t_5 && PyTuple_CheckExact(__pyx_t_4)) {

#line 2716 "dsproc3/core.pyx"
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_4)) break;

#line 2716 "dsproc3/core.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 2716 "dsproc3/core.pyx"
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_6); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2716 "dsproc3/core.pyx"
        #else

#line 2716 "dsproc3/core.pyx"
        __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2716 "dsproc3/core.pyx"
        #endif
      } else 
#line 2716 "dsproc3/core.pyx"
{

#line 2716 "dsproc3/core.pyx"
        __pyx_t_6 = __pyx_t_5(__pyx_t_4);

#line 2716 "dsproc3/core.pyx"
        if (unlikely(!__pyx_t_6)) {

#line 2716 "dsproc3/core.pyx"
          if (PyErr_Occurred()) {

#line 2716 "dsproc3/core.pyx"
            if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) PyErr_Clear();

#line 2716 "dsproc3/core.pyx"
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2716 "dsproc3/core.pyx"
          }

#line 2716 "dsproc3/core.pyx"
          break;

#line 2716 "dsproc3/core.pyx"
        }

#line 2716 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 2716 "dsproc3/core.pyx"
      }

#line 2716 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_v_s);

#line 2716 "dsproc3/core.pyx"
      __pyx_v_s = __pyx_t_6;

#line 2716 "dsproc3/core.pyx"
      __pyx_t_6 = 0;

#line 2716 "dsproc3/core.pyx"
      __Pyx_INCREF(__pyx_t_3);

#line 2716 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_v_idx);

#line 2716 "dsproc3/core.pyx"
      __pyx_v_idx = __pyx_t_3;

#line 2716 "dsproc3/core.pyx"
      __pyx_t_6 = PyNumber_Add(__pyx_t_3, __pyx_int_1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2716 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 2716 "dsproc3/core.pyx"
      __Pyx_DECREF(__pyx_t_3);

#line 2716 "dsproc3/core.pyx"
      __pyx_t_3 = __pyx_t_6;

#line 2716 "dsproc3/core.pyx"
      __pyx_t_6 = 0;

      /* "dsproc3/core.pyx":2717
 *             raise MemoryError()
 *         for idx,s in enumerate(proc_names):
 *             c_proc_names[idx] = s             # <<<<<<<<<<<<<<
 *     try:
 *         dsproc_initialize(len(argv), c_argv, proc_model, proc_version,
 */

#line 2717 "dsproc3/core.pyx"
      __pyx_t_7 = PyBytes_AsString(__pyx_v_s); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2717 "dsproc3/core.pyx"
      __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2717 "dsproc3/core.pyx"
      (__pyx_v_c_proc_names[__pyx_t_8]) = __pyx_t_7;

#line 2717 "dsproc3/core.pyx"
    }

#line 2717 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 2717 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 2717 "dsproc3/core.pyx"
    goto __pyx_L7;

#line 2717 "dsproc3/core.pyx"
  }

#line 2717 "dsproc3/core.pyx"
  __pyx_L7:;

  /* "dsproc3/core.pyx":2718
 *         for idx,s in enumerate(proc_names):
 *             c_proc_names[idx] = s
 *     try:             # <<<<<<<<<<<<<<
 *         dsproc_initialize(len(argv), c_argv, proc_model, proc_version,
 *                 len(proc_names), c_proc_names)
 */

#line 2718 "dsproc3/core.pyx"
  /*try:*/ {

    /* "dsproc3/core.pyx":2719
 *             c_proc_names[idx] = s
 *     try:
 *         dsproc_initialize(len(argv), c_argv, proc_model, proc_version,             # <<<<<<<<<<<<<<
 *                 len(proc_names), c_proc_names)
 *     finally:
 */

#line 2719 "dsproc3/core.pyx"
    __pyx_t_2 = PyObject_Length(__pyx_v_argv); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2719; __pyx_clineno = __LINE__; goto __pyx_L12;}

#line 2719 "dsproc3/core.pyx"
    __pyx_t_9 = ((ProcModel)PyInt_AsLong(__pyx_v_proc_model)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2719; __pyx_clineno = __LINE__; goto __pyx_L12;}

#line 2719 "dsproc3/core.pyx"
    __pyx_t_7 = PyBytes_AsString(__pyx_v_proc_version); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2719; __pyx_clineno = __LINE__; goto __pyx_L12;}

    /* "dsproc3/core.pyx":2720
 *     try:
 *         dsproc_initialize(len(argv), c_argv, proc_model, proc_version,
 *                 len(proc_names), c_proc_names)             # <<<<<<<<<<<<<<
 *     finally:
 *         free(c_argv)
 */

#line 2720 "dsproc3/core.pyx"
    __pyx_t_8 = PyObject_Length(__pyx_v_proc_names); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2720; __pyx_clineno = __LINE__; goto __pyx_L12;}

#line 2720 "dsproc3/core.pyx"
    dsproc_initialize(__pyx_t_2, __pyx_v_c_argv, __pyx_t_9, __pyx_t_7, __pyx_t_8, __pyx_v_c_proc_names);

#line 2720 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":2722
 *                 len(proc_names), c_proc_names)
 *     finally:
 *         free(c_argv)             # <<<<<<<<<<<<<<
 *         free(c_proc_names)
 * 
 */

#line 2722 "dsproc3/core.pyx"
  /*finally:*/ {

#line 2722 "dsproc3/core.pyx"
    int __pyx_why;

#line 2722 "dsproc3/core.pyx"
    PyObject *__pyx_exc_type, *__pyx_exc_value, *__pyx_exc_tb;

#line 2722 "dsproc3/core.pyx"
    int __pyx_exc_lineno;

#line 2722 "dsproc3/core.pyx"
    __pyx_exc_type = 0; __pyx_exc_value = 0; __pyx_exc_tb = 0; __pyx_exc_lineno = 0;

#line 2722 "dsproc3/core.pyx"
    __pyx_why = 0; goto __pyx_L13;

#line 2722 "dsproc3/core.pyx"
    __pyx_L12: {

#line 2722 "dsproc3/core.pyx"
      __pyx_why = 4;

#line 2722 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 2722 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 2722 "dsproc3/core.pyx"
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 2722 "dsproc3/core.pyx"
      __Pyx_ErrFetch(&__pyx_exc_type, &__pyx_exc_value, &__pyx_exc_tb);

#line 2722 "dsproc3/core.pyx"
      __pyx_exc_lineno = __pyx_lineno;

#line 2722 "dsproc3/core.pyx"
      goto __pyx_L13;

#line 2722 "dsproc3/core.pyx"
    }

#line 2722 "dsproc3/core.pyx"
    __pyx_L13:;

#line 2722 "dsproc3/core.pyx"
    free(__pyx_v_c_argv);

    /* "dsproc3/core.pyx":2723
 *     finally:
 *         free(c_argv)
 *         free(c_proc_names)             # <<<<<<<<<<<<<<
 * 
 * #int dsproc_start_processing_loop(
 */

#line 2723 "dsproc3/core.pyx"
    free(__pyx_v_c_proc_names);

#line 2723 "dsproc3/core.pyx"
    switch (__pyx_why) {

#line 2723 "dsproc3/core.pyx"
      case 4: {

#line 2723 "dsproc3/core.pyx"
        __Pyx_ErrRestore(__pyx_exc_type, __pyx_exc_value, __pyx_exc_tb);

#line 2723 "dsproc3/core.pyx"
        __pyx_lineno = __pyx_exc_lineno;

#line 2723 "dsproc3/core.pyx"
        __pyx_exc_type = 0;

#line 2723 "dsproc3/core.pyx"
        __pyx_exc_value = 0;

#line 2723 "dsproc3/core.pyx"
        __pyx_exc_tb = 0;

#line 2723 "dsproc3/core.pyx"
        goto __pyx_L1_error;

#line 2723 "dsproc3/core.pyx"
      }

#line 2723 "dsproc3/core.pyx"
    }

#line 2723 "dsproc3/core.pyx"
  }

#line 2723 "dsproc3/core.pyx"


#line 2723 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2723 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2723 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2723 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 2723 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 2723 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 2723 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2723 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2723 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2723 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_idx);

#line 2723 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_s);

#line 2723 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2723 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2723 "dsproc3/core.pyx"
  return __pyx_r;

#line 2723 "dsproc3/core.pyx"
}

#line 2723 "dsproc3/core.pyx"


#line 2723 "dsproc3/core.pyx"
/* Python wrapper */

#line 2723 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_209finish(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 2723 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_208finish[] = "finish()";
static PyMethodDef __pyx_mdef_7dsproc3_4core_209finish = 
#line 2723 "dsproc3/core.pyx"
{__Pyx_NAMESTR("finish"), (PyCFunction)__pyx_pw_7dsproc3_4core_209finish, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_208finish)};

#line 2723 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_209finish(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {

#line 2723 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2723 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2723 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("finish (wrapper)", 0);
  __pyx_r = 
#line 2723 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_208finish(__pyx_self);

#line 2723 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2723 "dsproc3/core.pyx"
  return __pyx_r;

#line 2723 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2743
 * #int dsproc_store_output_datasets()
 * #
 * def finish():             # <<<<<<<<<<<<<<
 *     return dsproc_finish()
 * #
 */

#line 2743 "dsproc3/core.pyx"


#line 2743 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_208finish(CYTHON_UNUSED PyObject *__pyx_self) {

#line 2743 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2743 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("finish", 0);

  /* "dsproc3/core.pyx":2744
 * #
 * def finish():
 *     return dsproc_finish()             # <<<<<<<<<<<<<<
 * #
 * #void dsproc_debug(
 */

#line 2744 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2744 "dsproc3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(dsproc_finish()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2744 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2744 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 2744 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 2744 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2744 "dsproc3/core.pyx"


#line 2744 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2744 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2744 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2744 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 2744 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.finish", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2744 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2744 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2744 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2744 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2744 "dsproc3/core.pyx"
  return __pyx_r;

#line 2744 "dsproc3/core.pyx"
}

#line 2744 "dsproc3/core.pyx"


#line 2744 "dsproc3/core.pyx"
/* Python wrapper */

#line 2744 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_211get_status(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 2744 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_210get_status[] = "get_status()";
static PyMethodDef __pyx_mdef_7dsproc3_4core_211get_status = 
#line 2744 "dsproc3/core.pyx"
{__Pyx_NAMESTR("get_status"), (PyCFunction)__pyx_pw_7dsproc3_4core_211get_status, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_210get_status)};

#line 2744 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_211get_status(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {

#line 2744 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2744 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2744 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_status (wrapper)", 0);
  __pyx_r = 
#line 2744 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_210get_status(__pyx_self);

#line 2744 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2744 "dsproc3/core.pyx"
  return __pyx_r;

#line 2744 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2785
 * 
 * 
 * def get_status():             # <<<<<<<<<<<<<<
 *     return dsproc_get_status()
 * 
 */

#line 2785 "dsproc3/core.pyx"


#line 2785 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_210get_status(CYTHON_UNUSED PyObject *__pyx_self) {

#line 2785 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2785 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("get_status", 0);

  /* "dsproc3/core.pyx":2786
 * 
 * def get_status():
 *     return dsproc_get_status()             # <<<<<<<<<<<<<<
 * 
 * #char *dsproc_get_type()
 */

#line 2786 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2786 "dsproc3/core.pyx"
  __pyx_t_1 = PyBytes_FromString(dsproc_get_status()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2786 "dsproc3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 2786 "dsproc3/core.pyx"
  __pyx_r = ((PyObject *)__pyx_t_1);

#line 2786 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 2786 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2786 "dsproc3/core.pyx"


#line 2786 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2786 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2786 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2786 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 2786 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.get_status", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2786 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2786 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2786 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2786 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2786 "dsproc3/core.pyx"
  return __pyx_r;

#line 2786 "dsproc3/core.pyx"
}

#line 2786 "dsproc3/core.pyx"


#line 2786 "dsproc3/core.pyx"
/* Python wrapper */

#line 2786 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_213set_status(PyObject *__pyx_self, PyObject *__pyx_arg_status); /*proto*/

#line 2786 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_212set_status[] = "set_status(char *status)\nSet the process status";
static PyMethodDef __pyx_mdef_7dsproc3_4core_213set_status = 
#line 2786 "dsproc3/core.pyx"
{__Pyx_NAMESTR("set_status"), (PyCFunction)__pyx_pw_7dsproc3_4core_213set_status, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_212set_status)};

#line 2786 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_213set_status(PyObject *__pyx_self, PyObject *__pyx_arg_status) {
  char *__pyx_v_status
#line 2786 "dsproc3/core.pyx"
;

#line 2786 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2786 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2786 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_status (wrapper)", 0);

#line 2786 "dsproc3/core.pyx"
  assert(__pyx_arg_status); {

#line 2786 "dsproc3/core.pyx"
    __pyx_v_status = PyBytes_AsString(__pyx_arg_status); if (unlikely((!__pyx_v_status) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2798; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2786 "dsproc3/core.pyx"
  }

#line 2786 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2786 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2786 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_status", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2786 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2786 "dsproc3/core.pyx"
  return NULL;

#line 2786 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 2786 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_212set_status(__pyx_self, ((char *)__pyx_v_status));

#line 2786 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2786 "dsproc3/core.pyx"
  return __pyx_r;

#line 2786 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2798
 * #time_t      dsproc_get_processing_interval(time_t *begin, time_t *end)
 * 
 * def set_status(char *status):             # <<<<<<<<<<<<<<
 *     """Set the process status"""
 *     dsproc_set_status(status)
 */

#line 2798 "dsproc3/core.pyx"


#line 2798 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_212set_status(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_status) {

#line 2798 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations

#line 2798 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_status", 0);

  /* "dsproc3/core.pyx":2800
 * def set_status(char *status):
 *     """Set the process status"""
 *     dsproc_set_status(status)             # <<<<<<<<<<<<<<
 * 
 * #int     dsproc_init_datastream(
 */

#line 2800 "dsproc3/core.pyx"
  dsproc_set_status(__pyx_v_status);

#line 2800 "dsproc3/core.pyx"


#line 2800 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2800 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2800 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2800 "dsproc3/core.pyx"
  return __pyx_r;

#line 2800 "dsproc3/core.pyx"
}

#line 2800 "dsproc3/core.pyx"


#line 2800 "dsproc3/core.pyx"
/* Python wrapper */

<<<<<<< .mine
#line 2800 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_215set_datastream_flags(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
=======
#line 2800 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_215create_output_dataset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
>>>>>>> .r50302

<<<<<<< .mine
#line 2800 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_214set_datastream_flags[] = "set_datastream_flags(int ds_id, int flags)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_215set_datastream_flags = 
#line 2800 "dsproc3/core.pyx"
{__Pyx_NAMESTR("set_datastream_flags"), (PyCFunction)__pyx_pw_7dsproc3_4core_215set_datastream_flags, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_214set_datastream_flags)};
=======
#line 2800 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_214create_output_dataset[] = "create_output_dataset(int ds_id, time_t data_time, int set_location)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_215create_output_dataset = 
#line 2800 "dsproc3/core.pyx"
{__Pyx_NAMESTR("create_output_dataset"), (PyCFunction)__pyx_pw_7dsproc3_4core_215create_output_dataset, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_214create_output_dataset)};
>>>>>>> .r50302

<<<<<<< .mine
#line 2800 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_215set_datastream_flags(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
=======
#line 2800 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_215create_output_dataset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
>>>>>>> .r50302
  int __pyx_v_ds_id
#line 2800 "dsproc3/core.pyx"
;
  int __pyx_v_flags
#line 2800 "dsproc3/core.pyx"
;

#line 2800 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2800 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2800 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_datastream_flags (wrapper)", 0);

#line 2800 "dsproc3/core.pyx"
  {

#line 2800 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__ds_id,&__pyx_n_s__flags,0};

#line 2800 "dsproc3/core.pyx"
    PyObject* values[2] = {0,0};

#line 2800 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2800 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2800 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2800 "dsproc3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 2800 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2800 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2800 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2800 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2800 "dsproc3/core.pyx"
      }

#line 2800 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2800 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2800 "dsproc3/core.pyx"
        case  0:

#line 2800 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ds_id)) != 0)) kw_args--;
        else 
#line 2800 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2800 "dsproc3/core.pyx"
        case  1:

#line 2800 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__flags)) != 0)) kw_args--;

#line 2800 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("set_datastream_flags", 1, 2, 2, 1); 
#line 2800 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2828; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2800 "dsproc3/core.pyx"
        }

#line 2800 "dsproc3/core.pyx"
      }

#line 2800 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2800 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_datastream_flags") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2828; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2800 "dsproc3/core.pyx"
      }

#line 2800 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 2800 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 2800 "dsproc3/core.pyx"
    } else {

#line 2800 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2800 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2800 "dsproc3/core.pyx"
    }

#line 2800 "dsproc3/core.pyx"
    __pyx_v_ds_id = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_ds_id == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2828; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2800 "dsproc3/core.pyx"
    __pyx_v_flags = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2828; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2800 "dsproc3/core.pyx"
  }

#line 2800 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2800 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_datastream_flags", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 2800 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2828; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2800 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2800 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_datastream_flags", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2800 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2800 "dsproc3/core.pyx"
  return NULL;

#line 2800 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 2800 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_214set_datastream_flags(__pyx_self, __pyx_v_ds_id, __pyx_v_flags);

#line 2800 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2800 "dsproc3/core.pyx"
  return __pyx_r;

#line 2800 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2828
 * #            timeval_t *data_time)
 * #
 * def set_datastream_flags(int ds_id, int flags):             # <<<<<<<<<<<<<<
 *     dsproc_set_datastream_flags(ds_id, flags)
 * 
 */

#line 2828 "dsproc3/core.pyx"


#line 2828 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_214set_datastream_flags(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id, int __pyx_v_flags) {

#line 2828 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations

#line 2828 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_datastream_flags", 0);

  /* "dsproc3/core.pyx":2829
 * #
 * def set_datastream_flags(int ds_id, int flags):
 *     dsproc_set_datastream_flags(ds_id, flags)             # <<<<<<<<<<<<<<
 * 
 * #void    dsproc_set_datastream_format(int ds_id, DSFormat format)
 */

#line 2829 "dsproc3/core.pyx"
  dsproc_set_datastream_flags(__pyx_v_ds_id, __pyx_v_flags);

#line 2829 "dsproc3/core.pyx"


#line 2829 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2829 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2829 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2829 "dsproc3/core.pyx"
  return __pyx_r;

#line 2829 "dsproc3/core.pyx"
}

#line 2829 "dsproc3/core.pyx"


#line 2829 "dsproc3/core.pyx"
/* Python wrapper */

#line 2829 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_217create_output_dataset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2829 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_216create_output_dataset[] = "create_output_dataset(int ds_id, time_t data_time, int set_location)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_217create_output_dataset = 
#line 2829 "dsproc3/core.pyx"
{__Pyx_NAMESTR("create_output_dataset"), (PyCFunction)__pyx_pw_7dsproc3_4core_217create_output_dataset, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_216create_output_dataset)};

#line 2829 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_217create_output_dataset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_ds_id
#line 2829 "dsproc3/core.pyx"
;
  time_t __pyx_v_data_time
<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
;
  int __pyx_v_set_location
<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
;

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
  PyObject *__pyx_r = 0;

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
  __Pyx_RefNannyDeclarations

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
  __Pyx_RefNannySetupContext("create_output_dataset (wrapper)", 0);

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
  {

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__ds_id,&__pyx_n_s__data_time,&__pyx_n_s__set_location,0};

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
    PyObject* values[3] = {0,0,0};

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
    if (unlikely(__pyx_kwds)) {

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
      Py_ssize_t kw_args;

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
      switch (pos_args) {
        case  3: 
<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
        case  0: break;
        default: 
<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
goto __pyx_L5_argtuple_error;

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
      }

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
      kw_args = PyDict_Size(__pyx_kwds);

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
      switch (pos_args) {

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
        case  0:

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ds_id)) != 0)) kw_args--;
        else 
<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
goto __pyx_L5_argtuple_error;

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
        case  1:

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__data_time)) != 0)) kw_args--;

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
        else {
          __Pyx_RaiseArgtupleInvalid("create_output_dataset", 1, 3, 3, 1); 
<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2835; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
=======
#line 2800 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2833; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
>>>>>>> .r50302

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
        }

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
        case  2:

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__set_location)) != 0)) kw_args--;

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
        else {
          __Pyx_RaiseArgtupleInvalid("create_output_dataset", 1, 3, 3, 2); 
<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2835; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
=======
#line 2800 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2833; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
>>>>>>> .r50302

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
        }

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
      }

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
      if (unlikely(kw_args > 0)) {

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "create_output_dataset") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2835; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
=======
#line 2800 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "create_output_dataset") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2833; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
>>>>>>> .r50302

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
      }

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
      goto __pyx_L5_argtuple_error;

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
    } else {

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
    }

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
    __pyx_v_ds_id = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_ds_id == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2835; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
=======
#line 2800 "dsproc3/core.pyx"
    __pyx_v_ds_id = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_ds_id == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2833; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
>>>>>>> .r50302

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
    __pyx_v_data_time = __Pyx_PyInt_from_py_time_t(values[1]); if (unlikely((__pyx_v_data_time == (time_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2835; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
=======
#line 2800 "dsproc3/core.pyx"
    __pyx_v_data_time = __Pyx_PyInt_from_py_time_t(values[1]); if (unlikely((__pyx_v_data_time == (time_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2833; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
>>>>>>> .r50302

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
    __pyx_v_set_location = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_set_location == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2835; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
=======
#line 2800 "dsproc3/core.pyx"
    __pyx_v_set_location = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_set_location == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2833; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
>>>>>>> .r50302

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
  }

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
  goto __pyx_L4_argument_unpacking_done;

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create_output_dataset", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2835; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
=======
#line 2800 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2833; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
>>>>>>> .r50302

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
  __pyx_L3_error:;

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
  __Pyx_AddTraceback("dsproc3.core.create_output_dataset", __pyx_clineno, __pyx_lineno, __pyx_filename);

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
  __Pyx_RefNannyFinishContext();

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
  return NULL;

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_216create_output_dataset(__pyx_self, __pyx_v_ds_id, __pyx_v_data_time, __pyx_v_set_location);
=======
#line 2800 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_214create_output_dataset(__pyx_self, __pyx_v_ds_id, __pyx_v_data_time, __pyx_v_set_location);
>>>>>>> .r50302

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
  __Pyx_RefNannyFinishContext();

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
  return __pyx_r;

<<<<<<< .mine
#line 2829 "dsproc3/core.pyx"
=======
#line 2800 "dsproc3/core.pyx"
>>>>>>> .r50302
}

/* "dsproc3/core.pyx":2833
 * #
 * #void    dsproc_unset_datastream_flags(int ds_id, int flags)
 * def create_output_dataset(int ds_id, time_t data_time, int set_location ):             # <<<<<<<<<<<<<<
 * 
 *     cdef cds3.core.Group group
 */

#line 2833 "dsproc3/core.pyx"


#line 2833 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_216create_output_dataset(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id, time_t __pyx_v_data_time, int __pyx_v_set_location) {
  struct __pyx_obj_4cds3_4core_Group *__pyx_v_group = 0
#line 2833 "dsproc3/core.pyx"
;
  struct CDSGroup *__pyx_v_cds_group
#line 2833 "dsproc3/core.pyx"
;

#line 2833 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2833 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("create_output_dataset", 0);

  /* "dsproc3/core.pyx":2836
 * 
 *     cdef cds3.core.Group group
 *     cdef CDSGroup *cds_group = NULL             # <<<<<<<<<<<<<<
 *     cds_group = dsproc_create_output_dataset(ds_id, data_time, set_location)
 *     if cds_group == NULL:
 */

#line 2836 "dsproc3/core.pyx"
  __pyx_v_cds_group = NULL;

  /* "dsproc3/core.pyx":2837
 *     cdef cds3.core.Group group
 *     cdef CDSGroup *cds_group = NULL
 *     cds_group = dsproc_create_output_dataset(ds_id, data_time, set_location)             # <<<<<<<<<<<<<<
 *     if cds_group == NULL:
 *         return None
 */

#line 2837 "dsproc3/core.pyx"
  __pyx_v_cds_group = dsproc_create_output_dataset(__pyx_v_ds_id, __pyx_v_data_time, __pyx_v_set_location);

  /* "dsproc3/core.pyx":2838
 *     cdef CDSGroup *cds_group = NULL
 *     cds_group = dsproc_create_output_dataset(ds_id, data_time, set_location)
 *     if cds_group == NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */

#line 2838 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_cds_group == NULL);

#line 2838 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":2839
 *     cds_group = dsproc_create_output_dataset(ds_id, data_time, set_location)
 *     if cds_group == NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         group = cds3.core.Group()
 */

#line 2839 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 2839 "dsproc3/core.pyx"
    __Pyx_INCREF(Py_None);

#line 2839 "dsproc3/core.pyx"
    __pyx_r = Py_None;

#line 2839 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 2839 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 2839 "dsproc3/core.pyx"
  }

#line 2839 "dsproc3/core.pyx"
  /*else*/ {

    /* "dsproc3/core.pyx":2841
 *         return None
 *     else:
 *         group = cds3.core.Group()             # <<<<<<<<<<<<<<
 *         group.set_group(cds_group)
 *         return group
 */

#line 2841 "dsproc3/core.pyx"
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Group)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2841 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 2841 "dsproc3/core.pyx"
    __pyx_v_group = ((struct __pyx_obj_4cds3_4core_Group *)__pyx_t_2);

#line 2841 "dsproc3/core.pyx"
    __pyx_t_2 = 0;

    /* "dsproc3/core.pyx":2842
 *     else:
 *         group = cds3.core.Group()
 *         group.set_group(cds_group)             # <<<<<<<<<<<<<<
 *         return group
 * 
 */

#line 2842 "dsproc3/core.pyx"
    __pyx_t_2 = ((struct __pyx_vtabstruct_4cds3_4core_Group *)__pyx_v_group->__pyx_base.__pyx_vtab)->set_group(__pyx_v_group, __pyx_v_cds_group); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2842 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 2842 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "dsproc3/core.pyx":2843
 *         group = cds3.core.Group()
 *         group.set_group(cds_group)
 *         return group             # <<<<<<<<<<<<<<
 * 
 * #int     dsproc_dataset_pass_through(
 */

#line 2843 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 2843 "dsproc3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_group));

#line 2843 "dsproc3/core.pyx"
    __pyx_r = ((PyObject *)__pyx_v_group);

#line 2843 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 2843 "dsproc3/core.pyx"
  }

#line 2843 "dsproc3/core.pyx"
  __pyx_L3:;

#line 2843 "dsproc3/core.pyx"


#line 2843 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2843 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2843 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2843 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 2843 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.create_output_dataset", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2843 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2843 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2843 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_group);

#line 2843 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2843 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2843 "dsproc3/core.pyx"
  return __pyx_r;

#line 2843 "dsproc3/core.pyx"
}

#line 2843 "dsproc3/core.pyx"


#line 2843 "dsproc3/core.pyx"
/* Python wrapper */

#line 2843 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_219store_dataset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 2843 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_218store_dataset[] = "store_dataset(int ds_id, int newfile)\nStore the output dataset.";
static PyMethodDef __pyx_mdef_7dsproc3_4core_219store_dataset = 
#line 2843 "dsproc3/core.pyx"
{__Pyx_NAMESTR("store_dataset"), (PyCFunction)__pyx_pw_7dsproc3_4core_219store_dataset, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_218store_dataset)};

#line 2843 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_219store_dataset(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_ds_id
#line 2843 "dsproc3/core.pyx"
;
  int __pyx_v_newfile
#line 2843 "dsproc3/core.pyx"
;

#line 2843 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2843 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2843 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("store_dataset (wrapper)", 0);

#line 2843 "dsproc3/core.pyx"
  {

#line 2843 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__ds_id,&__pyx_n_s__newfile,0};

#line 2843 "dsproc3/core.pyx"
    PyObject* values[2] = {0,0};

#line 2843 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 2843 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 2843 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 2843 "dsproc3/core.pyx"
      switch (pos_args) {
        case  2: 
#line 2843 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 2843 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2843 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 2843 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2843 "dsproc3/core.pyx"
      }

#line 2843 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 2843 "dsproc3/core.pyx"
      switch (pos_args) {

#line 2843 "dsproc3/core.pyx"
        case  0:

#line 2843 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__ds_id)) != 0)) kw_args--;
        else 
#line 2843 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 2843 "dsproc3/core.pyx"
        case  1:

#line 2843 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__newfile)) != 0)) kw_args--;

#line 2843 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("store_dataset", 1, 2, 2, 1); 
#line 2843 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2865; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2843 "dsproc3/core.pyx"
        }

#line 2843 "dsproc3/core.pyx"
      }

#line 2843 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 2843 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "store_dataset") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2865; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2843 "dsproc3/core.pyx"
      }

#line 2843 "dsproc3/core.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 2843 "dsproc3/core.pyx"
      goto __pyx_L5_argtuple_error;

#line 2843 "dsproc3/core.pyx"
    } else {

#line 2843 "dsproc3/core.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 2843 "dsproc3/core.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 2843 "dsproc3/core.pyx"
    }

#line 2843 "dsproc3/core.pyx"
    __pyx_v_ds_id = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_ds_id == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2865; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2843 "dsproc3/core.pyx"
    __pyx_v_newfile = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_newfile == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2865; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2843 "dsproc3/core.pyx"
  }

#line 2843 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2843 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("store_dataset", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 2843 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 2865; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2843 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2843 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.store_dataset", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2843 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2843 "dsproc3/core.pyx"
  return NULL;

#line 2843 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 2843 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_218store_dataset(__pyx_self, __pyx_v_ds_id, __pyx_v_newfile);

#line 2843 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2843 "dsproc3/core.pyx"
  return __pyx_r;

#line 2843 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2865
 * #int     dsproc_set_dataset_location(CDSGroup *cds)
 * #
 * def store_dataset(int ds_id, int newfile):             # <<<<<<<<<<<<<<
 *     """Store the output dataset."""
 *     return dsproc_store_dataset(ds_id, newfile)
 */

#line 2865 "dsproc3/core.pyx"


#line 2865 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_218store_dataset(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_ds_id, int __pyx_v_newfile) {

#line 2865 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2865 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("store_dataset", 0);

  /* "dsproc3/core.pyx":2867
 * def store_dataset(int ds_id, int newfile):
 *     """Store the output dataset."""
 *     return dsproc_store_dataset(ds_id, newfile)             # <<<<<<<<<<<<<<
 * 
 * #CDSAtt *dsproc_get_dsdod_att(
 */

#line 2867 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 2867 "dsproc3/core.pyx"
  __pyx_t_1 = PyInt_FromLong(dsproc_store_dataset(__pyx_v_ds_id, __pyx_v_newfile)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2867 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2867 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_1;

#line 2867 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

#line 2867 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2867 "dsproc3/core.pyx"


#line 2867 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2867 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 2867 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 2867 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 2867 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.store_dataset", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2867 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 2867 "dsproc3/core.pyx"
  __pyx_L0:;

#line 2867 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2867 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2867 "dsproc3/core.pyx"
  return __pyx_r;

#line 2867 "dsproc3/core.pyx"
}

#line 2867 "dsproc3/core.pyx"


#line 2867 "dsproc3/core.pyx"
/* Python wrapper */

#line 2867 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_221set_input_source(PyObject *__pyx_self, PyObject *__pyx_arg_status); /*proto*/

#line 2867 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_220set_input_source[] = "set_input_source(char *status)\nSet the input source string to use when new datasets are created.\n       This function will set the string to use for the input_source \n       global attribute value when new datasets are created. This value \n       will only be set in datasets that have the input_source attribute \n       defined.\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_221set_input_source = 
#line 2867 "dsproc3/core.pyx"
{__Pyx_NAMESTR("set_input_source"), (PyCFunction)__pyx_pw_7dsproc3_4core_221set_input_source, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_220set_input_source)};

#line 2867 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_221set_input_source(PyObject *__pyx_self, PyObject *__pyx_arg_status) {
  char *__pyx_v_status
#line 2867 "dsproc3/core.pyx"
;

#line 2867 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2867 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2867 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_input_source (wrapper)", 0);

#line 2867 "dsproc3/core.pyx"
  assert(__pyx_arg_status); {

#line 2867 "dsproc3/core.pyx"
    __pyx_v_status = PyBytes_AsString(__pyx_arg_status); if (unlikely((!__pyx_v_status) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2915; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 2867 "dsproc3/core.pyx"
  }

#line 2867 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 2867 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 2867 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.set_input_source", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 2867 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2867 "dsproc3/core.pyx"
  return NULL;

#line 2867 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 2867 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_220set_input_source(__pyx_self, ((char *)__pyx_v_status));

#line 2867 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2867 "dsproc3/core.pyx"
  return __pyx_r;

#line 2867 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2915
 * #            size_t      dim_length)
 * #
 * def set_input_source(char *status):             # <<<<<<<<<<<<<<
 *     """Set the input source string to use when new datasets are created.
 *        This function will set the string to use for the input_source
 */

#line 2915 "dsproc3/core.pyx"


#line 2915 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_220set_input_source(CYTHON_UNUSED PyObject *__pyx_self, char *__pyx_v_status) {

#line 2915 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations

#line 2915 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("set_input_source", 0);

  /* "dsproc3/core.pyx":2922
 *        defined.
 *     """
 *     dsproc_set_status(status)             # <<<<<<<<<<<<<<
 * 
 * #int     dsproc_set_runtime_metadata(int ds_id, CDSGroup *cds)
 */

#line 2922 "dsproc3/core.pyx"
  dsproc_set_status(__pyx_v_status);

#line 2922 "dsproc3/core.pyx"


#line 2922 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2922 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2922 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2922 "dsproc3/core.pyx"
  return __pyx_r;

#line 2922 "dsproc3/core.pyx"
}

#line 2922 "dsproc3/core.pyx"


#line 2922 "dsproc3/core.pyx"
/* Python wrapper */

#line 2922 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_223db_disconnect(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 2922 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_222db_disconnect[] = "db_disconnect()";
static PyMethodDef __pyx_mdef_7dsproc3_4core_223db_disconnect = 
#line 2922 "dsproc3/core.pyx"
{__Pyx_NAMESTR("db_disconnect"), (PyCFunction)__pyx_pw_7dsproc3_4core_223db_disconnect, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_222db_disconnect)};

#line 2922 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_223db_disconnect(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {

#line 2922 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2922 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2922 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("db_disconnect (wrapper)", 0);
  __pyx_r = 
#line 2922 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_222db_disconnect(__pyx_self);

#line 2922 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2922 "dsproc3/core.pyx"
  return __pyx_r;

#line 2922 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2930
 * #int     dsproc_db_connect()
 * 
 * def db_disconnect():             # <<<<<<<<<<<<<<
 *     dsproc_db_disconnect()
 * 
 */

#line 2930 "dsproc3/core.pyx"


#line 2930 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_222db_disconnect(CYTHON_UNUSED PyObject *__pyx_self) {

#line 2930 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations

#line 2930 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("db_disconnect", 0);

  /* "dsproc3/core.pyx":2931
 * 
 * def db_disconnect():
 *     dsproc_db_disconnect()             # <<<<<<<<<<<<<<
 * 
 * #int     dsproc_get_input_ds_classes(DSClass ***ds_classes)
 */

#line 2931 "dsproc3/core.pyx"
  dsproc_db_disconnect();

#line 2931 "dsproc3/core.pyx"


#line 2931 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 2931 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 2931 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2931 "dsproc3/core.pyx"
  return __pyx_r;

#line 2931 "dsproc3/core.pyx"
}

#line 2931 "dsproc3/core.pyx"


#line 2931 "dsproc3/core.pyx"
/* Python wrapper */

#line 2931 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_225_ingest_main_loop(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/

#line 2931 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_224_ingest_main_loop[] = "_ingest_main_loop()";
static PyMethodDef __pyx_mdef_7dsproc3_4core_225_ingest_main_loop = 
#line 2931 "dsproc3/core.pyx"
{__Pyx_NAMESTR("_ingest_main_loop"), (PyCFunction)__pyx_pw_7dsproc3_4core_225_ingest_main_loop, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_224_ingest_main_loop)};

#line 2931 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_225_ingest_main_loop(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {

#line 2931 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 2931 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 2931 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("_ingest_main_loop (wrapper)", 0);
  __pyx_r = 
#line 2931 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_224_ingest_main_loop(__pyx_self);

#line 2931 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 2931 "dsproc3/core.pyx"
  return __pyx_r;

#line 2931 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":2989
 * #        char *level)
 * 
 * def _ingest_main_loop():             # <<<<<<<<<<<<<<
 *     cdef int       ndsid
 *     cdef int      *dsids
 */

#line 2989 "dsproc3/core.pyx"


#line 2989 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_224_ingest_main_loop(CYTHON_UNUSED PyObject *__pyx_self) {
  int *__pyx_v_dsids
#line 2989 "dsproc3/core.pyx"
;
  int __pyx_v_dsid
#line 2989 "dsproc3/core.pyx"
;
  char *__pyx_v_level
#line 2989 "dsproc3/core.pyx"
;
  int __pyx_v_nfiles
#line 2989 "dsproc3/core.pyx"
;
  char **__pyx_v_files
#line 2989 "dsproc3/core.pyx"
;
  char *__pyx_v_input_dir
#line 2989 "dsproc3/core.pyx"
;
  time_t __pyx_v_loop_start
#line 2989 "dsproc3/core.pyx"
;
  time_t __pyx_v_loop_end
#line 2989 "dsproc3/core.pyx"
;
  time_t __pyx_v_time_remaining
#line 2989 "dsproc3/core.pyx"
;
  int __pyx_v_status
#line 2989 "dsproc3/core.pyx"
;
  int __pyx_v_dsi
#line 2989 "dsproc3/core.pyx"
;
  int __pyx_v_fi
#line 2989 "dsproc3/core.pyx"
;
  int __pyx_v_ndsids
#line 2989 "dsproc3/core.pyx"
;
  long __pyx_v_val
#line 2989 "dsproc3/core.pyx"
;

#line 2989 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  time_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 2989 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("_ingest_main_loop", 0);

  /* "dsproc3/core.pyx":3003
 *     cdef int       dsi
 *     cdef int       fi
 *     ndsids = dsproc_get_input_datastream_ids(&dsids)             # <<<<<<<<<<<<<<
 * 
 *     if ndsids == 0:
 */

#line 3003 "dsproc3/core.pyx"
  __pyx_v_ndsids = dsproc_get_input_datastream_ids((&__pyx_v_dsids));

  /* "dsproc3/core.pyx":3005
 *     ndsids = dsproc_get_input_datastream_ids(&dsids)
 * 
 *     if ndsids == 0:             # <<<<<<<<<<<<<<
 *         error("KLG FILL in with text for dsproc_enoindsc\n","Could not find an input datastream defined in the database\n")
 *         return
 */

#line 3005 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_ndsids == 0);

#line 3005 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":3006
 * 
 *     if ndsids == 0:
 *         error("KLG FILL in with text for dsproc_enoindsc\n","Could not find an input datastream defined in the database\n")             # <<<<<<<<<<<<<<
 *         return
 * 
 */

#line 3006 "dsproc3/core.pyx"
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__error); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3006; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3006 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 3006 "dsproc3/core.pyx"
    __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_k_tuple_63), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3006; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3006 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 3006 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 3006 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "dsproc3/core.pyx":3007
 *     if ndsids == 0:
 *         error("KLG FILL in with text for dsproc_enoindsc\n","Could not find an input datastream defined in the database\n")
 *         return             # <<<<<<<<<<<<<<
 * 
 *     dsid = -1
 */

#line 3007 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 3007 "dsproc3/core.pyx"
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 3007 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 3007 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 3007 "dsproc3/core.pyx"
  }

#line 3007 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":3009
 *         return
 * 
 *     dsid = -1             # <<<<<<<<<<<<<<
 *     for dsi in range(ndsids):
 *         level = dsproc_datastream_class_level(dsids[dsi])
 */

#line 3009 "dsproc3/core.pyx"
  __pyx_v_dsid = -1;

  /* "dsproc3/core.pyx":3010
 * 
 *     dsid = -1
 *     for dsi in range(ndsids):             # <<<<<<<<<<<<<<
 *         level = dsproc_datastream_class_level(dsids[dsi])
 *         if level[0] == '0':
 */

#line 3010 "dsproc3/core.pyx"
  __pyx_t_4 = __pyx_v_ndsids;

#line 3010 "dsproc3/core.pyx"
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {

#line 3010 "dsproc3/core.pyx"
    __pyx_v_dsi = __pyx_t_5;

    /* "dsproc3/core.pyx":3011
 *     dsid = -1
 *     for dsi in range(ndsids):
 *         level = dsproc_datastream_class_level(dsids[dsi])             # <<<<<<<<<<<<<<
 *         if level[0] == '0':
 *             if dsid == -1:
 */

#line 3011 "dsproc3/core.pyx"
    __pyx_v_level = dsproc_datastream_class_level((__pyx_v_dsids[__pyx_v_dsi]));

    /* "dsproc3/core.pyx":3012
 *     for dsi in range(ndsids):
 *         level = dsproc_datastream_class_level(dsids[dsi])
 *         if level[0] == '0':             # <<<<<<<<<<<<<<
 *             if dsid == -1:
 *                 dsid = dsids[dsi]
 */

#line 3012 "dsproc3/core.pyx"
    __pyx_t_1 = ((__pyx_v_level[0]) == '0');

#line 3012 "dsproc3/core.pyx"
    if (__pyx_t_1) {

      /* "dsproc3/core.pyx":3013
 *         level = dsproc_datastream_class_level(dsids[dsi])
 *         if level[0] == '0':
 *             if dsid == -1:             # <<<<<<<<<<<<<<
 *                 dsid = dsids[dsi]
 *             else:
 */

#line 3013 "dsproc3/core.pyx"
      __pyx_t_1 = (__pyx_v_dsid == -1);

#line 3013 "dsproc3/core.pyx"
      if (__pyx_t_1) {

        /* "dsproc3/core.pyx":3014
 *         if level[0] == '0':
 *             if dsid == -1:
 *                 dsid = dsids[dsi]             # <<<<<<<<<<<<<<
 *             else:
 *                 error("KLG fill in with text for dsproc_etoomanyindsc\n",
 */

#line 3014 "dsproc3/core.pyx"
        __pyx_v_dsid = (__pyx_v_dsids[__pyx_v_dsi]);

#line 3014 "dsproc3/core.pyx"
        goto __pyx_L7;

#line 3014 "dsproc3/core.pyx"
      }

#line 3014 "dsproc3/core.pyx"
      /*else*/ {

        /* "dsproc3/core.pyx":3016
 *                 dsid = dsids[dsi]
 *             else:
 *                 error("KLG fill in with text for dsproc_etoomanyindsc\n",             # <<<<<<<<<<<<<<
 *                     "Too many level 0 input datastreams defined in database\n"
 *                     "  -> ingests only support one level 0 input datastream\n");
 */

#line 3016 "dsproc3/core.pyx"
        __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__error); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3016 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 3016 "dsproc3/core.pyx"
        __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_k_tuple_66), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3016 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 3016 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 3016 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "dsproc3/core.pyx":3019
 *                     "Too many level 0 input datastreams defined in database\n"
 *                     "  -> ingests only support one level 0 input datastream\n");
 *                 return             # <<<<<<<<<<<<<<
 * 
 *     # Get the list of input files
 */

#line 3019 "dsproc3/core.pyx"
        __Pyx_XDECREF(__pyx_r);

#line 3019 "dsproc3/core.pyx"
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 3019 "dsproc3/core.pyx"
        goto __pyx_L0;

#line 3019 "dsproc3/core.pyx"
      }

#line 3019 "dsproc3/core.pyx"
      __pyx_L7:;

#line 3019 "dsproc3/core.pyx"
      goto __pyx_L6;

#line 3019 "dsproc3/core.pyx"
    }

#line 3019 "dsproc3/core.pyx"
    __pyx_L6:;

#line 3019 "dsproc3/core.pyx"
  }

  /* "dsproc3/core.pyx":3022
 * 
 *     # Get the list of input files
 *     nfiles = dsproc_get_datastream_files(dsid, &files)             # <<<<<<<<<<<<<<
 *     if nfiles <= 0:
 *         if nfiles == 0:
 */

#line 3022 "dsproc3/core.pyx"
  __pyx_v_nfiles = dsproc_get_datastream_files(__pyx_v_dsid, (&__pyx_v_files));

  /* "dsproc3/core.pyx":3023
 *     # Get the list of input files
 *     nfiles = dsproc_get_datastream_files(dsid, &files)
 *     if nfiles <= 0:             # <<<<<<<<<<<<<<
 *         if nfiles == 0:
 *             log("No data files found to process in: %s\n",
 */

#line 3023 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_nfiles <= 0);

#line 3023 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":3024
 *     nfiles = dsproc_get_datastream_files(dsid, &files)
 *     if nfiles <= 0:
 *         if nfiles == 0:             # <<<<<<<<<<<<<<
 *             log("No data files found to process in: %s\n",
 *                dsproc_datastream_path(dsid))
 */

#line 3024 "dsproc3/core.pyx"
    __pyx_t_1 = (__pyx_v_nfiles == 0);

#line 3024 "dsproc3/core.pyx"
    if (__pyx_t_1) {

      /* "dsproc3/core.pyx":3025
 *     if nfiles <= 0:
 *         if nfiles == 0:
 *             log("No data files found to process in: %s\n",             # <<<<<<<<<<<<<<
 *                dsproc_datastream_path(dsid))
 *         return
 */

#line 3025 "dsproc3/core.pyx"
      __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__log); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3025; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3025 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_2);

      /* "dsproc3/core.pyx":3026
 *         if nfiles == 0:
 *             log("No data files found to process in: %s\n",
 *                dsproc_datastream_path(dsid))             # <<<<<<<<<<<<<<
 *         return
 * 
 */

#line 3026 "dsproc3/core.pyx"
      __pyx_t_3 = PyBytes_FromString(dsproc_datastream_path(__pyx_v_dsid)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3026; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3026 "dsproc3/core.pyx"
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));

#line 3026 "dsproc3/core.pyx"
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3025; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3026 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 3026 "dsproc3/core.pyx"
      __Pyx_INCREF(((PyObject *)__pyx_kp_s_67));

#line 3026 "dsproc3/core.pyx"
      PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_kp_s_67));

#line 3026 "dsproc3/core.pyx"
      __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_67));

#line 3026 "dsproc3/core.pyx"
      PyTuple_SET_ITEM(__pyx_t_6, 1, ((PyObject *)__pyx_t_3));

#line 3026 "dsproc3/core.pyx"
      __Pyx_GIVEREF(((PyObject *)__pyx_t_3));

#line 3026 "dsproc3/core.pyx"
      __pyx_t_3 = 0;

#line 3026 "dsproc3/core.pyx"
      __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3025; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3026 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 3026 "dsproc3/core.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 3026 "dsproc3/core.pyx"
      __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;

#line 3026 "dsproc3/core.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 3026 "dsproc3/core.pyx"
      goto __pyx_L9;

#line 3026 "dsproc3/core.pyx"
    }

#line 3026 "dsproc3/core.pyx"
    __pyx_L9:;

    /* "dsproc3/core.pyx":3027
 *             log("No data files found to process in: %s\n",
 *                dsproc_datastream_path(dsid))
 *         return             # <<<<<<<<<<<<<<
 * 
 *     input_dir = dsproc_datastream_path(dsid)
 */

#line 3027 "dsproc3/core.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 3027 "dsproc3/core.pyx"
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 3027 "dsproc3/core.pyx"
    goto __pyx_L0;

#line 3027 "dsproc3/core.pyx"
    goto __pyx_L8;

#line 3027 "dsproc3/core.pyx"
  }

#line 3027 "dsproc3/core.pyx"
  __pyx_L8:;

  /* "dsproc3/core.pyx":3029
 *         return
 * 
 *     input_dir = dsproc_datastream_path(dsid)             # <<<<<<<<<<<<<<
 * 
 *     # Loop over all input files
 */

#line 3029 "dsproc3/core.pyx"
  __pyx_v_input_dir = dsproc_datastream_path(__pyx_v_dsid);

  /* "dsproc3/core.pyx":3032
 * 
 *     # Loop over all input files
 *     loop_start = 0             # <<<<<<<<<<<<<<
 *     loop_end = 0
 *     for fi in range(nfiles):
 */

#line 3032 "dsproc3/core.pyx"
  __pyx_v_loop_start = 0;

  /* "dsproc3/core.pyx":3033
 *     # Loop over all input files
 *     loop_start = 0
 *     loop_end = 0             # <<<<<<<<<<<<<<
 *     for fi in range(nfiles):
 *         #Check the run time
 */

#line 3033 "dsproc3/core.pyx"
  __pyx_v_loop_end = 0;

  /* "dsproc3/core.pyx":3034
 *     loop_start = 0
 *     loop_end = 0
 *     for fi in range(nfiles):             # <<<<<<<<<<<<<<
 *         #Check the run time
 *         time_remaining = dsproc_get_time_remaining()
 */

#line 3034 "dsproc3/core.pyx"
  __pyx_t_4 = __pyx_v_nfiles;

#line 3034 "dsproc3/core.pyx"
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {

#line 3034 "dsproc3/core.pyx"
    __pyx_v_fi = __pyx_t_5;

    /* "dsproc3/core.pyx":3036
 *     for fi in range(nfiles):
 *         #Check the run time
 *         time_remaining = dsproc_get_time_remaining()             # <<<<<<<<<<<<<<
 *         if time_remaining >=0:
 *             if time_remaining == 0:
 */

#line 3036 "dsproc3/core.pyx"
    __pyx_v_time_remaining = dsproc_get_time_remaining();

    /* "dsproc3/core.pyx":3037
 *         #Check the run time
 *         time_remaining = dsproc_get_time_remaining()
 *         if time_remaining >=0:             # <<<<<<<<<<<<<<
 *             if time_remaining == 0:
 *                 break
 */

#line 3037 "dsproc3/core.pyx"
    __pyx_t_1 = (__pyx_v_time_remaining >= 0);

#line 3037 "dsproc3/core.pyx"
    if (__pyx_t_1) {

      /* "dsproc3/core.pyx":3038
 *         time_remaining = dsproc_get_time_remaining()
 *         if time_remaining >=0:
 *             if time_remaining == 0:             # <<<<<<<<<<<<<<
 *                 break
 *             if loop_end - loop_start > time_remaining:
 */

#line 3038 "dsproc3/core.pyx"
      __pyx_t_1 = (__pyx_v_time_remaining == 0);

#line 3038 "dsproc3/core.pyx"
      if (__pyx_t_1) {

        /* "dsproc3/core.pyx":3039
 *         if time_remaining >=0:
 *             if time_remaining == 0:
 *                 break             # <<<<<<<<<<<<<<
 *             if loop_end - loop_start > time_remaining:
 *                 log("\nStopping ingest before max run time of %d seconds is exceeded\n",
 */

#line 3039 "dsproc3/core.pyx"
        goto __pyx_L11_break;

#line 3039 "dsproc3/core.pyx"
        goto __pyx_L13;

#line 3039 "dsproc3/core.pyx"
      }

#line 3039 "dsproc3/core.pyx"
      __pyx_L13:;

      /* "dsproc3/core.pyx":3040
 *             if time_remaining == 0:
 *                 break
 *             if loop_end - loop_start > time_remaining:             # <<<<<<<<<<<<<<
 *                 log("\nStopping ingest before max run time of %d seconds is exceeded\n",
 *                    <int>dsproc_get_max_run_time())
 */

#line 3040 "dsproc3/core.pyx"
      __pyx_t_1 = ((__pyx_v_loop_end - __pyx_v_loop_start) > __pyx_v_time_remaining);

#line 3040 "dsproc3/core.pyx"
      if (__pyx_t_1) {

        /* "dsproc3/core.pyx":3041
 *                 break
 *             if loop_end - loop_start > time_remaining:
 *                 log("\nStopping ingest before max run time of %d seconds is exceeded\n",             # <<<<<<<<<<<<<<
 *                    <int>dsproc_get_max_run_time())
 *                 dsproc_set_status("KLG replace with text for dsproc_eruntime")
 */

#line 3041 "dsproc3/core.pyx"
        __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__log); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3041 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_3);

        /* "dsproc3/core.pyx":3042
 *             if loop_end - loop_start > time_remaining:
 *                 log("\nStopping ingest before max run time of %d seconds is exceeded\n",
 *                    <int>dsproc_get_max_run_time())             # <<<<<<<<<<<<<<
 *                 dsproc_set_status("KLG replace with text for dsproc_eruntime")
 *                 break
 */

#line 3042 "dsproc3/core.pyx"
        __pyx_t_6 = PyInt_FromLong(((int)dsproc_get_max_run_time())); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3042; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3042 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 3042 "dsproc3/core.pyx"
        __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3042 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 3042 "dsproc3/core.pyx"
        __Pyx_INCREF(((PyObject *)__pyx_kp_s_68));

#line 3042 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_kp_s_68));

#line 3042 "dsproc3/core.pyx"
        __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_68));

#line 3042 "dsproc3/core.pyx"
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_6);

#line 3042 "dsproc3/core.pyx"
        __Pyx_GIVEREF(__pyx_t_6);

#line 3042 "dsproc3/core.pyx"
        __pyx_t_6 = 0;

#line 3042 "dsproc3/core.pyx"
        __pyx_t_6 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3042 "dsproc3/core.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 3042 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 3042 "dsproc3/core.pyx"
        __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 3042 "dsproc3/core.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "dsproc3/core.pyx":3043
 *                 log("\nStopping ingest before max run time of %d seconds is exceeded\n",
 *                    <int>dsproc_get_max_run_time())
 *                 dsproc_set_status("KLG replace with text for dsproc_eruntime")             # <<<<<<<<<<<<<<
 *                 break
 * 
 */

#line 3043 "dsproc3/core.pyx"
        dsproc_set_status(__pyx_k_69);

        /* "dsproc3/core.pyx":3044
 *                    <int>dsproc_get_max_run_time())
 *                 dsproc_set_status("KLG replace with text for dsproc_eruntime")
 *                 break             # <<<<<<<<<<<<<<
 * 
 *         # Process the file
 */

#line 3044 "dsproc3/core.pyx"
        goto __pyx_L11_break;

#line 3044 "dsproc3/core.pyx"
        goto __pyx_L14;

#line 3044 "dsproc3/core.pyx"
      }

#line 3044 "dsproc3/core.pyx"
      __pyx_L14:;

#line 3044 "dsproc3/core.pyx"
      goto __pyx_L12;

#line 3044 "dsproc3/core.pyx"
    }

#line 3044 "dsproc3/core.pyx"
    __pyx_L12:;

    /* "dsproc3/core.pyx":3047
 * 
 *         # Process the file
 *         val = fi+1             # <<<<<<<<<<<<<<
 *         debug_lv1("PROCESSING FILE #%d: %s\n", val, files[fi])
 *         log("\nProcessing: %s/%s\n", input_dir, files[fi])
 */

#line 3047 "dsproc3/core.pyx"
    __pyx_v_val = (__pyx_v_fi + 1);

    /* "dsproc3/core.pyx":3048
 *         # Process the file
 *         val = fi+1
 *         debug_lv1("PROCESSING FILE #%d: %s\n", val, files[fi])             # <<<<<<<<<<<<<<
 *         log("\nProcessing: %s/%s\n", input_dir, files[fi])
 *         loop_start = time.time()
 */

#line 3048 "dsproc3/core.pyx"
    __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__debug_lv1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3048 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 3048 "dsproc3/core.pyx"
    __pyx_t_2 = PyInt_FromLong(__pyx_v_val); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3048 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 3048 "dsproc3/core.pyx"
    __pyx_t_3 = PyBytes_FromString((__pyx_v_files[__pyx_v_fi])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3048 "dsproc3/core.pyx"
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));

#line 3048 "dsproc3/core.pyx"
    __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3048 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 3048 "dsproc3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_70));

#line 3048 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)__pyx_kp_s_70));

#line 3048 "dsproc3/core.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_70));

#line 3048 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);

#line 3048 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_2);

#line 3048 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_7, 2, ((PyObject *)__pyx_t_3));

#line 3048 "dsproc3/core.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_t_3));

#line 3048 "dsproc3/core.pyx"
    __pyx_t_2 = 0;

#line 3048 "dsproc3/core.pyx"
    __pyx_t_3 = 0;

#line 3048 "dsproc3/core.pyx"
    __pyx_t_3 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3048 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 3048 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 3048 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;

#line 3048 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "dsproc3/core.pyx":3049
 *         val = fi+1
 *         debug_lv1("PROCESSING FILE #%d: %s\n", val, files[fi])
 *         log("\nProcessing: %s/%s\n", input_dir, files[fi])             # <<<<<<<<<<<<<<
 *         loop_start = time.time()
 *         dsproc_set_input_source(files[fi])
 */

#line 3049 "dsproc3/core.pyx"
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__log); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3049 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 3049 "dsproc3/core.pyx"
    __pyx_t_7 = PyBytes_FromString(__pyx_v_input_dir); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3049 "dsproc3/core.pyx"
    __Pyx_GOTREF(((PyObject *)__pyx_t_7));

#line 3049 "dsproc3/core.pyx"
    __pyx_t_6 = PyBytes_FromString((__pyx_v_files[__pyx_v_fi])); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3049 "dsproc3/core.pyx"
    __Pyx_GOTREF(((PyObject *)__pyx_t_6));

#line 3049 "dsproc3/core.pyx"
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3049 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 3049 "dsproc3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_71));

#line 3049 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_kp_s_71));

#line 3049 "dsproc3/core.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_71));

#line 3049 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_t_7));

#line 3049 "dsproc3/core.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_t_7));

#line 3049 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_t_6));

#line 3049 "dsproc3/core.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_t_6));

#line 3049 "dsproc3/core.pyx"
    __pyx_t_7 = 0;

#line 3049 "dsproc3/core.pyx"
    __pyx_t_6 = 0;

#line 3049 "dsproc3/core.pyx"
    __pyx_t_6 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3049 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 3049 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 3049 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 3049 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "dsproc3/core.pyx":3050
 *         debug_lv1("PROCESSING FILE #%d: %s\n", val, files[fi])
 *         log("\nProcessing: %s/%s\n", input_dir, files[fi])
 *         loop_start = time.time()             # <<<<<<<<<<<<<<
 *         dsproc_set_input_source(files[fi])
 *         status = _run_process_file_hook(input_dir, files[fi])
 */

#line 3050 "dsproc3/core.pyx"
    __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s__time); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3050; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3050 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 3050 "dsproc3/core.pyx"
    __pyx_t_2 = PyObject_GetAttr(__pyx_t_6, __pyx_n_s__time); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3050; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3050 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 3050 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 3050 "dsproc3/core.pyx"
    __pyx_t_6 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3050; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3050 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 3050 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 3050 "dsproc3/core.pyx"
    __pyx_t_8 = __Pyx_PyInt_from_py_time_t(__pyx_t_6); if (unlikely((__pyx_t_8 == (time_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3050; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3050 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 3050 "dsproc3/core.pyx"
    __pyx_v_loop_start = __pyx_t_8;

    /* "dsproc3/core.pyx":3051
 *         log("\nProcessing: %s/%s\n", input_dir, files[fi])
 *         loop_start = time.time()
 *         dsproc_set_input_source(files[fi])             # <<<<<<<<<<<<<<
 *         status = _run_process_file_hook(input_dir, files[fi])
 *         if status == -1:
 */

#line 3051 "dsproc3/core.pyx"
    dsproc_set_input_source((__pyx_v_files[__pyx_v_fi]));

    /* "dsproc3/core.pyx":3052
 *         loop_start = time.time()
 *         dsproc_set_input_source(files[fi])
 *         status = _run_process_file_hook(input_dir, files[fi])             # <<<<<<<<<<<<<<
 *         if status == -1:
 *             break
 */

#line 3052 "dsproc3/core.pyx"
    __pyx_t_6 = __Pyx_GetName(__pyx_m, __pyx_n_s_72); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3052 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 3052 "dsproc3/core.pyx"
    __pyx_t_2 = PyBytes_FromString(__pyx_v_input_dir); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3052 "dsproc3/core.pyx"
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));

#line 3052 "dsproc3/core.pyx"
    __pyx_t_3 = PyBytes_FromString((__pyx_v_files[__pyx_v_fi])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3052 "dsproc3/core.pyx"
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));

#line 3052 "dsproc3/core.pyx"
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3052 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 3052 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)__pyx_t_2));

#line 3052 "dsproc3/core.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_t_2));

#line 3052 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_7, 1, ((PyObject *)__pyx_t_3));

#line 3052 "dsproc3/core.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_t_3));

#line 3052 "dsproc3/core.pyx"
    __pyx_t_2 = 0;

#line 3052 "dsproc3/core.pyx"
    __pyx_t_3 = 0;

#line 3052 "dsproc3/core.pyx"
    __pyx_t_3 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_t_7), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3052 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 3052 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 3052 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_7)); __pyx_t_7 = 0;

#line 3052 "dsproc3/core.pyx"
    __pyx_t_9 = __Pyx_PyInt_AsInt(__pyx_t_3); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3052 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 3052 "dsproc3/core.pyx"
    __pyx_v_status = __pyx_t_9;

    /* "dsproc3/core.pyx":3053
 *         dsproc_set_input_source(files[fi])
 *         status = _run_process_file_hook(input_dir, files[fi])
 *         if status == -1:             # <<<<<<<<<<<<<<
 *             break
 *         loop_end = time.time()
 */

#line 3053 "dsproc3/core.pyx"
    __pyx_t_1 = (__pyx_v_status == -1);

#line 3053 "dsproc3/core.pyx"
    if (__pyx_t_1) {

      /* "dsproc3/core.pyx":3054
 *         status = _run_process_file_hook(input_dir, files[fi])
 *         if status == -1:
 *             break             # <<<<<<<<<<<<<<
 *         loop_end = time.time()
 * 
 */

#line 3054 "dsproc3/core.pyx"
      goto __pyx_L11_break;

#line 3054 "dsproc3/core.pyx"
      goto __pyx_L15;

#line 3054 "dsproc3/core.pyx"
    }

#line 3054 "dsproc3/core.pyx"
    __pyx_L15:;

    /* "dsproc3/core.pyx":3055
 *         if status == -1:
 *             break
 *         loop_end = time.time()             # <<<<<<<<<<<<<<
 * 
 *     dsproc_free_file_list(files)
 */

#line 3055 "dsproc3/core.pyx"
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__time); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3055 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 3055 "dsproc3/core.pyx"
    __pyx_t_7 = PyObject_GetAttr(__pyx_t_3, __pyx_n_s__time); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3055 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 3055 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 3055 "dsproc3/core.pyx"
    __pyx_t_3 = PyObject_Call(__pyx_t_7, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3055 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 3055 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 3055 "dsproc3/core.pyx"
    __pyx_t_8 = __Pyx_PyInt_from_py_time_t(__pyx_t_3); if (unlikely((__pyx_t_8 == (time_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3055 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 3055 "dsproc3/core.pyx"
    __pyx_v_loop_end = __pyx_t_8;

#line 3055 "dsproc3/core.pyx"
  }

#line 3055 "dsproc3/core.pyx"
  __pyx_L11_break:;

  /* "dsproc3/core.pyx":3057
 *         loop_end = time.time()
 * 
 *     dsproc_free_file_list(files)             # <<<<<<<<<<<<<<
 * 
 * def _vap_main_loop(int proc_model):
 */

#line 3057 "dsproc3/core.pyx"
  dsproc_free_file_list(__pyx_v_files);

#line 3057 "dsproc3/core.pyx"


#line 3057 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 3057 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 3057 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 3057 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 3057 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 3057 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 3057 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 3057 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core._ingest_main_loop", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3057 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 3057 "dsproc3/core.pyx"
  __pyx_L0:;

#line 3057 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 3057 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 3057 "dsproc3/core.pyx"
  return __pyx_r;

#line 3057 "dsproc3/core.pyx"
}

#line 3057 "dsproc3/core.pyx"


#line 3057 "dsproc3/core.pyx"
/* Python wrapper */

#line 3057 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_227_vap_main_loop(PyObject *__pyx_self, PyObject *__pyx_arg_proc_model); /*proto*/

#line 3057 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_226_vap_main_loop[] = "_vap_main_loop(int proc_model)";
static PyMethodDef __pyx_mdef_7dsproc3_4core_227_vap_main_loop = 
#line 3057 "dsproc3/core.pyx"
{__Pyx_NAMESTR("_vap_main_loop"), (PyCFunction)__pyx_pw_7dsproc3_4core_227_vap_main_loop, METH_O, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_226_vap_main_loop)};

#line 3057 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_227_vap_main_loop(PyObject *__pyx_self, PyObject *__pyx_arg_proc_model) {
  int __pyx_v_proc_model
#line 3057 "dsproc3/core.pyx"
;

#line 3057 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 3057 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 3057 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("_vap_main_loop (wrapper)", 0);

#line 3057 "dsproc3/core.pyx"
  assert(__pyx_arg_proc_model); {

#line 3057 "dsproc3/core.pyx"
    __pyx_v_proc_model = __Pyx_PyInt_AsInt(__pyx_arg_proc_model); if (unlikely((__pyx_v_proc_model == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3059; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 3057 "dsproc3/core.pyx"
  }

#line 3057 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 3057 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 3057 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core._vap_main_loop", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3057 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 3057 "dsproc3/core.pyx"
  return NULL;

#line 3057 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 3057 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_226_vap_main_loop(__pyx_self, ((int)__pyx_v_proc_model));

#line 3057 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 3057 "dsproc3/core.pyx"
  return __pyx_r;

#line 3057 "dsproc3/core.pyx"
}

/* "dsproc3/core.pyx":3059
 *     dsproc_free_file_list(files)
 * 
 * def _vap_main_loop(int proc_model):             # <<<<<<<<<<<<<<
 *     cdef time_t    interval_begin
 *     cdef time_t    interval_end
 */

#line 3059 "dsproc3/core.pyx"


#line 3059 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_226_vap_main_loop(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_proc_model) {
  time_t __pyx_v_interval_begin
#line 3059 "dsproc3/core.pyx"
;
  time_t __pyx_v_interval_end
#line 3059 "dsproc3/core.pyx"
;
  int __pyx_v_status
#line 3059 "dsproc3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Group *__pyx_v_ret_data = 0
#line 3059 "dsproc3/core.pyx"
;
  struct __pyx_obj_4cds3_4core_Group *__pyx_v_trans_data = 0
#line 3059 "dsproc3/core.pyx"
;

#line 3059 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 3059 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("_vap_main_loop", 0);

  /* "dsproc3/core.pyx":3063
 *     cdef time_t    interval_end
 *     cdef int       status
 *     cdef cds3.core.Group ret_data = cds3.core.Group()             # <<<<<<<<<<<<<<
 *     cdef cds3.core.Group trans_data = cds3.core.Group()
 *     while dsproc_start_processing_loop(&interval_begin, &interval_end):
 */

#line 3063 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Group)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3063; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3063 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 3063 "dsproc3/core.pyx"
  __pyx_v_ret_data = ((struct __pyx_obj_4cds3_4core_Group *)__pyx_t_1);

#line 3063 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":3064
 *     cdef int       status
 *     cdef cds3.core.Group ret_data = cds3.core.Group()
 *     cdef cds3.core.Group trans_data = cds3.core.Group()             # <<<<<<<<<<<<<<
 *     while dsproc_start_processing_loop(&interval_begin, &interval_end):
 *         # Run the pre_retrieval_hook function
 */

#line 3064 "dsproc3/core.pyx"
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_4cds3_4core_Group)), ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3064 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 3064 "dsproc3/core.pyx"
  __pyx_v_trans_data = ((struct __pyx_obj_4cds3_4core_Group *)__pyx_t_1);

#line 3064 "dsproc3/core.pyx"
  __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":3065
 *     cdef cds3.core.Group ret_data = cds3.core.Group()
 *     cdef cds3.core.Group trans_data = cds3.core.Group()
 *     while dsproc_start_processing_loop(&interval_begin, &interval_end):             # <<<<<<<<<<<<<<
 *         # Run the pre_retrieval_hook function
 *         status = _run_pre_retrieval_hook(interval_begin, interval_end)
 */

#line 3065 "dsproc3/core.pyx"
  while (1) {

#line 3065 "dsproc3/core.pyx"
    __pyx_t_2 = dsproc_start_processing_loop((&__pyx_v_interval_begin), (&__pyx_v_interval_end));

#line 3065 "dsproc3/core.pyx"
    if (!__pyx_t_2) break;

    /* "dsproc3/core.pyx":3067
 *     while dsproc_start_processing_loop(&interval_begin, &interval_end):
 *         # Run the pre_retrieval_hook function
 *         status = _run_pre_retrieval_hook(interval_begin, interval_end)             # <<<<<<<<<<<<<<
 *         if status == -1: break
 *         if status ==  0: continue
 */

#line 3067 "dsproc3/core.pyx"
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s_73); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3067 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 3067 "dsproc3/core.pyx"
    __pyx_t_3 = __Pyx_PyInt_to_py_time_t(__pyx_v_interval_begin); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3067 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 3067 "dsproc3/core.pyx"
    __pyx_t_4 = __Pyx_PyInt_to_py_time_t(__pyx_v_interval_end); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3067 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 3067 "dsproc3/core.pyx"
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3067 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 3067 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);

#line 3067 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_3);

#line 3067 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);

#line 3067 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_4);

#line 3067 "dsproc3/core.pyx"
    __pyx_t_3 = 0;

#line 3067 "dsproc3/core.pyx"
    __pyx_t_4 = 0;

#line 3067 "dsproc3/core.pyx"
    __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3067 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 3067 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 3067 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;

#line 3067 "dsproc3/core.pyx"
    __pyx_t_2 = __Pyx_PyInt_AsInt(__pyx_t_4); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3067 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 3067 "dsproc3/core.pyx"
    __pyx_v_status = __pyx_t_2;

    /* "dsproc3/core.pyx":3068
 *         # Run the pre_retrieval_hook function
 *         status = _run_pre_retrieval_hook(interval_begin, interval_end)
 *         if status == -1: break             # <<<<<<<<<<<<<<
 *         if status ==  0: continue
 *         # Retrieve the data for the current processing interval
 */

#line 3068 "dsproc3/core.pyx"
    __pyx_t_6 = (__pyx_v_status == -1);

#line 3068 "dsproc3/core.pyx"
    if (__pyx_t_6) {

#line 3068 "dsproc3/core.pyx"
      goto __pyx_L4_break;

#line 3068 "dsproc3/core.pyx"
      goto __pyx_L5;

#line 3068 "dsproc3/core.pyx"
    }

#line 3068 "dsproc3/core.pyx"
    __pyx_L5:;

    /* "dsproc3/core.pyx":3069
 *         status = _run_pre_retrieval_hook(interval_begin, interval_end)
 *         if status == -1: break
 *         if status ==  0: continue             # <<<<<<<<<<<<<<
 *         # Retrieve the data for the current processing interval
 *         if proc_model & DSP_RETRIEVER:
 */

#line 3069 "dsproc3/core.pyx"
    __pyx_t_6 = (__pyx_v_status == 0);

#line 3069 "dsproc3/core.pyx"
    if (__pyx_t_6) {

#line 3069 "dsproc3/core.pyx"
      goto __pyx_L3_continue;

#line 3069 "dsproc3/core.pyx"
      goto __pyx_L6;

#line 3069 "dsproc3/core.pyx"
    }

#line 3069 "dsproc3/core.pyx"
    __pyx_L6:;

    /* "dsproc3/core.pyx":3071
 *         if status ==  0: continue
 *         # Retrieve the data for the current processing interval
 *         if proc_model & DSP_RETRIEVER:             # <<<<<<<<<<<<<<
 *             status = dsproc_retrieve_data(
 *                     interval_begin, interval_end, &ret_data.c_ob)
 */

#line 3071 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_proc_model & DSP_RETRIEVER);

#line 3071 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":3073
 *         if proc_model & DSP_RETRIEVER:
 *             status = dsproc_retrieve_data(
 *                     interval_begin, interval_end, &ret_data.c_ob)             # <<<<<<<<<<<<<<
 *             if status == -1: break
 *             if status ==  0: continue
 */

#line 3073 "dsproc3/core.pyx"
      __pyx_v_status = dsproc_retrieve_data(__pyx_v_interval_begin, __pyx_v_interval_end, (&__pyx_v_ret_data->c_ob));

      /* "dsproc3/core.pyx":3074
 *             status = dsproc_retrieve_data(
 *                     interval_begin, interval_end, &ret_data.c_ob)
 *             if status == -1: break             # <<<<<<<<<<<<<<
 *             if status ==  0: continue
 *         # Run the post_retrieval_hook function
 */

#line 3074 "dsproc3/core.pyx"
      __pyx_t_6 = (__pyx_v_status == -1);

#line 3074 "dsproc3/core.pyx"
      if (__pyx_t_6) {

#line 3074 "dsproc3/core.pyx"
        goto __pyx_L4_break;

#line 3074 "dsproc3/core.pyx"
        goto __pyx_L8;

#line 3074 "dsproc3/core.pyx"
      }

#line 3074 "dsproc3/core.pyx"
      __pyx_L8:;

      /* "dsproc3/core.pyx":3075
 *                     interval_begin, interval_end, &ret_data.c_ob)
 *             if status == -1: break
 *             if status ==  0: continue             # <<<<<<<<<<<<<<
 *         # Run the post_retrieval_hook function
 *         status = _run_post_retrieval_hook(
 */

#line 3075 "dsproc3/core.pyx"
      __pyx_t_6 = (__pyx_v_status == 0);

#line 3075 "dsproc3/core.pyx"
      if (__pyx_t_6) {

#line 3075 "dsproc3/core.pyx"
        goto __pyx_L3_continue;

#line 3075 "dsproc3/core.pyx"
        goto __pyx_L9;

#line 3075 "dsproc3/core.pyx"
      }

#line 3075 "dsproc3/core.pyx"
      __pyx_L9:;

#line 3075 "dsproc3/core.pyx"
      goto __pyx_L7;

#line 3075 "dsproc3/core.pyx"
    }

#line 3075 "dsproc3/core.pyx"
    __pyx_L7:;

    /* "dsproc3/core.pyx":3077
 *             if status ==  0: continue
 *         # Run the post_retrieval_hook function
 *         status = _run_post_retrieval_hook(             # <<<<<<<<<<<<<<
 *                 interval_begin, interval_end, ret_data)
 *         if status == -1: break
 */

#line 3077 "dsproc3/core.pyx"
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s_74); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3077; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3077 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

    /* "dsproc3/core.pyx":3078
 *         # Run the post_retrieval_hook function
 *         status = _run_post_retrieval_hook(
 *                 interval_begin, interval_end, ret_data)             # <<<<<<<<<<<<<<
 *         if status == -1: break
 *         if status ==  0: continue
 */

#line 3078 "dsproc3/core.pyx"
    __pyx_t_5 = __Pyx_PyInt_to_py_time_t(__pyx_v_interval_begin); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3078; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3078 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 3078 "dsproc3/core.pyx"
    __pyx_t_1 = __Pyx_PyInt_to_py_time_t(__pyx_v_interval_end); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3078; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3078 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 3078 "dsproc3/core.pyx"
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3077; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3078 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 3078 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);

#line 3078 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_5);

#line 3078 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);

#line 3078 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_1);

#line 3078 "dsproc3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_ret_data));

#line 3078 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 2, ((PyObject *)__pyx_v_ret_data));

#line 3078 "dsproc3/core.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_v_ret_data));

#line 3078 "dsproc3/core.pyx"
    __pyx_t_5 = 0;

#line 3078 "dsproc3/core.pyx"
    __pyx_t_1 = 0;

#line 3078 "dsproc3/core.pyx"
    __pyx_t_1 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3077; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3078 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 3078 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 3078 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 3078 "dsproc3/core.pyx"
    __pyx_t_2 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3077; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3078 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 3078 "dsproc3/core.pyx"
    __pyx_v_status = __pyx_t_2;

    /* "dsproc3/core.pyx":3079
 *         status = _run_post_retrieval_hook(
 *                 interval_begin, interval_end, ret_data)
 *         if status == -1: break             # <<<<<<<<<<<<<<
 *         if status ==  0: continue
 *         # Merge the observations in the retrieved data
 */

#line 3079 "dsproc3/core.pyx"
    __pyx_t_6 = (__pyx_v_status == -1);

#line 3079 "dsproc3/core.pyx"
    if (__pyx_t_6) {

#line 3079 "dsproc3/core.pyx"
      goto __pyx_L4_break;

#line 3079 "dsproc3/core.pyx"
      goto __pyx_L10;

#line 3079 "dsproc3/core.pyx"
    }

#line 3079 "dsproc3/core.pyx"
    __pyx_L10:;

    /* "dsproc3/core.pyx":3080
 *                 interval_begin, interval_end, ret_data)
 *         if status == -1: break
 *         if status ==  0: continue             # <<<<<<<<<<<<<<
 *         # Merge the observations in the retrieved data
 *         if not dsproc_merge_retrieved_data(): break
 */

#line 3080 "dsproc3/core.pyx"
    __pyx_t_6 = (__pyx_v_status == 0);

#line 3080 "dsproc3/core.pyx"
    if (__pyx_t_6) {

#line 3080 "dsproc3/core.pyx"
      goto __pyx_L3_continue;

#line 3080 "dsproc3/core.pyx"
      goto __pyx_L11;

#line 3080 "dsproc3/core.pyx"
    }

#line 3080 "dsproc3/core.pyx"
    __pyx_L11:;

    /* "dsproc3/core.pyx":3082
 *         if status ==  0: continue
 *         # Merge the observations in the retrieved data
 *         if not dsproc_merge_retrieved_data(): break             # <<<<<<<<<<<<<<
 *         # Run the pre_transform_hook function
 *         status = _run_pre_transform_hook(
 */

#line 3082 "dsproc3/core.pyx"
    __pyx_t_6 = (!dsproc_merge_retrieved_data());

#line 3082 "dsproc3/core.pyx"
    if (__pyx_t_6) {

#line 3082 "dsproc3/core.pyx"
      goto __pyx_L4_break;

#line 3082 "dsproc3/core.pyx"
      goto __pyx_L12;

#line 3082 "dsproc3/core.pyx"
    }

#line 3082 "dsproc3/core.pyx"
    __pyx_L12:;

    /* "dsproc3/core.pyx":3084
 *         if not dsproc_merge_retrieved_data(): break
 *         # Run the pre_transform_hook function
 *         status = _run_pre_transform_hook(             # <<<<<<<<<<<<<<
 *                 interval_begin, interval_end, ret_data)
 *         if status == -1: break
 */

#line 3084 "dsproc3/core.pyx"
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s_75); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3084; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3084 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

    /* "dsproc3/core.pyx":3085
 *         # Run the pre_transform_hook function
 *         status = _run_pre_transform_hook(
 *                 interval_begin, interval_end, ret_data)             # <<<<<<<<<<<<<<
 *         if status == -1: break
 *         if status ==  0: continue
 */

#line 3085 "dsproc3/core.pyx"
    __pyx_t_3 = __Pyx_PyInt_to_py_time_t(__pyx_v_interval_begin); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3085; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3085 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 3085 "dsproc3/core.pyx"
    __pyx_t_4 = __Pyx_PyInt_to_py_time_t(__pyx_v_interval_end); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3085; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3085 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 3085 "dsproc3/core.pyx"
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3084; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3085 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 3085 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);

#line 3085 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_3);

#line 3085 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);

#line 3085 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_4);

#line 3085 "dsproc3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_ret_data));

#line 3085 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_5, 2, ((PyObject *)__pyx_v_ret_data));

#line 3085 "dsproc3/core.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_v_ret_data));

#line 3085 "dsproc3/core.pyx"
    __pyx_t_3 = 0;

#line 3085 "dsproc3/core.pyx"
    __pyx_t_4 = 0;

#line 3085 "dsproc3/core.pyx"
    __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3084; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3085 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 3085 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 3085 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;

#line 3085 "dsproc3/core.pyx"
    __pyx_t_2 = __Pyx_PyInt_AsInt(__pyx_t_4); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3084; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3085 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 3085 "dsproc3/core.pyx"
    __pyx_v_status = __pyx_t_2;

    /* "dsproc3/core.pyx":3086
 *         status = _run_pre_transform_hook(
 *                 interval_begin, interval_end, ret_data)
 *         if status == -1: break             # <<<<<<<<<<<<<<
 *         if status ==  0: continue
 *         # Perform the data transformations for transform VAPs
 */

#line 3086 "dsproc3/core.pyx"
    __pyx_t_6 = (__pyx_v_status == -1);

#line 3086 "dsproc3/core.pyx"
    if (__pyx_t_6) {

#line 3086 "dsproc3/core.pyx"
      goto __pyx_L4_break;

#line 3086 "dsproc3/core.pyx"
      goto __pyx_L13;

#line 3086 "dsproc3/core.pyx"
    }

#line 3086 "dsproc3/core.pyx"
    __pyx_L13:;

    /* "dsproc3/core.pyx":3087
 *                 interval_begin, interval_end, ret_data)
 *         if status == -1: break
 *         if status ==  0: continue             # <<<<<<<<<<<<<<
 *         # Perform the data transformations for transform VAPs
 *         if proc_model & DSP_TRANSFORM:
 */

#line 3087 "dsproc3/core.pyx"
    __pyx_t_6 = (__pyx_v_status == 0);

#line 3087 "dsproc3/core.pyx"
    if (__pyx_t_6) {

#line 3087 "dsproc3/core.pyx"
      goto __pyx_L3_continue;

#line 3087 "dsproc3/core.pyx"
      goto __pyx_L14;

#line 3087 "dsproc3/core.pyx"
    }

#line 3087 "dsproc3/core.pyx"
    __pyx_L14:;

    /* "dsproc3/core.pyx":3089
 *         if status ==  0: continue
 *         # Perform the data transformations for transform VAPs
 *         if proc_model & DSP_TRANSFORM:             # <<<<<<<<<<<<<<
 *             status = dsproc_transform_data(&trans_data.c_ob)
 *             if status == -1: break
 */

#line 3089 "dsproc3/core.pyx"
    __pyx_t_2 = (__pyx_v_proc_model & DSP_TRANSFORM);

#line 3089 "dsproc3/core.pyx"
    if (__pyx_t_2) {

      /* "dsproc3/core.pyx":3090
 *         # Perform the data transformations for transform VAPs
 *         if proc_model & DSP_TRANSFORM:
 *             status = dsproc_transform_data(&trans_data.c_ob)             # <<<<<<<<<<<<<<
 *             if status == -1: break
 *             if status ==  0: continue
 */

#line 3090 "dsproc3/core.pyx"
      __pyx_v_status = dsproc_transform_data((&__pyx_v_trans_data->c_ob));

      /* "dsproc3/core.pyx":3091
 *         if proc_model & DSP_TRANSFORM:
 *             status = dsproc_transform_data(&trans_data.c_ob)
 *             if status == -1: break             # <<<<<<<<<<<<<<
 *             if status ==  0: continue
 *         # Run the post_transform_hook function
 */

#line 3091 "dsproc3/core.pyx"
      __pyx_t_6 = (__pyx_v_status == -1);

#line 3091 "dsproc3/core.pyx"
      if (__pyx_t_6) {

#line 3091 "dsproc3/core.pyx"
        goto __pyx_L4_break;

#line 3091 "dsproc3/core.pyx"
        goto __pyx_L16;

#line 3091 "dsproc3/core.pyx"
      }

#line 3091 "dsproc3/core.pyx"
      __pyx_L16:;

      /* "dsproc3/core.pyx":3092
 *             status = dsproc_transform_data(&trans_data.c_ob)
 *             if status == -1: break
 *             if status ==  0: continue             # <<<<<<<<<<<<<<
 *         # Run the post_transform_hook function
 *         status = _run_post_transform_hook(
 */

#line 3092 "dsproc3/core.pyx"
      __pyx_t_6 = (__pyx_v_status == 0);

#line 3092 "dsproc3/core.pyx"
      if (__pyx_t_6) {

#line 3092 "dsproc3/core.pyx"
        goto __pyx_L3_continue;

#line 3092 "dsproc3/core.pyx"
        goto __pyx_L17;

#line 3092 "dsproc3/core.pyx"
      }

#line 3092 "dsproc3/core.pyx"
      __pyx_L17:;

#line 3092 "dsproc3/core.pyx"
      goto __pyx_L15;

#line 3092 "dsproc3/core.pyx"
    }

#line 3092 "dsproc3/core.pyx"
    __pyx_L15:;

    /* "dsproc3/core.pyx":3094
 *             if status ==  0: continue
 *         # Run the post_transform_hook function
 *         status = _run_post_transform_hook(             # <<<<<<<<<<<<<<
 *             interval_begin, interval_end, trans_data)
 *         if status == -1: break
 */

#line 3094 "dsproc3/core.pyx"
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s_76); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3094 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

    /* "dsproc3/core.pyx":3095
 *         # Run the post_transform_hook function
 *         status = _run_post_transform_hook(
 *             interval_begin, interval_end, trans_data)             # <<<<<<<<<<<<<<
 *         if status == -1: break
 *         if status ==  0: continue
 */

#line 3095 "dsproc3/core.pyx"
    __pyx_t_5 = __Pyx_PyInt_to_py_time_t(__pyx_v_interval_begin); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3095; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3095 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 3095 "dsproc3/core.pyx"
    __pyx_t_1 = __Pyx_PyInt_to_py_time_t(__pyx_v_interval_end); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3095; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3095 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 3095 "dsproc3/core.pyx"
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3095 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 3095 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);

#line 3095 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_5);

#line 3095 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);

#line 3095 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_1);

#line 3095 "dsproc3/core.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_trans_data));

#line 3095 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 2, ((PyObject *)__pyx_v_trans_data));

#line 3095 "dsproc3/core.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_v_trans_data));

#line 3095 "dsproc3/core.pyx"
    __pyx_t_5 = 0;

#line 3095 "dsproc3/core.pyx"
    __pyx_t_1 = 0;

#line 3095 "dsproc3/core.pyx"
    __pyx_t_1 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3095 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 3095 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 3095 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 3095 "dsproc3/core.pyx"
    __pyx_t_2 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3095 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 3095 "dsproc3/core.pyx"
    __pyx_v_status = __pyx_t_2;

    /* "dsproc3/core.pyx":3096
 *         status = _run_post_transform_hook(
 *             interval_begin, interval_end, trans_data)
 *         if status == -1: break             # <<<<<<<<<<<<<<
 *         if status ==  0: continue
 *         # Create output datasets
 */

#line 3096 "dsproc3/core.pyx"
    __pyx_t_6 = (__pyx_v_status == -1);

#line 3096 "dsproc3/core.pyx"
    if (__pyx_t_6) {

#line 3096 "dsproc3/core.pyx"
      goto __pyx_L4_break;

#line 3096 "dsproc3/core.pyx"
      goto __pyx_L18;

#line 3096 "dsproc3/core.pyx"
    }

#line 3096 "dsproc3/core.pyx"
    __pyx_L18:;

    /* "dsproc3/core.pyx":3097
 *             interval_begin, interval_end, trans_data)
 *         if status == -1: break
 *         if status ==  0: continue             # <<<<<<<<<<<<<<
 *         # Create output datasets
 *         if not dsproc_create_output_datasets(): break
 */

#line 3097 "dsproc3/core.pyx"
    __pyx_t_6 = (__pyx_v_status == 0);

#line 3097 "dsproc3/core.pyx"
    if (__pyx_t_6) {

#line 3097 "dsproc3/core.pyx"
      goto __pyx_L3_continue;

#line 3097 "dsproc3/core.pyx"
      goto __pyx_L19;

#line 3097 "dsproc3/core.pyx"
    }

#line 3097 "dsproc3/core.pyx"
    __pyx_L19:;

    /* "dsproc3/core.pyx":3099
 *         if status ==  0: continue
 *         # Create output datasets
 *         if not dsproc_create_output_datasets(): break             # <<<<<<<<<<<<<<
 *         # Run the user's data processing function
 *         if trans_data:
 */

#line 3099 "dsproc3/core.pyx"
    __pyx_t_6 = (!dsproc_create_output_datasets());

#line 3099 "dsproc3/core.pyx"
    if (__pyx_t_6) {

#line 3099 "dsproc3/core.pyx"
      goto __pyx_L4_break;

#line 3099 "dsproc3/core.pyx"
      goto __pyx_L20;

#line 3099 "dsproc3/core.pyx"
    }

#line 3099 "dsproc3/core.pyx"
    __pyx_L20:;

    /* "dsproc3/core.pyx":3101
 *         if not dsproc_create_output_datasets(): break
 *         # Run the user's data processing function
 *         if trans_data:             # <<<<<<<<<<<<<<
 *             status = _run_process_data_hook(
 *                 interval_begin, interval_end, trans_data)
 */

#line 3101 "dsproc3/core.pyx"
    __pyx_t_6 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_trans_data)); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3101 "dsproc3/core.pyx"
    if (__pyx_t_6) {

      /* "dsproc3/core.pyx":3102
 *         # Run the user's data processing function
 *         if trans_data:
 *             status = _run_process_data_hook(             # <<<<<<<<<<<<<<
 *                 interval_begin, interval_end, trans_data)
 *         else:
 */

#line 3102 "dsproc3/core.pyx"
      __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s_77); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3102 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_1);

      /* "dsproc3/core.pyx":3103
 *         if trans_data:
 *             status = _run_process_data_hook(
 *                 interval_begin, interval_end, trans_data)             # <<<<<<<<<<<<<<
 *         else:
 *             status = _run_process_data_hook(
 */

#line 3103 "dsproc3/core.pyx"
      __pyx_t_3 = __Pyx_PyInt_to_py_time_t(__pyx_v_interval_begin); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3103 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 3103 "dsproc3/core.pyx"
      __pyx_t_4 = __Pyx_PyInt_to_py_time_t(__pyx_v_interval_end); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3103 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 3103 "dsproc3/core.pyx"
      __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3103 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 3103 "dsproc3/core.pyx"
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);

#line 3103 "dsproc3/core.pyx"
      __Pyx_GIVEREF(__pyx_t_3);

#line 3103 "dsproc3/core.pyx"
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);

#line 3103 "dsproc3/core.pyx"
      __Pyx_GIVEREF(__pyx_t_4);

#line 3103 "dsproc3/core.pyx"
      __Pyx_INCREF(((PyObject *)__pyx_v_trans_data));

#line 3103 "dsproc3/core.pyx"
      PyTuple_SET_ITEM(__pyx_t_5, 2, ((PyObject *)__pyx_v_trans_data));

#line 3103 "dsproc3/core.pyx"
      __Pyx_GIVEREF(((PyObject *)__pyx_v_trans_data));

#line 3103 "dsproc3/core.pyx"
      __pyx_t_3 = 0;

#line 3103 "dsproc3/core.pyx"
      __pyx_t_4 = 0;

#line 3103 "dsproc3/core.pyx"
      __pyx_t_4 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3103 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 3103 "dsproc3/core.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 3103 "dsproc3/core.pyx"
      __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;

#line 3103 "dsproc3/core.pyx"
      __pyx_t_2 = __Pyx_PyInt_AsInt(__pyx_t_4); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3103 "dsproc3/core.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 3103 "dsproc3/core.pyx"
      __pyx_v_status = __pyx_t_2;

#line 3103 "dsproc3/core.pyx"
      goto __pyx_L21;

#line 3103 "dsproc3/core.pyx"
    }

#line 3103 "dsproc3/core.pyx"
    /*else*/ {

      /* "dsproc3/core.pyx":3105
 *                 interval_begin, interval_end, trans_data)
 *         else:
 *             status = _run_process_data_hook(             # <<<<<<<<<<<<<<
 *                 interval_begin, interval_end, ret_data)
 *         if status == -1: break
 */

#line 3105 "dsproc3/core.pyx"
      __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s_77); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3105 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_4);

      /* "dsproc3/core.pyx":3106
 *         else:
 *             status = _run_process_data_hook(
 *                 interval_begin, interval_end, ret_data)             # <<<<<<<<<<<<<<
 *         if status == -1: break
 *         if status ==  0: continue
 */

#line 3106 "dsproc3/core.pyx"
      __pyx_t_5 = __Pyx_PyInt_to_py_time_t(__pyx_v_interval_begin); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3106 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 3106 "dsproc3/core.pyx"
      __pyx_t_1 = __Pyx_PyInt_to_py_time_t(__pyx_v_interval_end); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3106 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 3106 "dsproc3/core.pyx"
      __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3106 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 3106 "dsproc3/core.pyx"
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);

#line 3106 "dsproc3/core.pyx"
      __Pyx_GIVEREF(__pyx_t_5);

#line 3106 "dsproc3/core.pyx"
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);

#line 3106 "dsproc3/core.pyx"
      __Pyx_GIVEREF(__pyx_t_1);

#line 3106 "dsproc3/core.pyx"
      __Pyx_INCREF(((PyObject *)__pyx_v_ret_data));

#line 3106 "dsproc3/core.pyx"
      PyTuple_SET_ITEM(__pyx_t_3, 2, ((PyObject *)__pyx_v_ret_data));

#line 3106 "dsproc3/core.pyx"
      __Pyx_GIVEREF(((PyObject *)__pyx_v_ret_data));

#line 3106 "dsproc3/core.pyx"
      __pyx_t_5 = 0;

#line 3106 "dsproc3/core.pyx"
      __pyx_t_1 = 0;

#line 3106 "dsproc3/core.pyx"
      __pyx_t_1 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3106 "dsproc3/core.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 3106 "dsproc3/core.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 3106 "dsproc3/core.pyx"
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 3106 "dsproc3/core.pyx"
      __pyx_t_2 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3106 "dsproc3/core.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 3106 "dsproc3/core.pyx"
      __pyx_v_status = __pyx_t_2;

#line 3106 "dsproc3/core.pyx"
    }

#line 3106 "dsproc3/core.pyx"
    __pyx_L21:;

    /* "dsproc3/core.pyx":3107
 *             status = _run_process_data_hook(
 *                 interval_begin, interval_end, ret_data)
 *         if status == -1: break             # <<<<<<<<<<<<<<
 *         if status ==  0: continue
 *         # Store all output datasets
 */

#line 3107 "dsproc3/core.pyx"
    __pyx_t_6 = (__pyx_v_status == -1);

#line 3107 "dsproc3/core.pyx"
    if (__pyx_t_6) {

#line 3107 "dsproc3/core.pyx"
      goto __pyx_L4_break;

#line 3107 "dsproc3/core.pyx"
      goto __pyx_L22;

#line 3107 "dsproc3/core.pyx"
    }

#line 3107 "dsproc3/core.pyx"
    __pyx_L22:;

    /* "dsproc3/core.pyx":3108
 *                 interval_begin, interval_end, ret_data)
 *         if status == -1: break
 *         if status ==  0: continue             # <<<<<<<<<<<<<<
 *         # Store all output datasets
 *         if not dsproc_store_output_datasets(): break
 */

#line 3108 "dsproc3/core.pyx"
    __pyx_t_6 = (__pyx_v_status == 0);

#line 3108 "dsproc3/core.pyx"
    if (__pyx_t_6) {

#line 3108 "dsproc3/core.pyx"
      goto __pyx_L3_continue;

#line 3108 "dsproc3/core.pyx"
      goto __pyx_L23;

#line 3108 "dsproc3/core.pyx"
    }

#line 3108 "dsproc3/core.pyx"
    __pyx_L23:;

    /* "dsproc3/core.pyx":3110
 *         if status ==  0: continue
 *         # Store all output datasets
 *         if not dsproc_store_output_datasets(): break             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 3110 "dsproc3/core.pyx"
    __pyx_t_6 = (!dsproc_store_output_datasets());

#line 3110 "dsproc3/core.pyx"
    if (__pyx_t_6) {

#line 3110 "dsproc3/core.pyx"
      goto __pyx_L4_break;

#line 3110 "dsproc3/core.pyx"
      goto __pyx_L24;

#line 3110 "dsproc3/core.pyx"
    }

#line 3110 "dsproc3/core.pyx"
    __pyx_L24:;

#line 3110 "dsproc3/core.pyx"
    __pyx_L3_continue:;

#line 3110 "dsproc3/core.pyx"
  }

#line 3110 "dsproc3/core.pyx"
  __pyx_L4_break:;

#line 3110 "dsproc3/core.pyx"


#line 3110 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 3110 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 3110 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 3110 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 3110 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 3110 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 3110 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 3110 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core._vap_main_loop", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3110 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 3110 "dsproc3/core.pyx"
  __pyx_L0:;

#line 3110 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_ret_data);

#line 3110 "dsproc3/core.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_trans_data);

#line 3110 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 3110 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 3110 "dsproc3/core.pyx"
  return __pyx_r;

#line 3110 "dsproc3/core.pyx"
}

#line 3110 "dsproc3/core.pyx"


#line 3110 "dsproc3/core.pyx"
/* Python wrapper */

#line 3110 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_229main(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 3110 "dsproc3/core.pyx"
static char __pyx_doc_7dsproc3_4core_228main[] = "main(argv, proc_model, proc_version, proc_names=None)\nDatasystem Process Main Function.\n    \n    @param  argc         - command line argument count\n    @param  argv         - command line argument vector\n    @param  proc_model   - processing model to use\n    @param  proc_version - process version\n    @param  nproc_names  - number of valid process names\n    @param  proc_names   - list of valid process names\n    \n    @return\n      - suggested program exit value\n        (0 = successful, 1 = failure)\n\n    ";
static PyMethodDef __pyx_mdef_7dsproc3_4core_229main = 
#line 3110 "dsproc3/core.pyx"
{__Pyx_NAMESTR("main"), (PyCFunction)__pyx_pw_7dsproc3_4core_229main, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_7dsproc3_4core_228main)};

#line 3110 "dsproc3/core.pyx"
static PyObject *__pyx_pw_7dsproc3_4core_229main(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_argv = 0
#line 3110 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_proc_model = 0
#line 3110 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_proc_version = 0
#line 3110 "dsproc3/core.pyx"
;
  PyObject *__pyx_v_proc_names = 0
#line 3110 "dsproc3/core.pyx"
;

#line 3110 "dsproc3/core.pyx"
  PyObject *__pyx_r = 0;

#line 3110 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 3110 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("main (wrapper)", 0);

#line 3110 "dsproc3/core.pyx"
  {

#line 3110 "dsproc3/core.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__argv,&__pyx_n_s__proc_model,&__pyx_n_s__proc_version,&__pyx_n_s__proc_names,0};

#line 3110 "dsproc3/core.pyx"
    PyObject* values[4] = {0,0,0,0};

    /* "dsproc3/core.pyx":3113
 * 
 * 
 * def main(argv, proc_model, proc_version, proc_names=None):             # <<<<<<<<<<<<<<
 *     """Datasystem Process Main Function.
 * 
 */

#line 3113 "dsproc3/core.pyx"
    values[3] = ((PyObject *)Py_None);

#line 3113 "dsproc3/core.pyx"
    if (unlikely(__pyx_kwds)) {

#line 3113 "dsproc3/core.pyx"
      Py_ssize_t kw_args;

#line 3113 "dsproc3/core.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 3113 "dsproc3/core.pyx"
      switch (pos_args) {
        case  4: 
#line 3113 "dsproc3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 3113 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 3113 "dsproc3/core.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 3113 "dsproc3/core.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 3113 "dsproc3/core.pyx"
        case  0: break;
        default: 
#line 3113 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 3113 "dsproc3/core.pyx"
      }

#line 3113 "dsproc3/core.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 3113 "dsproc3/core.pyx"
      switch (pos_args) {

#line 3113 "dsproc3/core.pyx"
        case  0:

#line 3113 "dsproc3/core.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__argv)) != 0)) kw_args--;
        else 
#line 3113 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 3113 "dsproc3/core.pyx"
        case  1:

#line 3113 "dsproc3/core.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__proc_model)) != 0)) kw_args--;

#line 3113 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("main", 0, 3, 4, 1); 
#line 3113 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 3113; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 3113 "dsproc3/core.pyx"
        }

#line 3113 "dsproc3/core.pyx"
        case  2:

#line 3113 "dsproc3/core.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__proc_version)) != 0)) kw_args--;

#line 3113 "dsproc3/core.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("main", 0, 3, 4, 2); 
#line 3113 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 3113; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 3113 "dsproc3/core.pyx"
        }

#line 3113 "dsproc3/core.pyx"
        case  3:

#line 3113 "dsproc3/core.pyx"
        if (kw_args > 0) {

#line 3113 "dsproc3/core.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__proc_names);

#line 3113 "dsproc3/core.pyx"
          if (value) { values[3] = value; kw_args--; }

#line 3113 "dsproc3/core.pyx"
        }

#line 3113 "dsproc3/core.pyx"
      }

#line 3113 "dsproc3/core.pyx"
      if (unlikely(kw_args > 0)) {

#line 3113 "dsproc3/core.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "main") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3113; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 3113 "dsproc3/core.pyx"
      }

#line 3113 "dsproc3/core.pyx"
    } else {

#line 3113 "dsproc3/core.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: 
#line 3113 "dsproc3/core.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 3113 "dsproc3/core.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 3113 "dsproc3/core.pyx"
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 3113 "dsproc3/core.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 3113 "dsproc3/core.pyx"
        break;
        default: 
#line 3113 "dsproc3/core.pyx"
goto __pyx_L5_argtuple_error;

#line 3113 "dsproc3/core.pyx"
      }

#line 3113 "dsproc3/core.pyx"
    }

#line 3113 "dsproc3/core.pyx"
    __pyx_v_argv = values[0];

#line 3113 "dsproc3/core.pyx"
    __pyx_v_proc_model = values[1];

#line 3113 "dsproc3/core.pyx"
    __pyx_v_proc_version = values[2];

#line 3113 "dsproc3/core.pyx"
    __pyx_v_proc_names = values[3];

#line 3113 "dsproc3/core.pyx"
  }

#line 3113 "dsproc3/core.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 3113 "dsproc3/core.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("main", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 3113 "dsproc3/core.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 3113; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 3113 "dsproc3/core.pyx"
  __pyx_L3_error:;

#line 3113 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.main", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3113 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 3113 "dsproc3/core.pyx"
  return NULL;

#line 3113 "dsproc3/core.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 3113 "dsproc3/core.pyx"
__pyx_pf_7dsproc3_4core_228main(__pyx_self, __pyx_v_argv, __pyx_v_proc_model, __pyx_v_proc_version, __pyx_v_proc_names);

#line 3113 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 3113 "dsproc3/core.pyx"
  return __pyx_r;

#line 3113 "dsproc3/core.pyx"
}

#line 3113 "dsproc3/core.pyx"


#line 3113 "dsproc3/core.pyx"
static PyObject *__pyx_pf_7dsproc3_4core_228main(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_argv, PyObject *__pyx_v_proc_model, PyObject *__pyx_v_proc_version, PyObject *__pyx_v_proc_names) {
  int __pyx_v_exit_value
#line 3113 "dsproc3/core.pyx"
;

#line 3113 "dsproc3/core.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 3113 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("main", 0);

#line 3113 "dsproc3/core.pyx"
  __Pyx_INCREF(__pyx_v_proc_names);

  /* "dsproc3/core.pyx":3138
 *     # memory allocation error, etc...).
 *     #****************************************************************
 *     if proc_names is None:             # <<<<<<<<<<<<<<
 *         proc_names = []
 *     initialize(argv, proc_model, proc_version, proc_names)
 */

#line 3138 "dsproc3/core.pyx"
  __pyx_t_1 = (__pyx_v_proc_names == Py_None);

#line 3138 "dsproc3/core.pyx"
  if (__pyx_t_1) {

    /* "dsproc3/core.pyx":3139
 *     #****************************************************************
 *     if proc_names is None:
 *         proc_names = []             # <<<<<<<<<<<<<<
 *     initialize(argv, proc_model, proc_version, proc_names)
 * 
 */

#line 3139 "dsproc3/core.pyx"
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3139 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 3139 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_v_proc_names);

#line 3139 "dsproc3/core.pyx"
    __pyx_v_proc_names = ((PyObject *)__pyx_t_2);

#line 3139 "dsproc3/core.pyx"
    __pyx_t_2 = 0;

#line 3139 "dsproc3/core.pyx"
    goto __pyx_L3;

#line 3139 "dsproc3/core.pyx"
  }

#line 3139 "dsproc3/core.pyx"
  __pyx_L3:;

  /* "dsproc3/core.pyx":3140
 *     if proc_names is None:
 *         proc_names = []
 *     initialize(argv, proc_model, proc_version, proc_names)             # <<<<<<<<<<<<<<
 * 
 *     #****************************************************************
 */

#line 3140 "dsproc3/core.pyx"
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__initialize); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3140 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 3140 "dsproc3/core.pyx"
  __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3140 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 3140 "dsproc3/core.pyx"
  __Pyx_INCREF(__pyx_v_argv);

#line 3140 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_argv);

#line 3140 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_v_argv);

#line 3140 "dsproc3/core.pyx"
  __Pyx_INCREF(__pyx_v_proc_model);

#line 3140 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_proc_model);

#line 3140 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_v_proc_model);

#line 3140 "dsproc3/core.pyx"
  __Pyx_INCREF(__pyx_v_proc_version);

#line 3140 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_proc_version);

#line 3140 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_v_proc_version);

#line 3140 "dsproc3/core.pyx"
  __Pyx_INCREF(__pyx_v_proc_names);

#line 3140 "dsproc3/core.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_proc_names);

#line 3140 "dsproc3/core.pyx"
  __Pyx_GIVEREF(__pyx_v_proc_names);

#line 3140 "dsproc3/core.pyx"
  __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3140 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 3140 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 3140 "dsproc3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 3140 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "dsproc3/core.pyx":3154
 *     # to the user defined data structure.
 *     #****************************************************************
 *     if not _run_init_process_hook():             # <<<<<<<<<<<<<<
 *         exit_value = finish()
 *         sys.exit(exit_value)
 */

#line 3154 "dsproc3/core.pyx"
  __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s_78); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3154 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 3154 "dsproc3/core.pyx"
  __pyx_t_3 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3154 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 3154 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 3154 "dsproc3/core.pyx"
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3154 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 3154 "dsproc3/core.pyx"
  __pyx_t_5 = (!__pyx_t_1);

#line 3154 "dsproc3/core.pyx"
  if (__pyx_t_5) {

    /* "dsproc3/core.pyx":3155
 *     #****************************************************************
 *     if not _run_init_process_hook():
 *         exit_value = finish()             # <<<<<<<<<<<<<<
 *         sys.exit(exit_value)
 * 
 */

#line 3155 "dsproc3/core.pyx"
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__finish); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3155 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 3155 "dsproc3/core.pyx"
    __pyx_t_4 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3155 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 3155 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 3155 "dsproc3/core.pyx"
    __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_t_4); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3155 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 3155 "dsproc3/core.pyx"
    __pyx_v_exit_value = __pyx_t_6;

    /* "dsproc3/core.pyx":3156
 *     if not _run_init_process_hook():
 *         exit_value = finish()
 *         sys.exit(exit_value)             # <<<<<<<<<<<<<<
 * 
 *     #****************************************************************
 */

#line 3156 "dsproc3/core.pyx"
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__sys); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3156 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 3156 "dsproc3/core.pyx"
    __pyx_t_3 = PyObject_GetAttr(__pyx_t_4, __pyx_n_s__exit); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3156 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 3156 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 3156 "dsproc3/core.pyx"
    __pyx_t_4 = PyInt_FromLong(__pyx_v_exit_value); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3156 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 3156 "dsproc3/core.pyx"
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3156 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 3156 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);

#line 3156 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_t_4);

#line 3156 "dsproc3/core.pyx"
    __pyx_t_4 = 0;

#line 3156 "dsproc3/core.pyx"
    __pyx_t_4 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3156 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 3156 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 3156 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 3156 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 3156 "dsproc3/core.pyx"
    goto __pyx_L4;

#line 3156 "dsproc3/core.pyx"
  }

#line 3156 "dsproc3/core.pyx"
  __pyx_L4:;

  /* "dsproc3/core.pyx":3161
 *     # Disconnect from the database until it is needed again
 *     #****************************************************************
 *     dsproc_db_disconnect()             # <<<<<<<<<<<<<<
 * 
 *     #****************************************************************
 */

#line 3161 "dsproc3/core.pyx"
  dsproc_db_disconnect();

  /* "dsproc3/core.pyx":3166
 *     # Call the appropriate data processing loop
 *     #****************************************************************
 *     if proc_model == PM_INGEST:             # <<<<<<<<<<<<<<
 *         _ingest_main_loop()
 *     else:
 */

#line 3166 "dsproc3/core.pyx"
  __pyx_t_4 = PyInt_FromLong(PM_INGEST); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3166 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 3166 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_proc_model, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3166 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 3166 "dsproc3/core.pyx"
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3166 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 3166 "dsproc3/core.pyx"
  if (__pyx_t_5) {

    /* "dsproc3/core.pyx":3167
 *     #****************************************************************
 *     if proc_model == PM_INGEST:
 *         _ingest_main_loop()             # <<<<<<<<<<<<<<
 *     else:
 *         _vap_main_loop(proc_model)
 */

#line 3167 "dsproc3/core.pyx"
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s___ingest_main_loop); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3167 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 3167 "dsproc3/core.pyx"
    __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3167 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 3167 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 3167 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 3167 "dsproc3/core.pyx"
    goto __pyx_L5;

#line 3167 "dsproc3/core.pyx"
  }

#line 3167 "dsproc3/core.pyx"
  /*else*/ {

    /* "dsproc3/core.pyx":3169
 *         _ingest_main_loop()
 *     else:
 *         _vap_main_loop(proc_model)             # <<<<<<<<<<<<<<
 * 
 *     #****************************************************************
 */

#line 3169 "dsproc3/core.pyx"
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s___vap_main_loop); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3169 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 3169 "dsproc3/core.pyx"
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3169 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 3169 "dsproc3/core.pyx"
    __Pyx_INCREF(__pyx_v_proc_model);

#line 3169 "dsproc3/core.pyx"
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_proc_model);

#line 3169 "dsproc3/core.pyx"
    __Pyx_GIVEREF(__pyx_v_proc_model);

#line 3169 "dsproc3/core.pyx"
    __pyx_t_3 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3169 "dsproc3/core.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 3169 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 3169 "dsproc3/core.pyx"
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;

#line 3169 "dsproc3/core.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 3169 "dsproc3/core.pyx"
  }

#line 3169 "dsproc3/core.pyx"
  __pyx_L5:;

  /* "dsproc3/core.pyx":3183
 *     # to the user defined data structure.
 *     #****************************************************************
 *     _run_finish_process_hook()             # <<<<<<<<<<<<<<
 * 
 *     #****************************************************************
 */

#line 3183 "dsproc3/core.pyx"
  __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s_79); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3183 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 3183 "dsproc3/core.pyx"
  __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3183 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 3183 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 3183 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "dsproc3/core.pyx":3192
 *     # messages, and cleanup all allocated memory.
 *     #****************************************************************
 *     exit_value = finish()             # <<<<<<<<<<<<<<
 * 
 *     return exit_value
 */

#line 3192 "dsproc3/core.pyx"
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__finish); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3192 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 3192 "dsproc3/core.pyx"
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3192 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 3192 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 3192 "dsproc3/core.pyx"
  __pyx_t_6 = __Pyx_PyInt_AsInt(__pyx_t_3); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3192 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 3192 "dsproc3/core.pyx"
  __pyx_v_exit_value = __pyx_t_6;

  /* "dsproc3/core.pyx":3194
 *     exit_value = finish()
 * 
 *     return exit_value             # <<<<<<<<<<<<<<
 */

#line 3194 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 3194 "dsproc3/core.pyx"
  __pyx_t_3 = PyInt_FromLong(__pyx_v_exit_value); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3194 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 3194 "dsproc3/core.pyx"
  __pyx_r = __pyx_t_3;

#line 3194 "dsproc3/core.pyx"
  __pyx_t_3 = 0;

#line 3194 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 3194 "dsproc3/core.pyx"


#line 3194 "dsproc3/core.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 3194 "dsproc3/core.pyx"
  goto __pyx_L0;

#line 3194 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 3194 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 3194 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 3194 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 3194 "dsproc3/core.pyx"
  __Pyx_AddTraceback("dsproc3.core.main", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 3194 "dsproc3/core.pyx"
  __pyx_r = NULL;

#line 3194 "dsproc3/core.pyx"
  __pyx_L0:;

#line 3194 "dsproc3/core.pyx"
  __Pyx_XDECREF(__pyx_v_proc_names);

#line 3194 "dsproc3/core.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 3194 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 3194 "dsproc3/core.pyx"
  return __pyx_r;

#line 3194 "dsproc3/core.pyx"
}

#line 3194 "dsproc3/core.pyx"


#line 3194 "dsproc3/core.pyx"
/* Python wrapper */

#line 3194 "dsproc3/core.pyx"
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/

#line 3194 "dsproc3/core.pyx"
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {

#line 3194 "dsproc3/core.pyx"
  int __pyx_r;

#line 3194 "dsproc3/core.pyx"
  __Pyx_RefNannyDeclarations

#line 3194 "dsproc3/core.pyx"
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = 
#line 3194 "dsproc3/core.pyx"
__pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

#line 3194 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 3194 "dsproc3/core.pyx"
  return __pyx_r;

#line 3194 "dsproc3/core.pyx"
}

/* "numpy.pxd":194
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

#line 194 "numpy.pxd"


#line 194 "numpy.pxd"
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape
#line 194 "numpy.pxd"
;
  int __pyx_v_i
#line 194 "numpy.pxd"
;
  int __pyx_v_ndim
#line 194 "numpy.pxd"
;
  int __pyx_v_endian_detector
#line 194 "numpy.pxd"
;
  int __pyx_v_little_endian
#line 194 "numpy.pxd"
;
  int __pyx_v_t
#line 194 "numpy.pxd"
;
  char *__pyx_v_f
#line 194 "numpy.pxd"
;
  PyArray_Descr *__pyx_v_descr = 0
#line 194 "numpy.pxd"
;
  int __pyx_v_offset
#line 194 "numpy.pxd"
;
  int __pyx_v_hasfields
#line 194 "numpy.pxd"
;

#line 194 "numpy.pxd"
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 194 "numpy.pxd"
  __Pyx_RefNannySetupContext("__getbuffer__", 0);

#line 194 "numpy.pxd"
  if (__pyx_v_info != NULL) {

#line 194 "numpy.pxd"
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);

#line 194 "numpy.pxd"
    __Pyx_GIVEREF(__pyx_v_info->obj);

#line 194 "numpy.pxd"
  }

  /* "numpy.pxd":200
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */

#line 200 "numpy.pxd"
  __pyx_t_1 = (__pyx_v_info == NULL);

#line 200 "numpy.pxd"
  if (__pyx_t_1) {

#line 200 "numpy.pxd"
    __pyx_r = 0;

#line 200 "numpy.pxd"
    goto __pyx_L0;

#line 200 "numpy.pxd"
    goto __pyx_L3;

#line 200 "numpy.pxd"
  }

#line 200 "numpy.pxd"
  __pyx_L3:;

  /* "numpy.pxd":203
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */

#line 203 "numpy.pxd"
  __pyx_v_endian_detector = 1;

  /* "numpy.pxd":204
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */

#line 204 "numpy.pxd"
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "numpy.pxd":206
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */

#line 206 "numpy.pxd"
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "numpy.pxd":208
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */

#line 208 "numpy.pxd"
  __pyx_t_1 = ((sizeof(npy_intp)) != (sizeof(Py_ssize_t)));

#line 208 "numpy.pxd"
  if (__pyx_t_1) {

    /* "numpy.pxd":209
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */

#line 209 "numpy.pxd"
    __pyx_v_copy_shape = 1;

#line 209 "numpy.pxd"
    goto __pyx_L4;

#line 209 "numpy.pxd"
  }

#line 209 "numpy.pxd"
  /*else*/ {

    /* "numpy.pxd":211
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */

#line 211 "numpy.pxd"
    __pyx_v_copy_shape = 0;

#line 211 "numpy.pxd"
  }

#line 211 "numpy.pxd"
  __pyx_L4:;

  /* "numpy.pxd":213
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */

#line 213 "numpy.pxd"
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS);

#line 213 "numpy.pxd"
  if (__pyx_t_1) {

    /* "numpy.pxd":214
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */

#line 214 "numpy.pxd"
    __pyx_t_2 = (!PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS));

#line 214 "numpy.pxd"
    __pyx_t_3 = __pyx_t_2;

#line 214 "numpy.pxd"
  } else {

#line 214 "numpy.pxd"
    __pyx_t_3 = __pyx_t_1;

#line 214 "numpy.pxd"
  }

#line 214 "numpy.pxd"
  if (__pyx_t_3) {

    /* "numpy.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */

#line 215 "numpy.pxd"
    __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_81), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 215 "numpy.pxd"
    __Pyx_GOTREF(__pyx_t_4);

#line 215 "numpy.pxd"
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);

#line 215 "numpy.pxd"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 215 "numpy.pxd"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 215 "numpy.pxd"
    goto __pyx_L5;

#line 215 "numpy.pxd"
  }

#line 215 "numpy.pxd"
  __pyx_L5:;

  /* "numpy.pxd":217
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */

#line 217 "numpy.pxd"
  __pyx_t_3 = ((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS);

#line 217 "numpy.pxd"
  if (__pyx_t_3) {

    /* "numpy.pxd":218
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */

#line 218 "numpy.pxd"
    __pyx_t_1 = (!PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS));

#line 218 "numpy.pxd"
    __pyx_t_2 = __pyx_t_1;

#line 218 "numpy.pxd"
  } else {

#line 218 "numpy.pxd"
    __pyx_t_2 = __pyx_t_3;

#line 218 "numpy.pxd"
  }

#line 218 "numpy.pxd"
  if (__pyx_t_2) {

    /* "numpy.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */

#line 219 "numpy.pxd"
    __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_83), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 219 "numpy.pxd"
    __Pyx_GOTREF(__pyx_t_4);

#line 219 "numpy.pxd"
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);

#line 219 "numpy.pxd"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 219 "numpy.pxd"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 219 "numpy.pxd"
    goto __pyx_L6;

#line 219 "numpy.pxd"
  }

#line 219 "numpy.pxd"
  __pyx_L6:;

  /* "numpy.pxd":221
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */

#line 221 "numpy.pxd"
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "numpy.pxd":222
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */

#line 222 "numpy.pxd"
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "numpy.pxd":223
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */

#line 223 "numpy.pxd"
  if (__pyx_v_copy_shape) {

    /* "numpy.pxd":226
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */

#line 226 "numpy.pxd"
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "numpy.pxd":227
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */

#line 227 "numpy.pxd"
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "numpy.pxd":228
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */

#line 228 "numpy.pxd"
    __pyx_t_5 = __pyx_v_ndim;

#line 228 "numpy.pxd"
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {

#line 228 "numpy.pxd"
      __pyx_v_i = __pyx_t_6;

      /* "numpy.pxd":229
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */

#line 229 "numpy.pxd"
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "numpy.pxd":230
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */

#line 230 "numpy.pxd"
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);

#line 230 "numpy.pxd"
    }

#line 230 "numpy.pxd"
    goto __pyx_L7;

#line 230 "numpy.pxd"
  }

#line 230 "numpy.pxd"
  /*else*/ {

    /* "numpy.pxd":232
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */

#line 232 "numpy.pxd"
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "numpy.pxd":233
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */

#line 233 "numpy.pxd"
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));

#line 233 "numpy.pxd"
  }

#line 233 "numpy.pxd"
  __pyx_L7:;

  /* "numpy.pxd":234
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */

#line 234 "numpy.pxd"
  __pyx_v_info->suboffsets = NULL;

  /* "numpy.pxd":235
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */

#line 235 "numpy.pxd"
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "numpy.pxd":236
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */

#line 236 "numpy.pxd"
  __pyx_v_info->readonly = (!PyArray_ISWRITEABLE(__pyx_v_self));

  /* "numpy.pxd":239
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef list stack
 */

#line 239 "numpy.pxd"
  __pyx_v_f = NULL;

  /* "numpy.pxd":240
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef list stack
 *             cdef int offset
 */

#line 240 "numpy.pxd"
  __pyx_t_4 = ((PyObject *)__pyx_v_self->descr);

#line 240 "numpy.pxd"
  __Pyx_INCREF(__pyx_t_4);

#line 240 "numpy.pxd"
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_4);

#line 240 "numpy.pxd"
  __pyx_t_4 = 0;

  /* "numpy.pxd":244
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */

#line 244 "numpy.pxd"
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "numpy.pxd":246
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */

#line 246 "numpy.pxd"
  __pyx_t_2 = (!__pyx_v_hasfields);

#line 246 "numpy.pxd"
  if (__pyx_t_2) {

#line 246 "numpy.pxd"
    __pyx_t_3 = (!__pyx_v_copy_shape);

#line 246 "numpy.pxd"
    __pyx_t_1 = __pyx_t_3;

#line 246 "numpy.pxd"
  } else {

#line 246 "numpy.pxd"
    __pyx_t_1 = __pyx_t_2;

#line 246 "numpy.pxd"
  }

#line 246 "numpy.pxd"
  if (__pyx_t_1) {

    /* "numpy.pxd":248
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */

#line 248 "numpy.pxd"
    __Pyx_INCREF(Py_None);

#line 248 "numpy.pxd"
    __Pyx_GIVEREF(Py_None);

#line 248 "numpy.pxd"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 248 "numpy.pxd"
    __Pyx_DECREF(__pyx_v_info->obj);

#line 248 "numpy.pxd"
    __pyx_v_info->obj = Py_None;

#line 248 "numpy.pxd"
    goto __pyx_L10;

#line 248 "numpy.pxd"
  }

#line 248 "numpy.pxd"
  /*else*/ {

    /* "numpy.pxd":251
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */

#line 251 "numpy.pxd"
    __Pyx_INCREF(((PyObject *)__pyx_v_self));

#line 251 "numpy.pxd"
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));

#line 251 "numpy.pxd"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 251 "numpy.pxd"
    __Pyx_DECREF(__pyx_v_info->obj);

#line 251 "numpy.pxd"
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

#line 251 "numpy.pxd"
  }

#line 251 "numpy.pxd"
  __pyx_L10:;

  /* "numpy.pxd":253
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */

#line 253 "numpy.pxd"
  __pyx_t_1 = (!__pyx_v_hasfields);

#line 253 "numpy.pxd"
  if (__pyx_t_1) {

    /* "numpy.pxd":254
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */

#line 254 "numpy.pxd"
    __pyx_t_5 = __pyx_v_descr->type_num;

#line 254 "numpy.pxd"
    __pyx_v_t = __pyx_t_5;

    /* "numpy.pxd":255
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */

#line 255 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_descr->byteorder == '>');

#line 255 "numpy.pxd"
    if (__pyx_t_1) {

#line 255 "numpy.pxd"
      __pyx_t_2 = __pyx_v_little_endian;

#line 255 "numpy.pxd"
    } else {

#line 255 "numpy.pxd"
      __pyx_t_2 = __pyx_t_1;

#line 255 "numpy.pxd"
    }

#line 255 "numpy.pxd"
    if (!__pyx_t_2) {

      /* "numpy.pxd":256
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */

#line 256 "numpy.pxd"
      __pyx_t_1 = (__pyx_v_descr->byteorder == '<');

#line 256 "numpy.pxd"
      if (__pyx_t_1) {

#line 256 "numpy.pxd"
        __pyx_t_3 = (!__pyx_v_little_endian);

#line 256 "numpy.pxd"
        __pyx_t_7 = __pyx_t_3;

#line 256 "numpy.pxd"
      } else {

#line 256 "numpy.pxd"
        __pyx_t_7 = __pyx_t_1;

#line 256 "numpy.pxd"
      }

#line 256 "numpy.pxd"
      __pyx_t_1 = __pyx_t_7;

#line 256 "numpy.pxd"
    } else {

#line 256 "numpy.pxd"
      __pyx_t_1 = __pyx_t_2;

#line 256 "numpy.pxd"
    }

#line 256 "numpy.pxd"
    if (__pyx_t_1) {

      /* "numpy.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */

#line 257 "numpy.pxd"
      __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_85), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 257 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 257 "numpy.pxd"
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);

#line 257 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 257 "numpy.pxd"
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 257 "numpy.pxd"
      goto __pyx_L12;

#line 257 "numpy.pxd"
    }

#line 257 "numpy.pxd"
    __pyx_L12:;

    /* "numpy.pxd":258
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */

#line 258 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_BYTE);

#line 258 "numpy.pxd"
    if (__pyx_t_1) {

#line 258 "numpy.pxd"
      __pyx_v_f = __pyx_k__b;

#line 258 "numpy.pxd"
      goto __pyx_L13;

#line 258 "numpy.pxd"
    }

    /* "numpy.pxd":259
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */

#line 259 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_UBYTE);

#line 259 "numpy.pxd"
    if (__pyx_t_1) {

#line 259 "numpy.pxd"
      __pyx_v_f = __pyx_k__B;

#line 259 "numpy.pxd"
      goto __pyx_L13;

#line 259 "numpy.pxd"
    }

    /* "numpy.pxd":260
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */

#line 260 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_SHORT);

#line 260 "numpy.pxd"
    if (__pyx_t_1) {

#line 260 "numpy.pxd"
      __pyx_v_f = __pyx_k__h;

#line 260 "numpy.pxd"
      goto __pyx_L13;

#line 260 "numpy.pxd"
    }

    /* "numpy.pxd":261
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */

#line 261 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_USHORT);

#line 261 "numpy.pxd"
    if (__pyx_t_1) {

#line 261 "numpy.pxd"
      __pyx_v_f = __pyx_k__H;

#line 261 "numpy.pxd"
      goto __pyx_L13;

#line 261 "numpy.pxd"
    }

    /* "numpy.pxd":262
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */

#line 262 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_INT);

#line 262 "numpy.pxd"
    if (__pyx_t_1) {

#line 262 "numpy.pxd"
      __pyx_v_f = __pyx_k__i;

#line 262 "numpy.pxd"
      goto __pyx_L13;

#line 262 "numpy.pxd"
    }

    /* "numpy.pxd":263
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */

#line 263 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_UINT);

#line 263 "numpy.pxd"
    if (__pyx_t_1) {

#line 263 "numpy.pxd"
      __pyx_v_f = __pyx_k__I;

#line 263 "numpy.pxd"
      goto __pyx_L13;

#line 263 "numpy.pxd"
    }

    /* "numpy.pxd":264
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */

#line 264 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_LONG);

#line 264 "numpy.pxd"
    if (__pyx_t_1) {

#line 264 "numpy.pxd"
      __pyx_v_f = __pyx_k__l;

#line 264 "numpy.pxd"
      goto __pyx_L13;

#line 264 "numpy.pxd"
    }

    /* "numpy.pxd":265
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */

#line 265 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_ULONG);

#line 265 "numpy.pxd"
    if (__pyx_t_1) {

#line 265 "numpy.pxd"
      __pyx_v_f = __pyx_k__L;

#line 265 "numpy.pxd"
      goto __pyx_L13;

#line 265 "numpy.pxd"
    }

    /* "numpy.pxd":266
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */

#line 266 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_LONGLONG);

#line 266 "numpy.pxd"
    if (__pyx_t_1) {

#line 266 "numpy.pxd"
      __pyx_v_f = __pyx_k__q;

#line 266 "numpy.pxd"
      goto __pyx_L13;

#line 266 "numpy.pxd"
    }

    /* "numpy.pxd":267
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */

#line 267 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_ULONGLONG);

#line 267 "numpy.pxd"
    if (__pyx_t_1) {

#line 267 "numpy.pxd"
      __pyx_v_f = __pyx_k__Q;

#line 267 "numpy.pxd"
      goto __pyx_L13;

#line 267 "numpy.pxd"
    }

    /* "numpy.pxd":268
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */

#line 268 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_FLOAT);

#line 268 "numpy.pxd"
    if (__pyx_t_1) {

#line 268 "numpy.pxd"
      __pyx_v_f = __pyx_k__f;

#line 268 "numpy.pxd"
      goto __pyx_L13;

#line 268 "numpy.pxd"
    }

    /* "numpy.pxd":269
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */

#line 269 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_DOUBLE);

#line 269 "numpy.pxd"
    if (__pyx_t_1) {

#line 269 "numpy.pxd"
      __pyx_v_f = __pyx_k__d;

#line 269 "numpy.pxd"
      goto __pyx_L13;

#line 269 "numpy.pxd"
    }

    /* "numpy.pxd":270
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */

#line 270 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_LONGDOUBLE);

#line 270 "numpy.pxd"
    if (__pyx_t_1) {

#line 270 "numpy.pxd"
      __pyx_v_f = __pyx_k__g;

#line 270 "numpy.pxd"
      goto __pyx_L13;

#line 270 "numpy.pxd"
    }

    /* "numpy.pxd":271
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */

#line 271 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_CFLOAT);

#line 271 "numpy.pxd"
    if (__pyx_t_1) {

#line 271 "numpy.pxd"
      __pyx_v_f = __pyx_k__Zf;

#line 271 "numpy.pxd"
      goto __pyx_L13;

#line 271 "numpy.pxd"
    }

    /* "numpy.pxd":272
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */

#line 272 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_CDOUBLE);

#line 272 "numpy.pxd"
    if (__pyx_t_1) {

#line 272 "numpy.pxd"
      __pyx_v_f = __pyx_k__Zd;

#line 272 "numpy.pxd"
      goto __pyx_L13;

#line 272 "numpy.pxd"
    }

    /* "numpy.pxd":273
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */

#line 273 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_CLONGDOUBLE);

#line 273 "numpy.pxd"
    if (__pyx_t_1) {

#line 273 "numpy.pxd"
      __pyx_v_f = __pyx_k__Zg;

#line 273 "numpy.pxd"
      goto __pyx_L13;

#line 273 "numpy.pxd"
    }

    /* "numpy.pxd":274
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */

#line 274 "numpy.pxd"
    __pyx_t_1 = (__pyx_v_t == NPY_OBJECT);

#line 274 "numpy.pxd"
    if (__pyx_t_1) {

#line 274 "numpy.pxd"
      __pyx_v_f = __pyx_k__O;

#line 274 "numpy.pxd"
      goto __pyx_L13;

#line 274 "numpy.pxd"
    }

#line 274 "numpy.pxd"
    /*else*/ {

      /* "numpy.pxd":276
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */

#line 276 "numpy.pxd"
      __pyx_t_4 = PyInt_FromLong(__pyx_v_t); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 276 "numpy.pxd"
      __pyx_t_8 = PyNumber_Remainder(((PyObject *)__pyx_kp_u_86), __pyx_t_4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "numpy.pxd"
      __Pyx_GOTREF(((PyObject *)__pyx_t_8));

#line 276 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 276 "numpy.pxd"
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 276 "numpy.pxd"
      PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_8));

#line 276 "numpy.pxd"
      __Pyx_GIVEREF(((PyObject *)__pyx_t_8));

#line 276 "numpy.pxd"
      __pyx_t_8 = 0;

#line 276 "numpy.pxd"
      __pyx_t_8 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_8);

#line 276 "numpy.pxd"
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;

#line 276 "numpy.pxd"
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);

#line 276 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 276 "numpy.pxd"
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "numpy.pxd"
    }

#line 276 "numpy.pxd"
    __pyx_L13:;

    /* "numpy.pxd":277
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */

#line 277 "numpy.pxd"
    __pyx_v_info->format = __pyx_v_f;

    /* "numpy.pxd":278
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */

#line 278 "numpy.pxd"
    __pyx_r = 0;

#line 278 "numpy.pxd"
    goto __pyx_L0;

#line 278 "numpy.pxd"
    goto __pyx_L11;

#line 278 "numpy.pxd"
  }

#line 278 "numpy.pxd"
  /*else*/ {

    /* "numpy.pxd":280
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */

#line 280 "numpy.pxd"
    __pyx_v_info->format = ((char *)malloc(255));

    /* "numpy.pxd":281
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */

#line 281 "numpy.pxd"
    (__pyx_v_info->format[0]) = '^';

    /* "numpy.pxd":282
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */

#line 282 "numpy.pxd"
    __pyx_v_offset = 0;

    /* "numpy.pxd":285
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)             # <<<<<<<<<<<<<<
 *                 f[0] = c'\0' # Terminate format string
 * 
 */

#line 285 "numpy.pxd"
    __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 255), (&__pyx_v_offset)); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 285 "numpy.pxd"
    __pyx_v_f = __pyx_t_9;

    /* "numpy.pxd":286
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */

#line 286 "numpy.pxd"
    (__pyx_v_f[0]) = '\x00';

#line 286 "numpy.pxd"
  }

#line 286 "numpy.pxd"
  __pyx_L11:;

#line 286 "numpy.pxd"


#line 286 "numpy.pxd"
  __pyx_r = 0;

#line 286 "numpy.pxd"
  goto __pyx_L0;

#line 286 "numpy.pxd"
  __pyx_L1_error:;

#line 286 "numpy.pxd"
  __Pyx_XDECREF(__pyx_t_4);

#line 286 "numpy.pxd"
  __Pyx_XDECREF(__pyx_t_8);

#line 286 "numpy.pxd"
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 286 "numpy.pxd"
  __pyx_r = -1;

#line 286 "numpy.pxd"
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {

#line 286 "numpy.pxd"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 286 "numpy.pxd"
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;

#line 286 "numpy.pxd"
  }

#line 286 "numpy.pxd"
  goto __pyx_L2;

#line 286 "numpy.pxd"
  __pyx_L0:;

#line 286 "numpy.pxd"
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {

#line 286 "numpy.pxd"
    __Pyx_GOTREF(Py_None);

#line 286 "numpy.pxd"
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;

#line 286 "numpy.pxd"
  }

#line 286 "numpy.pxd"
  __pyx_L2:;

#line 286 "numpy.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);

#line 286 "numpy.pxd"
  __Pyx_RefNannyFinishContext();

#line 286 "numpy.pxd"
  return __pyx_r;

#line 286 "numpy.pxd"
}

#line 286 "numpy.pxd"


#line 286 "numpy.pxd"
/* Python wrapper */

#line 286 "numpy.pxd"
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/

#line 286 "numpy.pxd"
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {

#line 286 "numpy.pxd"
  __Pyx_RefNannyDeclarations

#line 286 "numpy.pxd"
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);

#line 286 "numpy.pxd"
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

#line 286 "numpy.pxd"
  __Pyx_RefNannyFinishContext();

#line 286 "numpy.pxd"
}

/* "numpy.pxd":288
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

#line 288 "numpy.pxd"


#line 288 "numpy.pxd"
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;

#line 288 "numpy.pxd"
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "numpy.pxd":289
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */

#line 289 "numpy.pxd"
  __pyx_t_1 = PyArray_HASFIELDS(__pyx_v_self);

#line 289 "numpy.pxd"
  if (__pyx_t_1) {

    /* "numpy.pxd":290
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */

#line 290 "numpy.pxd"
    free(__pyx_v_info->format);

#line 290 "numpy.pxd"
    goto __pyx_L3;

#line 290 "numpy.pxd"
  }

#line 290 "numpy.pxd"
  __pyx_L3:;

  /* "numpy.pxd":291
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */

#line 291 "numpy.pxd"
  __pyx_t_1 = ((sizeof(npy_intp)) != (sizeof(Py_ssize_t)));

#line 291 "numpy.pxd"
  if (__pyx_t_1) {

    /* "numpy.pxd":292
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */

#line 292 "numpy.pxd"
    free(__pyx_v_info->strides);

#line 292 "numpy.pxd"
    goto __pyx_L4;

#line 292 "numpy.pxd"
  }

#line 292 "numpy.pxd"
  __pyx_L4:;

#line 292 "numpy.pxd"


#line 292 "numpy.pxd"
  __Pyx_RefNannyFinishContext();

#line 292 "numpy.pxd"
}

/* "numpy.pxd":768
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

#line 768 "numpy.pxd"


#line 768 "numpy.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {

#line 768 "numpy.pxd"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 768 "numpy.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "numpy.pxd":769
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */

#line 769 "numpy.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 769 "numpy.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 769 "numpy.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 769 "numpy.pxd"
  __pyx_r = __pyx_t_1;

#line 769 "numpy.pxd"
  __pyx_t_1 = 0;

#line 769 "numpy.pxd"
  goto __pyx_L0;

#line 769 "numpy.pxd"


#line 769 "numpy.pxd"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 769 "numpy.pxd"
  goto __pyx_L0;

#line 769 "numpy.pxd"
  __pyx_L1_error:;

#line 769 "numpy.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 769 "numpy.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 769 "numpy.pxd"
  __pyx_r = 0;

#line 769 "numpy.pxd"
  __pyx_L0:;

#line 769 "numpy.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 769 "numpy.pxd"
  __Pyx_RefNannyFinishContext();

#line 769 "numpy.pxd"
  return __pyx_r;

#line 769 "numpy.pxd"
}

/* "numpy.pxd":771
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

#line 771 "numpy.pxd"


#line 771 "numpy.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {

#line 771 "numpy.pxd"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 771 "numpy.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "numpy.pxd":772
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */

#line 772 "numpy.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 772 "numpy.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 772 "numpy.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 772 "numpy.pxd"
  __pyx_r = __pyx_t_1;

#line 772 "numpy.pxd"
  __pyx_t_1 = 0;

#line 772 "numpy.pxd"
  goto __pyx_L0;

#line 772 "numpy.pxd"


#line 772 "numpy.pxd"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 772 "numpy.pxd"
  goto __pyx_L0;

#line 772 "numpy.pxd"
  __pyx_L1_error:;

#line 772 "numpy.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 772 "numpy.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 772 "numpy.pxd"
  __pyx_r = 0;

#line 772 "numpy.pxd"
  __pyx_L0:;

#line 772 "numpy.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 772 "numpy.pxd"
  __Pyx_RefNannyFinishContext();

#line 772 "numpy.pxd"
  return __pyx_r;

#line 772 "numpy.pxd"
}

/* "numpy.pxd":774
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

#line 774 "numpy.pxd"


#line 774 "numpy.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {

#line 774 "numpy.pxd"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 774 "numpy.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "numpy.pxd":775
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */

#line 775 "numpy.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 775 "numpy.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 775 "numpy.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 775 "numpy.pxd"
  __pyx_r = __pyx_t_1;

#line 775 "numpy.pxd"
  __pyx_t_1 = 0;

#line 775 "numpy.pxd"
  goto __pyx_L0;

#line 775 "numpy.pxd"


#line 775 "numpy.pxd"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 775 "numpy.pxd"
  goto __pyx_L0;

#line 775 "numpy.pxd"
  __pyx_L1_error:;

#line 775 "numpy.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 775 "numpy.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 775 "numpy.pxd"
  __pyx_r = 0;

#line 775 "numpy.pxd"
  __pyx_L0:;

#line 775 "numpy.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 775 "numpy.pxd"
  __Pyx_RefNannyFinishContext();

#line 775 "numpy.pxd"
  return __pyx_r;

#line 775 "numpy.pxd"
}

/* "numpy.pxd":777
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

#line 777 "numpy.pxd"


#line 777 "numpy.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {

#line 777 "numpy.pxd"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 777 "numpy.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "numpy.pxd":778
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */

#line 778 "numpy.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 778 "numpy.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 778 "numpy.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 778 "numpy.pxd"
  __pyx_r = __pyx_t_1;

#line 778 "numpy.pxd"
  __pyx_t_1 = 0;

#line 778 "numpy.pxd"
  goto __pyx_L0;

#line 778 "numpy.pxd"


#line 778 "numpy.pxd"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 778 "numpy.pxd"
  goto __pyx_L0;

#line 778 "numpy.pxd"
  __pyx_L1_error:;

#line 778 "numpy.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 778 "numpy.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 778 "numpy.pxd"
  __pyx_r = 0;

#line 778 "numpy.pxd"
  __pyx_L0:;

#line 778 "numpy.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 778 "numpy.pxd"
  __Pyx_RefNannyFinishContext();

#line 778 "numpy.pxd"
  return __pyx_r;

#line 778 "numpy.pxd"
}

/* "numpy.pxd":780
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

#line 780 "numpy.pxd"


#line 780 "numpy.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {

#line 780 "numpy.pxd"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 780 "numpy.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "numpy.pxd":781
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */

#line 781 "numpy.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 781 "numpy.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 781 "numpy.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 781 "numpy.pxd"
  __pyx_r = __pyx_t_1;

#line 781 "numpy.pxd"
  __pyx_t_1 = 0;

#line 781 "numpy.pxd"
  goto __pyx_L0;

#line 781 "numpy.pxd"


#line 781 "numpy.pxd"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 781 "numpy.pxd"
  goto __pyx_L0;

#line 781 "numpy.pxd"
  __pyx_L1_error:;

#line 781 "numpy.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 781 "numpy.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 781 "numpy.pxd"
  __pyx_r = 0;

#line 781 "numpy.pxd"
  __pyx_L0:;

#line 781 "numpy.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 781 "numpy.pxd"
  __Pyx_RefNannyFinishContext();

#line 781 "numpy.pxd"
  return __pyx_r;

#line 781 "numpy.pxd"
}

/* "numpy.pxd":783
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

#line 783 "numpy.pxd"


#line 783 "numpy.pxd"
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0
#line 783 "numpy.pxd"
;
  int __pyx_v_endian_detector
#line 783 "numpy.pxd"
;
  int __pyx_v_little_endian
#line 783 "numpy.pxd"
;
  PyObject *__pyx_v_fields = 0
#line 783 "numpy.pxd"
;
  PyObject *__pyx_v_childname = NULL
#line 783 "numpy.pxd"
;
  PyObject *__pyx_v_new_offset = NULL
#line 783 "numpy.pxd"
;
  PyObject *__pyx_v_t = NULL
#line 783 "numpy.pxd"
;

#line 783 "numpy.pxd"
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  long __pyx_t_11;
  char *__pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 783 "numpy.pxd"
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "numpy.pxd":790
 *     cdef int delta_offset
 *     cdef tuple i
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */

#line 790 "numpy.pxd"
  __pyx_v_endian_detector = 1;

  /* "numpy.pxd":791
 *     cdef tuple i
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */

#line 791 "numpy.pxd"
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "numpy.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */

#line 794 "numpy.pxd"
  if (unlikely(((PyObject *)__pyx_v_descr->names) == Py_None)) {

#line 794 "numpy.pxd"
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");

#line 794 "numpy.pxd"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 794 "numpy.pxd"
  }

#line 794 "numpy.pxd"
  __pyx_t_1 = ((PyObject *)__pyx_v_descr->names); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;

#line 794 "numpy.pxd"
  for (;;) {

#line 794 "numpy.pxd"
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

#line 794 "numpy.pxd"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 794 "numpy.pxd"
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 794 "numpy.pxd"
    #else

#line 794 "numpy.pxd"
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 794 "numpy.pxd"
    #endif

#line 794 "numpy.pxd"
    __Pyx_XDECREF(__pyx_v_childname);

#line 794 "numpy.pxd"
    __pyx_v_childname = __pyx_t_3;

#line 794 "numpy.pxd"
    __pyx_t_3 = 0;

    /* "numpy.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */

#line 795 "numpy.pxd"
    __pyx_t_3 = PyObject_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (!__pyx_t_3) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 795 "numpy.pxd"
    __Pyx_GOTREF(__pyx_t_3);

#line 795 "numpy.pxd"
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected tuple, got %.200s", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 795 "numpy.pxd"
    __Pyx_XDECREF(((PyObject *)__pyx_v_fields));

#line 795 "numpy.pxd"
    __pyx_v_fields = ((PyObject*)__pyx_t_3);

#line 795 "numpy.pxd"
    __pyx_t_3 = 0;

    /* "numpy.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:
 */

#line 796 "numpy.pxd"
    if (likely(PyTuple_CheckExact(((PyObject *)__pyx_v_fields)))) {

#line 796 "numpy.pxd"
      PyObject* sequence = ((PyObject *)__pyx_v_fields);

#line 796 "numpy.pxd"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 796 "numpy.pxd"
      Py_ssize_t size = Py_SIZE(sequence);

#line 796 "numpy.pxd"
      #else

#line 796 "numpy.pxd"
      Py_ssize_t size = PySequence_Size(sequence);

#line 796 "numpy.pxd"
      #endif

#line 796 "numpy.pxd"
      if (unlikely(size != 2)) {

#line 796 "numpy.pxd"
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);

#line 796 "numpy.pxd"
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 796 "numpy.pxd"
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "numpy.pxd"
      }

#line 796 "numpy.pxd"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 796 "numpy.pxd"
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 

#line 796 "numpy.pxd"
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 

#line 796 "numpy.pxd"
      __Pyx_INCREF(__pyx_t_3);

#line 796 "numpy.pxd"
      __Pyx_INCREF(__pyx_t_4);

#line 796 "numpy.pxd"
      #else

#line 796 "numpy.pxd"
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 796 "numpy.pxd"
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 796 "numpy.pxd"
      #endif

#line 796 "numpy.pxd"
    } else if (1) {

#line 796 "numpy.pxd"
      __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "numpy.pxd"
    } else

#line 796 "numpy.pxd"
    {

#line 796 "numpy.pxd"
      Py_ssize_t index = -1;

#line 796 "numpy.pxd"
      __pyx_t_5 = PyObject_GetIter(((PyObject *)__pyx_v_fields)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_5);

#line 796 "numpy.pxd"
      __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) 
#line 796 "numpy.pxd"
goto __pyx_L5_unpacking_failed;

#line 796 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) 
#line 796 "numpy.pxd"
goto __pyx_L5_unpacking_failed;

#line 796 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 796 "numpy.pxd"
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "numpy.pxd"
      __pyx_t_6 = NULL;

#line 796 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 796 "numpy.pxd"
      goto __pyx_L6_unpacking_done;

#line 796 "numpy.pxd"
      __pyx_L5_unpacking_failed:;

#line 796 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 796 "numpy.pxd"
      __pyx_t_6 = NULL;

#line 796 "numpy.pxd"
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 796 "numpy.pxd"
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "numpy.pxd"
      __pyx_L6_unpacking_done:;

#line 796 "numpy.pxd"
    }

#line 796 "numpy.pxd"
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "numpy.pxd"
    __Pyx_XDECREF(((PyObject *)__pyx_v_child));

#line 796 "numpy.pxd"
    __pyx_v_child = ((PyArray_Descr *)__pyx_t_3);

#line 796 "numpy.pxd"
    __pyx_t_3 = 0;

#line 796 "numpy.pxd"
    __Pyx_XDECREF(__pyx_v_new_offset);

#line 796 "numpy.pxd"
    __pyx_v_new_offset = __pyx_t_4;

#line 796 "numpy.pxd"
    __pyx_t_4 = 0;

    /* "numpy.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */

#line 798 "numpy.pxd"
    __pyx_t_4 = PyInt_FromLong((__pyx_v_end - __pyx_v_f)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 798 "numpy.pxd"
    __Pyx_GOTREF(__pyx_t_4);

#line 798 "numpy.pxd"
    __pyx_t_3 = PyInt_FromLong((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 798 "numpy.pxd"
    __Pyx_GOTREF(__pyx_t_3);

#line 798 "numpy.pxd"
    __pyx_t_5 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 798 "numpy.pxd"
    __Pyx_GOTREF(__pyx_t_5);

#line 798 "numpy.pxd"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 798 "numpy.pxd"
    __pyx_t_3 = PyNumber_Subtract(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 798 "numpy.pxd"
    __Pyx_GOTREF(__pyx_t_3);

#line 798 "numpy.pxd"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 798 "numpy.pxd"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 798 "numpy.pxd"
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_int_15, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 798 "numpy.pxd"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 798 "numpy.pxd"
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 798 "numpy.pxd"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 798 "numpy.pxd"
    if (__pyx_t_7) {

      /* "numpy.pxd":799
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */

#line 799 "numpy.pxd"
      __pyx_t_5 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_88), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 799 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_5);

#line 799 "numpy.pxd"
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);

#line 799 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 799 "numpy.pxd"
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 799 "numpy.pxd"
      goto __pyx_L7;

#line 799 "numpy.pxd"
    }

#line 799 "numpy.pxd"
    __pyx_L7:;

    /* "numpy.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */

#line 801 "numpy.pxd"
    __pyx_t_7 = (__pyx_v_child->byteorder == '>');

#line 801 "numpy.pxd"
    if (__pyx_t_7) {

#line 801 "numpy.pxd"
      __pyx_t_8 = __pyx_v_little_endian;

#line 801 "numpy.pxd"
    } else {

#line 801 "numpy.pxd"
      __pyx_t_8 = __pyx_t_7;

#line 801 "numpy.pxd"
    }

#line 801 "numpy.pxd"
    if (!__pyx_t_8) {

      /* "numpy.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */

#line 802 "numpy.pxd"
      __pyx_t_7 = (__pyx_v_child->byteorder == '<');

#line 802 "numpy.pxd"
      if (__pyx_t_7) {

#line 802 "numpy.pxd"
        __pyx_t_9 = (!__pyx_v_little_endian);

#line 802 "numpy.pxd"
        __pyx_t_10 = __pyx_t_9;

#line 802 "numpy.pxd"
      } else {

#line 802 "numpy.pxd"
        __pyx_t_10 = __pyx_t_7;

#line 802 "numpy.pxd"
      }

#line 802 "numpy.pxd"
      __pyx_t_7 = __pyx_t_10;

#line 802 "numpy.pxd"
    } else {

#line 802 "numpy.pxd"
      __pyx_t_7 = __pyx_t_8;

#line 802 "numpy.pxd"
    }

#line 802 "numpy.pxd"
    if (__pyx_t_7) {

      /* "numpy.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */

#line 803 "numpy.pxd"
      __pyx_t_5 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_89), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 803 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_5);

#line 803 "numpy.pxd"
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);

#line 803 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 803 "numpy.pxd"
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 803 "numpy.pxd"
      goto __pyx_L8;

#line 803 "numpy.pxd"
    }

#line 803 "numpy.pxd"
    __pyx_L8:;

    /* "numpy.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */

#line 813 "numpy.pxd"
    while (1) {

#line 813 "numpy.pxd"
      __pyx_t_5 = PyInt_FromLong((__pyx_v_offset[0])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 813 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_5);

#line 813 "numpy.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 813 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 813 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 813 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 813 "numpy.pxd"
      if (!__pyx_t_7) break;

      /* "numpy.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */

#line 814 "numpy.pxd"
      (__pyx_v_f[0]) = 120;

      /* "numpy.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */

#line 815 "numpy.pxd"
      __pyx_v_f = (__pyx_v_f + 1);

      /* "numpy.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */

#line 816 "numpy.pxd"
      __pyx_t_11 = 0;

#line 816 "numpy.pxd"
      (__pyx_v_offset[__pyx_t_11]) = ((__pyx_v_offset[__pyx_t_11]) + 1);

#line 816 "numpy.pxd"
    }

    /* "numpy.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */

#line 818 "numpy.pxd"
    __pyx_t_11 = 0;

#line 818 "numpy.pxd"
    (__pyx_v_offset[__pyx_t_11]) = ((__pyx_v_offset[__pyx_t_11]) + __pyx_v_child->elsize);

    /* "numpy.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */

#line 820 "numpy.pxd"
    __pyx_t_7 = (!PyDataType_HASFIELDS(__pyx_v_child));

#line 820 "numpy.pxd"
    if (__pyx_t_7) {

      /* "numpy.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */

#line 821 "numpy.pxd"
      __pyx_t_3 = PyInt_FromLong(__pyx_v_child->type_num); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 821 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 821 "numpy.pxd"
      __Pyx_XDECREF(__pyx_v_t);

#line 821 "numpy.pxd"
      __pyx_v_t = __pyx_t_3;

#line 821 "numpy.pxd"
      __pyx_t_3 = 0;

      /* "numpy.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */

#line 822 "numpy.pxd"
      __pyx_t_7 = ((__pyx_v_end - __pyx_v_f) < 5);

#line 822 "numpy.pxd"
      if (__pyx_t_7) {

        /* "numpy.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */

#line 823 "numpy.pxd"
        __pyx_t_3 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_91), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 823 "numpy.pxd"
        __Pyx_GOTREF(__pyx_t_3);

#line 823 "numpy.pxd"
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 823 "numpy.pxd"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 823 "numpy.pxd"
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 823 "numpy.pxd"
        goto __pyx_L12;

#line 823 "numpy.pxd"
      }

#line 823 "numpy.pxd"
      __pyx_L12:;

      /* "numpy.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */

#line 826 "numpy.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_BYTE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 826 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 826 "numpy.pxd"
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 826 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 826 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 826 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 826 "numpy.pxd"
      if (__pyx_t_7) {

#line 826 "numpy.pxd"
        (__pyx_v_f[0]) = 98;

#line 826 "numpy.pxd"
        goto __pyx_L13;

#line 826 "numpy.pxd"
      }

      /* "numpy.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */

#line 827 "numpy.pxd"
      __pyx_t_5 = PyInt_FromLong(NPY_UBYTE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 827 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_5);

#line 827 "numpy.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 827 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 827 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 827 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 827 "numpy.pxd"
      if (__pyx_t_7) {

#line 827 "numpy.pxd"
        (__pyx_v_f[0]) = 66;

#line 827 "numpy.pxd"
        goto __pyx_L13;

#line 827 "numpy.pxd"
      }

      /* "numpy.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */

#line 828 "numpy.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_SHORT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 828 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 828 "numpy.pxd"
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 828 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 828 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 828 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 828 "numpy.pxd"
      if (__pyx_t_7) {

#line 828 "numpy.pxd"
        (__pyx_v_f[0]) = 104;

#line 828 "numpy.pxd"
        goto __pyx_L13;

#line 828 "numpy.pxd"
      }

      /* "numpy.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */

#line 829 "numpy.pxd"
      __pyx_t_5 = PyInt_FromLong(NPY_USHORT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 829 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_5);

#line 829 "numpy.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 829 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 829 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 829 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 829 "numpy.pxd"
      if (__pyx_t_7) {

#line 829 "numpy.pxd"
        (__pyx_v_f[0]) = 72;

#line 829 "numpy.pxd"
        goto __pyx_L13;

#line 829 "numpy.pxd"
      }

      /* "numpy.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */

#line 830 "numpy.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_INT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 830 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 830 "numpy.pxd"
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 830 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 830 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 830 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 830 "numpy.pxd"
      if (__pyx_t_7) {

#line 830 "numpy.pxd"
        (__pyx_v_f[0]) = 105;

#line 830 "numpy.pxd"
        goto __pyx_L13;

#line 830 "numpy.pxd"
      }

      /* "numpy.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */

#line 831 "numpy.pxd"
      __pyx_t_5 = PyInt_FromLong(NPY_UINT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 831 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_5);

#line 831 "numpy.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 831 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 831 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 831 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 831 "numpy.pxd"
      if (__pyx_t_7) {

#line 831 "numpy.pxd"
        (__pyx_v_f[0]) = 73;

#line 831 "numpy.pxd"
        goto __pyx_L13;

#line 831 "numpy.pxd"
      }

      /* "numpy.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */

#line 832 "numpy.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_LONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 832 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 832 "numpy.pxd"
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 832 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 832 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 832 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 832 "numpy.pxd"
      if (__pyx_t_7) {

#line 832 "numpy.pxd"
        (__pyx_v_f[0]) = 108;

#line 832 "numpy.pxd"
        goto __pyx_L13;

#line 832 "numpy.pxd"
      }

      /* "numpy.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */

#line 833 "numpy.pxd"
      __pyx_t_5 = PyInt_FromLong(NPY_ULONG); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 833 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_5);

#line 833 "numpy.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 833 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 833 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 833 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 833 "numpy.pxd"
      if (__pyx_t_7) {

#line 833 "numpy.pxd"
        (__pyx_v_f[0]) = 76;

#line 833 "numpy.pxd"
        goto __pyx_L13;

#line 833 "numpy.pxd"
      }

      /* "numpy.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */

#line 834 "numpy.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_LONGLONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 834 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 834 "numpy.pxd"
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 834 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 834 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 834 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 834 "numpy.pxd"
      if (__pyx_t_7) {

#line 834 "numpy.pxd"
        (__pyx_v_f[0]) = 113;

#line 834 "numpy.pxd"
        goto __pyx_L13;

#line 834 "numpy.pxd"
      }

      /* "numpy.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */

#line 835 "numpy.pxd"
      __pyx_t_5 = PyInt_FromLong(NPY_ULONGLONG); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 835 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_5);

#line 835 "numpy.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 835 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 835 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 835 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 835 "numpy.pxd"
      if (__pyx_t_7) {

#line 835 "numpy.pxd"
        (__pyx_v_f[0]) = 81;

#line 835 "numpy.pxd"
        goto __pyx_L13;

#line 835 "numpy.pxd"
      }

      /* "numpy.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */

#line 836 "numpy.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_FLOAT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 836 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 836 "numpy.pxd"
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 836 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 836 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 836 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 836 "numpy.pxd"
      if (__pyx_t_7) {

#line 836 "numpy.pxd"
        (__pyx_v_f[0]) = 102;

#line 836 "numpy.pxd"
        goto __pyx_L13;

#line 836 "numpy.pxd"
      }

      /* "numpy.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */

#line 837 "numpy.pxd"
      __pyx_t_5 = PyInt_FromLong(NPY_DOUBLE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 837 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_5);

#line 837 "numpy.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 837 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 837 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 837 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 837 "numpy.pxd"
      if (__pyx_t_7) {

#line 837 "numpy.pxd"
        (__pyx_v_f[0]) = 100;

#line 837 "numpy.pxd"
        goto __pyx_L13;

#line 837 "numpy.pxd"
      }

      /* "numpy.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */

#line 838 "numpy.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 838 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 838 "numpy.pxd"
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 838 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 838 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 838 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 838 "numpy.pxd"
      if (__pyx_t_7) {

#line 838 "numpy.pxd"
        (__pyx_v_f[0]) = 103;

#line 838 "numpy.pxd"
        goto __pyx_L13;

#line 838 "numpy.pxd"
      }

      /* "numpy.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */

#line 839 "numpy.pxd"
      __pyx_t_5 = PyInt_FromLong(NPY_CFLOAT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 839 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_5);

#line 839 "numpy.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 839 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 839 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 839 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 839 "numpy.pxd"
      if (__pyx_t_7) {

#line 839 "numpy.pxd"
        (__pyx_v_f[0]) = 90;

#line 839 "numpy.pxd"
        (__pyx_v_f[1]) = 102;

#line 839 "numpy.pxd"
        __pyx_v_f = (__pyx_v_f + 1);

#line 839 "numpy.pxd"
        goto __pyx_L13;

#line 839 "numpy.pxd"
      }

      /* "numpy.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */

#line 840 "numpy.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_CDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 840 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 840 "numpy.pxd"
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 840 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 840 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 840 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 840 "numpy.pxd"
      if (__pyx_t_7) {

#line 840 "numpy.pxd"
        (__pyx_v_f[0]) = 90;

#line 840 "numpy.pxd"
        (__pyx_v_f[1]) = 100;

#line 840 "numpy.pxd"
        __pyx_v_f = (__pyx_v_f + 1);

#line 840 "numpy.pxd"
        goto __pyx_L13;

#line 840 "numpy.pxd"
      }

      /* "numpy.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */

#line 841 "numpy.pxd"
      __pyx_t_5 = PyInt_FromLong(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 841 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_5);

#line 841 "numpy.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 841 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 841 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 841 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 841 "numpy.pxd"
      if (__pyx_t_7) {

#line 841 "numpy.pxd"
        (__pyx_v_f[0]) = 90;

#line 841 "numpy.pxd"
        (__pyx_v_f[1]) = 103;

#line 841 "numpy.pxd"
        __pyx_v_f = (__pyx_v_f + 1);

#line 841 "numpy.pxd"
        goto __pyx_L13;

#line 841 "numpy.pxd"
      }

      /* "numpy.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */

#line 842 "numpy.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_OBJECT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 842 "numpy.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 842 "numpy.pxd"
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 842 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 842 "numpy.pxd"
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 842 "numpy.pxd"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 842 "numpy.pxd"
      if (__pyx_t_7) {

#line 842 "numpy.pxd"
        (__pyx_v_f[0]) = 79;

#line 842 "numpy.pxd"
        goto __pyx_L13;

#line 842 "numpy.pxd"
      }

#line 842 "numpy.pxd"
      /*else*/ {

        /* "numpy.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */

#line 844 "numpy.pxd"
        __pyx_t_5 = PyNumber_Remainder(((PyObject *)__pyx_kp_u_86), __pyx_v_t); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 844 "numpy.pxd"
        __Pyx_GOTREF(((PyObject *)__pyx_t_5));

#line 844 "numpy.pxd"
        __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 844 "numpy.pxd"
        __Pyx_GOTREF(__pyx_t_3);

#line 844 "numpy.pxd"
        PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_5));

#line 844 "numpy.pxd"
        __Pyx_GIVEREF(((PyObject *)__pyx_t_5));

#line 844 "numpy.pxd"
        __pyx_t_5 = 0;

#line 844 "numpy.pxd"
        __pyx_t_5 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 844 "numpy.pxd"
        __Pyx_GOTREF(__pyx_t_5);

#line 844 "numpy.pxd"
        __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;

#line 844 "numpy.pxd"
        __Pyx_Raise(__pyx_t_5, 0, 0, 0);

#line 844 "numpy.pxd"
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 844 "numpy.pxd"
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 844 "numpy.pxd"
      }

#line 844 "numpy.pxd"
      __pyx_L13:;

      /* "numpy.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */

#line 845 "numpy.pxd"
      __pyx_v_f = (__pyx_v_f + 1);

#line 845 "numpy.pxd"
      goto __pyx_L11;

#line 845 "numpy.pxd"
    }

#line 845 "numpy.pxd"
    /*else*/ {

      /* "numpy.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */

#line 849 "numpy.pxd"
      __pyx_t_12 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_12 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 849 "numpy.pxd"
      __pyx_v_f = __pyx_t_12;

#line 849 "numpy.pxd"
    }

#line 849 "numpy.pxd"
    __pyx_L11:;

#line 849 "numpy.pxd"
  }

#line 849 "numpy.pxd"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "numpy.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 850 "numpy.pxd"
  __pyx_r = __pyx_v_f;

#line 850 "numpy.pxd"
  goto __pyx_L0;

#line 850 "numpy.pxd"


#line 850 "numpy.pxd"
  __pyx_r = 0;

#line 850 "numpy.pxd"
  goto __pyx_L0;

#line 850 "numpy.pxd"
  __pyx_L1_error:;

#line 850 "numpy.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 850 "numpy.pxd"
  __Pyx_XDECREF(__pyx_t_3);

#line 850 "numpy.pxd"
  __Pyx_XDECREF(__pyx_t_4);

#line 850 "numpy.pxd"
  __Pyx_XDECREF(__pyx_t_5);

#line 850 "numpy.pxd"
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 850 "numpy.pxd"
  __pyx_r = NULL;

#line 850 "numpy.pxd"
  __pyx_L0:;

#line 850 "numpy.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_v_child);

#line 850 "numpy.pxd"
  __Pyx_XDECREF(__pyx_v_fields);

#line 850 "numpy.pxd"
  __Pyx_XDECREF(__pyx_v_childname);

#line 850 "numpy.pxd"
  __Pyx_XDECREF(__pyx_v_new_offset);

#line 850 "numpy.pxd"
  __Pyx_XDECREF(__pyx_v_t);

#line 850 "numpy.pxd"
  __Pyx_RefNannyFinishContext();

#line 850 "numpy.pxd"
  return __pyx_r;

#line 850 "numpy.pxd"
}

/* "numpy.pxd":965
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

#line 965 "numpy.pxd"


#line 965 "numpy.pxd"
static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr
#line 965 "numpy.pxd"
;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;

#line 965 "numpy.pxd"
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "numpy.pxd":967
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */

#line 967 "numpy.pxd"
  __pyx_t_1 = (__pyx_v_base == Py_None);

#line 967 "numpy.pxd"
  if (__pyx_t_1) {

    /* "numpy.pxd":968
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */

#line 968 "numpy.pxd"
    __pyx_v_baseptr = NULL;

#line 968 "numpy.pxd"
    goto __pyx_L3;

#line 968 "numpy.pxd"
  }

#line 968 "numpy.pxd"
  /*else*/ {

    /* "numpy.pxd":970
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */

#line 970 "numpy.pxd"
    Py_INCREF(__pyx_v_base);

    /* "numpy.pxd":971
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */

#line 971 "numpy.pxd"
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);

#line 971 "numpy.pxd"
  }

#line 971 "numpy.pxd"
  __pyx_L3:;

  /* "numpy.pxd":972
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */

#line 972 "numpy.pxd"
  Py_XDECREF(__pyx_v_arr->base);

  /* "numpy.pxd":973
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */

#line 973 "numpy.pxd"
  __pyx_v_arr->base = __pyx_v_baseptr;

#line 973 "numpy.pxd"


#line 973 "numpy.pxd"
  __Pyx_RefNannyFinishContext();

#line 973 "numpy.pxd"
}

/* "numpy.pxd":975
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

#line 975 "numpy.pxd"


#line 975 "numpy.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {

#line 975 "numpy.pxd"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;

#line 975 "numpy.pxd"
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "numpy.pxd":976
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */

#line 976 "numpy.pxd"
  __pyx_t_1 = (__pyx_v_arr->base == NULL);

#line 976 "numpy.pxd"
  if (__pyx_t_1) {

    /* "numpy.pxd":977
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */

#line 977 "numpy.pxd"
    __Pyx_XDECREF(__pyx_r);

#line 977 "numpy.pxd"
    __Pyx_INCREF(Py_None);

#line 977 "numpy.pxd"
    __pyx_r = Py_None;

#line 977 "numpy.pxd"
    goto __pyx_L0;

#line 977 "numpy.pxd"
    goto __pyx_L3;

#line 977 "numpy.pxd"
  }

#line 977 "numpy.pxd"
  /*else*/ {

    /* "numpy.pxd":979
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */

#line 979 "numpy.pxd"
    __Pyx_XDECREF(__pyx_r);

#line 979 "numpy.pxd"
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));

#line 979 "numpy.pxd"
    __pyx_r = ((PyObject *)__pyx_v_arr->base);

#line 979 "numpy.pxd"
    goto __pyx_L0;

#line 979 "numpy.pxd"
  }

#line 979 "numpy.pxd"
  __pyx_L3:;

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 979 "numpy.pxd"
  __pyx_L0:;

#line 979 "numpy.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 979 "numpy.pxd"
  __Pyx_RefNannyFinishContext();

#line 979 "numpy.pxd"
  return __pyx_r;

#line 979 "numpy.pxd"
}

#line 979 "numpy.pxd"
static struct __pyx_vtabstruct_7dsproc3_4core_PyVarTarget __pyx_vtable_7dsproc3_4core_PyVarTarget;

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyObject *__pyx_tp_new_7dsproc3_4core_PyVarTarget(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {

#line 979 "numpy.pxd"
  struct __pyx_obj_7dsproc3_4core_PyVarTarget *p;

#line 979 "numpy.pxd"
  PyObject *o = (*t->tp_alloc)(t, 0);

#line 979 "numpy.pxd"
  if (!o) return 0;

#line 979 "numpy.pxd"
  p = ((struct __pyx_obj_7dsproc3_4core_PyVarTarget *)o);

#line 979 "numpy.pxd"
  p->__pyx_vtab = __pyx_vtabptr_7dsproc3_4core_PyVarTarget;

#line 979 "numpy.pxd"
  if (__pyx_pw_7dsproc3_4core_11PyVarTarget_1__cinit__(o, __pyx_empty_tuple, NULL) < 0) {

#line 979 "numpy.pxd"
    Py_DECREF(o); o = 0;

#line 979 "numpy.pxd"
  }

#line 979 "numpy.pxd"
  return o;

#line 979 "numpy.pxd"
}

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static void __pyx_tp_dealloc_7dsproc3_4core_PyVarTarget(PyObject *o) {

#line 979 "numpy.pxd"
  {

#line 979 "numpy.pxd"
    PyObject *etype, *eval, *etb;

#line 979 "numpy.pxd"
    PyErr_Fetch(&etype, &eval, &etb);

#line 979 "numpy.pxd"
    ++Py_REFCNT(o);

#line 979 "numpy.pxd"
    __pyx_pw_7dsproc3_4core_11PyVarTarget_5__dealloc__(o);

#line 979 "numpy.pxd"
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);

#line 979 "numpy.pxd"
    --Py_REFCNT(o);

#line 979 "numpy.pxd"
    PyErr_Restore(etype, eval, etb);

#line 979 "numpy.pxd"
  }

#line 979 "numpy.pxd"
  (*Py_TYPE(o)->tp_free)(o);

#line 979 "numpy.pxd"
}

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyMethodDef __pyx_methods_7dsproc3_4core_PyVarTarget[] = {

#line 979 "numpy.pxd"
  {0, 0, 0, 0}

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyNumberMethods __pyx_tp_as_number_PyVarTarget = {

#line 979 "numpy.pxd"
  0, /*nb_add*/

#line 979 "numpy.pxd"
  0, /*nb_subtract*/

#line 979 "numpy.pxd"
  0, /*nb_multiply*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_divide*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_remainder*/

#line 979 "numpy.pxd"
  0, /*nb_divmod*/

#line 979 "numpy.pxd"
  0, /*nb_power*/

#line 979 "numpy.pxd"
  0, /*nb_negative*/

#line 979 "numpy.pxd"
  0, /*nb_positive*/

#line 979 "numpy.pxd"
  0, /*nb_absolute*/

#line 979 "numpy.pxd"
  0, /*nb_nonzero*/

#line 979 "numpy.pxd"
  0, /*nb_invert*/

#line 979 "numpy.pxd"
  0, /*nb_lshift*/

#line 979 "numpy.pxd"
  0, /*nb_rshift*/

#line 979 "numpy.pxd"
  0, /*nb_and*/

#line 979 "numpy.pxd"
  0, /*nb_xor*/

#line 979 "numpy.pxd"
  0, /*nb_or*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_coerce*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_int*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_long*/

#line 979 "numpy.pxd"
  #else

#line 979 "numpy.pxd"
  0, /*reserved*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_float*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_oct*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_hex*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_inplace_add*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_subtract*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_multiply*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*nb_inplace_divide*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*nb_inplace_remainder*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_power*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_lshift*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_rshift*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_and*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_xor*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_or*/

#line 979 "numpy.pxd"
  0, /*nb_floor_divide*/

#line 979 "numpy.pxd"
  0, /*nb_true_divide*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_floor_divide*/

#line 979 "numpy.pxd"
  0, /*nb_inplace_true_divide*/

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02050000

#line 979 "numpy.pxd"
  0, /*nb_index*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PySequenceMethods __pyx_tp_as_sequence_PyVarTarget = {

#line 979 "numpy.pxd"
  0, /*sq_length*/

#line 979 "numpy.pxd"
  0, /*sq_concat*/

#line 979 "numpy.pxd"
  0, /*sq_repeat*/

#line 979 "numpy.pxd"
  0, /*sq_item*/

#line 979 "numpy.pxd"
  0, /*sq_slice*/

#line 979 "numpy.pxd"
  0, /*sq_ass_item*/

#line 979 "numpy.pxd"
  0, /*sq_ass_slice*/

#line 979 "numpy.pxd"
  0, /*sq_contains*/

#line 979 "numpy.pxd"
  0, /*sq_inplace_concat*/

#line 979 "numpy.pxd"
  0, /*sq_inplace_repeat*/

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyMappingMethods __pyx_tp_as_mapping_PyVarTarget = {

#line 979 "numpy.pxd"
  0, /*mp_length*/

#line 979 "numpy.pxd"
  0, /*mp_subscript*/

#line 979 "numpy.pxd"
  0, /*mp_ass_subscript*/

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyBufferProcs __pyx_tp_as_buffer_PyVarTarget = {

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getreadbuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getwritebuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getsegcount*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*bf_getcharbuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02060000

#line 979 "numpy.pxd"
  0, /*bf_getbuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02060000

#line 979 "numpy.pxd"
  0, /*bf_releasebuffer*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyTypeObject __pyx_type_7dsproc3_4core_PyVarTarget = {

#line 979 "numpy.pxd"
  PyVarObject_HEAD_INIT(0, 0)

#line 979 "numpy.pxd"
  __Pyx_NAMESTR("dsproc3.core.PyVarTarget"), /*tp_name*/

#line 979 "numpy.pxd"
  sizeof(struct __pyx_obj_7dsproc3_4core_PyVarTarget), /*tp_basicsize*/

#line 979 "numpy.pxd"
  0, /*tp_itemsize*/

#line 979 "numpy.pxd"
  __pyx_tp_dealloc_7dsproc3_4core_PyVarTarget, /*tp_dealloc*/

#line 979 "numpy.pxd"
  0, /*tp_print*/

#line 979 "numpy.pxd"
  0, /*tp_getattr*/

#line 979 "numpy.pxd"
  0, /*tp_setattr*/

#line 979 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 979 "numpy.pxd"
  0, /*tp_compare*/

#line 979 "numpy.pxd"
  #else

#line 979 "numpy.pxd"
  0, /*reserved*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
  0, /*tp_repr*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_number_PyVarTarget, /*tp_as_number*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_sequence_PyVarTarget, /*tp_as_sequence*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_mapping_PyVarTarget, /*tp_as_mapping*/

#line 979 "numpy.pxd"
  0, /*tp_hash*/

#line 979 "numpy.pxd"
  0, /*tp_call*/

#line 979 "numpy.pxd"
  0, /*tp_str*/

#line 979 "numpy.pxd"
  0, /*tp_getattro*/

#line 979 "numpy.pxd"
  0, /*tp_setattro*/

#line 979 "numpy.pxd"
  &__pyx_tp_as_buffer_PyVarTarget, /*tp_as_buffer*/

#line 979 "numpy.pxd"
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/

#line 979 "numpy.pxd"
  __Pyx_DOCSTR("PyVarTarget()\nPyVarTarget"), /*tp_doc*/

#line 979 "numpy.pxd"
  0, /*tp_traverse*/

#line 979 "numpy.pxd"
  0, /*tp_clear*/

#line 979 "numpy.pxd"
  0, /*tp_richcompare*/

#line 979 "numpy.pxd"
  0, /*tp_weaklistoffset*/

#line 979 "numpy.pxd"
  0, /*tp_iter*/

#line 979 "numpy.pxd"
  0, /*tp_iternext*/

#line 979 "numpy.pxd"
  __pyx_methods_7dsproc3_4core_PyVarTarget, /*tp_methods*/

#line 979 "numpy.pxd"
  0, /*tp_members*/

#line 979 "numpy.pxd"
  0, /*tp_getset*/

#line 979 "numpy.pxd"
  0, /*tp_base*/

#line 979 "numpy.pxd"
  0, /*tp_dict*/

#line 979 "numpy.pxd"
  0, /*tp_descr_get*/

#line 979 "numpy.pxd"
  0, /*tp_descr_set*/

#line 979 "numpy.pxd"
  0, /*tp_dictoffset*/

#line 979 "numpy.pxd"
  __pyx_pw_7dsproc3_4core_11PyVarTarget_3__init__, /*tp_init*/

#line 979 "numpy.pxd"
  0, /*tp_alloc*/

#line 979 "numpy.pxd"
  __pyx_tp_new_7dsproc3_4core_PyVarTarget, /*tp_new*/

#line 979 "numpy.pxd"
  0, /*tp_free*/

#line 979 "numpy.pxd"
  0, /*tp_is_gc*/

#line 979 "numpy.pxd"
  0, /*tp_bases*/

#line 979 "numpy.pxd"
  0, /*tp_mro*/

#line 979 "numpy.pxd"
  0, /*tp_cache*/

#line 979 "numpy.pxd"
  0, /*tp_subclasses*/

#line 979 "numpy.pxd"
  0, /*tp_weaklist*/

#line 979 "numpy.pxd"
  0, /*tp_del*/

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX >= 0x02060000

#line 979 "numpy.pxd"
  0, /*tp_version_tag*/

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
static PyMethodDef __pyx_methods[] = {

#line 979 "numpy.pxd"
  {0, 0, 0, 0}

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"


#line 979 "numpy.pxd"
#if PY_MAJOR_VERSION >= 3

#line 979 "numpy.pxd"
static struct PyModuleDef __pyx_moduledef = {

#line 979 "numpy.pxd"
  #if PY_VERSION_HEX < 0x03020000

#line 979 "numpy.pxd"
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },

#line 979 "numpy.pxd"
  #else

#line 979 "numpy.pxd"
    PyModuleDef_HEAD_INIT,

#line 979 "numpy.pxd"
  #endif

#line 979 "numpy.pxd"
    __Pyx_NAMESTR("core"),

#line 979 "numpy.pxd"
    0, /* m_doc */

#line 979 "numpy.pxd"
    -1, /* m_size */

#line 979 "numpy.pxd"
    __pyx_methods /* m_methods */,

#line 979 "numpy.pxd"
    NULL, /* m_reload */

#line 979 "numpy.pxd"
    NULL, /* m_traverse */

#line 979 "numpy.pxd"
    NULL, /* m_clear */

#line 979 "numpy.pxd"
    NULL /* m_free */

#line 979 "numpy.pxd"
};

#line 979 "numpy.pxd"
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 1},
  {&__pyx_kp_s_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 0, 1, 0},
  {&__pyx_n_s_114, __pyx_k_114, sizeof(__pyx_k_114), 0, 0, 1, 1},
  {&__pyx_n_s_117, __pyx_k_117, sizeof(__pyx_k_117), 0, 0, 1, 1},
  {&__pyx_n_s_120, __pyx_k_120, sizeof(__pyx_k_120), 0, 0, 1, 1},
  {&__pyx_n_s_123, __pyx_k_123, sizeof(__pyx_k_123), 0, 0, 1, 1},
  {&__pyx_n_s_126, __pyx_k_126, sizeof(__pyx_k_126), 0, 0, 1, 1},
  {&__pyx_n_s_129, __pyx_k_129, sizeof(__pyx_k_129), 0, 0, 1, 1},
  {&__pyx_kp_s_13, __pyx_k_13, sizeof(__pyx_k_13), 0, 0, 1, 0},
  {&__pyx_n_s_132, __pyx_k_132, sizeof(__pyx_k_132), 0, 0, 1, 1},
  {&__pyx_n_s_135, __pyx_k_135, sizeof(__pyx_k_135), 0, 0, 1, 1},
  {&__pyx_kp_s_15, __pyx_k_15, sizeof(__pyx_k_15), 0, 0, 1, 0},
  {&__pyx_n_s_159, __pyx_k_159, sizeof(__pyx_k_159), 0, 0, 1, 1},
  {&__pyx_n_s_162, __pyx_k_162, sizeof(__pyx_k_162), 0, 0, 1, 1},
  {&__pyx_n_s_165, __pyx_k_165, sizeof(__pyx_k_165), 0, 0, 1, 1},
  {&__pyx_n_s_168, __pyx_k_168, sizeof(__pyx_k_168), 0, 0, 1, 1},
  {&__pyx_kp_s_17, __pyx_k_17, sizeof(__pyx_k_17), 0, 0, 1, 0},
  {&__pyx_n_s_179, __pyx_k_179, sizeof(__pyx_k_179), 0, 0, 1, 1},
  {&__pyx_n_s_182, __pyx_k_182, sizeof(__pyx_k_182), 0, 0, 1, 1},
  {&__pyx_n_s_189, __pyx_k_189, sizeof(__pyx_k_189), 0, 0, 1, 1},
  {&__pyx_kp_s_19, __pyx_k_19, sizeof(__pyx_k_19), 0, 0, 1, 0},
  {&__pyx_n_s_192, __pyx_k_192, sizeof(__pyx_k_192), 0, 0, 1, 1},
  {&__pyx_n_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 1},
  {&__pyx_kp_s_21, __pyx_k_21, sizeof(__pyx_k_21), 0, 0, 1, 0},
  {&__pyx_kp_s_23, __pyx_k_23, sizeof(__pyx_k_23), 0, 0, 1, 0},
  {&__pyx_n_s_235, __pyx_k_235, sizeof(__pyx_k_235), 0, 0, 1, 1},
  {&__pyx_n_s_248, __pyx_k_248, sizeof(__pyx_k_248), 0, 0, 1, 1},
  {&__pyx_kp_s_25, __pyx_k_25, sizeof(__pyx_k_25), 0, 0, 1, 0},
  {&__pyx_n_s_255, __pyx_k_255, sizeof(__pyx_k_255), 0, 0, 1, 1},
  {&__pyx_kp_s_27, __pyx_k_27, sizeof(__pyx_k_27), 0, 0, 1, 0},
  {&__pyx_n_s_278, __pyx_k_278, sizeof(__pyx_k_278), 0, 0, 1, 1},
  {&__pyx_n_s_285, __pyx_k_285, sizeof(__pyx_k_285), 0, 0, 1, 1},
  {&__pyx_n_s_288, __pyx_k_288, sizeof(__pyx_k_288), 0, 0, 1, 1},
  {&__pyx_kp_s_29, __pyx_k_29, sizeof(__pyx_k_29), 0, 0, 1, 0},
  {&__pyx_n_s_293, __pyx_k_293, sizeof(__pyx_k_293), 0, 0, 1, 1},
  {&__pyx_n_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 1},
  {&__pyx_n_s_300, __pyx_k_300, sizeof(__pyx_k_300), 0, 0, 1, 1},
  {&__pyx_n_s_303, __pyx_k_303, sizeof(__pyx_k_303), 0, 0, 1, 1},
  {&__pyx_n_s_306, __pyx_k_306, sizeof(__pyx_k_306), 0, 0, 1, 1},
  {&__pyx_kp_s_31, __pyx_k_31, sizeof(__pyx_k_31), 0, 0, 1, 0},
  {&__pyx_n_s_313, __pyx_k_313, sizeof(__pyx_k_313), 0, 0, 1, 1},
  {&__pyx_n_s_316, __pyx_k_316, sizeof(__pyx_k_316), 0, 0, 1, 1},
  {&__pyx_n_s_323, __pyx_k_323, sizeof(__pyx_k_323), 0, 0, 1, 1},
  {&__pyx_kp_s_33, __pyx_k_33, sizeof(__pyx_k_33), 0, 0, 1, 0},
  {&__pyx_n_s_332, __pyx_k_332, sizeof(__pyx_k_332), 0, 0, 1, 1},
  {&__pyx_n_s_335, __pyx_k_335, sizeof(__pyx_k_335), 0, 0, 1, 1},
  {&__pyx_kp_s_35, __pyx_k_35, sizeof(__pyx_k_35), 0, 0, 1, 0},
  {&__pyx_kp_s_37, __pyx_k_37, sizeof(__pyx_k_37), 0, 0, 1, 0},
  {&__pyx_kp_s_39, __pyx_k_39, sizeof(__pyx_k_39), 0, 0, 1, 0},
  {&__pyx_kp_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 0},
  {&__pyx_kp_s_41, __pyx_k_41, sizeof(__pyx_k_41), 0, 0, 1, 0},
  {&__pyx_kp_s_43, __pyx_k_43, sizeof(__pyx_k_43), 0, 0, 1, 0},
  {&__pyx_kp_s_45, __pyx_k_45, sizeof(__pyx_k_45), 0, 0, 1, 0},
  {&__pyx_kp_s_47, __pyx_k_47, sizeof(__pyx_k_47), 0, 0, 1, 0},
  {&__pyx_kp_s_49, __pyx_k_49, sizeof(__pyx_k_49), 0, 0, 1, 0},
  {&__pyx_kp_s_51, __pyx_k_51, sizeof(__pyx_k_51), 0, 0, 1, 0},
  {&__pyx_kp_s_53, __pyx_k_53, sizeof(__pyx_k_53), 0, 0, 1, 0},
  {&__pyx_kp_s_56, __pyx_k_56, sizeof(__pyx_k_56), 0, 0, 1, 0},
  {&__pyx_kp_s_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 0, 1, 0},
  {&__pyx_kp_s_61, __pyx_k_61, sizeof(__pyx_k_61), 0, 0, 1, 0},
  {&__pyx_kp_s_62, __pyx_k_62, sizeof(__pyx_k_62), 0, 0, 1, 0},
  {&__pyx_kp_s_64, __pyx_k_64, sizeof(__pyx_k_64), 0, 0, 1, 0},
  {&__pyx_kp_s_65, __pyx_k_65, sizeof(__pyx_k_65), 0, 0, 1, 0},
  {&__pyx_kp_s_67, __pyx_k_67, sizeof(__pyx_k_67), 0, 0, 1, 0},
  {&__pyx_kp_s_68, __pyx_k_68, sizeof(__pyx_k_68), 0, 0, 1, 0},
  {&__pyx_kp_s_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 0, 1, 0},
  {&__pyx_kp_s_70, __pyx_k_70, sizeof(__pyx_k_70), 0, 0, 1, 0},
  {&__pyx_kp_s_71, __pyx_k_71, sizeof(__pyx_k_71), 0, 0, 1, 0},
  {&__pyx_n_s_72, __pyx_k_72, sizeof(__pyx_k_72), 0, 0, 1, 1},
  {&__pyx_n_s_73, __pyx_k_73, sizeof(__pyx_k_73), 0, 0, 1, 1},
  {&__pyx_n_s_74, __pyx_k_74, sizeof(__pyx_k_74), 0, 0, 1, 1},
  {&__pyx_n_s_75, __pyx_k_75, sizeof(__pyx_k_75), 0, 0, 1, 1},
  {&__pyx_n_s_76, __pyx_k_76, sizeof(__pyx_k_76), 0, 0, 1, 1},
  {&__pyx_n_s_77, __pyx_k_77, sizeof(__pyx_k_77), 0, 0, 1, 1},
  {&__pyx_n_s_78, __pyx_k_78, sizeof(__pyx_k_78), 0, 0, 1, 1},
  {&__pyx_n_s_79, __pyx_k_79, sizeof(__pyx_k_79), 0, 0, 1, 1},
  {&__pyx_kp_u_80, __pyx_k_80, sizeof(__pyx_k_80), 0, 1, 0, 0},
  {&__pyx_kp_u_82, __pyx_k_82, sizeof(__pyx_k_82), 0, 1, 0, 0},
  {&__pyx_kp_u_84, __pyx_k_84, sizeof(__pyx_k_84), 0, 1, 0, 0},
  {&__pyx_kp_u_86, __pyx_k_86, sizeof(__pyx_k_86), 0, 1, 0, 0},
  {&__pyx_kp_u_87, __pyx_k_87, sizeof(__pyx_k_87), 0, 1, 0, 0},
  {&__pyx_kp_s_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 0, 1, 0},
  {&__pyx_kp_u_90, __pyx_k_90, sizeof(__pyx_k_90), 0, 1, 0, 0},
  {&__pyx_kp_s_94, __pyx_k_94, sizeof(__pyx_k_94), 0, 0, 1, 0},
  {&__pyx_n_s_95, __pyx_k_95, sizeof(__pyx_k_95), 0, 0, 1, 1},
  {&__pyx_n_s__CDS_NAT, __pyx_k__CDS_NAT, sizeof(__pyx_k__CDS_NAT), 0, 0, 1, 1},
  {&__pyx_n_s__C_CONTIGUOUS, __pyx_k__C_CONTIGUOUS, sizeof(__pyx_k__C_CONTIGUOUS), 0, 0, 1, 1},
  {&__pyx_n_s__LIB_NAME, __pyx_k__LIB_NAME, sizeof(__pyx_k__LIB_NAME), 0, 0, 1, 1},
  {&__pyx_n_s__MemoryError, __pyx_k__MemoryError, sizeof(__pyx_k__MemoryError), 0, 0, 1, 1},
  {&__pyx_n_s__RuntimeError, __pyx_k__RuntimeError, sizeof(__pyx_k__RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s__S1, __pyx_k__S1, sizeof(__pyx_k__S1), 0, 0, 1, 1},
  {&__pyx_n_s__TypeError, __pyx_k__TypeError, sizeof(__pyx_k__TypeError), 0, 0, 1, 1},
  {&__pyx_n_s__ValueError, __pyx_k__ValueError, sizeof(__pyx_k__ValueError), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s___aqc_vars, __pyx_k___aqc_vars, sizeof(__pyx_k___aqc_vars), 0, 0, 1, 1},
  {&__pyx_n_s___ingest_main_loop, __pyx_k___ingest_main_loop, sizeof(__pyx_k___ingest_main_loop), 0, 0, 1, 1},
  {&__pyx_n_s___init_process_hook, __pyx_k___init_process_hook, sizeof(__pyx_k___init_process_hook), 0, 0, 1, 1},
  {&__pyx_n_s___pre_retrieval_hook, __pyx_k___pre_retrieval_hook, sizeof(__pyx_k___pre_retrieval_hook), 0, 0, 1, 1},
  {&__pyx_n_s___pre_transform_hook, __pyx_k___pre_transform_hook, sizeof(__pyx_k___pre_transform_hook), 0, 0, 1, 1},
  {&__pyx_n_s___process_data_hook, __pyx_k___process_data_hook, sizeof(__pyx_k___process_data_hook), 0, 0, 1, 1},
  {&__pyx_n_s___process_file_hook, __pyx_k___process_file_hook, sizeof(__pyx_k___process_file_hook), 0, 0, 1, 1},
  {&__pyx_n_s___qc_vars, __pyx_k___qc_vars, sizeof(__pyx_k___qc_vars), 0, 0, 1, 1},
  {&__pyx_n_s___user_data, __pyx_k___user_data, sizeof(__pyx_k___user_data), 0, 0, 1, 1},
  {&__pyx_n_s___vap_main_loop, __pyx_k___vap_main_loop, sizeof(__pyx_k___vap_main_loop), 0, 0, 1, 1},
  {&__pyx_n_s___var, __pyx_k___var, sizeof(__pyx_k___var), 0, 0, 1, 1},
  {&__pyx_n_s___vars, __pyx_k___vars, sizeof(__pyx_k___vars), 0, 0, 1, 1},
  {&__pyx_n_s__alloc_var_data, __pyx_k__alloc_var_data, sizeof(__pyx_k__alloc_var_data), 0, 0, 1, 1},
  {&__pyx_n_s__aqc_vars, __pyx_k__aqc_vars, sizeof(__pyx_k__aqc_vars), 0, 0, 1, 1},
  {&__pyx_n_s__args, __pyx_k__args, sizeof(__pyx_k__args), 0, 0, 1, 1},
  {&__pyx_n_s__argv, __pyx_k__argv, sizeof(__pyx_k__argv), 0, 0, 1, 1},
  {&__pyx_n_s__array, __pyx_k__array, sizeof(__pyx_k__array), 0, 0, 1, 1},
  {&__pyx_n_s__asarray, __pyx_k__asarray, sizeof(__pyx_k__asarray), 0, 0, 1, 1},
  {&__pyx_n_s__att, __pyx_k__att, sizeof(__pyx_k__att), 0, 0, 1, 1},
  {&__pyx_n_s__begin_date, __pyx_k__begin_date, sizeof(__pyx_k__begin_date), 0, 0, 1, 1},
  {&__pyx_n_s__begin_time, __pyx_k__begin_time, sizeof(__pyx_k__begin_time), 0, 0, 1, 1},
  {&__pyx_n_s__c_argv, __pyx_k__c_argv, sizeof(__pyx_k__c_argv), 0, 0, 1, 1},
  {&__pyx_n_s__c_dim_names, __pyx_k__c_dim_names, sizeof(__pyx_k__c_dim_names), 0, 0, 1, 1},
  {&__pyx_n_s__c_long_name, __pyx_k__c_long_name, sizeof(__pyx_k__c_long_name), 0, 0, 1, 1},
  {&__pyx_n_s__c_patterns, __pyx_k__c_patterns, sizeof(__pyx_k__c_patterns), 0, 0, 1, 1},
  {&__pyx_n_s__c_proc_names, __pyx_k__c_proc_names, sizeof(__pyx_k__c_proc_names), 0, 0, 1, 1},
  {&__pyx_n_s__c_standard_name, __pyx_k__c_standard_name, sizeof(__pyx_k__c_standard_name), 0, 0, 1, 1},
  {&__pyx_n_s__c_units, __pyx_k__c_units, sizeof(__pyx_k__c_units), 0, 0, 1, 1},
  {&__pyx_n_s__c_var_names, __pyx_k__c_var_names, sizeof(__pyx_k__c_var_names), 0, 0, 1, 1},
  {&__pyx_n_s__cds_att, __pyx_k__cds_att, sizeof(__pyx_k__cds_att), 0, 0, 1, 1},
  {&__pyx_n_s__cds_dim, __pyx_k__cds_dim, sizeof(__pyx_k__cds_dim), 0, 0, 1, 1},
  {&__pyx_n_s__cds_group, __pyx_k__cds_group, sizeof(__pyx_k__cds_group), 0, 0, 1, 1},
  {&__pyx_n_s__cds_object, __pyx_k__cds_object, sizeof(__pyx_k__cds_object), 0, 0, 1, 1},
  {&__pyx_n_s__cds_var, __pyx_k__cds_var, sizeof(__pyx_k__cds_var), 0, 0, 1, 1},
  {&__pyx_n_s__change_att, __pyx_k__change_att, sizeof(__pyx_k__change_att), 0, 0, 1, 1},
  {&__pyx_n_s__clone_var, __pyx_k__clone_var, sizeof(__pyx_k__clone_var), 0, 0, 1, 1},
  {&__pyx_n_s__co_filename, __pyx_k__co_filename, sizeof(__pyx_k__co_filename), 0, 0, 1, 1},
  {&__pyx_n_s__co_name, __pyx_k__co_name, sizeof(__pyx_k__co_name), 0, 0, 1, 1},
  {&__pyx_n_s__coordsys_name, __pyx_k__coordsys_name, sizeof(__pyx_k__coordsys_name), 0, 0, 1, 1},
  {&__pyx_n_s__copy_data, __pyx_k__copy_data, sizeof(__pyx_k__copy_data), 0, 0, 1, 1},
  {&__pyx_n_s__copy_file, __pyx_k__copy_file, sizeof(__pyx_k__copy_file), 0, 0, 1, 1},
  {&__pyx_n_s__copy_var_tag, __pyx_k__copy_var_tag, sizeof(__pyx_k__copy_var_tag), 0, 0, 1, 1},
  {&__pyx_n_s__count, __pyx_k__count, sizeof(__pyx_k__count), 0, 0, 1, 1},
  {&__pyx_n_s__currentframe, __pyx_k__currentframe, sizeof(__pyx_k__currentframe), 0, 0, 1, 1},
  {&__pyx_n_s__data, __pyx_k__data, sizeof(__pyx_k__data), 0, 0, 1, 1},
  {&__pyx_n_s__data_nd, __pyx_k__data_nd, sizeof(__pyx_k__data_nd), 0, 0, 1, 1},
  {&__pyx_n_s__data_time, __pyx_k__data_time, sizeof(__pyx_k__data_time), 0, 0, 1, 1},
  {&__pyx_n_s__data_type, __pyx_k__data_type, sizeof(__pyx_k__data_type), 0, 0, 1, 1},
  {&__pyx_n_s__datap, __pyx_k__datap, sizeof(__pyx_k__datap), 0, 0, 1, 1},
  {&__pyx_n_s__dataset, __pyx_k__dataset, sizeof(__pyx_k__dataset), 0, 0, 1, 1},
  {&__pyx_n_s__dataset_name, __pyx_k__dataset_name, sizeof(__pyx_k__dataset_name), 0, 0, 1, 1},
  {&__pyx_n_s__datastream_facility, __pyx_k__datastream_facility, sizeof(__pyx_k__datastream_facility), 0, 0, 1, 1},
  {&__pyx_n_s__datastream_name, __pyx_k__datastream_name, sizeof(__pyx_k__datastream_name), 0, 0, 1, 1},
  {&__pyx_n_s__datastream_path, __pyx_k__datastream_path, sizeof(__pyx_k__datastream_path), 0, 0, 1, 1},
  {&__pyx_n_s__datastream_site, __pyx_k__datastream_site, sizeof(__pyx_k__datastream_site), 0, 0, 1, 1},
  {&__pyx_n_s__db_disconnect, __pyx_k__db_disconnect, sizeof(__pyx_k__db_disconnect), 0, 0, 1, 1},
  {&__pyx_n_s__debug_lv1, __pyx_k__debug_lv1, sizeof(__pyx_k__debug_lv1), 0, 0, 1, 1},
  {&__pyx_n_s__debug_lv2, __pyx_k__debug_lv2, sizeof(__pyx_k__debug_lv2), 0, 0, 1, 1},
  {&__pyx_n_s__debug_lv3, __pyx_k__debug_lv3, sizeof(__pyx_k__debug_lv3), 0, 0, 1, 1},
  {&__pyx_n_s__debug_lv4, __pyx_k__debug_lv4, sizeof(__pyx_k__debug_lv4), 0, 0, 1, 1},
  {&__pyx_n_s__debug_lv5, __pyx_k__debug_lv5, sizeof(__pyx_k__debug_lv5), 0, 0, 1, 1},
  {&__pyx_n_s__define_var, __pyx_k__define_var, sizeof(__pyx_k__define_var), 0, 0, 1, 1},
  {&__pyx_n_s__delete_var, __pyx_k__delete_var, sizeof(__pyx_k__delete_var), 0, 0, 1, 1},
  {&__pyx_n_s__delete_var_tag, __pyx_k__delete_var_tag, sizeof(__pyx_k__delete_var_tag), 0, 0, 1, 1},
  {&__pyx_n_s__dest_file, __pyx_k__dest_file, sizeof(__pyx_k__dest_file), 0, 0, 1, 1},
  {&__pyx_n_s__dest_var, __pyx_k__dest_var, sizeof(__pyx_k__dest_var), 0, 0, 1, 1},
  {&__pyx_n_s__dim, __pyx_k__dim, sizeof(__pyx_k__dim), 0, 0, 1, 1},
  {&__pyx_n_s__dim_index, __pyx_k__dim_index, sizeof(__pyx_k__dim_index), 0, 0, 1, 1},
  {&__pyx_n_s__dim_names, __pyx_k__dim_names, sizeof(__pyx_k__dim_names), 0, 0, 1, 1},
  {&__pyx_n_s__dims, __pyx_k__dims, sizeof(__pyx_k__dims), 0, 0, 1, 1},
  {&__pyx_n_s__ds_id, __pyx_k__ds_id, sizeof(__pyx_k__ds_id), 0, 0, 1, 1},
  {&__pyx_n_s__dsc_level, __pyx_k__dsc_level, sizeof(__pyx_k__dsc_level), 0, 0, 1, 1},
  {&__pyx_n_s__dsc_name, __pyx_k__dsc_name, sizeof(__pyx_k__dsc_name), 0, 0, 1, 1},
  {&__pyx_n_s__dsi, __pyx_k__dsi, sizeof(__pyx_k__dsi), 0, 0, 1, 1},
  {&__pyx_n_s__dsid, __pyx_k__dsid, sizeof(__pyx_k__dsid), 0, 0, 1, 1},
  {&__pyx_n_s__dsids, __pyx_k__dsids, sizeof(__pyx_k__dsids), 0, 0, 1, 1},
  {&__pyx_n_s__dtype, __pyx_k__dtype, sizeof(__pyx_k__dtype), 0, 0, 1, 1},
  {&__pyx_n_s__dump_dataset, __pyx_k__dump_dataset, sizeof(__pyx_k__dump_dataset), 0, 0, 1, 1},
  {&__pyx_n_s__end, __pyx_k__end, sizeof(__pyx_k__end), 0, 0, 1, 1},
  {&__pyx_n_s__end_date, __pyx_k__end_date, sizeof(__pyx_k__end_date), 0, 0, 1, 1},
  {&__pyx_n_s__end_time, __pyx_k__end_time, sizeof(__pyx_k__end_time), 0, 0, 1, 1},
  {&__pyx_n_s__enumerate, __pyx_k__enumerate, sizeof(__pyx_k__enumerate), 0, 0, 1, 1},
  {&__pyx_n_s__error, __pyx_k__error, sizeof(__pyx_k__error), 0, 0, 1, 1},
  {&__pyx_n_s__exit, __pyx_k__exit, sizeof(__pyx_k__exit), 0, 0, 1, 1},
  {&__pyx_n_s__exit_value, __pyx_k__exit_value, sizeof(__pyx_k__exit_value), 0, 0, 1, 1},
  {&__pyx_n_s__f_code, __pyx_k__f_code, sizeof(__pyx_k__f_code), 0, 0, 1, 1},
  {&__pyx_n_s__f_lineno, __pyx_k__f_lineno, sizeof(__pyx_k__f_lineno), 0, 0, 1, 1},
  {&__pyx_n_s__facility, __pyx_k__facility, sizeof(__pyx_k__facility), 0, 0, 1, 1},
  {&__pyx_n_s__fi, __pyx_k__fi, sizeof(__pyx_k__fi), 0, 0, 1, 1},
  {&__pyx_n_s__file, __pyx_k__file, sizeof(__pyx_k__file), 0, 0, 1, 1},
  {&__pyx_n_s__file_list, __pyx_k__file_list, sizeof(__pyx_k__file_list), 0, 0, 1, 1},
  {&__pyx_n_s__file_name, __pyx_k__file_name, sizeof(__pyx_k__file_name), 0, 0, 1, 1},
  {&__pyx_n_s__file_path, __pyx_k__file_path, sizeof(__pyx_k__file_path), 0, 0, 1, 1},
  {&__pyx_n_s__file_time, __pyx_k__file_time, sizeof(__pyx_k__file_time), 0, 0, 1, 1},
  {&__pyx_n_s__files, __pyx_k__files, sizeof(__pyx_k__files), 0, 0, 1, 1},
  {&__pyx_n_s__fill_byte, __pyx_k__fill_byte, sizeof(__pyx_k__fill_byte), 0, 0, 1, 1},
  {&__pyx_n_s__fill_char, __pyx_k__fill_char, sizeof(__pyx_k__fill_char), 0, 0, 1, 1},
  {&__pyx_n_s__fill_double, __pyx_k__fill_double, sizeof(__pyx_k__fill_double), 0, 0, 1, 1},
  {&__pyx_n_s__fill_float, __pyx_k__fill_float, sizeof(__pyx_k__fill_float), 0, 0, 1, 1},
  {&__pyx_n_s__fill_int, __pyx_k__fill_int, sizeof(__pyx_k__fill_int), 0, 0, 1, 1},
  {&__pyx_n_s__fill_ptr, __pyx_k__fill_ptr, sizeof(__pyx_k__fill_ptr), 0, 0, 1, 1},
  {&__pyx_n_s__fill_short, __pyx_k__fill_short, sizeof(__pyx_k__fill_short), 0, 0, 1, 1},
  {&__pyx_n_s__fill_value, __pyx_k__fill_value, sizeof(__pyx_k__fill_value), 0, 0, 1, 1},
  {&__pyx_n_s__finish, __pyx_k__finish, sizeof(__pyx_k__finish), 0, 0, 1, 1},
  {&__pyx_n_s__flags, __pyx_k__flags, sizeof(__pyx_k__flags), 0, 0, 1, 1},
  {&__pyx_n_s__float32, __pyx_k__float32, sizeof(__pyx_k__float32), 0, 0, 1, 1},
  {&__pyx_n_s__float64, __pyx_k__float64, sizeof(__pyx_k__float64), 0, 0, 1, 1},
  {&__pyx_n_s__format, __pyx_k__format, sizeof(__pyx_k__format), 0, 0, 1, 1},
  {&__pyx_n_s__func, __pyx_k__func, sizeof(__pyx_k__func), 0, 0, 1, 1},
  {&__pyx_n_s__get_att, __pyx_k__get_att, sizeof(__pyx_k__get_att), 0, 0, 1, 1},
  {&__pyx_n_s__get_att_text, __pyx_k__get_att_text, sizeof(__pyx_k__get_att_text), 0, 0, 1, 1},
  {&__pyx_n_s__get_att_value, __pyx_k__get_att_value, sizeof(__pyx_k__get_att_value), 0, 0, 1, 1},
  {&__pyx_n_s__get_base_time, __pyx_k__get_base_time, sizeof(__pyx_k__get_base_time), 0, 0, 1, 1},
  {&__pyx_n_s__get_coord_var, __pyx_k__get_coord_var, sizeof(__pyx_k__get_coord_var), 0, 0, 1, 1},
  {&__pyx_n_s__get_dataset_vars, __pyx_k__get_dataset_vars, sizeof(__pyx_k__get_dataset_vars), 0, 0, 1, 1},
  {&__pyx_n_s__get_datastream_id, __pyx_k__get_datastream_id, sizeof(__pyx_k__get_datastream_id), 0, 0, 1, 1},
  {&__pyx_n_s__get_debug_level, __pyx_k__get_debug_level, sizeof(__pyx_k__get_debug_level), 0, 0, 1, 1},
  {&__pyx_n_s__get_dim, __pyx_k__get_dim, sizeof(__pyx_k__get_dim), 0, 0, 1, 1},
  {&__pyx_n_s__get_dim_length, __pyx_k__get_dim_length, sizeof(__pyx_k__get_dim_length), 0, 0, 1, 1},
  {&__pyx_n_s__get_facility, __pyx_k__get_facility, sizeof(__pyx_k__get_facility), 0, 0, 1, 1},
  {&__pyx_n_s__get_metric_var, __pyx_k__get_metric_var, sizeof(__pyx_k__get_metric_var), 0, 0, 1, 1},
  {&__pyx_n_s__get_name, __pyx_k__get_name, sizeof(__pyx_k__get_name), 0, 0, 1, 1},
  {&__pyx_n_s__get_output_dataset, __pyx_k__get_output_dataset, sizeof(__pyx_k__get_output_dataset), 0, 0, 1, 1},
  {&__pyx_n_s__get_output_var, __pyx_k__get_output_var, sizeof(__pyx_k__get_output_var), 0, 0, 1, 1},
  {&__pyx_n_s__get_qc_var, __pyx_k__get_qc_var, sizeof(__pyx_k__get_qc_var), 0, 0, 1, 1},
  {&__pyx_n_s__get_retrieved_var, __pyx_k__get_retrieved_var, sizeof(__pyx_k__get_retrieved_var), 0, 0, 1, 1},
  {&__pyx_n_s__get_sample_times, __pyx_k__get_sample_times, sizeof(__pyx_k__get_sample_times), 0, 0, 1, 1},
  {&__pyx_n_s__get_sample_timevals, __pyx_k__get_sample_timevals, sizeof(__pyx_k__get_sample_timevals), 0, 0, 1, 1},
  {&__pyx_n_s__get_site, __pyx_k__get_site, sizeof(__pyx_k__get_site), 0, 0, 1, 1},
  {&__pyx_n_s__get_status, __pyx_k__get_status, sizeof(__pyx_k__get_status), 0, 0, 1, 1},
  {&__pyx_n_s__get_time_range, __pyx_k__get_time_range, sizeof(__pyx_k__get_time_range), 0, 0, 1, 1},
  {&__pyx_n_s__get_time_var, __pyx_k__get_time_var, sizeof(__pyx_k__get_time_var), 0, 0, 1, 1},
  {&__pyx_n_s__get_transformed_var, __pyx_k__get_transformed_var, sizeof(__pyx_k__get_transformed_var), 0, 0, 1, 1},
  {&__pyx_n_s__get_var, __pyx_k__get_var, sizeof(__pyx_k__get_var), 0, 0, 1, 1},
  {&__pyx_n_s__get_var_data, __pyx_k__get_var_data, sizeof(__pyx_k__get_var_data), 0, 0, 1, 1},
  {&__pyx_n_s__get_var_data_index, __pyx_k__get_var_data_index, sizeof(__pyx_k__get_var_data_index), 0, 0, 1, 1},
  {&__pyx_n_s__group, __pyx_k__group, sizeof(__pyx_k__group), 0, 0, 1, 1},
  {&__pyx_n_s__hook, __pyx_k__hook, sizeof(__pyx_k__hook), 0, 0, 1, 1},
  {&__pyx_n_s__i, __pyx_k__i, sizeof(__pyx_k__i), 0, 0, 1, 1},
  {&__pyx_n_s__ids, __pyx_k__ids, sizeof(__pyx_k__ids), 0, 0, 1, 1},
  {&__pyx_n_s__ids_nd, __pyx_k__ids_nd, sizeof(__pyx_k__ids_nd), 0, 0, 1, 1},
  {&__pyx_n_s__idx, __pyx_k__idx, sizeof(__pyx_k__idx), 0, 0, 1, 1},
  {&__pyx_n_s__ignore_case, __pyx_k__ignore_case, sizeof(__pyx_k__ignore_case), 0, 0, 1, 1},
  {&__pyx_n_s__init_var_data, __pyx_k__init_var_data, sizeof(__pyx_k__init_var_data), 0, 0, 1, 1},
  {&__pyx_n_s__init_var_data_index, __pyx_k__init_var_data_index, sizeof(__pyx_k__init_var_data_index), 0, 0, 1, 1},
  {&__pyx_n_s__initialize, __pyx_k__initialize, sizeof(__pyx_k__initialize), 0, 0, 1, 1},
  {&__pyx_n_s__input_data, __pyx_k__input_data, sizeof(__pyx_k__input_data), 0, 0, 1, 1},
  {&__pyx_n_s__input_dir, __pyx_k__input_dir, sizeof(__pyx_k__input_dir), 0, 0, 1, 1},
  {&__pyx_n_s__inspect, __pyx_k__inspect, sizeof(__pyx_k__inspect), 0, 0, 1, 1},
  {&__pyx_n_s__int16, __pyx_k__int16, sizeof(__pyx_k__int16), 0, 0, 1, 1},
  {&__pyx_n_s__int32, __pyx_k__int32, sizeof(__pyx_k__int32), 0, 0, 1, 1},
  {&__pyx_n_s__int8, __pyx_k__int8, sizeof(__pyx_k__int8), 0, 0, 1, 1},
  {&__pyx_n_s__interval_begin, __pyx_k__interval_begin, sizeof(__pyx_k__interval_begin), 0, 0, 1, 1},
  {&__pyx_n_s__interval_end, __pyx_k__interval_end, sizeof(__pyx_k__interval_end), 0, 0, 1, 1},
  {&__pyx_n_s__length, __pyx_k__length, sizeof(__pyx_k__length), 0, 0, 1, 1},
  {&__pyx_n_s__level, __pyx_k__level, sizeof(__pyx_k__level), 0, 0, 1, 1},
  {&__pyx_n_s__line, __pyx_k__line, sizeof(__pyx_k__line), 0, 0, 1, 1},
  {&__pyx_n_s__list, __pyx_k__list, sizeof(__pyx_k__list), 0, 0, 1, 1},
  {&__pyx_n_s__log, __pyx_k__log, sizeof(__pyx_k__log), 0, 0, 1, 1},
  {&__pyx_n_s__long_name, __pyx_k__long_name, sizeof(__pyx_k__long_name), 0, 0, 1, 1},
  {&__pyx_n_s__loop_end, __pyx_k__loop_end, sizeof(__pyx_k__loop_end), 0, 0, 1, 1},
  {&__pyx_n_s__loop_start, __pyx_k__loop_start, sizeof(__pyx_k__loop_start), 0, 0, 1, 1},
  {&__pyx_n_s__main, __pyx_k__main, sizeof(__pyx_k__main), 0, 0, 1, 1},
  {&__pyx_n_s__max_byte, __pyx_k__max_byte, sizeof(__pyx_k__max_byte), 0, 0, 1, 1},
  {&__pyx_n_s__max_char, __pyx_k__max_char, sizeof(__pyx_k__max_char), 0, 0, 1, 1},
  {&__pyx_n_s__max_double, __pyx_k__max_double, sizeof(__pyx_k__max_double), 0, 0, 1, 1},
  {&__pyx_n_s__max_float, __pyx_k__max_float, sizeof(__pyx_k__max_float), 0, 0, 1, 1},
  {&__pyx_n_s__max_int, __pyx_k__max_int, sizeof(__pyx_k__max_int), 0, 0, 1, 1},
  {&__pyx_n_s__max_ptr, __pyx_k__max_ptr, sizeof(__pyx_k__max_ptr), 0, 0, 1, 1},
  {&__pyx_n_s__max_short, __pyx_k__max_short, sizeof(__pyx_k__max_short), 0, 0, 1, 1},
  {&__pyx_n_s__mentor_mail, __pyx_k__mentor_mail, sizeof(__pyx_k__mentor_mail), 0, 0, 1, 1},
  {&__pyx_n_s__metric, __pyx_k__metric, sizeof(__pyx_k__metric), 0, 0, 1, 1},
  {&__pyx_n_s__metric_var, __pyx_k__metric_var, sizeof(__pyx_k__metric_var), 0, 0, 1, 1},
  {&__pyx_n_s__min_byte, __pyx_k__min_byte, sizeof(__pyx_k__min_byte), 0, 0, 1, 1},
  {&__pyx_n_s__min_char, __pyx_k__min_char, sizeof(__pyx_k__min_char), 0, 0, 1, 1},
  {&__pyx_n_s__min_double, __pyx_k__min_double, sizeof(__pyx_k__min_double), 0, 0, 1, 1},
  {&__pyx_n_s__min_float, __pyx_k__min_float, sizeof(__pyx_k__min_float), 0, 0, 1, 1},
  {&__pyx_n_s__min_int, __pyx_k__min_int, sizeof(__pyx_k__min_int), 0, 0, 1, 1},
  {&__pyx_n_s__min_ptr, __pyx_k__min_ptr, sizeof(__pyx_k__min_ptr), 0, 0, 1, 1},
  {&__pyx_n_s__min_short, __pyx_k__min_short, sizeof(__pyx_k__min_short), 0, 0, 1, 1},
  {&__pyx_n_s__missing_byte, __pyx_k__missing_byte, sizeof(__pyx_k__missing_byte), 0, 0, 1, 1},
  {&__pyx_n_s__missing_c, __pyx_k__missing_c, sizeof(__pyx_k__missing_c), 0, 0, 1, 1},
  {&__pyx_n_s__missing_char, __pyx_k__missing_char, sizeof(__pyx_k__missing_char), 0, 0, 1, 1},
  {&__pyx_n_s__missing_double, __pyx_k__missing_double, sizeof(__pyx_k__missing_double), 0, 0, 1, 1},
  {&__pyx_n_s__missing_float, __pyx_k__missing_float, sizeof(__pyx_k__missing_float), 0, 0, 1, 1},
  {&__pyx_n_s__missing_int, __pyx_k__missing_int, sizeof(__pyx_k__missing_int), 0, 0, 1, 1},
  {&__pyx_n_s__missing_ptr, __pyx_k__missing_ptr, sizeof(__pyx_k__missing_ptr), 0, 0, 1, 1},
  {&__pyx_n_s__missing_short, __pyx_k__missing_short, sizeof(__pyx_k__missing_short), 0, 0, 1, 1},
  {&__pyx_n_s__missing_value, __pyx_k__missing_value, sizeof(__pyx_k__missing_value), 0, 0, 1, 1},
  {&__pyx_n_s__move_file, __pyx_k__move_file, sizeof(__pyx_k__move_file), 0, 0, 1, 1},
  {&__pyx_n_s__name, __pyx_k__name, sizeof(__pyx_k__name), 0, 0, 1, 1},
  {&__pyx_n_s__ndims, __pyx_k__ndims, sizeof(__pyx_k__ndims), 0, 0, 1, 1},
  {&__pyx_n_s__ndsid, __pyx_k__ndsid, sizeof(__pyx_k__ndsid), 0, 0, 1, 1},
  {&__pyx_n_s__ndsids, __pyx_k__ndsids, sizeof(__pyx_k__ndsids), 0, 0, 1, 1},
  {&__pyx_n_s__newfile, __pyx_k__newfile, sizeof(__pyx_k__newfile), 0, 0, 1, 1},
  {&__pyx_n_s__nfiles, __pyx_k__nfiles, sizeof(__pyx_k__nfiles), 0, 0, 1, 1},
  {&__pyx_n_s__np, __pyx_k__np, sizeof(__pyx_k__np), 0, 0, 1, 1},
  {&__pyx_n_s__num, __pyx_k__num, sizeof(__pyx_k__num), 0, 0, 1, 1},
  {&__pyx_n_s__num_times, __pyx_k__num_times, sizeof(__pyx_k__num_times), 0, 0, 1, 1},
  {&__pyx_n_s__numpy, __pyx_k__numpy, sizeof(__pyx_k__numpy), 0, 0, 1, 1},
  {&__pyx_n_s__obj, __pyx_k__obj, sizeof(__pyx_k__obj), 0, 0, 1, 1},
  {&__pyx_n_s__obs_index, __pyx_k__obs_index, sizeof(__pyx_k__obs_index), 0, 0, 1, 1},
  {&__pyx_n_s__outdir, __pyx_k__outdir, sizeof(__pyx_k__outdir), 0, 0, 1, 1},
  {&__pyx_n_s__overwrite, __pyx_k__overwrite, sizeof(__pyx_k__overwrite), 0, 0, 1, 1},
  {&__pyx_n_s__parent, __pyx_k__parent, sizeof(__pyx_k__parent), 0, 0, 1, 1},
  {&__pyx_n_s__patterns, __pyx_k__patterns, sizeof(__pyx_k__patterns), 0, 0, 1, 1},
  {&__pyx_n_s__prefix, __pyx_k__prefix, sizeof(__pyx_k__prefix), 0, 0, 1, 1},
  {&__pyx_n_s__preserve_dots, __pyx_k__preserve_dots, sizeof(__pyx_k__preserve_dots), 0, 0, 1, 1},
  {&__pyx_n_s__proc_model, __pyx_k__proc_model, sizeof(__pyx_k__proc_model), 0, 0, 1, 1},
  {&__pyx_n_s__proc_names, __pyx_k__proc_names, sizeof(__pyx_k__proc_names), 0, 0, 1, 1},
  {&__pyx_n_s__proc_version, __pyx_k__proc_version, sizeof(__pyx_k__proc_version), 0, 0, 1, 1},
  {&__pyx_n_s__qc_vars, __pyx_k__qc_vars, sizeof(__pyx_k__qc_vars), 0, 0, 1, 1},
  {&__pyx_n_s__range, __pyx_k__range, sizeof(__pyx_k__range), 0, 0, 1, 1},
  {&__pyx_n_s__rename, __pyx_k__rename, sizeof(__pyx_k__rename), 0, 0, 1, 1},
  {&__pyx_n_s__rename_bad, __pyx_k__rename_bad, sizeof(__pyx_k__rename_bad), 0, 0, 1, 1},
  {&__pyx_n_s__required, __pyx_k__required, sizeof(__pyx_k__required), 0, 0, 1, 1},
  {&__pyx_n_s__ret_aqc_vars, __pyx_k__ret_aqc_vars, sizeof(__pyx_k__ret_aqc_vars), 0, 0, 1, 1},
  {&__pyx_n_s__ret_data, __pyx_k__ret_data, sizeof(__pyx_k__ret_data), 0, 0, 1, 1},
  {&__pyx_n_s__ret_qc_vars, __pyx_k__ret_qc_vars, sizeof(__pyx_k__ret_qc_vars), 0, 0, 1, 1},
  {&__pyx_n_s__ret_vars, __pyx_k__ret_vars, sizeof(__pyx_k__ret_vars), 0, 0, 1, 1},
  {&__pyx_n_s__return_value, __pyx_k__return_value, sizeof(__pyx_k__return_value), 0, 0, 1, 1},
  {&__pyx_n_s__retval, __pyx_k__retval, sizeof(__pyx_k__retval), 0, 0, 1, 1},
  {&__pyx_n_s__role, __pyx_k__role, sizeof(__pyx_k__role), 0, 0, 1, 1},
  {&__pyx_n_s__s, __pyx_k__s, sizeof(__pyx_k__s), 0, 0, 1, 1},
  {&__pyx_n_s__sample_count, __pyx_k__sample_count, sizeof(__pyx_k__sample_count), 0, 0, 1, 1},
  {&__pyx_n_s__sample_size, __pyx_k__sample_size, sizeof(__pyx_k__sample_size), 0, 0, 1, 1},
  {&__pyx_n_s__sample_start, __pyx_k__sample_start, sizeof(__pyx_k__sample_start), 0, 0, 1, 1},
  {&__pyx_n_s__sample_times, __pyx_k__sample_times, sizeof(__pyx_k__sample_times), 0, 0, 1, 1},
  {&__pyx_n_s__sample_times_c, __pyx_k__sample_times_c, sizeof(__pyx_k__sample_times_c), 0, 0, 1, 1},
  {&__pyx_n_s__set_att, __pyx_k__set_att, sizeof(__pyx_k__set_att), 0, 0, 1, 1},
  {&__pyx_n_s__set_att_text, __pyx_k__set_att_text, sizeof(__pyx_k__set_att_text), 0, 0, 1, 1},
  {&__pyx_n_s__set_att_value, __pyx_k__set_att_value, sizeof(__pyx_k__set_att_value), 0, 0, 1, 1},
  {&__pyx_n_s__set_dim_length, __pyx_k__set_dim_length, sizeof(__pyx_k__set_dim_length), 0, 0, 1, 1},
  {&__pyx_n_s__set_input_source, __pyx_k__set_input_source, sizeof(__pyx_k__set_input_source), 0, 0, 1, 1},
  {&__pyx_n_s__set_location, __pyx_k__set_location, sizeof(__pyx_k__set_location), 0, 0, 1, 1},
  {&__pyx_n_s__set_sample_times, __pyx_k__set_sample_times, sizeof(__pyx_k__set_sample_times), 0, 0, 1, 1},
  {&__pyx_n_s__set_sample_timevals, __pyx_k__set_sample_timevals, sizeof(__pyx_k__set_sample_timevals), 0, 0, 1, 1},
  {&__pyx_n_s__set_status, __pyx_k__set_status, sizeof(__pyx_k__set_status), 0, 0, 1, 1},
  {&__pyx_n_s__set_var_data, __pyx_k__set_var_data, sizeof(__pyx_k__set_var_data), 0, 0, 1, 1},
  {&__pyx_n_s__set_var_flags, __pyx_k__set_var_flags, sizeof(__pyx_k__set_var_flags), 0, 0, 1, 1},
  {&__pyx_n_s__site, __pyx_k__site, sizeof(__pyx_k__site), 0, 0, 1, 1},
  {&__pyx_n_s__size, __pyx_k__size, sizeof(__pyx_k__size), 0, 0, 1, 1},
  {&__pyx_n_s__src_file, __pyx_k__src_file, sizeof(__pyx_k__src_file), 0, 0, 1, 1},
  {&__pyx_n_s__src_var, __pyx_k__src_var, sizeof(__pyx_k__src_var), 0, 0, 1, 1},
  {&__pyx_n_s__standard_name, __pyx_k__standard_name, sizeof(__pyx_k__standard_name), 0, 0, 1, 1},
  {&__pyx_n_s__start, __pyx_k__start, sizeof(__pyx_k__start), 0, 0, 1, 1},
  {&__pyx_n_s__status, __pyx_k__status, sizeof(__pyx_k__status), 0, 0, 1, 1},
  {&__pyx_n_s__status_text, __pyx_k__status_text, sizeof(__pyx_k__status_text), 0, 0, 1, 1},
  {&__pyx_n_s__store_dataset, __pyx_k__store_dataset, sizeof(__pyx_k__store_dataset), 0, 0, 1, 1},
  {&__pyx_n_s__str, __pyx_k__str, sizeof(__pyx_k__str), 0, 0, 1, 1},
  {&__pyx_n_s__suffix, __pyx_k__suffix, sizeof(__pyx_k__suffix), 0, 0, 1, 1},
  {&__pyx_n_s__sys, __pyx_k__sys, sizeof(__pyx_k__sys), 0, 0, 1, 1},
  {&__pyx_n_s__target, __pyx_k__target, sizeof(__pyx_k__target), 0, 0, 1, 1},
  {&__pyx_n_s__targets, __pyx_k__targets, sizeof(__pyx_k__targets), 0, 0, 1, 1},
  {&__pyx_n_s__text, __pyx_k__text, sizeof(__pyx_k__text), 0, 0, 1, 1},
  {&__pyx_n_s__time, __pyx_k__time, sizeof(__pyx_k__time), 0, 0, 1, 1},
  {&__pyx_n_s__time_remaining, __pyx_k__time_remaining, sizeof(__pyx_k__time_remaining), 0, 0, 1, 1},
  {&__pyx_n_s__trans_data, __pyx_k__trans_data, sizeof(__pyx_k__trans_data), 0, 0, 1, 1},
  {&__pyx_n_s__type, __pyx_k__type, sizeof(__pyx_k__type), 0, 0, 1, 1},
  {&__pyx_n_s__uint8, __pyx_k__uint8, sizeof(__pyx_k__uint8), 0, 0, 1, 1},
  {&__pyx_n_s__units, __pyx_k__units, sizeof(__pyx_k__units), 0, 0, 1, 1},
  {&__pyx_n_s__unset_var_flags, __pyx_k__unset_var_flags, sizeof(__pyx_k__unset_var_flags), 0, 0, 1, 1},
  {&__pyx_n_s__use_missing, __pyx_k__use_missing, sizeof(__pyx_k__use_missing), 0, 0, 1, 1},
  {&__pyx_n_s__val, __pyx_k__val, sizeof(__pyx_k__val), 0, 0, 1, 1},
  {&__pyx_n_s__valid_max, __pyx_k__valid_max, sizeof(__pyx_k__valid_max), 0, 0, 1, 1},
  {&__pyx_n_s__valid_min, __pyx_k__valid_min, sizeof(__pyx_k__valid_min), 0, 0, 1, 1},
  {&__pyx_n_s__value, __pyx_k__value, sizeof(__pyx_k__value), 0, 0, 1, 1},
  {&__pyx_n_s__value_nd, __pyx_k__value_nd, sizeof(__pyx_k__value_nd), 0, 0, 1, 1},
  {&__pyx_n_s__values, __pyx_k__values, sizeof(__pyx_k__values), 0, 0, 1, 1},
  {&__pyx_n_s__var, __pyx_k__var, sizeof(__pyx_k__var), 0, 0, 1, 1},
  {&__pyx_n_s__var_name, __pyx_k__var_name, sizeof(__pyx_k__var_name), 0, 0, 1, 1},
  {&__pyx_n_s__var_names, __pyx_k__var_names, sizeof(__pyx_k__var_names), 0, 0, 1, 1},
  {&__pyx_n_s__var_sample_count, __pyx_k__var_sample_count, sizeof(__pyx_k__var_sample_count), 0, 0, 1, 1},
  {&__pyx_n_s__var_sample_size, __pyx_k__var_sample_size, sizeof(__pyx_k__var_sample_size), 0, 0, 1, 1},
  {&__pyx_n_s__var_tmp, __pyx_k__var_tmp, sizeof(__pyx_k__var_tmp), 0, 0, 1, 1},
  {&__pyx_n_s__warning, __pyx_k__warning, sizeof(__pyx_k__warning), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetName(__pyx_b, __pyx_n_s__TypeError); if (!__pyx_builtin_TypeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetName(__pyx_b, __pyx_n_s__ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_MemoryError = __Pyx_GetName(__pyx_b, __pyx_n_s__MemoryError); if (!__pyx_builtin_MemoryError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetName(__pyx_b, __pyx_n_s__range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_enumerate = __Pyx_GetName(__pyx_b, __pyx_n_s__enumerate); if (!__pyx_builtin_enumerate) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetName(__pyx_b, __pyx_n_s__RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "dsproc3/core.pyx":433
 *     cdef char *status_text
 *     if _init_process_hook:
 *         debug_lv1("\n----- ENTERING INIT PROCESS HOOK -------\n")             # <<<<<<<<<<<<<<
 *         _user_data = _init_process_hook()
 *         if not _user_data:
 */

#line 433 "dsproc3/core.pyx"
  __pyx_k_tuple_5 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_4)); if (unlikely(!__pyx_k_tuple_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 433 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_5);

#line 433 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_5));

  /* "dsproc3/core.pyx":438
 *             status_text = dsproc_get_status()
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by init_process_hook function\n")             # <<<<<<<<<<<<<<
 *             return 0
 *         debug_lv1("----- EXITING INIT PROCESS HOOK --------\n\n")
 */

#line 438 "dsproc3/core.pyx"
  __pyx_k_tuple_8 = PyTuple_Pack(2, ((PyObject *)__pyx_kp_s_6), ((PyObject *)__pyx_kp_s_7)); if (unlikely(!__pyx_k_tuple_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 438 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_8);

#line 438 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_8));

  /* "dsproc3/core.pyx":440
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by init_process_hook function\n")
 *             return 0
 *         debug_lv1("----- EXITING INIT PROCESS HOOK --------\n\n")             # <<<<<<<<<<<<<<
 *     return 1
 * 
 */

#line 440 "dsproc3/core.pyx"
  __pyx_k_tuple_10 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_9)); if (unlikely(!__pyx_k_tuple_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 440 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_10);

#line 440 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_10));

  /* "dsproc3/core.pyx":446
 *     """Private: Run the finish_process_hook function."""
 *     if _finish_process_hook:
 *         debug_lv1("\n----- ENTERING FINISH PROCESS HOOK -----\n")             # <<<<<<<<<<<<<<
 *         _finish_process_hook(_user_data)
 *         debug_lv1("----- EXITING FINISH PROCESS HOOK ------\n\n")
 */

#line 446 "dsproc3/core.pyx"
  __pyx_k_tuple_12 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_11)); if (unlikely(!__pyx_k_tuple_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 446 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_12);

#line 446 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_12));

  /* "dsproc3/core.pyx":448
 *         debug_lv1("\n----- ENTERING FINISH PROCESS HOOK -----\n")
 *         _finish_process_hook(_user_data)
 *         debug_lv1("----- EXITING FINISH PROCESS HOOK ------\n\n")             # <<<<<<<<<<<<<<
 * 
 * def _run_process_data_hook(
 */

#line 448 "dsproc3/core.pyx"
  __pyx_k_tuple_14 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_13)); if (unlikely(!__pyx_k_tuple_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 448 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_14);

#line 448 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_14));

  /* "dsproc3/core.pyx":471
 *     status = 1
 *     if _process_data_hook:
 *         debug_lv1("\n----- ENTERING PROCESS DATA HOOK -------\n")             # <<<<<<<<<<<<<<
 *         status = _process_data_hook(
 *                 _user_data, begin_date, end_date, input_data)
 */

#line 471 "dsproc3/core.pyx"
  __pyx_k_tuple_16 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_15)); if (unlikely(!__pyx_k_tuple_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 471 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_16);

#line 471 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_16));

  /* "dsproc3/core.pyx":477
 *             status_text = dsproc_get_status()
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by process_data_hook function\n")             # <<<<<<<<<<<<<<
 *         debug_lv1("----- EXITING PROCESS DATA HOOK --------\n\n")
 * 
 */

#line 477 "dsproc3/core.pyx"
  __pyx_k_tuple_18 = PyTuple_Pack(2, ((PyObject *)__pyx_kp_s_6), ((PyObject *)__pyx_kp_s_17)); if (unlikely(!__pyx_k_tuple_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 477 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_18);

#line 477 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_18));

  /* "dsproc3/core.pyx":478
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by process_data_hook function\n")
 *         debug_lv1("----- EXITING PROCESS DATA HOOK --------\n\n")             # <<<<<<<<<<<<<<
 * 
 *     return status
 */

#line 478 "dsproc3/core.pyx"
  __pyx_k_tuple_20 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_19)); if (unlikely(!__pyx_k_tuple_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 478 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_20);

#line 478 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_20));

  /* "dsproc3/core.pyx":501
 *     status = 1
 *     if _pre_retrieval_hook:
 *         debug_lv1("\n----- ENTERING PRE-RETRIEVAL HOOK ------\n")             # <<<<<<<<<<<<<<
 *         status = _pre_retrieval_hook(_user_data, begin_date, end_date)
 *         if status < 0:
 */

#line 501 "dsproc3/core.pyx"
  __pyx_k_tuple_22 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_21)); if (unlikely(!__pyx_k_tuple_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 501 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_22);

#line 501 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_22));

  /* "dsproc3/core.pyx":506
 *             status_text = dsproc_get_status()
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by pre_retrieval_hook function\n")             # <<<<<<<<<<<<<<
 *         debug_lv1("----- EXITING PRE-RETRIEVAL HOOK -------\n")
 * 
 */

#line 506 "dsproc3/core.pyx"
  __pyx_k_tuple_24 = PyTuple_Pack(2, ((PyObject *)__pyx_kp_s_6), ((PyObject *)__pyx_kp_s_23)); if (unlikely(!__pyx_k_tuple_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 506 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_24);

#line 506 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_24));

  /* "dsproc3/core.pyx":507
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by pre_retrieval_hook function\n")
 *         debug_lv1("----- EXITING PRE-RETRIEVAL HOOK -------\n")             # <<<<<<<<<<<<<<
 * 
 *     return status
 */

#line 507 "dsproc3/core.pyx"
  __pyx_k_tuple_26 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_25)); if (unlikely(!__pyx_k_tuple_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 507; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 507 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_26);

#line 507 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_26));

  /* "dsproc3/core.pyx":531
 *     status = 1
 *     if _post_retrieval_hook:
 *         debug_lv1("\n----- ENTERING POST-RETRIEVAL HOOK -----\n")             # <<<<<<<<<<<<<<
 *         status = _post_retrieval_hook(
 *             _user_data, begin_date, end_date, ret_data)
 */

#line 531 "dsproc3/core.pyx"
  __pyx_k_tuple_28 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_27)); if (unlikely(!__pyx_k_tuple_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 531; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 531 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_28);

#line 531 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_28));

  /* "dsproc3/core.pyx":537
 *             status_text = dsproc_get_status()
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by post_retrieval_hook function\n")             # <<<<<<<<<<<<<<
 *         debug_lv1("----- EXITING POST-RETRIEVAL HOOK ------\n\n")
 * 
 */

#line 537 "dsproc3/core.pyx"
  __pyx_k_tuple_30 = PyTuple_Pack(2, ((PyObject *)__pyx_kp_s_6), ((PyObject *)__pyx_kp_s_29)); if (unlikely(!__pyx_k_tuple_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 537; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 537 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_30);

#line 537 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_30));

  /* "dsproc3/core.pyx":538
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by post_retrieval_hook function\n")
 *         debug_lv1("----- EXITING POST-RETRIEVAL HOOK ------\n\n")             # <<<<<<<<<<<<<<
 * 
 *     return status
 */

#line 538 "dsproc3/core.pyx"
  __pyx_k_tuple_32 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_31)); if (unlikely(!__pyx_k_tuple_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 538 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_32);

#line 538 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_32));

  /* "dsproc3/core.pyx":562
 *     status = 1
 *     if _pre_transform_hook:
 *         debug_lv1("\n----- ENTERING PRE-TRANSFORM HOOK ------\n")             # <<<<<<<<<<<<<<
 *         status = _pre_transform_hook(
 *             _user_data, begin_date, end_date, ret_data)
 */

#line 562 "dsproc3/core.pyx"
  __pyx_k_tuple_34 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_33)); if (unlikely(!__pyx_k_tuple_34)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 562 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_34);

#line 562 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_34));

  /* "dsproc3/core.pyx":568
 *             status_text = dsproc_get_status()
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by pre_transform_hook function\n")             # <<<<<<<<<<<<<<
 *         debug_lv1("----- EXITING PRE-TRANSFORM HOOK -------\n\n")
 * 
 */

#line 568 "dsproc3/core.pyx"
  __pyx_k_tuple_36 = PyTuple_Pack(2, ((PyObject *)__pyx_kp_s_6), ((PyObject *)__pyx_kp_s_35)); if (unlikely(!__pyx_k_tuple_36)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 568 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_36);

#line 568 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_36));

  /* "dsproc3/core.pyx":569
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by pre_transform_hook function\n")
 *         debug_lv1("----- EXITING PRE-TRANSFORM HOOK -------\n\n")             # <<<<<<<<<<<<<<
 * 
 *     return status
 */

#line 569 "dsproc3/core.pyx"
  __pyx_k_tuple_38 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_37)); if (unlikely(!__pyx_k_tuple_38)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 569 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_38);

#line 569 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_38));

  /* "dsproc3/core.pyx":594
 *     status = 1
 *     if _post_transform_hook:
 *         debug_lv1("\n----- ENTERING POST-TRANSFORM HOOK -----\n")             # <<<<<<<<<<<<<<
 *         status = _post_transform_hook(
 *             _user_data, begin_date, end_date, trans_data)
 */

#line 594 "dsproc3/core.pyx"
  __pyx_k_tuple_40 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_39)); if (unlikely(!__pyx_k_tuple_40)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 594 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_40);

#line 594 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_40));

  /* "dsproc3/core.pyx":600
 *             status_text = dsproc_get_status()
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by post_transform_hook function\n")             # <<<<<<<<<<<<<<
 *         debug_lv1("----- EXITING POST-TRANSFORM HOOK ------\n\n")
 * 
 */

#line 600 "dsproc3/core.pyx"
  __pyx_k_tuple_42 = PyTuple_Pack(2, ((PyObject *)__pyx_kp_s_6), ((PyObject *)__pyx_kp_s_41)); if (unlikely(!__pyx_k_tuple_42)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 600 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_42);

#line 600 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_42));

  /* "dsproc3/core.pyx":601
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by post_transform_hook function\n")
 *         debug_lv1("----- EXITING POST-TRANSFORM HOOK ------\n\n")             # <<<<<<<<<<<<<<
 * 
 *     return status
 */

#line 601 "dsproc3/core.pyx"
  __pyx_k_tuple_44 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_43)); if (unlikely(!__pyx_k_tuple_44)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 601 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_44);

#line 601 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_44));

  /* "dsproc3/core.pyx":624
 *     status = 1
 *     if _process_file_hook:
 *         debug_lv1("\n----- ENTERING PROCESS FILE HOOK -----\n")             # <<<<<<<<<<<<<<
 *         status = _process_file_hook(
 *             _user_data, input_dir, file_name)
 */

#line 624 "dsproc3/core.pyx"
  __pyx_k_tuple_46 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_45)); if (unlikely(!__pyx_k_tuple_46)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 624; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 624 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_46);

#line 624 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_46));

  /* "dsproc3/core.pyx":630
 *             status_text = dsproc_get_status()
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by process_file_hook function\n")             # <<<<<<<<<<<<<<
 *         debug_lv1("----- EXITING PROCESS FILE HOOK ------\n\n")
 * 
 */

#line 630 "dsproc3/core.pyx"
  __pyx_k_tuple_48 = PyTuple_Pack(2, ((PyObject *)__pyx_kp_s_6), ((PyObject *)__pyx_kp_s_47)); if (unlikely(!__pyx_k_tuple_48)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 630 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_48);

#line 630 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_48));

  /* "dsproc3/core.pyx":631
 *             if not status_text:
 *                 error("Unknown Data Processing Error (check logs)","Error message not set by process_file_hook function\n")
 *         debug_lv1("----- EXITING PROCESS FILE HOOK ------\n\n")             # <<<<<<<<<<<<<<
 * 
 *     return status
 */

#line 631 "dsproc3/core.pyx"
  __pyx_k_tuple_50 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_s_49)); if (unlikely(!__pyx_k_tuple_50)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 631 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_50);

#line 631 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_50));

  /* "dsproc3/core.pyx":747
 *     if type == np.dtype(np.uint8):
 *         return CDS_CHAR
 *     elif type == np.dtype('S1'):             # <<<<<<<<<<<<<<
 *         return CDS_CHAR
 *     elif type == np.dtype(np.str):
 */

#line 747 "dsproc3/core.pyx"
  __pyx_k_tuple_52 = PyTuple_Pack(1, ((PyObject *)__pyx_n_s__S1)); if (unlikely(!__pyx_k_tuple_52)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 747 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_52);

#line 747 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_52));

  /* "dsproc3/core.pyx":1733
 *     if -1 == length:
 *         if qc_vars and aqc_vars:
 *             return None,None,None             # <<<<<<<<<<<<<<
 *         elif qc_vars or aqc_vars:
 *             return None,None
 */

#line 1733 "dsproc3/core.pyx"
  __pyx_k_tuple_57 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_k_tuple_57)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1733 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_57);

#line 1733 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_57));

  /* "dsproc3/core.pyx":1735
 *             return None,None,None
 *         elif qc_vars or aqc_vars:
 *             return None,None             # <<<<<<<<<<<<<<
 *         else:
 *             return None
 */

#line 1735 "dsproc3/core.pyx"
  __pyx_k_tuple_58 = PyTuple_Pack(2, Py_None, Py_None); if (unlikely(!__pyx_k_tuple_58)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1735 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_58);

#line 1735 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_58));

  /* "dsproc3/core.pyx":2107
 *                 &sample_count, missing_c, NULL)
 *         if datap == NULL:
 *             return None,None             # <<<<<<<<<<<<<<
 *         dims = <np.npy_intp*>malloc(sizeof(np.npy_intp) * ndims)
 *         for i in range(ndims):
 */

#line 2107 "dsproc3/core.pyx"
  __pyx_k_tuple_59 = PyTuple_Pack(2, Py_None, Py_None); if (unlikely(!__pyx_k_tuple_59)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2107 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_59);

#line 2107 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_59));

  /* "dsproc3/core.pyx":2124
 *                 &sample_count, missing_c, data.data)
 *         if datap == NULL:
 *             return None,None             # <<<<<<<<<<<<<<
 *         return data, _convert_single(type, missing_c)
 * 
 */

#line 2124 "dsproc3/core.pyx"
  __pyx_k_tuple_60 = PyTuple_Pack(2, Py_None, Py_None); if (unlikely(!__pyx_k_tuple_60)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2124 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_60);

#line 2124 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_60));

  /* "dsproc3/core.pyx":3006
 * 
 *     if ndsids == 0:
 *         error("KLG FILL in with text for dsproc_enoindsc\n","Could not find an input datastream defined in the database\n")             # <<<<<<<<<<<<<<
 *         return
 * 
 */

#line 3006 "dsproc3/core.pyx"
  __pyx_k_tuple_63 = PyTuple_Pack(2, ((PyObject *)__pyx_kp_s_61), ((PyObject *)__pyx_kp_s_62)); if (unlikely(!__pyx_k_tuple_63)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3006; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3006 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_63);

#line 3006 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_63));

  /* "dsproc3/core.pyx":3016
 *                 dsid = dsids[dsi]
 *             else:
 *                 error("KLG fill in with text for dsproc_etoomanyindsc\n",             # <<<<<<<<<<<<<<
 *                     "Too many level 0 input datastreams defined in database\n"
 *                     "  -> ingests only support one level 0 input datastream\n");
 */

#line 3016 "dsproc3/core.pyx"
  __pyx_k_tuple_66 = PyTuple_Pack(2, ((PyObject *)__pyx_kp_s_64), ((PyObject *)__pyx_kp_s_65)); if (unlikely(!__pyx_k_tuple_66)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3016 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_66);

#line 3016 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_66));

  /* "numpy.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */

#line 215 "numpy.pxd"
  __pyx_k_tuple_81 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_u_80)); if (unlikely(!__pyx_k_tuple_81)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 215 "numpy.pxd"
  __Pyx_GOTREF(__pyx_k_tuple_81);

#line 215 "numpy.pxd"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_81));

  /* "numpy.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */

#line 219 "numpy.pxd"
  __pyx_k_tuple_83 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_u_82)); if (unlikely(!__pyx_k_tuple_83)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 219 "numpy.pxd"
  __Pyx_GOTREF(__pyx_k_tuple_83);

#line 219 "numpy.pxd"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_83));

  /* "numpy.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */

#line 257 "numpy.pxd"
  __pyx_k_tuple_85 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_u_84)); if (unlikely(!__pyx_k_tuple_85)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 257 "numpy.pxd"
  __Pyx_GOTREF(__pyx_k_tuple_85);

#line 257 "numpy.pxd"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_85));

  /* "numpy.pxd":799
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */

#line 799 "numpy.pxd"
  __pyx_k_tuple_88 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_u_87)); if (unlikely(!__pyx_k_tuple_88)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 799 "numpy.pxd"
  __Pyx_GOTREF(__pyx_k_tuple_88);

#line 799 "numpy.pxd"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_88));

  /* "numpy.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */

#line 803 "numpy.pxd"
  __pyx_k_tuple_89 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_u_84)); if (unlikely(!__pyx_k_tuple_89)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 803 "numpy.pxd"
  __Pyx_GOTREF(__pyx_k_tuple_89);

#line 803 "numpy.pxd"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_89));

  /* "numpy.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */

#line 823 "numpy.pxd"
  __pyx_k_tuple_91 = PyTuple_Pack(1, ((PyObject *)__pyx_kp_u_90)); if (unlikely(!__pyx_k_tuple_91)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 823 "numpy.pxd"
  __Pyx_GOTREF(__pyx_k_tuple_91);

#line 823 "numpy.pxd"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_91));

  /* "dsproc3/core.pyx":86
 * 
 * #def LOG(char *format, *args, char *_file="", int _line=0):
 * def log(char *format, *args):             # <<<<<<<<<<<<<<
 *     s=format
 *     file,line,func=__line()
 */

#line 86 "dsproc3/core.pyx"
  __pyx_k_tuple_92 = PyTuple_Pack(7, ((PyObject *)__pyx_n_s__format), ((PyObject *)__pyx_n_s__args), ((PyObject *)__pyx_n_s__args), ((PyObject *)__pyx_n_s__s), ((PyObject *)__pyx_n_s__file), ((PyObject *)__pyx_n_s__line), ((PyObject *)__pyx_n_s__func)); if (unlikely(!__pyx_k_tuple_92)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 86 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_92);

#line 86 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_92));

#line 86 "dsproc3/core.pyx"
  __pyx_k_codeobj_93 = (PyObject*)__Pyx_PyCode_New(1, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_92, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__log, 86, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_93)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":98
 * 
 * #def WARNING(char *format, *args, char *_file="", int _line=0):
 * def warning(char *format, *args):             # <<<<<<<<<<<<<<
 *     s=format
 *     file,line,func=__line()
 */

#line 98 "dsproc3/core.pyx"
  __pyx_k_tuple_96 = PyTuple_Pack(7, ((PyObject *)__pyx_n_s__format), ((PyObject *)__pyx_n_s__args), ((PyObject *)__pyx_n_s__args), ((PyObject *)__pyx_n_s__s), ((PyObject *)__pyx_n_s__file), ((PyObject *)__pyx_n_s__line), ((PyObject *)__pyx_n_s__func)); if (unlikely(!__pyx_k_tuple_96)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 98 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_96);

#line 98 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_96));

#line 98 "dsproc3/core.pyx"
  __pyx_k_codeobj_97 = (PyObject*)__Pyx_PyCode_New(1, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_96, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__warning, 98, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_97)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":109
 * 
 * #def ERROR(char *status, char *format, *args, char *_file="", int _line=0):
 * def error(char *status, char *format, *args):             # <<<<<<<<<<<<<<
 *     s=format
 *     file,line,func=__line()
 */

#line 109 "dsproc3/core.pyx"
  __pyx_k_tuple_98 = PyTuple_Pack(8, ((PyObject *)__pyx_n_s__status), ((PyObject *)__pyx_n_s__format), ((PyObject *)__pyx_n_s__args), ((PyObject *)__pyx_n_s__args), ((PyObject *)__pyx_n_s__s), ((PyObject *)__pyx_n_s__file), ((PyObject *)__pyx_n_s__line), ((PyObject *)__pyx_n_s__func)); if (unlikely(!__pyx_k_tuple_98)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 109 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_98);

#line 109 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_98));

#line 109 "dsproc3/core.pyx"
  __pyx_k_codeobj_99 = (PyObject*)__Pyx_PyCode_New(2, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__error, 109, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_99)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":119
 *     dsproc_error(func, file, line, status, s)
 * 
 * def mentor_mail(char *format, *args):             # <<<<<<<<<<<<<<
 *     s=format
 *     file,line,func=__line()
 */

#line 119 "dsproc3/core.pyx"
  __pyx_k_tuple_100 = PyTuple_Pack(7, ((PyObject *)__pyx_n_s__format), ((PyObject *)__pyx_n_s__args), ((PyObject *)__pyx_n_s__args), ((PyObject *)__pyx_n_s__s), ((PyObject *)__pyx_n_s__file), ((PyObject *)__pyx_n_s__line), ((PyObject *)__pyx_n_s__func)); if (unlikely(!__pyx_k_tuple_100)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 119 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_100);

#line 119 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_100));

#line 119 "dsproc3/core.pyx"
  __pyx_k_codeobj_101 = (PyObject*)__Pyx_PyCode_New(1, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__mentor_mail, 119, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_101)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":130
 * 
 * #def debug_lv1(char *format, *args, char *_file="", int _line=0):
 * def debug_lv1(char *format, *args):             # <<<<<<<<<<<<<<
 *     s=format
 *     file,line,func=__line()
 */

#line 130 "dsproc3/core.pyx"
  __pyx_k_tuple_102 = PyTuple_Pack(7, ((PyObject *)__pyx_n_s__format), ((PyObject *)__pyx_n_s__args), ((PyObject *)__pyx_n_s__args), ((PyObject *)__pyx_n_s__s), ((PyObject *)__pyx_n_s__file), ((PyObject *)__pyx_n_s__line), ((PyObject *)__pyx_n_s__func)); if (unlikely(!__pyx_k_tuple_102)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 130 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_102);

#line 130 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_102));

#line 130 "dsproc3/core.pyx"
  __pyx_k_codeobj_103 = (PyObject*)__Pyx_PyCode_New(1, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_102, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__debug_lv1, 130, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_103)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":145
 *         dsproc_debug(func, file, line, 1, s)
 * 
 * def debug_lv2(char *format, *args):             # <<<<<<<<<<<<<<
 *     s=format
 *     file,line,func=__line()
 */

#line 145 "dsproc3/core.pyx"
  __pyx_k_tuple_104 = PyTuple_Pack(7, ((PyObject *)__pyx_n_s__format), ((PyObject *)__pyx_n_s__args), ((PyObject *)__pyx_n_s__args), ((PyObject *)__pyx_n_s__s), ((PyObject *)__pyx_n_s__file), ((PyObject *)__pyx_n_s__line), ((PyObject *)__pyx_n_s__func)); if (unlikely(!__pyx_k_tuple_104)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 145 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_104);

#line 145 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_104));

#line 145 "dsproc3/core.pyx"
  __pyx_k_codeobj_105 = (PyObject*)__Pyx_PyCode_New(1, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_104, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__debug_lv2, 145, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_105)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":156
 *         dsproc_debug(func, file, line, 2, s)
 * 
 * def debug_lv3(char *format, *args):             # <<<<<<<<<<<<<<
 *     s=format
 *     file,line,func=__line()
 */

#line 156 "dsproc3/core.pyx"
  __pyx_k_tuple_106 = PyTuple_Pack(7, ((PyObject *)__pyx_n_s__format), ((PyObject *)__pyx_n_s__args), ((PyObject *)__pyx_n_s__args), ((PyObject *)__pyx_n_s__s), ((PyObject *)__pyx_n_s__file), ((PyObject *)__pyx_n_s__line), ((PyObject *)__pyx_n_s__func)); if (unlikely(!__pyx_k_tuple_106)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 156 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_106);

#line 156 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_106));

#line 156 "dsproc3/core.pyx"
  __pyx_k_codeobj_107 = (PyObject*)__Pyx_PyCode_New(1, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__debug_lv3, 156, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_107)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":167
 *         dsproc_debug(func, file, line, 3, s)
 * 
 * def debug_lv4(char *format, *args):             # <<<<<<<<<<<<<<
 *     s=format
 *     file,line,func=__line()
 */

#line 167 "dsproc3/core.pyx"
  __pyx_k_tuple_108 = PyTuple_Pack(7, ((PyObject *)__pyx_n_s__format), ((PyObject *)__pyx_n_s__args), ((PyObject *)__pyx_n_s__args), ((PyObject *)__pyx_n_s__s), ((PyObject *)__pyx_n_s__file), ((PyObject *)__pyx_n_s__line), ((PyObject *)__pyx_n_s__func)); if (unlikely(!__pyx_k_tuple_108)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 167 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_108);

#line 167 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_108));

#line 167 "dsproc3/core.pyx"
  __pyx_k_codeobj_109 = (PyObject*)__Pyx_PyCode_New(1, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_108, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__debug_lv4, 167, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_109)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":178
 *         dsproc_debug(func, file, line, 4, s)
 * 
 * def debug_lv5(char *format, *args):             # <<<<<<<<<<<<<<
 *     s=format
 *     file,line,func=__line()
 */

#line 178 "dsproc3/core.pyx"
  __pyx_k_tuple_110 = PyTuple_Pack(7, ((PyObject *)__pyx_n_s__format), ((PyObject *)__pyx_n_s__args), ((PyObject *)__pyx_n_s__args), ((PyObject *)__pyx_n_s__s), ((PyObject *)__pyx_n_s__file), ((PyObject *)__pyx_n_s__line), ((PyObject *)__pyx_n_s__func)); if (unlikely(!__pyx_k_tuple_110)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 178 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_110);

#line 178 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_110));

#line 178 "dsproc3/core.pyx"
  __pyx_k_codeobj_111 = (PyObject*)__Pyx_PyCode_New(1, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_110, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__debug_lv5, 178, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_111)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":202
 * _process_file_hook = None
 * 
 * def set_init_process_hook(hook):             # <<<<<<<<<<<<<<
 *     """Set hook function to call when a process is first initialized.
 * 
 */

#line 202 "dsproc3/core.pyx"
  __pyx_k_tuple_112 = PyTuple_Pack(1, ((PyObject *)__pyx_n_s__hook)); if (unlikely(!__pyx_k_tuple_112)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 202 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_112);

#line 202 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_112));

#line 202 "dsproc3/core.pyx"
  __pyx_k_codeobj_113 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_112, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_114, 202, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_113)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":225
 *     _init_process_hook = hook
 * 
 * def set_finish_process_hook(hook):             # <<<<<<<<<<<<<<
 *     """Set hook function to call before a process finishes.
 * 
 */

#line 225 "dsproc3/core.pyx"
  __pyx_k_tuple_115 = PyTuple_Pack(1, ((PyObject *)__pyx_n_s__hook)); if (unlikely(!__pyx_k_tuple_115)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 225 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_115);

#line 225 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_115));

#line 225 "dsproc3/core.pyx"
  __pyx_k_codeobj_116 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_115, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_117, 225, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_116)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":246
 *     _finish_process_hook = hook
 * 
 * def set_process_data_hook(hook):             # <<<<<<<<<<<<<<
 *     """Set the main data processing function.
 * 
 */

#line 246 "dsproc3/core.pyx"
  __pyx_k_tuple_118 = PyTuple_Pack(1, ((PyObject *)__pyx_n_s__hook)); if (unlikely(!__pyx_k_tuple_118)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 246 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_118);

#line 246 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_118));

#line 246 "dsproc3/core.pyx"
  __pyx_k_codeobj_119 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_118, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_120, 246, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_119)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":276
 *     _process_data_hook = hook
 * 
 * def set_pre_retrieval_hook(hook):             # <<<<<<<<<<<<<<
 *     """Set hook function to call before data is retrieved.
 * 
 */

#line 276 "dsproc3/core.pyx"
  __pyx_k_tuple_121 = PyTuple_Pack(1, ((PyObject *)__pyx_n_s__hook)); if (unlikely(!__pyx_k_tuple_121)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_121);

#line 276 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_121));

#line 276 "dsproc3/core.pyx"
  __pyx_k_codeobj_122 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_121, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_123, 276, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_122)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":305
 *     _pre_retrieval_hook = hook
 * 
 * def set_post_retrieval_hook(hook):             # <<<<<<<<<<<<<<
 *     """Set hook function to call after data is retrieved.
 * 
 */

#line 305 "dsproc3/core.pyx"
  __pyx_k_tuple_124 = PyTuple_Pack(1, ((PyObject *)__pyx_n_s__hook)); if (unlikely(!__pyx_k_tuple_124)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 305 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_124);

#line 305 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_124));

#line 305 "dsproc3/core.pyx"
  __pyx_k_codeobj_125 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_124, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_126, 305, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_125)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":335
 *     _post_retrieval_hook = hook
 * 
 * def set_pre_transform_hook(hook):             # <<<<<<<<<<<<<<
 *     """Set hook function to call before the data is transformed.
 * 
 */

#line 335 "dsproc3/core.pyx"
  __pyx_k_tuple_127 = PyTuple_Pack(1, ((PyObject *)__pyx_n_s__hook)); if (unlikely(!__pyx_k_tuple_127)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 335 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_127);

#line 335 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_127));

#line 335 "dsproc3/core.pyx"
  __pyx_k_codeobj_128 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_127, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_129, 335, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_128)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":365
 *     _pre_transform_hook = hook
 * 
 * def set_post_transform_hook(hook):             # <<<<<<<<<<<<<<
 *     """Set hook function to call after the data is transformed.
 * 
 */

#line 365 "dsproc3/core.pyx"
  __pyx_k_tuple_130 = PyTuple_Pack(1, ((PyObject *)__pyx_n_s__hook)); if (unlikely(!__pyx_k_tuple_130)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 365 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_130);

#line 365 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_130));

#line 365 "dsproc3/core.pyx"
  __pyx_k_codeobj_131 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_130, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_132, 365, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_131)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":395
 *     _post_transform_hook = hook
 * 
 * def set_process_file_hook(hook):             # <<<<<<<<<<<<<<
 *     """Set the main file processing function.
 * 
 */

#line 395 "dsproc3/core.pyx"
  __pyx_k_tuple_133 = PyTuple_Pack(1, ((PyObject *)__pyx_n_s__hook)); if (unlikely(!__pyx_k_tuple_133)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 395 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_133);

#line 395 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_133));

#line 395 "dsproc3/core.pyx"
  __pyx_k_codeobj_134 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_133, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_135, 395, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_134)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":422
 *     _process_file_hook = hook
 * 
 * def _run_init_process_hook():             # <<<<<<<<<<<<<<
 *     """Private: Run the init_process_hook function.
 * 
 */

#line 422 "dsproc3/core.pyx"
  __pyx_k_tuple_136 = PyTuple_Pack(1, ((PyObject *)__pyx_n_s__status_text)); if (unlikely(!__pyx_k_tuple_136)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_136);

#line 422 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_136));

#line 422 "dsproc3/core.pyx"
  __pyx_k_codeobj_137 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_136, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_78, 422, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_137)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":443
 *     return 1
 * 
 * def _run_finish_process_hook():             # <<<<<<<<<<<<<<
 *     """Private: Run the finish_process_hook function."""
 *     if _finish_process_hook:
 */

#line 443 "dsproc3/core.pyx"
  __pyx_k_codeobj_138 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_79, 443, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_138)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":450
 *         debug_lv1("----- EXITING FINISH PROCESS HOOK ------\n\n")
 * 
 * def _run_process_data_hook(             # <<<<<<<<<<<<<<
 *         time_t begin_date,
 *         time_t end_date,
 */

#line 450 "dsproc3/core.pyx"
  __pyx_k_tuple_139 = PyTuple_Pack(5, ((PyObject *)__pyx_n_s__begin_date), ((PyObject *)__pyx_n_s__end_date), ((PyObject *)__pyx_n_s__input_data), ((PyObject *)__pyx_n_s__status_text), ((PyObject *)__pyx_n_s__status)); if (unlikely(!__pyx_k_tuple_139)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 450 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_139);

#line 450 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_139));

#line 450 "dsproc3/core.pyx"
  __pyx_k_codeobj_140 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_139, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_77, 450, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_140)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":482
 *     return status
 * 
 * def _run_pre_retrieval_hook(             # <<<<<<<<<<<<<<
 *         time_t   begin_date,
 *         time_t   end_date):
 */

#line 482 "dsproc3/core.pyx"
  __pyx_k_tuple_141 = PyTuple_Pack(4, ((PyObject *)__pyx_n_s__begin_date), ((PyObject *)__pyx_n_s__end_date), ((PyObject *)__pyx_n_s__status_text), ((PyObject *)__pyx_n_s__status)); if (unlikely(!__pyx_k_tuple_141)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 482 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_141);

#line 482 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_141));

#line 482 "dsproc3/core.pyx"
  __pyx_k_codeobj_142 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_141, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_73, 482, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_142)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":511
 *     return status
 * 
 * def _run_post_retrieval_hook(             # <<<<<<<<<<<<<<
 *         time_t begin_date,
 *         time_t end_date,
 */

#line 511 "dsproc3/core.pyx"
  __pyx_k_tuple_143 = PyTuple_Pack(5, ((PyObject *)__pyx_n_s__begin_date), ((PyObject *)__pyx_n_s__end_date), ((PyObject *)__pyx_n_s__ret_data), ((PyObject *)__pyx_n_s__status_text), ((PyObject *)__pyx_n_s__status)); if (unlikely(!__pyx_k_tuple_143)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 511 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_143);

#line 511 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_143));

#line 511 "dsproc3/core.pyx"
  __pyx_k_codeobj_144 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_143, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_74, 511, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_144)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":542
 *     return status
 * 
 * def _run_pre_transform_hook(             # <<<<<<<<<<<<<<
 *         time_t begin_date,
 *         time_t end_date,
 */

#line 542 "dsproc3/core.pyx"
  __pyx_k_tuple_145 = PyTuple_Pack(5, ((PyObject *)__pyx_n_s__begin_date), ((PyObject *)__pyx_n_s__end_date), ((PyObject *)__pyx_n_s__ret_data), ((PyObject *)__pyx_n_s__status_text), ((PyObject *)__pyx_n_s__status)); if (unlikely(!__pyx_k_tuple_145)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 542 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_145);

#line 542 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_145));

#line 542 "dsproc3/core.pyx"
  __pyx_k_codeobj_146 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_145, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_75, 542, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_146)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":573
 *     return status
 * 
 * def _run_post_transform_hook(             # <<<<<<<<<<<<<<
 *         time_t begin_date,
 *         time_t end_date,
 */

#line 573 "dsproc3/core.pyx"
  __pyx_k_tuple_147 = PyTuple_Pack(5, ((PyObject *)__pyx_n_s__begin_date), ((PyObject *)__pyx_n_s__end_date), ((PyObject *)__pyx_n_s__trans_data), ((PyObject *)__pyx_n_s__status_text), ((PyObject *)__pyx_n_s__status)); if (unlikely(!__pyx_k_tuple_147)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 573 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_147);

#line 573 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_147));

#line 573 "dsproc3/core.pyx"
  __pyx_k_codeobj_148 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_147, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_76, 573, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_148)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":605
 *     return status
 * 
 * def _run_process_file_hook(             # <<<<<<<<<<<<<<
 *         char *input_dir,
 *         char *file_name):
 */

#line 605 "dsproc3/core.pyx"
  __pyx_k_tuple_149 = PyTuple_Pack(4, ((PyObject *)__pyx_n_s__input_dir), ((PyObject *)__pyx_n_s__file_name), ((PyObject *)__pyx_n_s__status_text), ((PyObject *)__pyx_n_s__status)); if (unlikely(!__pyx_k_tuple_149)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 605 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_149);

#line 605 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_149));

#line 605 "dsproc3/core.pyx"
  __pyx_k_codeobj_150 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_149, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_72, 605, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_150)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":764
 *         raise ValueError, "Unknown dtype for CDSDataType %s" % type
 * 
 * def get_debug_level():             # <<<<<<<<<<<<<<
 *     """Get the current debug level."""
 *     return dsproc_get_debug_level()
 */

#line 764 "dsproc3/core.pyx"
  __pyx_k_codeobj_151 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__get_debug_level, 764, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_151)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":768
 *     return dsproc_get_debug_level()
 * 
 * def get_site():             # <<<<<<<<<<<<<<
 *     """Get the process site."""
 *     return dsproc_get_site()
 */

#line 768 "dsproc3/core.pyx"
  __pyx_k_codeobj_152 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__get_site, 768, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_152)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":772
 *     return dsproc_get_site()
 * 
 * def get_facility():             # <<<<<<<<<<<<<<
 *     """Get the process facility."""
 *     return dsproc_get_facility()
 */

#line 772 "dsproc3/core.pyx"
  __pyx_k_codeobj_153 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__get_facility, 772, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_153)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":776
 *     return dsproc_get_facility()
 * 
 * def get_name():             # <<<<<<<<<<<<<<
 *     """Get the process name."""
 *     return dsproc_get_name()
 */

#line 776 "dsproc3/core.pyx"
  __pyx_k_codeobj_154 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__get_name, 776, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_154)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 776; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":780
 *     return dsproc_get_name()
 * 
 * def get_datastream_id(             # <<<<<<<<<<<<<<
 *         char *site,
 *         char *facility,
 */

#line 780 "dsproc3/core.pyx"
  __pyx_k_tuple_155 = PyTuple_Pack(5, ((PyObject *)__pyx_n_s__site), ((PyObject *)__pyx_n_s__facility), ((PyObject *)__pyx_n_s__dsc_name), ((PyObject *)__pyx_n_s__dsc_level), ((PyObject *)__pyx_n_s__role)); if (unlikely(!__pyx_k_tuple_155)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 780 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_155);

#line 780 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_155));

#line 780 "dsproc3/core.pyx"
  __pyx_k_codeobj_156 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_155, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__get_datastream_id, 780, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_156)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":800
 *     return dsproc_get_datastream_id(site, facility, dsc_name, dsc_level, role)
 * 
 * def get_input_datastream_id(char *dsc_name, char *dsc_level):             # <<<<<<<<<<<<<<
 *     """Get the ID of an input datastream.
 * 
 */

#line 800 "dsproc3/core.pyx"
  __pyx_k_tuple_157 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__dsc_name), ((PyObject *)__pyx_n_s__dsc_level)); if (unlikely(!__pyx_k_tuple_157)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 800; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 800 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_157);

#line 800 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_157));

#line 800 "dsproc3/core.pyx"
  __pyx_k_codeobj_158 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_157, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_159, 800, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_158)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 800; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":818
 *     return dsproc_get_input_datastream_id(dsc_name, dsc_level)
 * 
 * def get_input_datastream_ids():             # <<<<<<<<<<<<<<
 *     """Get the IDs of all input datastreams.
 * 
 */

#line 818 "dsproc3/core.pyx"
  __pyx_k_tuple_160 = PyTuple_Pack(4, ((PyObject *)__pyx_n_s__ids), ((PyObject *)__pyx_n_s__count), ((PyObject *)__pyx_n_s__dims), ((PyObject *)__pyx_n_s__ids_nd)); if (unlikely(!__pyx_k_tuple_160)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 818; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 818 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_160);

#line 818 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_160));

#line 818 "dsproc3/core.pyx"
  __pyx_k_codeobj_161 = (PyObject*)__Pyx_PyCode_New(0, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_160, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_162, 818, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_161)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 818; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":847
 *     return ids_nd
 * 
 * def get_output_datastream_id(char *dsc_name, char *dsc_level):             # <<<<<<<<<<<<<<
 *     """Get the ID of an output datastream.
 * 
 */

#line 847 "dsproc3/core.pyx"
  __pyx_k_tuple_163 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__dsc_name), ((PyObject *)__pyx_n_s__dsc_level)); if (unlikely(!__pyx_k_tuple_163)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 847 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_163);

#line 847 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_163));

#line 847 "dsproc3/core.pyx"
  __pyx_k_codeobj_164 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_163, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_165, 847, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_164)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":865
 *     return dsproc_get_output_datastream_id(dsc_name, dsc_level)
 * 
 * def get_output_datastream_ids():             # <<<<<<<<<<<<<<
 *     """Get the IDs of all output datastreams.
 * 
 */

#line 865 "dsproc3/core.pyx"
  __pyx_k_tuple_166 = PyTuple_Pack(4, ((PyObject *)__pyx_n_s__ids), ((PyObject *)__pyx_n_s__count), ((PyObject *)__pyx_n_s__dims), ((PyObject *)__pyx_n_s__ids_nd)); if (unlikely(!__pyx_k_tuple_166)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 865 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_166);

#line 865 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_166));

#line 865 "dsproc3/core.pyx"
  __pyx_k_codeobj_167 = (PyObject*)__Pyx_PyCode_New(0, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_166, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_168, 865, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_167)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":894
 *     return ids_nd
 * 
 * def datastream_name(int ds_id):             # <<<<<<<<<<<<<<
 *     """Returns the fully qualified datastream name.
 * 
 */

#line 894 "dsproc3/core.pyx"
  __pyx_k_tuple_169 = PyTuple_Pack(3, ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__retval)); if (unlikely(!__pyx_k_tuple_169)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 894 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_169);

#line 894 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_169));

#line 894 "dsproc3/core.pyx"
  __pyx_k_codeobj_170 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_169, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__datastream_name, 894, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_170)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":908
 *     return retval
 * 
 * def datastream_path(int ds_id):             # <<<<<<<<<<<<<<
 *     """Returns the path to the datastream directory.
 * 
 */

#line 908 "dsproc3/core.pyx"
  __pyx_k_tuple_171 = PyTuple_Pack(3, ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__retval)); if (unlikely(!__pyx_k_tuple_171)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 908 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_171);

#line 908 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_171));

#line 908 "dsproc3/core.pyx"
  __pyx_k_codeobj_172 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_171, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__datastream_path, 908, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_172)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":922
 *     return retval
 * 
 * def datastream_site(int ds_id):             # <<<<<<<<<<<<<<
 *     """Returns the datastream site.
 * 
 */

#line 922 "dsproc3/core.pyx"
  __pyx_k_tuple_173 = PyTuple_Pack(3, ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__retval)); if (unlikely(!__pyx_k_tuple_173)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 922 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_173);

#line 922 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_173));

#line 922 "dsproc3/core.pyx"
  __pyx_k_codeobj_174 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_173, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__datastream_site, 922, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_174)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":936
 *     return retval
 * 
 * def datastream_facility(int ds_id):             # <<<<<<<<<<<<<<
 *     """ 995  * Returns the datastream facility.
 * 
 */

#line 936 "dsproc3/core.pyx"
  __pyx_k_tuple_175 = PyTuple_Pack(3, ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__retval)); if (unlikely(!__pyx_k_tuple_175)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 936 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_175);

#line 936 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_175));

#line 936 "dsproc3/core.pyx"
  __pyx_k_codeobj_176 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_175, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__datastream_facility, 936, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_176)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":950
 *     return retval
 * 
 * def datastream_class_name(int ds_id):             # <<<<<<<<<<<<<<
 *     """Returns the datastream class name.
 * 
 */

#line 950 "dsproc3/core.pyx"
  __pyx_k_tuple_177 = PyTuple_Pack(3, ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__retval)); if (unlikely(!__pyx_k_tuple_177)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 950; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 950 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_177);

#line 950 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_177));

#line 950 "dsproc3/core.pyx"
  __pyx_k_codeobj_178 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_177, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_179, 950, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_178)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 950; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":964
 *     return retval
 * 
 * def datastream_class_level(int ds_id):             # <<<<<<<<<<<<<<
 *     """Returns the datastream class level.
 * 
 */

#line 964 "dsproc3/core.pyx"
  __pyx_k_tuple_180 = PyTuple_Pack(3, ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__retval)); if (unlikely(!__pyx_k_tuple_180)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 964 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_180);

#line 964 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_180));

#line 964 "dsproc3/core.pyx"
  __pyx_k_codeobj_181 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_180, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_182, 964, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_181)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":978
 *     return retval
 * 
 * def dataset_name(cds3.core.Group dataset):             # <<<<<<<<<<<<<<
 *     """Returns the dataset name.
 * 
 */

#line 978 "dsproc3/core.pyx"
  __pyx_k_tuple_183 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__dataset), ((PyObject *)__pyx_n_s__retval)); if (unlikely(!__pyx_k_tuple_183)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 978 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_183);

#line 978 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_183));

#line 978 "dsproc3/core.pyx"
  __pyx_k_codeobj_184 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_183, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__dataset_name, 978, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_184)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":995
 *     return retval
 * 
 * def get_output_dataset(int ds_id, int obs_index=0):             # <<<<<<<<<<<<<<
 *     """Get an output dataset.
 * 
 */

#line 995 "dsproc3/core.pyx"
  __pyx_k_tuple_185 = PyTuple_Pack(4, ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__obs_index), ((PyObject *)__pyx_n_s__group), ((PyObject *)__pyx_n_s__cds_group)); if (unlikely(!__pyx_k_tuple_185)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 995; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 995 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_185);

#line 995 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_185));

#line 995 "dsproc3/core.pyx"
  __pyx_k_codeobj_186 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_185, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__get_output_dataset, 995, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_186)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 995; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1029
 *         return group
 * 
 * def get_retrieved_dataset(int ds_id, int obs_index=0):             # <<<<<<<<<<<<<<
 *     """Get a retrieved dataset.
 * 
 */

#line 1029 "dsproc3/core.pyx"
  __pyx_k_tuple_187 = PyTuple_Pack(4, ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__obs_index), ((PyObject *)__pyx_n_s__group), ((PyObject *)__pyx_n_s__cds_group)); if (unlikely(!__pyx_k_tuple_187)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1029; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1029 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_187);

#line 1029 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_187));

#line 1029 "dsproc3/core.pyx"
  __pyx_k_codeobj_188 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_187, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_189, 1029, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_188)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1029; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1075
 *         return group
 * 
 * def get_transformed_dataset(             # <<<<<<<<<<<<<<
 *         char *coordsys_name,
 *         int ds_id,
 */

#line 1075 "dsproc3/core.pyx"
  __pyx_k_tuple_190 = PyTuple_Pack(5, ((PyObject *)__pyx_n_s__coordsys_name), ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__obs_index), ((PyObject *)__pyx_n_s__group), ((PyObject *)__pyx_n_s__cds_group)); if (unlikely(!__pyx_k_tuple_190)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1075 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_190);

#line 1075 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_190));

#line 1075 "dsproc3/core.pyx"
  __pyx_k_codeobj_191 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_190, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_192, 1075, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_191)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1108
 *         return group
 * 
 * def get_dim(cds3.core.Group dataset, char *name):             # <<<<<<<<<<<<<<
 *     """Get a dimension from a dataset.
 * 
 */

#line 1108 "dsproc3/core.pyx"
  __pyx_k_tuple_193 = PyTuple_Pack(4, ((PyObject *)__pyx_n_s__dataset), ((PyObject *)__pyx_n_s__name), ((PyObject *)__pyx_n_s__dim), ((PyObject *)__pyx_n_s__cds_dim)); if (unlikely(!__pyx_k_tuple_193)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1108 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_193);

#line 1108 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_193));

#line 1108 "dsproc3/core.pyx"
  __pyx_k_codeobj_194 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_193, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__get_dim, 1108, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_194)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1128
 *         return dim
 * 
 * def get_dim_length(cds3.core.Group dataset, char *name):             # <<<<<<<<<<<<<<
 *     """Get the length of a dimension in a dataset.
 * 
 */

#line 1128 "dsproc3/core.pyx"
  __pyx_k_tuple_195 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__dataset), ((PyObject *)__pyx_n_s__name)); if (unlikely(!__pyx_k_tuple_195)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1128 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_195);

#line 1128 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_195));

#line 1128 "dsproc3/core.pyx"
  __pyx_k_codeobj_196 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_195, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__get_dim_length, 1128, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_196)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1140
 *     return dsproc_get_dim_length(dataset.c_ob, name)
 * 
 * def set_dim_length(cds3.core.Group dataset, char *name, size_t length):             # <<<<<<<<<<<<<<
 *     """Set the length of a dimension in a dataset.
 * 
 */

#line 1140 "dsproc3/core.pyx"
  __pyx_k_tuple_197 = PyTuple_Pack(3, ((PyObject *)__pyx_n_s__dataset), ((PyObject *)__pyx_n_s__name), ((PyObject *)__pyx_n_s__length)); if (unlikely(!__pyx_k_tuple_197)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1140 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_197);

#line 1140 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_197));

#line 1140 "dsproc3/core.pyx"
  __pyx_k_codeobj_198 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_197, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__set_dim_length, 1140, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_198)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1158
 *     return dsproc_set_dim_length(dataset.c_ob, name, length)
 * 
 * def change_att(             # <<<<<<<<<<<<<<
 *             cds3.core.Object parent,
 *             int          overwrite,
 */

#line 1158 "dsproc3/core.pyx"
  __pyx_k_tuple_199 = PyTuple_Pack(6, ((PyObject *)__pyx_n_s__parent), ((PyObject *)__pyx_n_s__overwrite), ((PyObject *)__pyx_n_s__name), ((PyObject *)__pyx_n_s__type), ((PyObject *)__pyx_n_s__value), ((PyObject *)__pyx_n_s__value_nd)); if (unlikely(!__pyx_k_tuple_199)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1158 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_199);

#line 1158 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_199));

#line 1158 "dsproc3/core.pyx"
  __pyx_k_codeobj_200 = (PyObject*)__Pyx_PyCode_New(5, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_199, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__change_att, 1158, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_200)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1195
 *             len(value_nd), value_nd.data)
 * 
 * def get_att(cds3.core.Object parent, char  *name):             # <<<<<<<<<<<<<<
 *     """Get an attribute from a dataset or variable.
 * 
 */

#line 1195 "dsproc3/core.pyx"
  __pyx_k_tuple_201 = PyTuple_Pack(4, ((PyObject *)__pyx_n_s__parent), ((PyObject *)__pyx_n_s__name), ((PyObject *)__pyx_n_s__att), ((PyObject *)__pyx_n_s__cds_att)); if (unlikely(!__pyx_k_tuple_201)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1195 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_201);

#line 1195 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_201));

#line 1195 "dsproc3/core.pyx"
  __pyx_k_codeobj_202 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_201, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__get_att, 1195, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_202)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1215
 *         return att
 * 
 * def get_att_text(cds3.core.Object parent, char *name):             # <<<<<<<<<<<<<<
 *     """Get a copy of an attribute value from a dataset or variable.
 * 
 */

#line 1215 "dsproc3/core.pyx"
  __pyx_k_tuple_203 = PyTuple_Pack(5, ((PyObject *)__pyx_n_s__parent), ((PyObject *)__pyx_n_s__name), ((PyObject *)__pyx_n_s__length), ((PyObject *)__pyx_n_s__text), ((PyObject *)__pyx_n_s__retval)); if (unlikely(!__pyx_k_tuple_203)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1215 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_203);

#line 1215 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_203));

#line 1215 "dsproc3/core.pyx"
  __pyx_k_codeobj_204 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_203, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__get_att_text, 1215, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_204)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1243
 *     return retval
 * 
 * def get_att_value(cds3.core.Object parent, char *name, CDSDataType type):             # <<<<<<<<<<<<<<
 *     """Get a copy of an attribute value from a dataset or variable.
 * 
 */

#line 1243 "dsproc3/core.pyx"
  __pyx_k_tuple_205 = PyTuple_Pack(8, ((PyObject *)__pyx_n_s__parent), ((PyObject *)__pyx_n_s__name), ((PyObject *)__pyx_n_s__type), ((PyObject *)__pyx_n_s__length), ((PyObject *)__pyx_n_s__value), ((PyObject *)__pyx_n_s__dtype), ((PyObject *)__pyx_n_s__value_nd), ((PyObject *)__pyx_n_s__dims)); if (unlikely(!__pyx_k_tuple_205)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1243 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_205);

#line 1243 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_205));

#line 1243 "dsproc3/core.pyx"
  __pyx_k_codeobj_206 = (PyObject*)__Pyx_PyCode_New(3, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_205, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__get_att_value, 1243, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_206)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1278
 *     return value_nd
 * 
 * def set_att(cds3.core.Object parent, int overwrite, char *name,             # <<<<<<<<<<<<<<
 *         CDSDataType type, object value):
 *     """Set the value of an attribute in a dataset or variable.
 */

#line 1278 "dsproc3/core.pyx"
  __pyx_k_tuple_207 = PyTuple_Pack(7, ((PyObject *)__pyx_n_s__parent), ((PyObject *)__pyx_n_s__overwrite), ((PyObject *)__pyx_n_s__name), ((PyObject *)__pyx_n_s__type), ((PyObject *)__pyx_n_s__value), ((PyObject *)__pyx_n_s__return_value), ((PyObject *)__pyx_n_s__value_nd)); if (unlikely(!__pyx_k_tuple_207)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1278 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_207);

#line 1278 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_207));

#line 1278 "dsproc3/core.pyx"
  __pyx_k_codeobj_208 = (PyObject*)__Pyx_PyCode_New(5, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_207, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__set_att, 1278, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_208)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1312
 *             len(value_nd), value_nd.data)
 * 
 * def set_att_text(cds3.core.Object parent, char *name, char *value):             # <<<<<<<<<<<<<<
 *     """Set the value of an attribute in a dataset or variable.
 * 
 */

#line 1312 "dsproc3/core.pyx"
  __pyx_k_tuple_209 = PyTuple_Pack(3, ((PyObject *)__pyx_n_s__parent), ((PyObject *)__pyx_n_s__name), ((PyObject *)__pyx_n_s__value)); if (unlikely(!__pyx_k_tuple_209)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1312 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_209);

#line 1312 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_209));

#line 1312 "dsproc3/core.pyx"
  __pyx_k_codeobj_210 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_209, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__set_att_text, 1312, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_210)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1333
 *     return dsproc_set_att_text(parent.cds_object, name, value)
 * 
 * def set_att_value(cds3.core.Object parent, char *name,             # <<<<<<<<<<<<<<
 *         CDSDataType type, object value):
 *     """Set the value of an attribute in a dataset or variable.
 */

#line 1333 "dsproc3/core.pyx"
  __pyx_k_tuple_211 = PyTuple_Pack(5, ((PyObject *)__pyx_n_s__parent), ((PyObject *)__pyx_n_s__name), ((PyObject *)__pyx_n_s__type), ((PyObject *)__pyx_n_s__value), ((PyObject *)__pyx_n_s__value_nd)); if (unlikely(!__pyx_k_tuple_211)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1333 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_211);

#line 1333 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_211));

#line 1333 "dsproc3/core.pyx"
  __pyx_k_codeobj_212 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_211, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__set_att_value, 1333, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_212)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1363
 *             len(value_nd), value_nd.data)
 * 
 * def clone_var(             # <<<<<<<<<<<<<<
 *             cds3.core.Var src_var,
 *             cds3.core.Group dataset=None,
 */

#line 1363 "dsproc3/core.pyx"
  __pyx_k_tuple_213 = PyTuple_Pack(11, ((PyObject *)__pyx_n_s__src_var), ((PyObject *)__pyx_n_s__dataset), ((PyObject *)__pyx_n_s__var_name), ((PyObject *)__pyx_n_s__data_type), ((PyObject *)__pyx_n_s__dim_names), ((PyObject *)__pyx_n_s__copy_data), ((PyObject *)__pyx_n_s__cds_var), ((PyObject *)__pyx_n_s__var), ((PyObject *)__pyx_n_s__c_dim_names), ((PyObject *)__pyx_n_s__cds_group), ((PyObject *)__pyx_n_s__i)); if (unlikely(!__pyx_k_tuple_213)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1363 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_213);

#line 1363 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_213));

#line 1363 "dsproc3/core.pyx"
  __pyx_k_codeobj_214 = (PyObject*)__Pyx_PyCode_New(6, 0, 11, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_213, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__clone_var, 1363, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_214)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1422
 *         return var
 * 
 * def define_var(             # <<<<<<<<<<<<<<
 *             cds3.core.Group dataset,
 *             char *name,
 */

#line 1422 "dsproc3/core.pyx"
  __pyx_k_tuple_215 = PyTuple_Pack(47, ((PyObject *)__pyx_n_s__dataset), ((PyObject *)__pyx_n_s__name), ((PyObject *)__pyx_n_s__type), ((PyObject *)__pyx_n_s__dim_names), ((PyObject *)__pyx_n_s__long_name), ((PyObject *)__pyx_n_s__standard_name), ((PyObject *)__pyx_n_s__units), ((PyObject *)__pyx_n_s__valid_min), ((PyObject *)__pyx_n_s__valid_max), ((PyObject *)__pyx_n_s__missing_value), ((PyObject *)__pyx_n_s__fill_value), ((PyObject *)__pyx_n_s__cds_var), ((PyObject *)__pyx_n_s__var), ((PyObject *)__pyx_n_s__dtype), ((PyObject *)__pyx_n_s__min_ptr), ((PyObject *)__pyx_n_s__max_ptr), ((PyObject *)__pyx_n_s__missing_ptr), ((PyObject *)__pyx_n_s__fill_ptr), ((PyObject *)__pyx_n_s__min_char), ((PyObject *)__pyx_n_s__max_char), ((PyObject *)__pyx_n_s__missing_char), ((PyObject *)__pyx_n_s__fill_char), ((PyObject *)__pyx_n_s__min_byte), ((PyObject *)__pyx_n_s__max_byte), ((PyObject *)__pyx_n_s__missing_byte), ((PyObject *)__pyx_n_s__fill_byte), ((PyObject *)__pyx_n_s__min_short), ((PyObject *)__pyx_n_s__max_short), ((PyObject *)__pyx_n_s__missing_short), ((PyObject *)__pyx_n_s__fill_short), ((PyObject *)__pyx_n_s__min_int), ((PyObject *)__pyx_n_s__max_int), ((PyObject *)__pyx_n_s__missing_int), ((PyObject *)__pyx_n_s__fill_int), ((PyObject *)__pyx_n_s__min_float), ((PyObject *)__pyx_n_s__max_float), ((PyObject *)__pyx_n_s__missing_float), ((PyObject *)__pyx_n_s__fill_float), ((PyObject *)__pyx_n_s__min_double), ((PyObject *)__pyx_n_s__max_double), ((PyObject *)__pyx_n_s__missing_double), ((PyObject *)__pyx_n_s__fill_double), ((PyObject *)__pyx_n_s__c_dim_names), ((PyObject *)__pyx_n_s__c_long_name), ((PyObject *)__pyx_n_s__c_standard_name), ((PyObject *)__pyx_n_s__c_units), ((PyObject *)__pyx_n_s__i)); if (unlikely(!__pyx_k_tuple_215)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1422 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_215);

#line 1422 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_215));

#line 1422 "dsproc3/core.pyx"
  __pyx_k_codeobj_216 = (PyObject*)__Pyx_PyCode_New(11, 0, 47, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_215, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__define_var, 1422, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_216)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1615
 *     return None
 * 
 * def delete_var(cds3.core.Var var):             # <<<<<<<<<<<<<<
 *     """Delete a variable from a dataset.
 * 
 */

#line 1615 "dsproc3/core.pyx"
  __pyx_k_tuple_217 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__var), ((PyObject *)__pyx_n_s__return_value)); if (unlikely(!__pyx_k_tuple_217)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1615 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_217);

#line 1615 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_217));

#line 1615 "dsproc3/core.pyx"
  __pyx_k_codeobj_218 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_217, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__delete_var, 1615, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_218)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1633
 *     return return_value
 * 
 * def get_coord_var(cds3.core.Var _var, int dim_index):             # <<<<<<<<<<<<<<
 *     """Get the coordinate variable for a variable's dimension.
 * 
 */

#line 1633 "dsproc3/core.pyx"
  __pyx_k_tuple_219 = PyTuple_Pack(4, ((PyObject *)__pyx_n_s___var), ((PyObject *)__pyx_n_s__dim_index), ((PyObject *)__pyx_n_s__cds_var), ((PyObject *)__pyx_n_s__var)); if (unlikely(!__pyx_k_tuple_219)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1633 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_219);

#line 1633 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_219));

#line 1633 "dsproc3/core.pyx"
  __pyx_k_codeobj_220 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_219, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__get_coord_var, 1633, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_220)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1652
 *     return var
 * 
 * def get_dataset_vars(             # <<<<<<<<<<<<<<
 *             cds3.core.Group dataset,
 *             object var_names, # iterable of strings
 */

#line 1652 "dsproc3/core.pyx"
  __pyx_k_tuple_221 = PyTuple_Pack(15, ((PyObject *)__pyx_n_s__dataset), ((PyObject *)__pyx_n_s__var_names), ((PyObject *)__pyx_n_s__required), ((PyObject *)__pyx_n_s__qc_vars), ((PyObject *)__pyx_n_s__aqc_vars), ((PyObject *)__pyx_n_s__length), ((PyObject *)__pyx_n_s__var_tmp), ((PyObject *)__pyx_n_s___vars), ((PyObject *)__pyx_n_s___qc_vars), ((PyObject *)__pyx_n_s___aqc_vars), ((PyObject *)__pyx_n_s__c_var_names), ((PyObject *)__pyx_n_s__i), ((PyObject *)__pyx_n_s__ret_vars), ((PyObject *)__pyx_n_s__ret_qc_vars), ((PyObject *)__pyx_n_s__ret_aqc_vars)); if (unlikely(!__pyx_k_tuple_221)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1652 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_221);

#line 1652 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_221));

#line 1652 "dsproc3/core.pyx"
  __pyx_k_codeobj_222 = (PyObject*)__Pyx_PyCode_New(5, 0, 15, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_221, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__get_dataset_vars, 1652, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_222)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1763
 *         return ret_vars
 * 
 * def get_metric_var(cds3.core.Var var, char *metric):             # <<<<<<<<<<<<<<
 *     """Get a companion metric variable for a variable.
 * 
 */

#line 1763 "dsproc3/core.pyx"
  __pyx_k_tuple_223 = PyTuple_Pack(4, ((PyObject *)__pyx_n_s__var), ((PyObject *)__pyx_n_s__metric), ((PyObject *)__pyx_n_s__cds_var), ((PyObject *)__pyx_n_s__metric_var)); if (unlikely(!__pyx_k_tuple_223)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1763 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_223);

#line 1763 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_223));

#line 1763 "dsproc3/core.pyx"
  __pyx_k_codeobj_224 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_223, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__get_metric_var, 1763, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_224)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1787
 *     return metric_var
 * 
 * def get_output_var(int ds_id, char *var_name, int obs_index=0):             # <<<<<<<<<<<<<<
 *     """Get a variable from an output dataset.
 * 
 */

#line 1787 "dsproc3/core.pyx"
  __pyx_k_tuple_225 = PyTuple_Pack(5, ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__var_name), ((PyObject *)__pyx_n_s__obs_index), ((PyObject *)__pyx_n_s__cds_var), ((PyObject *)__pyx_n_s__var)); if (unlikely(!__pyx_k_tuple_225)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1787 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_225);

#line 1787 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_225));

#line 1787 "dsproc3/core.pyx"
  __pyx_k_codeobj_226 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_225, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__get_output_var, 1787, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_226)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1811
 *     return var
 * 
 * def get_qc_var(cds3.core.Var _var):             # <<<<<<<<<<<<<<
 *     """Get the companion QC variable for a variable.
 * 
 */

#line 1811 "dsproc3/core.pyx"
  __pyx_k_tuple_227 = PyTuple_Pack(3, ((PyObject *)__pyx_n_s___var), ((PyObject *)__pyx_n_s__cds_var), ((PyObject *)__pyx_n_s__var)); if (unlikely(!__pyx_k_tuple_227)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1811 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_227);

#line 1811 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_227));

#line 1811 "dsproc3/core.pyx"
  __pyx_k_codeobj_228 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_227, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__get_qc_var, 1811, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_228)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1829
 *     return var
 * 
 * def get_retrieved_var(char *var_name, int obs_index=0):             # <<<<<<<<<<<<<<
 *     """Get a primary variable from the retrieved data.
 * 
 */

#line 1829 "dsproc3/core.pyx"
  __pyx_k_tuple_229 = PyTuple_Pack(4, ((PyObject *)__pyx_n_s__var_name), ((PyObject *)__pyx_n_s__obs_index), ((PyObject *)__pyx_n_s__cds_var), ((PyObject *)__pyx_n_s__var)); if (unlikely(!__pyx_k_tuple_229)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1829 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_229);

#line 1829 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_229));

#line 1829 "dsproc3/core.pyx"
  __pyx_k_codeobj_230 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_229, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__get_retrieved_var, 1829, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_230)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1861
 *     return var
 * 
 * def get_transformed_var(char *var_name, int obs_index=0):             # <<<<<<<<<<<<<<
 *     """Get a primary variable from the transformed data.
 * 
 */

#line 1861 "dsproc3/core.pyx"
  __pyx_k_tuple_231 = PyTuple_Pack(4, ((PyObject *)__pyx_n_s__var_name), ((PyObject *)__pyx_n_s__obs_index), ((PyObject *)__pyx_n_s__cds_var), ((PyObject *)__pyx_n_s__var)); if (unlikely(!__pyx_k_tuple_231)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1861 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_231);

#line 1861 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_231));

#line 1861 "dsproc3/core.pyx"
  __pyx_k_codeobj_232 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_231, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__get_transformed_var, 1861, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_232)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1888
 *     return var
 * 
 * def get_trans_coordsys_var(char *coordsys_name, char *var_name, int obs_index=0):             # <<<<<<<<<<<<<<
 *     """Get a variable from a transformation coordinate system.
 * 
 */

#line 1888 "dsproc3/core.pyx"
  __pyx_k_tuple_233 = PyTuple_Pack(5, ((PyObject *)__pyx_n_s__coordsys_name), ((PyObject *)__pyx_n_s__var_name), ((PyObject *)__pyx_n_s__obs_index), ((PyObject *)__pyx_n_s__cds_var), ((PyObject *)__pyx_n_s__var)); if (unlikely(!__pyx_k_tuple_233)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1888 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_233);

#line 1888 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_233));

#line 1888 "dsproc3/core.pyx"
  __pyx_k_codeobj_234 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_233, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_235, 1888, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_234)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1916
 *     return var
 * 
 * def get_var(cds3.core.Group dataset, char *name):             # <<<<<<<<<<<<<<
 *     """Get a variable from a dataset.
 * 
 */

#line 1916 "dsproc3/core.pyx"
  __pyx_k_tuple_236 = PyTuple_Pack(4, ((PyObject *)__pyx_n_s__dataset), ((PyObject *)__pyx_n_s__name), ((PyObject *)__pyx_n_s__cds_var), ((PyObject *)__pyx_n_s__var)); if (unlikely(!__pyx_k_tuple_236)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1916 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_236);

#line 1916 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_236));

#line 1916 "dsproc3/core.pyx"
  __pyx_k_codeobj_237 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_236, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__get_var, 1916, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_237)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1935
 *     return var
 * 
 * def var_name(cds3.core.Var var):             # <<<<<<<<<<<<<<
 *     """Returns the variable name.
 * 
 */

#line 1935 "dsproc3/core.pyx"
  __pyx_k_tuple_238 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__var), ((PyObject *)__pyx_n_s__retval)); if (unlikely(!__pyx_k_tuple_238)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1935 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_238);

#line 1935 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_238));

#line 1935 "dsproc3/core.pyx"
  __pyx_k_codeobj_239 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_238, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__var_name, 1935, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_239)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1952
 *     return retval
 * 
 * def var_sample_count(cds3.core.Var var):             # <<<<<<<<<<<<<<
 *     """Returns the number of samples in a variable's data array.
 * 
 */

#line 1952 "dsproc3/core.pyx"
  __pyx_k_tuple_240 = PyTuple_Pack(1, ((PyObject *)__pyx_n_s__var)); if (unlikely(!__pyx_k_tuple_240)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1952 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_240);

#line 1952 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_240));

#line 1952 "dsproc3/core.pyx"
  __pyx_k_codeobj_241 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_240, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__var_sample_count, 1952, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_241)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1965
 *     return dsproc_var_sample_count(var.c_ob)
 * 
 * def var_sample_size(cds3.core.Var var):             # <<<<<<<<<<<<<<
 *     """Returns the sample size of a variable.
 * 
 */

#line 1965 "dsproc3/core.pyx"
  __pyx_k_tuple_242 = PyTuple_Pack(1, ((PyObject *)__pyx_n_s__var)); if (unlikely(!__pyx_k_tuple_242)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1965; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1965 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_242);

#line 1965 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_242));

#line 1965 "dsproc3/core.pyx"
  __pyx_k_codeobj_243 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_242, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__var_sample_size, 1965, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_243)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1965; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":1979
 *     return dsproc_var_sample_size(var.c_ob)
 * 
 * def alloc_var_data(cds3.core.Var var, size_t sample_start, size_t sample_count):             # <<<<<<<<<<<<<<
 *     """Allocate memory for a variable's data array.
 * 
 */

#line 1979 "dsproc3/core.pyx"
  __pyx_k_tuple_244 = PyTuple_Pack(4, ((PyObject *)__pyx_n_s__var), ((PyObject *)__pyx_n_s__sample_start), ((PyObject *)__pyx_n_s__sample_count), ((PyObject *)__pyx_n_s__data)); if (unlikely(!__pyx_k_tuple_244)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1979; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1979 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_244);

#line 1979 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_244));

#line 1979 "dsproc3/core.pyx"
  __pyx_k_codeobj_245 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_244, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__alloc_var_data, 1979, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_245)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1979; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2011
 *     return var.get_datap(sample_start)
 * 
 * def alloc_var_data_index(cds3.core.Var var, size_t sample_start,             # <<<<<<<<<<<<<<
 *         size_t sample_count):
 *     """Allocate memory for a variable's data array.
 */

#line 2011 "dsproc3/core.pyx"
  __pyx_k_tuple_246 = PyTuple_Pack(4, ((PyObject *)__pyx_n_s__var), ((PyObject *)__pyx_n_s__sample_start), ((PyObject *)__pyx_n_s__sample_count), ((PyObject *)__pyx_n_s__data)); if (unlikely(!__pyx_k_tuple_246)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2011 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_246);

#line 2011 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_246));

#line 2011 "dsproc3/core.pyx"
  __pyx_k_codeobj_247 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_246, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_248, 2011, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_247)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2045
 *     return var.get_datap(sample_start)
 * 
 * def get_var_data_index(cds3.core.Var var):             # <<<<<<<<<<<<<<
 *     """Get a data index for a multi-dimensional variable.
 * 
 */

#line 2045 "dsproc3/core.pyx"
  __pyx_k_tuple_249 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__var), ((PyObject *)__pyx_n_s__data)); if (unlikely(!__pyx_k_tuple_249)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2045; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2045 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_249);

#line 2045 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_249));

#line 2045 "dsproc3/core.pyx"
  __pyx_k_codeobj_250 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_249, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__get_var_data_index, 2045, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_250)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2045; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2073
 *     return var.get_datap()
 * 
 * def get_var_data(cds3.core.Var var, CDSDataType type, size_t sample_start,             # <<<<<<<<<<<<<<
 *         size_t sample_count=0, np.ndarray data=None):
 *     """Get a copy of the data from a dataset variable.
 */

#line 2073 "dsproc3/core.pyx"
  __pyx_k_tuple_251 = PyTuple_Pack(12, ((PyObject *)__pyx_n_s__var), ((PyObject *)__pyx_n_s__type), ((PyObject *)__pyx_n_s__sample_start), ((PyObject *)__pyx_n_s__sample_count), ((PyObject *)__pyx_n_s__data), ((PyObject *)__pyx_n_s__datap), ((PyObject *)__pyx_n_s__missing_c), ((PyObject *)__pyx_n_s__ndims), ((PyObject *)__pyx_n_s__sample_size), ((PyObject *)__pyx_n_s__dtype), ((PyObject *)__pyx_n_s__dims), ((PyObject *)__pyx_n_s__i)); if (unlikely(!__pyx_k_tuple_251)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2073 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_251);

#line 2073 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_251));

#line 2073 "dsproc3/core.pyx"
  __pyx_k_codeobj_252 = (PyObject*)__Pyx_PyCode_New(5, 0, 12, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_251, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__get_var_data, 2073, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_252)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2127
 *         return data, _convert_single(type, missing_c)
 * 
 * def get_var_missing_values(cds3.core.Var var):             # <<<<<<<<<<<<<<
 *     """Get the missing values for a CDS Variable.
 * 
 */

#line 2127 "dsproc3/core.pyx"
  __pyx_k_tuple_253 = PyTuple_Pack(6, ((PyObject *)__pyx_n_s__var), ((PyObject *)__pyx_n_s__retval), ((PyObject *)__pyx_n_s__size), ((PyObject *)__pyx_n_s__values), ((PyObject *)__pyx_n_s__type), ((PyObject *)__pyx_n_s__array)); if (unlikely(!__pyx_k_tuple_253)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2127 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_253);

#line 2127 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_253));

#line 2127 "dsproc3/core.pyx"
  __pyx_k_codeobj_254 = (PyObject*)__Pyx_PyCode_New(1, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_253, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_255, 2127, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_254)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2166
 *         return array
 * 
 * def init_var_data(             # <<<<<<<<<<<<<<
 *         cds3.core.Var var,
 *         size_t sample_start,
 */

#line 2166 "dsproc3/core.pyx"
  __pyx_k_tuple_256 = PyTuple_Pack(5, ((PyObject *)__pyx_n_s__var), ((PyObject *)__pyx_n_s__sample_start), ((PyObject *)__pyx_n_s__sample_count), ((PyObject *)__pyx_n_s__use_missing), ((PyObject *)__pyx_n_s__data)); if (unlikely(!__pyx_k_tuple_256)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2166 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_256);

#line 2166 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_256));

#line 2166 "dsproc3/core.pyx"
  __pyx_k_codeobj_257 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_256, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__init_var_data, 2166, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_257)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2218
 *     return var.get_datap(sample_start)
 * 
 * def init_var_data_index(             # <<<<<<<<<<<<<<
 *             cds3.core.Var var,
 *             size_t sample_start,
 */

#line 2218 "dsproc3/core.pyx"
  __pyx_k_tuple_258 = PyTuple_Pack(5, ((PyObject *)__pyx_n_s__var), ((PyObject *)__pyx_n_s__sample_start), ((PyObject *)__pyx_n_s__sample_count), ((PyObject *)__pyx_n_s__use_missing), ((PyObject *)__pyx_n_s__data)); if (unlikely(!__pyx_k_tuple_258)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2218 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_258);

#line 2218 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_258));

#line 2218 "dsproc3/core.pyx"
  __pyx_k_codeobj_259 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_258, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__init_var_data_index, 2218, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_259)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2269
 *     return var.get_datap(sample_start)
 * 
 * def set_var_data(             # <<<<<<<<<<<<<<
 *             cds3.core.Var var,
 *             size_t sample_start,
 */

#line 2269 "dsproc3/core.pyx"
  __pyx_k_tuple_260 = PyTuple_Pack(8, ((PyObject *)__pyx_n_s__var), ((PyObject *)__pyx_n_s__sample_start), ((PyObject *)__pyx_n_s__sample_count), ((PyObject *)__pyx_n_s__missing_value), ((PyObject *)__pyx_n_s__data_nd), ((PyObject *)__pyx_n_s__data), ((PyObject *)__pyx_n_s__type), ((PyObject *)__pyx_n_s__missing_c)); if (unlikely(!__pyx_k_tuple_260)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2269 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_260);

#line 2269 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_260));

#line 2269 "dsproc3/core.pyx"
  __pyx_k_codeobj_261 = (PyObject*)__Pyx_PyCode_New(5, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_260, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__set_var_data, 2269, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_261)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2321
 *     return var.get_datap(sample_start)
 * 
 * def get_base_time(cds3.core.Object cds_object):             # <<<<<<<<<<<<<<
 *     """Get the base time of a dataset or time variable.
 * 
 */

#line 2321 "dsproc3/core.pyx"
  __pyx_k_tuple_262 = PyTuple_Pack(1, ((PyObject *)__pyx_n_s__cds_object)); if (unlikely(!__pyx_k_tuple_262)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2321 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_262);

#line 2321 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_262));

#line 2321 "dsproc3/core.pyx"
  __pyx_k_codeobj_263 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_262, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__get_base_time, 2321, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_263)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2341
 * #            timeval_t *start_time,
 * #            timeval_t *end_time)
 * def get_time_range(cds3.core.Object cds_object):             # <<<<<<<<<<<<<<
 *     """Get the time range of a dataset or time variable.
 * 
 */

#line 2341 "dsproc3/core.pyx"
  __pyx_k_tuple_264 = PyTuple_Pack(4, ((PyObject *)__pyx_n_s__cds_object), ((PyObject *)__pyx_n_s__start), ((PyObject *)__pyx_n_s__end), ((PyObject *)__pyx_n_s__num_times)); if (unlikely(!__pyx_k_tuple_264)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2341 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_264);

#line 2341 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_264));

#line 2341 "dsproc3/core.pyx"
  __pyx_k_codeobj_265 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_264, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__get_time_range, 2341, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_265)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2365
 *     return num_times, (start.tv_sec, start.tv_usec), (end.tv_sec, end.tv_usec)
 * 
 * def get_time_var(cds3.core.Object cds_object):             # <<<<<<<<<<<<<<
 *     """Get the time variable used by a dataset.
 * 
 */

#line 2365 "dsproc3/core.pyx"
  __pyx_k_tuple_266 = PyTuple_Pack(3, ((PyObject *)__pyx_n_s__cds_object), ((PyObject *)__pyx_n_s__cds_var), ((PyObject *)__pyx_n_s__var)); if (unlikely(!__pyx_k_tuple_266)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2365 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_266);

#line 2365 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_266));

#line 2365 "dsproc3/core.pyx"
  __pyx_k_codeobj_267 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_266, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__get_time_var, 2365, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_267)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2386
 *     return var
 * 
 * def get_sample_times(cds3.core.Object cds_object, size_t sample_start):             # <<<<<<<<<<<<<<
 *     """Get the sample times for a dataset or time variable.
 * 
 */

#line 2386 "dsproc3/core.pyx"
  __pyx_k_tuple_268 = PyTuple_Pack(6, ((PyObject *)__pyx_n_s__cds_object), ((PyObject *)__pyx_n_s__sample_start), ((PyObject *)__pyx_n_s__retval), ((PyObject *)__pyx_n_s__sample_times), ((PyObject *)__pyx_n_s__sample_count), ((PyObject *)__pyx_n_s__i)); if (unlikely(!__pyx_k_tuple_268)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2386 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_268);

#line 2386 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_268));

#line 2386 "dsproc3/core.pyx"
  __pyx_k_codeobj_269 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_268, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__get_sample_times, 2386, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_269)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2425
 * #            size_t    *sample_count,
 * #            timeval_t *sample_times)
 * def get_sample_timevals(             # <<<<<<<<<<<<<<
 *             cds3.core.Object cds_object,
 *             size_t sample_start):
 */

#line 2425 "dsproc3/core.pyx"
  __pyx_k_tuple_270 = PyTuple_Pack(6, ((PyObject *)__pyx_n_s__cds_object), ((PyObject *)__pyx_n_s__sample_start), ((PyObject *)__pyx_n_s__retval), ((PyObject *)__pyx_n_s__sample_times), ((PyObject *)__pyx_n_s__sample_count), ((PyObject *)__pyx_n_s__i)); if (unlikely(!__pyx_k_tuple_270)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2425 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_270);

#line 2425 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_270));

#line 2425 "dsproc3/core.pyx"
  __pyx_k_codeobj_271 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_270, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__get_sample_timevals, 2425, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_271)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2463
 *     return retval
 * 
 * def set_sample_times(cds3.core.Object obj, size_t sample_start,             # <<<<<<<<<<<<<<
 *         object sample_times):
 *     cdef int retval
 */

#line 2463 "dsproc3/core.pyx"
  __pyx_k_tuple_272 = PyTuple_Pack(7, ((PyObject *)__pyx_n_s__obj), ((PyObject *)__pyx_n_s__sample_start), ((PyObject *)__pyx_n_s__sample_times), ((PyObject *)__pyx_n_s__retval), ((PyObject *)__pyx_n_s__sample_times_c), ((PyObject *)__pyx_n_s__sample_count), ((PyObject *)__pyx_n_s__i)); if (unlikely(!__pyx_k_tuple_272)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2463 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_272);

#line 2463 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_272));

#line 2463 "dsproc3/core.pyx"
  __pyx_k_codeobj_273 = (PyObject*)__Pyx_PyCode_New(3, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_272, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__set_sample_times, 2463, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_273)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2476
 *     return retval
 * 
 * def set_sample_timevals(cds3.core.Object obj, size_t sample_start,             # <<<<<<<<<<<<<<
 *         object sample_times):
 *     """Set the sample times for a dataset or time variable.
 */

#line 2476 "dsproc3/core.pyx"
  __pyx_k_tuple_274 = PyTuple_Pack(7, ((PyObject *)__pyx_n_s__obj), ((PyObject *)__pyx_n_s__sample_start), ((PyObject *)__pyx_n_s__sample_times), ((PyObject *)__pyx_n_s__retval), ((PyObject *)__pyx_n_s__sample_times_c), ((PyObject *)__pyx_n_s__sample_count), ((PyObject *)__pyx_n_s__i)); if (unlikely(!__pyx_k_tuple_274)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2476 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_274);

#line 2476 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_274));

#line 2476 "dsproc3/core.pyx"
  __pyx_k_codeobj_275 = (PyObject*)__Pyx_PyCode_New(3, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_274, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__set_sample_timevals, 2476, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_275)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2529
 *     return retval
 * 
 * def add_var_output_target(cds3.core.Var var, int ds_id, char *var_name):             # <<<<<<<<<<<<<<
 *     """Add an output target for a variable.
 * 
 */

#line 2529 "dsproc3/core.pyx"
  __pyx_k_tuple_276 = PyTuple_Pack(3, ((PyObject *)__pyx_n_s__var), ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__var_name)); if (unlikely(!__pyx_k_tuple_276)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2529 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_276);

#line 2529 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_276));

#line 2529 "dsproc3/core.pyx"
  __pyx_k_codeobj_277 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_276, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_278, 2529, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_277)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2547
 *     return dsproc_add_var_output_target(var.c_ob, ds_id, var_name)
 * 
 * def copy_var_tag(cds3.core.Var src_var, cds3.core.Var dest_var):             # <<<<<<<<<<<<<<
 *     """Copy a variable tag from one variable to another.
 * 
 */

#line 2547 "dsproc3/core.pyx"
  __pyx_k_tuple_279 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__src_var), ((PyObject *)__pyx_n_s__dest_var)); if (unlikely(!__pyx_k_tuple_279)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2547; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2547 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_279);

#line 2547 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_279));

#line 2547 "dsproc3/core.pyx"
  __pyx_k_codeobj_280 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_279, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__copy_var_tag, 2547, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_280)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2547; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2562
 *     return dsproc_copy_var_tag(src_var.c_ob, dest_var.c_ob)
 * 
 * def delete_var_tag(cds3.core.Var var):             # <<<<<<<<<<<<<<
 *     """Delete a variable tag.
 * 
 */

#line 2562 "dsproc3/core.pyx"
  __pyx_k_tuple_281 = PyTuple_Pack(1, ((PyObject *)__pyx_n_s__var)); if (unlikely(!__pyx_k_tuple_281)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2562 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_281);

#line 2562 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_281));

#line 2562 "dsproc3/core.pyx"
  __pyx_k_codeobj_282 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_281, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__delete_var_tag, 2562, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_282)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2573
 * #            CDSVar      *var,
 * #            VarTarget ***targets)
 * def get_var_output_targets(cds3.core.Var var):             # <<<<<<<<<<<<<<
 *     """Get the output targets defined for the specified variable.
 * 
 */

#line 2573 "dsproc3/core.pyx"
  __pyx_k_tuple_283 = PyTuple_Pack(6, ((PyObject *)__pyx_n_s__var), ((PyObject *)__pyx_n_s__targets), ((PyObject *)__pyx_n_s__count), ((PyObject *)__pyx_n_s__retval), ((PyObject *)__pyx_n_s__target), ((PyObject *)__pyx_n_s__i)); if (unlikely(!__pyx_k_tuple_283)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2573 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_283);

#line 2573 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_283));

#line 2573 "dsproc3/core.pyx"
  __pyx_k_codeobj_284 = (PyObject*)__Pyx_PyCode_New(1, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_283, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_285, 2573, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_284)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2599
 *     return retval
 * 
 * def set_var_coordsys_name(cds3.core.Var var, char *coordsys_name):             # <<<<<<<<<<<<<<
 *     return dsproc_set_var_coordsys_name(var.c_ob, coordsys_name)
 * 
 */

#line 2599 "dsproc3/core.pyx"
  __pyx_k_tuple_286 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__var), ((PyObject *)__pyx_n_s__coordsys_name)); if (unlikely(!__pyx_k_tuple_286)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2599 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_286);

#line 2599 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_286));

#line 2599 "dsproc3/core.pyx"
  __pyx_k_codeobj_287 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_286, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_288, 2599, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_287)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2602
 *     return dsproc_set_var_coordsys_name(var.c_ob, coordsys_name)
 * 
 * def set_var_flags(cds3.core.Var var, int flags):             # <<<<<<<<<<<<<<
 *     return dsproc_set_var_flags(var.c_ob, flags)
 * 
 */

#line 2602 "dsproc3/core.pyx"
  __pyx_k_tuple_289 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__var), ((PyObject *)__pyx_n_s__flags)); if (unlikely(!__pyx_k_tuple_289)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2602 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_289);

#line 2602 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_289));

#line 2602 "dsproc3/core.pyx"
  __pyx_k_codeobj_290 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_289, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__set_var_flags, 2602, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_290)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2605
 *     return dsproc_set_var_flags(var.c_ob, flags)
 * 
 * def set_var_output_target(cds3.core.Var var, int ds_id, char *var_name):             # <<<<<<<<<<<<<<
 *     return dsproc_set_var_output_target(var.c_ob, ds_id, var_name)
 * 
 */

#line 2605 "dsproc3/core.pyx"
  __pyx_k_tuple_291 = PyTuple_Pack(3, ((PyObject *)__pyx_n_s__var), ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__var_name)); if (unlikely(!__pyx_k_tuple_291)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2605 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_291);

#line 2605 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_291));

#line 2605 "dsproc3/core.pyx"
  __pyx_k_codeobj_292 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_291, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_293, 2605, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_292)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2608
 *     return dsproc_set_var_output_target(var.c_ob, ds_id, var_name)
 * 
 * def unset_var_flags(cds3.core.Var var, int flags):             # <<<<<<<<<<<<<<
 *     dsproc_unset_var_flags(var.c_ob, flags)
 * 
 */

#line 2608 "dsproc3/core.pyx"
  __pyx_k_tuple_294 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__var), ((PyObject *)__pyx_n_s__flags)); if (unlikely(!__pyx_k_tuple_294)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2608 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_294);

#line 2608 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_294));

#line 2608 "dsproc3/core.pyx"
  __pyx_k_codeobj_295 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_294, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__unset_var_flags, 2608, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_295)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2626
 * #int dsproc_get_var_dqrs(CDSVar *var, VarDQR ***dqrs)
 * 
 * def dump_dataset(             # <<<<<<<<<<<<<<
 *         cds3.core.Group dataset,
 *         char *outdir,
 */

#line 2626 "dsproc3/core.pyx"
  __pyx_k_tuple_296 = PyTuple_Pack(6, ((PyObject *)__pyx_n_s__dataset), ((PyObject *)__pyx_n_s__outdir), ((PyObject *)__pyx_n_s__prefix), ((PyObject *)__pyx_n_s__file_time), ((PyObject *)__pyx_n_s__suffix), ((PyObject *)__pyx_n_s__flags)); if (unlikely(!__pyx_k_tuple_296)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2626 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_296);

#line 2626 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_296));

#line 2626 "dsproc3/core.pyx"
  __pyx_k_codeobj_297 = (PyObject*)__Pyx_PyCode_New(6, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_296, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__dump_dataset, 2626, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_297)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2636
 *             flags)
 * 
 * def dump_output_datasets(char *outdir, char *suffix, int flags):             # <<<<<<<<<<<<<<
 *     return dsproc_dump_output_datasets(outdir, suffix, flags)
 * 
 */

#line 2636 "dsproc3/core.pyx"
  __pyx_k_tuple_298 = PyTuple_Pack(3, ((PyObject *)__pyx_n_s__outdir), ((PyObject *)__pyx_n_s__suffix), ((PyObject *)__pyx_n_s__flags)); if (unlikely(!__pyx_k_tuple_298)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2636 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_298);

#line 2636 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_298));

#line 2636 "dsproc3/core.pyx"
  __pyx_k_codeobj_299 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_298, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_300, 2636, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_299)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2639
 *     return dsproc_dump_output_datasets(outdir, suffix, flags)
 * 
 * def dump_retrieved_datasets(char *outdir, char *suffix, int flags):             # <<<<<<<<<<<<<<
 *     return dsproc_dump_retrieved_datasets(outdir, suffix, flags)
 * 
 */

#line 2639 "dsproc3/core.pyx"
  __pyx_k_tuple_301 = PyTuple_Pack(3, ((PyObject *)__pyx_n_s__outdir), ((PyObject *)__pyx_n_s__suffix), ((PyObject *)__pyx_n_s__flags)); if (unlikely(!__pyx_k_tuple_301)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2639; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2639 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_301);

#line 2639 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_301));

#line 2639 "dsproc3/core.pyx"
  __pyx_k_codeobj_302 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_301, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_303, 2639, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_302)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2639; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2642
 *     return dsproc_dump_retrieved_datasets(outdir, suffix, flags)
 * 
 * def dump_transformed_datasets(char *outdir, char *suffix, int flags):             # <<<<<<<<<<<<<<
 *     return dsproc_dump_transformed_datasets(outdir, suffix, flags)
 * 
 */

#line 2642 "dsproc3/core.pyx"
  __pyx_k_tuple_304 = PyTuple_Pack(3, ((PyObject *)__pyx_n_s__outdir), ((PyObject *)__pyx_n_s__suffix), ((PyObject *)__pyx_n_s__flags)); if (unlikely(!__pyx_k_tuple_304)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2642 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_304);

#line 2642 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_304));

#line 2642 "dsproc3/core.pyx"
  __pyx_k_codeobj_305 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_304, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_306, 2642, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_305)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2645
 *     return dsproc_dump_transformed_datasets(outdir, suffix, flags)
 * 
 * def copy_file(char *src_file, char *dest_file):             # <<<<<<<<<<<<<<
 *     return dsproc_copy_file(src_file, dest_file)
 * 
 */

#line 2645 "dsproc3/core.pyx"
  __pyx_k_tuple_307 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__src_file), ((PyObject *)__pyx_n_s__dest_file)); if (unlikely(!__pyx_k_tuple_307)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2645 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_307);

#line 2645 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_307));

#line 2645 "dsproc3/core.pyx"
  __pyx_k_codeobj_308 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_307, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__copy_file, 2645, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_308)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2648
 *     return dsproc_copy_file(src_file, dest_file)
 * 
 * def move_file(char *src_file, char *dest_file):             # <<<<<<<<<<<<<<
 *     return dsproc_move_file(src_file, dest_file)
 * 
 */

#line 2648 "dsproc3/core.pyx"
  __pyx_k_tuple_309 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__src_file), ((PyObject *)__pyx_n_s__dest_file)); if (unlikely(!__pyx_k_tuple_309)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2648 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_309);

#line 2648 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_309));

#line 2648 "dsproc3/core.pyx"
  __pyx_k_codeobj_310 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_309, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__move_file, 2648, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_310)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2653
 * #FILE   *dsproc_open_file(char *file)
 * #
 * def add_datastream_file_patterns(int ds_id, object patterns, int ignore_case):             # <<<<<<<<<<<<<<
 *     cdef int return_value
 *     cdef char **c_patterns = <char**>malloc(len(patterns) * sizeof(char*))
 */

#line 2653 "dsproc3/core.pyx"
  __pyx_k_tuple_311 = PyTuple_Pack(6, ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__patterns), ((PyObject *)__pyx_n_s__ignore_case), ((PyObject *)__pyx_n_s__return_value), ((PyObject *)__pyx_n_s__c_patterns), ((PyObject *)__pyx_n_s__i)); if (unlikely(!__pyx_k_tuple_311)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2653 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_311);

#line 2653 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_311));

#line 2653 "dsproc3/core.pyx"
  __pyx_k_codeobj_312 = (PyObject*)__Pyx_PyCode_New(3, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_311, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_313, 2653, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_312)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2663
 *     return return_value
 * 
 * def get_datastream_files(int ds_id):             # <<<<<<<<<<<<<<
 *     cdef int count
 *     cdef char **file_list = NULL
 */

#line 2663 "dsproc3/core.pyx"
  __pyx_k_tuple_314 = PyTuple_Pack(6, ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__count), ((PyObject *)__pyx_n_s__file_list), ((PyObject *)__pyx_n_s__list), ((PyObject *)__pyx_n_s__i)); if (unlikely(!__pyx_k_tuple_314)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2663 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_314);

#line 2663 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_314));

#line 2663 "dsproc3/core.pyx"
  __pyx_k_codeobj_315 = (PyObject*)__Pyx_PyCode_New(1, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_314, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_316, 2663, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_315)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2678
 * #            int    (*qsort_compare)(void *, void *))
 * 
 * def rename(             # <<<<<<<<<<<<<<
 *         int ds_id,
 *         char *file_path,
 */

#line 2678 "dsproc3/core.pyx"
  __pyx_k_tuple_317 = PyTuple_Pack(5, ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__file_path), ((PyObject *)__pyx_n_s__file_name), ((PyObject *)__pyx_n_s__begin_time), ((PyObject *)__pyx_n_s__end_time)); if (unlikely(!__pyx_k_tuple_317)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2678 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_317);

#line 2678 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_317));

#line 2678 "dsproc3/core.pyx"
  __pyx_k_codeobj_318 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_317, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__rename, 2678, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_318)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2693
 * #            timeval_t *end_time)
 * 
 * def rename_bad(int ds_id, char *file_path, char *file_name, time_t file_time):             # <<<<<<<<<<<<<<
 *     return dsproc_rename_bad(ds_id, file_path, file_name, file_time)
 * 
 */

#line 2693 "dsproc3/core.pyx"
  __pyx_k_tuple_319 = PyTuple_Pack(4, ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__file_path), ((PyObject *)__pyx_n_s__file_name), ((PyObject *)__pyx_n_s__file_time)); if (unlikely(!__pyx_k_tuple_319)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2693; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2693 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_319);

#line 2693 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_319));

#line 2693 "dsproc3/core.pyx"
  __pyx_k_codeobj_320 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_319, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__rename_bad, 2693, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_320)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2693; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2696
 *     return dsproc_rename_bad(ds_id, file_path, file_name, file_time)
 * 
 * def set_rename_preserve_dots(int ds_id, int preserve_dots):             # <<<<<<<<<<<<<<
 *     dsproc_set_rename_preserve_dots(ds_id, preserve_dots)
 * 
 */

#line 2696 "dsproc3/core.pyx"
  __pyx_k_tuple_321 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__preserve_dots)); if (unlikely(!__pyx_k_tuple_321)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2696 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_321);

#line 2696 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_321));

#line 2696 "dsproc3/core.pyx"
  __pyx_k_codeobj_322 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_321, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_323, 2696, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_322)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2703
 * ##############################################################################
 * 
 * def initialize(argv, proc_model, proc_version, proc_names):             # <<<<<<<<<<<<<<
 *     cdef char **c_argv = NULL
 *     cdef char **c_proc_names = NULL
 */

#line 2703 "dsproc3/core.pyx"
  __pyx_k_tuple_324 = PyTuple_Pack(8, ((PyObject *)__pyx_n_s__argv), ((PyObject *)__pyx_n_s__proc_model), ((PyObject *)__pyx_n_s__proc_version), ((PyObject *)__pyx_n_s__proc_names), ((PyObject *)__pyx_n_s__c_argv), ((PyObject *)__pyx_n_s__c_proc_names), ((PyObject *)__pyx_n_s__idx), ((PyObject *)__pyx_n_s__s)); if (unlikely(!__pyx_k_tuple_324)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2703 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_324);

#line 2703 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_324));

#line 2703 "dsproc3/core.pyx"
  __pyx_k_codeobj_325 = (PyObject*)__Pyx_PyCode_New(4, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_324, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__initialize, 2703, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_325)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2743
 * #int dsproc_store_output_datasets()
 * #
 * def finish():             # <<<<<<<<<<<<<<
 *     return dsproc_finish()
 * #
 */

#line 2743 "dsproc3/core.pyx"
  __pyx_k_codeobj_326 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__finish, 2743, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_326)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2785
 * 
 * 
 * def get_status():             # <<<<<<<<<<<<<<
 *     return dsproc_get_status()
 * 
 */

#line 2785 "dsproc3/core.pyx"
  __pyx_k_codeobj_327 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__get_status, 2785, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_327)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2798
 * #time_t      dsproc_get_processing_interval(time_t *begin, time_t *end)
 * 
 * def set_status(char *status):             # <<<<<<<<<<<<<<
 *     """Set the process status"""
 *     dsproc_set_status(status)
 */

#line 2798 "dsproc3/core.pyx"
  __pyx_k_tuple_328 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__status), ((PyObject *)__pyx_n_s__status)); if (unlikely(!__pyx_k_tuple_328)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2798 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_328);

#line 2798 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_328));

#line 2798 "dsproc3/core.pyx"
  __pyx_k_codeobj_329 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_328, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__set_status, 2798, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_329)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

<<<<<<< .mine
  /* "dsproc3/core.pyx":2828
 * #            timeval_t *data_time)
 * #
 * def set_datastream_flags(int ds_id, int flags):             # <<<<<<<<<<<<<<
 *     dsproc_set_datastream_flags(ds_id, flags)
 * 
 */

#line 2828 "dsproc3/core.pyx"
  __pyx_k_tuple_330 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__flags)); if (unlikely(!__pyx_k_tuple_330)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2828 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_330);

#line 2828 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_330));

#line 2828 "dsproc3/core.pyx"
  __pyx_k_codeobj_331 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_330, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_332, 2828, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_331)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":2835
=======
  /* "dsproc3/core.pyx":2833
>>>>>>> .r50302
 * #
 * #void    dsproc_unset_datastream_flags(int ds_id, int flags)
 * def create_output_dataset(int ds_id, time_t data_time, int set_location ):             # <<<<<<<<<<<<<<
 * 
 *     cdef cds3.core.Group group
 */

<<<<<<< .mine
#line 2835 "dsproc3/core.pyx"
  __pyx_k_tuple_333 = PyTuple_Pack(5, ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__data_time), ((PyObject *)__pyx_n_s__set_location), ((PyObject *)__pyx_n_s__group), ((PyObject *)__pyx_n_s__cds_group)); if (unlikely(!__pyx_k_tuple_333)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
=======
#line 2833 "dsproc3/core.pyx"
  __pyx_k_tuple_330 = PyTuple_Pack(5, ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__data_time), ((PyObject *)__pyx_n_s__set_location), ((PyObject *)__pyx_n_s__group), ((PyObject *)__pyx_n_s__cds_group)); if (unlikely(!__pyx_k_tuple_330)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
>>>>>>> .r50302

#line 2833 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_333);

#line 2833 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_333));

<<<<<<< .mine
#line 2835 "dsproc3/core.pyx"
  __pyx_k_codeobj_334 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_333, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_335, 2835, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_334)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
=======
#line 2833 "dsproc3/core.pyx"
  __pyx_k_codeobj_331 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_330, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s_332, 2833, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_331)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
>>>>>>> .r50302

  /* "dsproc3/core.pyx":2865
 * #int     dsproc_set_dataset_location(CDSGroup *cds)
 * #
 * def store_dataset(int ds_id, int newfile):             # <<<<<<<<<<<<<<
 *     """Store the output dataset."""
 *     return dsproc_store_dataset(ds_id, newfile)
 */

<<<<<<< .mine
#line 2867 "dsproc3/core.pyx"
  __pyx_k_tuple_336 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__newfile)); if (unlikely(!__pyx_k_tuple_336)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
=======
#line 2865 "dsproc3/core.pyx"
  __pyx_k_tuple_333 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__ds_id), ((PyObject *)__pyx_n_s__newfile)); if (unlikely(!__pyx_k_tuple_333)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
>>>>>>> .r50302

#line 2865 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_336);

#line 2865 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_336));

<<<<<<< .mine
#line 2867 "dsproc3/core.pyx"
  __pyx_k_codeobj_337 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_336, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__store_dataset, 2867, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_337)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
=======
#line 2865 "dsproc3/core.pyx"
  __pyx_k_codeobj_334 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_333, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__store_dataset, 2865, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_334)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
>>>>>>> .r50302

  /* "dsproc3/core.pyx":2915
 * #            size_t      dim_length)
 * #
 * def set_input_source(char *status):             # <<<<<<<<<<<<<<
 *     """Set the input source string to use when new datasets are created.
 *        This function will set the string to use for the input_source
 */

<<<<<<< .mine
#line 2917 "dsproc3/core.pyx"
  __pyx_k_tuple_338 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__status), ((PyObject *)__pyx_n_s__status)); if (unlikely(!__pyx_k_tuple_338)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
=======
#line 2915 "dsproc3/core.pyx"
  __pyx_k_tuple_335 = PyTuple_Pack(2, ((PyObject *)__pyx_n_s__status), ((PyObject *)__pyx_n_s__status)); if (unlikely(!__pyx_k_tuple_335)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
>>>>>>> .r50302

#line 2915 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_338);

#line 2915 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_338));

<<<<<<< .mine
#line 2917 "dsproc3/core.pyx"
  __pyx_k_codeobj_339 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_338, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__set_input_source, 2917, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_339)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
=======
#line 2915 "dsproc3/core.pyx"
  __pyx_k_codeobj_336 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_335, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__set_input_source, 2915, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_336)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
>>>>>>> .r50302

  /* "dsproc3/core.pyx":2930
 * #int     dsproc_db_connect()
 * 
 * def db_disconnect():             # <<<<<<<<<<<<<<
 *     dsproc_db_disconnect()
 * 
 */

<<<<<<< .mine
#line 2932 "dsproc3/core.pyx"
  __pyx_k_codeobj_340 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__db_disconnect, 2932, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_340)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2932; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
=======
#line 2930 "dsproc3/core.pyx"
  __pyx_k_codeobj_337 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__db_disconnect, 2930, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_337)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2930; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
>>>>>>> .r50302

  /* "dsproc3/core.pyx":2989
 * #        char *level)
 * 
 * def _ingest_main_loop():             # <<<<<<<<<<<<<<
 *     cdef int       ndsid
 *     cdef int      *dsids
 */

<<<<<<< .mine
#line 2991 "dsproc3/core.pyx"
  __pyx_k_tuple_341 = PyTuple_Pack(15, ((PyObject *)__pyx_n_s__ndsid), ((PyObject *)__pyx_n_s__dsids), ((PyObject *)__pyx_n_s__dsid), ((PyObject *)__pyx_n_s__level), ((PyObject *)__pyx_n_s__nfiles), ((PyObject *)__pyx_n_s__files), ((PyObject *)__pyx_n_s__input_dir), ((PyObject *)__pyx_n_s__loop_start), ((PyObject *)__pyx_n_s__loop_end), ((PyObject *)__pyx_n_s__time_remaining), ((PyObject *)__pyx_n_s__status), ((PyObject *)__pyx_n_s__dsi), ((PyObject *)__pyx_n_s__fi), ((PyObject *)__pyx_n_s__ndsids), ((PyObject *)__pyx_n_s__val)); if (unlikely(!__pyx_k_tuple_341)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
=======
#line 2989 "dsproc3/core.pyx"
  __pyx_k_tuple_338 = PyTuple_Pack(15, ((PyObject *)__pyx_n_s__ndsid), ((PyObject *)__pyx_n_s__dsids), ((PyObject *)__pyx_n_s__dsid), ((PyObject *)__pyx_n_s__level), ((PyObject *)__pyx_n_s__nfiles), ((PyObject *)__pyx_n_s__files), ((PyObject *)__pyx_n_s__input_dir), ((PyObject *)__pyx_n_s__loop_start), ((PyObject *)__pyx_n_s__loop_end), ((PyObject *)__pyx_n_s__time_remaining), ((PyObject *)__pyx_n_s__status), ((PyObject *)__pyx_n_s__dsi), ((PyObject *)__pyx_n_s__fi), ((PyObject *)__pyx_n_s__ndsids), ((PyObject *)__pyx_n_s__val)); if (unlikely(!__pyx_k_tuple_338)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
>>>>>>> .r50302

#line 2989 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_341);

#line 2989 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_341));

<<<<<<< .mine
#line 2991 "dsproc3/core.pyx"
  __pyx_k_codeobj_342 = (PyObject*)__Pyx_PyCode_New(0, 0, 15, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_341, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s___ingest_main_loop, 2991, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_342)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
=======
#line 2989 "dsproc3/core.pyx"
  __pyx_k_codeobj_339 = (PyObject*)__Pyx_PyCode_New(0, 0, 15, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_338, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s___ingest_main_loop, 2989, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_339)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
>>>>>>> .r50302

  /* "dsproc3/core.pyx":3059
 *     dsproc_free_file_list(files)
 * 
 * def _vap_main_loop(int proc_model):             # <<<<<<<<<<<<<<
 *     cdef time_t    interval_begin
 *     cdef time_t    interval_end
 */

<<<<<<< .mine
#line 3061 "dsproc3/core.pyx"
  __pyx_k_tuple_343 = PyTuple_Pack(7, ((PyObject *)__pyx_n_s__proc_model), ((PyObject *)__pyx_n_s__proc_model), ((PyObject *)__pyx_n_s__interval_begin), ((PyObject *)__pyx_n_s__interval_end), ((PyObject *)__pyx_n_s__status), ((PyObject *)__pyx_n_s__ret_data), ((PyObject *)__pyx_n_s__trans_data)); if (unlikely(!__pyx_k_tuple_343)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3061; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
=======
#line 3059 "dsproc3/core.pyx"
  __pyx_k_tuple_340 = PyTuple_Pack(7, ((PyObject *)__pyx_n_s__proc_model), ((PyObject *)__pyx_n_s__proc_model), ((PyObject *)__pyx_n_s__interval_begin), ((PyObject *)__pyx_n_s__interval_end), ((PyObject *)__pyx_n_s__status), ((PyObject *)__pyx_n_s__ret_data), ((PyObject *)__pyx_n_s__trans_data)); if (unlikely(!__pyx_k_tuple_340)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
>>>>>>> .r50302

#line 3059 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_343);

#line 3059 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_343));

<<<<<<< .mine
#line 3061 "dsproc3/core.pyx"
  __pyx_k_codeobj_344 = (PyObject*)__Pyx_PyCode_New(1, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_343, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s___vap_main_loop, 3061, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_344)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3061; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
=======
#line 3059 "dsproc3/core.pyx"
  __pyx_k_codeobj_341 = (PyObject*)__Pyx_PyCode_New(1, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_340, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s___vap_main_loop, 3059, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_341)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
>>>>>>> .r50302

  /* "dsproc3/core.pyx":3113
 * 
 * 
 * def main(argv, proc_model, proc_version, proc_names=None):             # <<<<<<<<<<<<<<
 *     """Datasystem Process Main Function.
 * 
 */

<<<<<<< .mine
#line 3115 "dsproc3/core.pyx"
  __pyx_k_tuple_345 = PyTuple_Pack(5, ((PyObject *)__pyx_n_s__argv), ((PyObject *)__pyx_n_s__proc_model), ((PyObject *)__pyx_n_s__proc_version), ((PyObject *)__pyx_n_s__proc_names), ((PyObject *)__pyx_n_s__exit_value)); if (unlikely(!__pyx_k_tuple_345)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
=======
#line 3113 "dsproc3/core.pyx"
  __pyx_k_tuple_342 = PyTuple_Pack(5, ((PyObject *)__pyx_n_s__argv), ((PyObject *)__pyx_n_s__proc_model), ((PyObject *)__pyx_n_s__proc_version), ((PyObject *)__pyx_n_s__proc_names), ((PyObject *)__pyx_n_s__exit_value)); if (unlikely(!__pyx_k_tuple_342)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
>>>>>>> .r50302

#line 3113 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_k_tuple_345);

#line 3113 "dsproc3/core.pyx"
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_345));

<<<<<<< .mine
#line 3115 "dsproc3/core.pyx"
  __pyx_k_codeobj_346 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_345, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__main, 3115, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_346)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
=======
#line 3113 "dsproc3/core.pyx"
  __pyx_k_codeobj_343 = (PyObject*)__Pyx_PyCode_New(4, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_k_tuple_342, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_94, __pyx_n_s__main, 3113, __pyx_empty_bytes); if (unlikely(!__pyx_k_codeobj_343)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
>>>>>>> .r50302

#line 3113 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 3113 "dsproc3/core.pyx"
  return 0;

#line 3113 "dsproc3/core.pyx"
  __pyx_L1_error:;

#line 3113 "dsproc3/core.pyx"
  __Pyx_RefNannyFinishContext();

#line 3113 "dsproc3/core.pyx"
  return -1;

#line 3113 "dsproc3/core.pyx"
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_15 = PyInt_FromLong(15); if (unlikely(!__pyx_int_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initcore(void); /*proto*/
PyMODINIT_FUNC initcore(void)
#else
PyMODINIT_FUNC PyInit_core(void); /*proto*/
PyMODINIT_FUNC PyInit_core(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_core(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("core"), __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "dsproc3.core")) {
      if (unlikely(PyDict_SetItemString(modules, "dsproc3.core", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_dsproc3__core) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_7dsproc3_4core_PyVarTarget = &__pyx_vtable_7dsproc3_4core_PyVarTarget;
  __pyx_vtable_7dsproc3_4core_PyVarTarget.set_vartarget = (PyObject *(*)(struct __pyx_obj_7dsproc3_4core_PyVarTarget *, VarTarget *))__pyx_f_7dsproc3_4core_11PyVarTarget_set_vartarget;
  if (PyType_Ready(&__pyx_type_7dsproc3_4core_PyVarTarget) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_7dsproc3_4core_PyVarTarget, "__init__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7dsproc3_4core_11PyVarTarget_2__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7dsproc3_4core_11PyVarTarget_2__init__.doc = __pyx_doc_7dsproc3_4core_11PyVarTarget_2__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7dsproc3_4core_11PyVarTarget_2__init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_7dsproc3_4core_PyVarTarget.tp_dict, __pyx_vtabptr_7dsproc3_4core_PyVarTarget) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "PyVarTarget", (PyObject *)&__pyx_type_7dsproc3_4core_PyVarTarget) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7dsproc3_4core_PyVarTarget = &__pyx_type_7dsproc3_4core_PyVarTarget;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4cds3_4core_Object = __Pyx_ImportType("cds3.core", "Object", sizeof(struct __pyx_obj_4cds3_4core_Object), 1); if (unlikely(!__pyx_ptype_4cds3_4core_Object)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4cds3_4core_Object = (struct __pyx_vtabstruct_4cds3_4core_Object*)__Pyx_GetVtable(__pyx_ptype_4cds3_4core_Object->tp_dict); if (unlikely(!__pyx_vtabptr_4cds3_4core_Object)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4cds3_4core_Group = __Pyx_ImportType("cds3.core", "Group", sizeof(struct __pyx_obj_4cds3_4core_Group), 1); if (unlikely(!__pyx_ptype_4cds3_4core_Group)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4cds3_4core_Group = (struct __pyx_vtabstruct_4cds3_4core_Group*)__Pyx_GetVtable(__pyx_ptype_4cds3_4core_Group->tp_dict); if (unlikely(!__pyx_vtabptr_4cds3_4core_Group)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4cds3_4core_Dim = __Pyx_ImportType("cds3.core", "Dim", sizeof(struct __pyx_obj_4cds3_4core_Dim), 1); if (unlikely(!__pyx_ptype_4cds3_4core_Dim)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4cds3_4core_Dim = (struct __pyx_vtabstruct_4cds3_4core_Dim*)__Pyx_GetVtable(__pyx_ptype_4cds3_4core_Dim->tp_dict); if (unlikely(!__pyx_vtabptr_4cds3_4core_Dim)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4cds3_4core_Att = __Pyx_ImportType("cds3.core", "Att", sizeof(struct __pyx_obj_4cds3_4core_Att), 1); if (unlikely(!__pyx_ptype_4cds3_4core_Att)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4cds3_4core_Att = (struct __pyx_vtabstruct_4cds3_4core_Att*)__Pyx_GetVtable(__pyx_ptype_4cds3_4core_Att->tp_dict); if (unlikely(!__pyx_vtabptr_4cds3_4core_Att)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4cds3_4core_Var = __Pyx_ImportType("cds3.core", "Var", sizeof(struct __pyx_obj_4cds3_4core_Var), 1); if (unlikely(!__pyx_ptype_4cds3_4core_Var)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4cds3_4core_Var = (struct __pyx_vtabstruct_4cds3_4core_Var*)__Pyx_GetVtable(__pyx_ptype_4cds3_4core_Var->tp_dict); if (unlikely(!__pyx_vtabptr_4cds3_4core_Var)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4cds3_4core_VarGroup = __Pyx_ImportType("cds3.core", "VarGroup", sizeof(struct __pyx_obj_4cds3_4core_VarGroup), 1); if (unlikely(!__pyx_ptype_4cds3_4core_VarGroup)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4cds3_4core_VarGroup = (struct __pyx_vtabstruct_4cds3_4core_VarGroup*)__Pyx_GetVtable(__pyx_ptype_4cds3_4core_VarGroup->tp_dict); if (unlikely(!__pyx_vtabptr_4cds3_4core_VarGroup)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4cds3_4core_VarArray = __Pyx_ImportType("cds3.core", "VarArray", sizeof(struct __pyx_obj_4cds3_4core_VarArray), 1); if (unlikely(!__pyx_ptype_4cds3_4core_VarArray)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_4cds3_4core_VarArray = (struct __pyx_vtabstruct_4cds3_4core_VarArray*)__Pyx_GetVtable(__pyx_ptype_4cds3_4core_VarArray->tp_dict); if (unlikely(!__pyx_vtabptr_4cds3_4core_VarArray)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "dsproc3/core.pyx":4
 * # file dsproc3.pyx
 * 
 * import time             # <<<<<<<<<<<<<<
 * 
 * # Cython modules
 */

#line 4 "dsproc3/core.pyx"
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__time), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 4 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__time, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 4 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":37
 * 
 * # python modules
 * import inspect             # <<<<<<<<<<<<<<
 * import sys
 * 
 */

#line 37 "dsproc3/core.pyx"
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__inspect), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 37 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 37 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__inspect, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 37 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":38
 * # python modules
 * import inspect
 * import sys             # <<<<<<<<<<<<<<
 * 
 * # numpy
 */

#line 38 "dsproc3/core.pyx"
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__sys), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 38 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__sys, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":41
 * 
 * # numpy
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * np.import_array()
 */

#line 41 "dsproc3/core.pyx"
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__numpy), 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 41 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__np, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":43
 * import numpy as np
 * cimport numpy as np
 * np.import_array()             # <<<<<<<<<<<<<<
 * 
 * # convenient shorthand used in debug functions
 */

#line 43 "dsproc3/core.pyx"
  import_array();

  /* "dsproc3/core.pyx":46
 * 
 * # convenient shorthand used in debug functions
 * LIB_NAME = enums.DSPROC_LIB_NAME             # <<<<<<<<<<<<<<
 * 
 * cdef class PyVarTarget:
 */

#line 46 "dsproc3/core.pyx"
  __pyx_t_1 = PyBytes_FromString(DSPROC_LIB_NAME); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 46 "dsproc3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 46 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__LIB_NAME, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 46 "dsproc3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":86
 * 
 * #def LOG(char *format, *args, char *_file="", int _line=0):
 * def log(char *format, *args):             # <<<<<<<<<<<<<<
 *     s=format
 *     file,line,func=__line()
 */

#line 86 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_1log, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 86 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 86 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__log, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 86 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":98
 * 
 * #def WARNING(char *format, *args, char *_file="", int _line=0):
 * def warning(char *format, *args):             # <<<<<<<<<<<<<<
 *     s=format
 *     file,line,func=__line()
 */

#line 98 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_3warning, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 98 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 98 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__warning, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 98 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":109
 * 
 * #def ERROR(char *status, char *format, *args, char *_file="", int _line=0):
 * def error(char *status, char *format, *args):             # <<<<<<<<<<<<<<
 *     s=format
 *     file,line,func=__line()
 */

#line 109 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_5error, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 109 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 109 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__error, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 109 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":119
 *     dsproc_error(func, file, line, status, s)
 * 
 * def mentor_mail(char *format, *args):             # <<<<<<<<<<<<<<
 *     s=format
 *     file,line,func=__line()
 */

#line 119 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_7mentor_mail, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 119 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 119 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mentor_mail, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 119 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":130
 * 
 * #def debug_lv1(char *format, *args, char *_file="", int _line=0):
 * def debug_lv1(char *format, *args):             # <<<<<<<<<<<<<<
 *     s=format
 *     file,line,func=__line()
 */

#line 130 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_9debug_lv1, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 130 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 130 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__debug_lv1, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 130 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":145
 *         dsproc_debug(func, file, line, 1, s)
 * 
 * def debug_lv2(char *format, *args):             # <<<<<<<<<<<<<<
 *     s=format
 *     file,line,func=__line()
 */

#line 145 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_11debug_lv2, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 145 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 145 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__debug_lv2, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 145 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":156
 *         dsproc_debug(func, file, line, 2, s)
 * 
 * def debug_lv3(char *format, *args):             # <<<<<<<<<<<<<<
 *     s=format
 *     file,line,func=__line()
 */

#line 156 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_13debug_lv3, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 156 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 156 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__debug_lv3, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 156 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":167
 *         dsproc_debug(func, file, line, 3, s)
 * 
 * def debug_lv4(char *format, *args):             # <<<<<<<<<<<<<<
 *     s=format
 *     file,line,func=__line()
 */

#line 167 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_15debug_lv4, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 167 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 167 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__debug_lv4, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 167 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":178
 *         dsproc_debug(func, file, line, 4, s)
 * 
 * def debug_lv5(char *format, *args):             # <<<<<<<<<<<<<<
 *     s=format
 *     file,line,func=__line()
 */

#line 178 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_17debug_lv5, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 178 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 178 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__debug_lv5, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 178 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":192
 * # ported from dsproc_hooks.c
 * ##############################################################################
 * _user_data = None             # <<<<<<<<<<<<<<
 * _init_process_hook = None
 * _finish_process_hook = None
 */

#line 192 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s___user_data, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":193
 * ##############################################################################
 * _user_data = None
 * _init_process_hook = None             # <<<<<<<<<<<<<<
 * _finish_process_hook = None
 * _process_data_hook = None
 */

#line 193 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s___init_process_hook, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":194
 * _user_data = None
 * _init_process_hook = None
 * _finish_process_hook = None             # <<<<<<<<<<<<<<
 * _process_data_hook = None
 * _pre_retrieval_hook = None
 */

#line 194 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_1, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":195
 * _init_process_hook = None
 * _finish_process_hook = None
 * _process_data_hook = None             # <<<<<<<<<<<<<<
 * _pre_retrieval_hook = None
 * _post_retrieval_hook = None
 */

#line 195 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s___process_data_hook, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":196
 * _finish_process_hook = None
 * _process_data_hook = None
 * _pre_retrieval_hook = None             # <<<<<<<<<<<<<<
 * _post_retrieval_hook = None
 * _pre_transform_hook = None
 */

#line 196 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s___pre_retrieval_hook, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":197
 * _process_data_hook = None
 * _pre_retrieval_hook = None
 * _post_retrieval_hook = None             # <<<<<<<<<<<<<<
 * _pre_transform_hook = None
 * _post_transform_hook = None
 */

#line 197 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_2, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":198
 * _pre_retrieval_hook = None
 * _post_retrieval_hook = None
 * _pre_transform_hook = None             # <<<<<<<<<<<<<<
 * _post_transform_hook = None
 * _process_file_hook = None
 */

#line 198 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s___pre_transform_hook, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":199
 * _post_retrieval_hook = None
 * _pre_transform_hook = None
 * _post_transform_hook = None             # <<<<<<<<<<<<<<
 * _process_file_hook = None
 * 
 */

#line 199 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_3, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":200
 * _pre_transform_hook = None
 * _post_transform_hook = None
 * _process_file_hook = None             # <<<<<<<<<<<<<<
 * 
 * def set_init_process_hook(hook):
 */

#line 200 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s___process_file_hook, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "dsproc3/core.pyx":202
 * _process_file_hook = None
 * 
 * def set_init_process_hook(hook):             # <<<<<<<<<<<<<<
 *     """Set hook function to call when a process is first initialized.
 * 
 */

#line 202 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_19set_init_process_hook, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 202 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 202 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_114, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 202 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":225
 *     _init_process_hook = hook
 * 
 * def set_finish_process_hook(hook):             # <<<<<<<<<<<<<<
 *     """Set hook function to call before a process finishes.
 * 
 */

#line 225 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_21set_finish_process_hook, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 225 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 225 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_117, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 225 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":246
 *     _finish_process_hook = hook
 * 
 * def set_process_data_hook(hook):             # <<<<<<<<<<<<<<
 *     """Set the main data processing function.
 * 
 */

#line 246 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_23set_process_data_hook, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 246 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 246 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_120, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 246 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":276
 *     _process_data_hook = hook
 * 
 * def set_pre_retrieval_hook(hook):             # <<<<<<<<<<<<<<
 *     """Set hook function to call before data is retrieved.
 * 
 */

#line 276 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_25set_pre_retrieval_hook, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 276 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_123, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":305
 *     _pre_retrieval_hook = hook
 * 
 * def set_post_retrieval_hook(hook):             # <<<<<<<<<<<<<<
 *     """Set hook function to call after data is retrieved.
 * 
 */

#line 305 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_27set_post_retrieval_hook, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 305 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 305 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_126, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 305 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":335
 *     _post_retrieval_hook = hook
 * 
 * def set_pre_transform_hook(hook):             # <<<<<<<<<<<<<<
 *     """Set hook function to call before the data is transformed.
 * 
 */

#line 335 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_29set_pre_transform_hook, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 335 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 335 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_129, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 335 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":365
 *     _pre_transform_hook = hook
 * 
 * def set_post_transform_hook(hook):             # <<<<<<<<<<<<<<
 *     """Set hook function to call after the data is transformed.
 * 
 */

#line 365 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_31set_post_transform_hook, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 365 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 365 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_132, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 365 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":395
 *     _post_transform_hook = hook
 * 
 * def set_process_file_hook(hook):             # <<<<<<<<<<<<<<
 *     """Set the main file processing function.
 * 
 */

#line 395 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_33set_process_file_hook, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 395 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 395 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_135, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 395 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":422
 *     _process_file_hook = hook
 * 
 * def _run_init_process_hook():             # <<<<<<<<<<<<<<
 *     """Private: Run the init_process_hook function.
 * 
 */

#line 422 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_35_run_init_process_hook, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 422 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_78, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":443
 *     return 1
 * 
 * def _run_finish_process_hook():             # <<<<<<<<<<<<<<
 *     """Private: Run the finish_process_hook function."""
 *     if _finish_process_hook:
 */

#line 443 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_37_run_finish_process_hook, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 443 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 443 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_79, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 443 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":450
 *         debug_lv1("----- EXITING FINISH PROCESS HOOK ------\n\n")
 * 
 * def _run_process_data_hook(             # <<<<<<<<<<<<<<
 *         time_t begin_date,
 *         time_t end_date,
 */

#line 450 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_39_run_process_data_hook, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 450 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 450 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_77, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 450 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":482
 *     return status
 * 
 * def _run_pre_retrieval_hook(             # <<<<<<<<<<<<<<
 *         time_t   begin_date,
 *         time_t   end_date):
 */

#line 482 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_41_run_pre_retrieval_hook, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 482 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 482 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_73, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 482 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":511
 *     return status
 * 
 * def _run_post_retrieval_hook(             # <<<<<<<<<<<<<<
 *         time_t begin_date,
 *         time_t end_date,
 */

#line 511 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_43_run_post_retrieval_hook, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 511 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 511 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_74, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 511 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":542
 *     return status
 * 
 * def _run_pre_transform_hook(             # <<<<<<<<<<<<<<
 *         time_t begin_date,
 *         time_t end_date,
 */

#line 542 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_45_run_pre_transform_hook, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 542 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 542 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_75, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 542 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":573
 *     return status
 * 
 * def _run_post_transform_hook(             # <<<<<<<<<<<<<<
 *         time_t begin_date,
 *         time_t end_date,
 */

#line 573 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_47_run_post_transform_hook, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 573 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 573 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_76, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 573 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":605
 *     return status
 * 
 * def _run_process_file_hook(             # <<<<<<<<<<<<<<
 *         char *input_dir,
 *         char *file_name):
 */

#line 605 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_49_run_process_file_hook, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 605 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 605 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_72, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 605 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":764
 *         raise ValueError, "Unknown dtype for CDSDataType %s" % type
 * 
 * def get_debug_level():             # <<<<<<<<<<<<<<
 *     """Get the current debug level."""
 *     return dsproc_get_debug_level()
 */

#line 764 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_51get_debug_level, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 764 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 764 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_debug_level, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 764; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 764 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":768
 *     return dsproc_get_debug_level()
 * 
 * def get_site():             # <<<<<<<<<<<<<<
 *     """Get the process site."""
 *     return dsproc_get_site()
 */

#line 768 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_53get_site, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 768 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 768 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_site, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 768; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 768 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":772
 *     return dsproc_get_site()
 * 
 * def get_facility():             # <<<<<<<<<<<<<<
 *     """Get the process facility."""
 *     return dsproc_get_facility()
 */

#line 772 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_55get_facility, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 772 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 772 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_facility, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 772 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":776
 *     return dsproc_get_facility()
 * 
 * def get_name():             # <<<<<<<<<<<<<<
 *     """Get the process name."""
 *     return dsproc_get_name()
 */

#line 776 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_57get_name, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 776; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 776 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 776 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_name, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 776; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 776 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":780
 *     return dsproc_get_name()
 * 
 * def get_datastream_id(             # <<<<<<<<<<<<<<
 *         char *site,
 *         char *facility,
 */

#line 780 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_59get_datastream_id, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 780 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 780 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_datastream_id, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 780 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":800
 *     return dsproc_get_datastream_id(site, facility, dsc_name, dsc_level, role)
 * 
 * def get_input_datastream_id(char *dsc_name, char *dsc_level):             # <<<<<<<<<<<<<<
 *     """Get the ID of an input datastream.
 * 
 */

#line 800 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_61get_input_datastream_id, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 800; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 800 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 800 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_159, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 800; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 800 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":818
 *     return dsproc_get_input_datastream_id(dsc_name, dsc_level)
 * 
 * def get_input_datastream_ids():             # <<<<<<<<<<<<<<
 *     """Get the IDs of all input datastreams.
 * 
 */

#line 818 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_63get_input_datastream_ids, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 818; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 818 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 818 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_162, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 818; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 818 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":847
 *     return ids_nd
 * 
 * def get_output_datastream_id(char *dsc_name, char *dsc_level):             # <<<<<<<<<<<<<<
 *     """Get the ID of an output datastream.
 * 
 */

#line 847 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_65get_output_datastream_id, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 847 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 847 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_165, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 847; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 847 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":865
 *     return dsproc_get_output_datastream_id(dsc_name, dsc_level)
 * 
 * def get_output_datastream_ids():             # <<<<<<<<<<<<<<
 *     """Get the IDs of all output datastreams.
 * 
 */

#line 865 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_67get_output_datastream_ids, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 865 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 865 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_168, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 865 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":894
 *     return ids_nd
 * 
 * def datastream_name(int ds_id):             # <<<<<<<<<<<<<<
 *     """Returns the fully qualified datastream name.
 * 
 */

#line 894 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_69datastream_name, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 894 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 894 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__datastream_name, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 894 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":908
 *     return retval
 * 
 * def datastream_path(int ds_id):             # <<<<<<<<<<<<<<
 *     """Returns the path to the datastream directory.
 * 
 */

#line 908 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_71datastream_path, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 908 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 908 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__datastream_path, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 908 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":922
 *     return retval
 * 
 * def datastream_site(int ds_id):             # <<<<<<<<<<<<<<
 *     """Returns the datastream site.
 * 
 */

#line 922 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_73datastream_site, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 922 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 922 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__datastream_site, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 922 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":936
 *     return retval
 * 
 * def datastream_facility(int ds_id):             # <<<<<<<<<<<<<<
 *     """ 995  * Returns the datastream facility.
 * 
 */

#line 936 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_75datastream_facility, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 936 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 936 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__datastream_facility, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 936 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":950
 *     return retval
 * 
 * def datastream_class_name(int ds_id):             # <<<<<<<<<<<<<<
 *     """Returns the datastream class name.
 * 
 */

#line 950 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_77datastream_class_name, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 950; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 950 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 950 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_179, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 950; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 950 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":964
 *     return retval
 * 
 * def datastream_class_level(int ds_id):             # <<<<<<<<<<<<<<
 *     """Returns the datastream class level.
 * 
 */

#line 964 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_79datastream_class_level, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 964 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 964 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_182, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 964 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":978
 *     return retval
 * 
 * def dataset_name(cds3.core.Group dataset):             # <<<<<<<<<<<<<<
 *     """Returns the dataset name.
 * 
 */

#line 978 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_81dataset_name, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 978 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 978 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__dataset_name, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 978 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":995
 *     return retval
 * 
 * def get_output_dataset(int ds_id, int obs_index=0):             # <<<<<<<<<<<<<<
 *     """Get an output dataset.
 * 
 */

#line 995 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_83get_output_dataset, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 995; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 995 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 995 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_output_dataset, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 995; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 995 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1029
 *         return group
 * 
 * def get_retrieved_dataset(int ds_id, int obs_index=0):             # <<<<<<<<<<<<<<
 *     """Get a retrieved dataset.
 * 
 */

#line 1029 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_85get_retrieved_dataset, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1029; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1029 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1029 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_189, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1029; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1029 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1075
 *         return group
 * 
 * def get_transformed_dataset(             # <<<<<<<<<<<<<<
 *         char *coordsys_name,
 *         int ds_id,
 */

#line 1075 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_87get_transformed_dataset, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1075 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1075 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_192, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1075 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1108
 *         return group
 * 
 * def get_dim(cds3.core.Group dataset, char *name):             # <<<<<<<<<<<<<<
 *     """Get a dimension from a dataset.
 * 
 */

#line 1108 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_89get_dim, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1108 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1108 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_dim, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1108 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1128
 *         return dim
 * 
 * def get_dim_length(cds3.core.Group dataset, char *name):             # <<<<<<<<<<<<<<
 *     """Get the length of a dimension in a dataset.
 * 
 */

#line 1128 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_91get_dim_length, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1128 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1128 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_dim_length, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1128 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1140
 *     return dsproc_get_dim_length(dataset.c_ob, name)
 * 
 * def set_dim_length(cds3.core.Group dataset, char *name, size_t length):             # <<<<<<<<<<<<<<
 *     """Set the length of a dimension in a dataset.
 * 
 */

#line 1140 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_93set_dim_length, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1140 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1140 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__set_dim_length, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1140 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1158
 *     return dsproc_set_dim_length(dataset.c_ob, name, length)
 * 
 * def change_att(             # <<<<<<<<<<<<<<
 *             cds3.core.Object parent,
 *             int          overwrite,
 */

#line 1158 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_95change_att, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1158 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1158 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__change_att, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1158 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1195
 *             len(value_nd), value_nd.data)
 * 
 * def get_att(cds3.core.Object parent, char  *name):             # <<<<<<<<<<<<<<
 *     """Get an attribute from a dataset or variable.
 * 
 */

#line 1195 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_97get_att, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1195 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1195 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_att, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1195 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1215
 *         return att
 * 
 * def get_att_text(cds3.core.Object parent, char *name):             # <<<<<<<<<<<<<<
 *     """Get a copy of an attribute value from a dataset or variable.
 * 
 */

#line 1215 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_99get_att_text, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1215 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1215 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_att_text, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1215 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1243
 *     return retval
 * 
 * def get_att_value(cds3.core.Object parent, char *name, CDSDataType type):             # <<<<<<<<<<<<<<
 *     """Get a copy of an attribute value from a dataset or variable.
 * 
 */

#line 1243 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_101get_att_value, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1243 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1243 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_att_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1243 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1278
 *     return value_nd
 * 
 * def set_att(cds3.core.Object parent, int overwrite, char *name,             # <<<<<<<<<<<<<<
 *         CDSDataType type, object value):
 *     """Set the value of an attribute in a dataset or variable.
 */

#line 1278 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_103set_att, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1278 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1278 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__set_att, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1278 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1312
 *             len(value_nd), value_nd.data)
 * 
 * def set_att_text(cds3.core.Object parent, char *name, char *value):             # <<<<<<<<<<<<<<
 *     """Set the value of an attribute in a dataset or variable.
 * 
 */

#line 1312 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_105set_att_text, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1312 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1312 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__set_att_text, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1312 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1333
 *     return dsproc_set_att_text(parent.cds_object, name, value)
 * 
 * def set_att_value(cds3.core.Object parent, char *name,             # <<<<<<<<<<<<<<
 *         CDSDataType type, object value):
 *     """Set the value of an attribute in a dataset or variable.
 */

#line 1333 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_107set_att_value, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1333 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1333 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__set_att_value, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1333 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1367
 *             cds3.core.Group dataset=None,
 *             char *var_name="",
 *             CDSDataType data_type=CDS_NAT,             # <<<<<<<<<<<<<<
 *             object dim_names=None, # should be iterable i.e. 1-d list/tuple
 *             bint copy_data=True):
 */

#line 1367 "dsproc3/core.pyx"
  __pyx_k_55 = CDS_NAT;

  /* "dsproc3/core.pyx":1363
 *             len(value_nd), value_nd.data)
 * 
 * def clone_var(             # <<<<<<<<<<<<<<
 *             cds3.core.Var src_var,
 *             cds3.core.Group dataset=None,
 */

#line 1363 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_109clone_var, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1363 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1363 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__clone_var, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1363 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1422
 *         return var
 * 
 * def define_var(             # <<<<<<<<<<<<<<
 *             cds3.core.Group dataset,
 *             char *name,
 */

#line 1422 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_111define_var, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1422 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1422 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__define_var, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1422 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1615
 *     return None
 * 
 * def delete_var(cds3.core.Var var):             # <<<<<<<<<<<<<<
 *     """Delete a variable from a dataset.
 * 
 */

#line 1615 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_113delete_var, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1615 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1615 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__delete_var, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1615 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1633
 *     return return_value
 * 
 * def get_coord_var(cds3.core.Var _var, int dim_index):             # <<<<<<<<<<<<<<
 *     """Get the coordinate variable for a variable's dimension.
 * 
 */

#line 1633 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_115get_coord_var, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1633 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1633 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_coord_var, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1633 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1652
 *     return var
 * 
 * def get_dataset_vars(             # <<<<<<<<<<<<<<
 *             cds3.core.Group dataset,
 *             object var_names, # iterable of strings
 */

#line 1652 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_117get_dataset_vars, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1652 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1652 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_dataset_vars, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1652 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1763
 *         return ret_vars
 * 
 * def get_metric_var(cds3.core.Var var, char *metric):             # <<<<<<<<<<<<<<
 *     """Get a companion metric variable for a variable.
 * 
 */

#line 1763 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_119get_metric_var, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1763 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1763 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_metric_var, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1763 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1787
 *     return metric_var
 * 
 * def get_output_var(int ds_id, char *var_name, int obs_index=0):             # <<<<<<<<<<<<<<
 *     """Get a variable from an output dataset.
 * 
 */

#line 1787 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_121get_output_var, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1787 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1787 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_output_var, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1787 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1811
 *     return var
 * 
 * def get_qc_var(cds3.core.Var _var):             # <<<<<<<<<<<<<<
 *     """Get the companion QC variable for a variable.
 * 
 */

#line 1811 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_123get_qc_var, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1811 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1811 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_qc_var, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1811 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1829
 *     return var
 * 
 * def get_retrieved_var(char *var_name, int obs_index=0):             # <<<<<<<<<<<<<<
 *     """Get a primary variable from the retrieved data.
 * 
 */

#line 1829 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_125get_retrieved_var, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1829 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1829 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_retrieved_var, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1829 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1861
 *     return var
 * 
 * def get_transformed_var(char *var_name, int obs_index=0):             # <<<<<<<<<<<<<<
 *     """Get a primary variable from the transformed data.
 * 
 */

#line 1861 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_127get_transformed_var, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1861 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1861 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_transformed_var, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1861 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1888
 *     return var
 * 
 * def get_trans_coordsys_var(char *coordsys_name, char *var_name, int obs_index=0):             # <<<<<<<<<<<<<<
 *     """Get a variable from a transformation coordinate system.
 * 
 */

#line 1888 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_129get_trans_coordsys_var, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1888 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1888 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_235, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1888; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1888 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1916
 *     return var
 * 
 * def get_var(cds3.core.Group dataset, char *name):             # <<<<<<<<<<<<<<
 *     """Get a variable from a dataset.
 * 
 */

#line 1916 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_131get_var, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1916 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1916 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_var, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1916 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1935
 *     return var
 * 
 * def var_name(cds3.core.Var var):             # <<<<<<<<<<<<<<
 *     """Returns the variable name.
 * 
 */

#line 1935 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_133var_name, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1935 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1935 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__var_name, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1935 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1952
 *     return retval
 * 
 * def var_sample_count(cds3.core.Var var):             # <<<<<<<<<<<<<<
 *     """Returns the number of samples in a variable's data array.
 * 
 */

#line 1952 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_135var_sample_count, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1952 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1952 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__var_sample_count, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1952 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1965
 *     return dsproc_var_sample_count(var.c_ob)
 * 
 * def var_sample_size(cds3.core.Var var):             # <<<<<<<<<<<<<<
 *     """Returns the sample size of a variable.
 * 
 */

#line 1965 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_137var_sample_size, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1965; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1965 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1965 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__var_sample_size, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1965; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1965 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1979
 *     return dsproc_var_sample_size(var.c_ob)
 * 
 * def alloc_var_data(cds3.core.Var var, size_t sample_start, size_t sample_count):             # <<<<<<<<<<<<<<
 *     """Allocate memory for a variable's data array.
 * 
 */

#line 1979 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_139alloc_var_data, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1979; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1979 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1979 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__alloc_var_data, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1979; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1979 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2011
 *     return var.get_datap(sample_start)
 * 
 * def alloc_var_data_index(cds3.core.Var var, size_t sample_start,             # <<<<<<<<<<<<<<
 *         size_t sample_count):
 *     """Allocate memory for a variable's data array.
 */

#line 2011 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_141alloc_var_data_index, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2011 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2011 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_248, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2011 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2045
 *     return var.get_datap(sample_start)
 * 
 * def get_var_data_index(cds3.core.Var var):             # <<<<<<<<<<<<<<
 *     """Get a data index for a multi-dimensional variable.
 * 
 */

#line 2045 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_143get_var_data_index, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2045; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2045 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2045 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_var_data_index, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2045; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2045 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2073
 *     return var.get_datap()
 * 
 * def get_var_data(cds3.core.Var var, CDSDataType type, size_t sample_start,             # <<<<<<<<<<<<<<
 *         size_t sample_count=0, np.ndarray data=None):
 *     """Get a copy of the data from a dataset variable.
 */

#line 2073 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_145get_var_data, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2073 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2073 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_var_data, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2073 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2127
 *         return data, _convert_single(type, missing_c)
 * 
 * def get_var_missing_values(cds3.core.Var var):             # <<<<<<<<<<<<<<
 *     """Get the missing values for a CDS Variable.
 * 
 */

#line 2127 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_147get_var_missing_values, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2127 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2127 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_255, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2127 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2166
 *         return array
 * 
 * def init_var_data(             # <<<<<<<<<<<<<<
 *         cds3.core.Var var,
 *         size_t sample_start,
 */

#line 2166 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_149init_var_data, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2166 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2166 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__init_var_data, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2166 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2218
 *     return var.get_datap(sample_start)
 * 
 * def init_var_data_index(             # <<<<<<<<<<<<<<
 *             cds3.core.Var var,
 *             size_t sample_start,
 */

#line 2218 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_151init_var_data_index, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2218 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2218 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__init_var_data_index, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2218 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2269
 *     return var.get_datap(sample_start)
 * 
 * def set_var_data(             # <<<<<<<<<<<<<<
 *             cds3.core.Var var,
 *             size_t sample_start,
 */

#line 2269 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_153set_var_data, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2269 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2269 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__set_var_data, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2269 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2321
 *     return var.get_datap(sample_start)
 * 
 * def get_base_time(cds3.core.Object cds_object):             # <<<<<<<<<<<<<<
 *     """Get the base time of a dataset or time variable.
 * 
 */

#line 2321 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_155get_base_time, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2321 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2321 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_base_time, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2321 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2341
 * #            timeval_t *start_time,
 * #            timeval_t *end_time)
 * def get_time_range(cds3.core.Object cds_object):             # <<<<<<<<<<<<<<
 *     """Get the time range of a dataset or time variable.
 * 
 */

#line 2341 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_157get_time_range, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2341 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2341 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_time_range, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2341 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2365
 *     return num_times, (start.tv_sec, start.tv_usec), (end.tv_sec, end.tv_usec)
 * 
 * def get_time_var(cds3.core.Object cds_object):             # <<<<<<<<<<<<<<
 *     """Get the time variable used by a dataset.
 * 
 */

#line 2365 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_159get_time_var, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2365 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2365 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_time_var, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2365 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2386
 *     return var
 * 
 * def get_sample_times(cds3.core.Object cds_object, size_t sample_start):             # <<<<<<<<<<<<<<
 *     """Get the sample times for a dataset or time variable.
 * 
 */

#line 2386 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_161get_sample_times, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2386 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2386 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_sample_times, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2386 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2425
 * #            size_t    *sample_count,
 * #            timeval_t *sample_times)
 * def get_sample_timevals(             # <<<<<<<<<<<<<<
 *             cds3.core.Object cds_object,
 *             size_t sample_start):
 */

#line 2425 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_163get_sample_timevals, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2425 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2425 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_sample_timevals, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2425 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2463
 *     return retval
 * 
 * def set_sample_times(cds3.core.Object obj, size_t sample_start,             # <<<<<<<<<<<<<<
 *         object sample_times):
 *     cdef int retval
 */

#line 2463 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_165set_sample_times, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2463 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2463 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__set_sample_times, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2463 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2476
 *     return retval
 * 
 * def set_sample_timevals(cds3.core.Object obj, size_t sample_start,             # <<<<<<<<<<<<<<
 *         object sample_times):
 *     """Set the sample times for a dataset or time variable.
 */

#line 2476 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_167set_sample_timevals, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2476 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2476 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__set_sample_timevals, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2476 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2529
 *     return retval
 * 
 * def add_var_output_target(cds3.core.Var var, int ds_id, char *var_name):             # <<<<<<<<<<<<<<
 *     """Add an output target for a variable.
 * 
 */

#line 2529 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_169add_var_output_target, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2529 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2529 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_278, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2529 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2547
 *     return dsproc_add_var_output_target(var.c_ob, ds_id, var_name)
 * 
 * def copy_var_tag(cds3.core.Var src_var, cds3.core.Var dest_var):             # <<<<<<<<<<<<<<
 *     """Copy a variable tag from one variable to another.
 * 
 */

#line 2547 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_171copy_var_tag, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2547; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2547 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2547 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__copy_var_tag, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2547; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2547 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2562
 *     return dsproc_copy_var_tag(src_var.c_ob, dest_var.c_ob)
 * 
 * def delete_var_tag(cds3.core.Var var):             # <<<<<<<<<<<<<<
 *     """Delete a variable tag.
 * 
 */

#line 2562 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_173delete_var_tag, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2562 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2562 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__delete_var_tag, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2562 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2573
 * #            CDSVar      *var,
 * #            VarTarget ***targets)
 * def get_var_output_targets(cds3.core.Var var):             # <<<<<<<<<<<<<<
 *     """Get the output targets defined for the specified variable.
 * 
 */

#line 2573 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_175get_var_output_targets, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2573 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2573 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_285, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2573 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2599
 *     return retval
 * 
 * def set_var_coordsys_name(cds3.core.Var var, char *coordsys_name):             # <<<<<<<<<<<<<<
 *     return dsproc_set_var_coordsys_name(var.c_ob, coordsys_name)
 * 
 */

#line 2599 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_177set_var_coordsys_name, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2599 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2599 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_288, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2599 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2602
 *     return dsproc_set_var_coordsys_name(var.c_ob, coordsys_name)
 * 
 * def set_var_flags(cds3.core.Var var, int flags):             # <<<<<<<<<<<<<<
 *     return dsproc_set_var_flags(var.c_ob, flags)
 * 
 */

#line 2602 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_179set_var_flags, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2602 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2602 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__set_var_flags, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2602; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2602 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2605
 *     return dsproc_set_var_flags(var.c_ob, flags)
 * 
 * def set_var_output_target(cds3.core.Var var, int ds_id, char *var_name):             # <<<<<<<<<<<<<<
 *     return dsproc_set_var_output_target(var.c_ob, ds_id, var_name)
 * 
 */

#line 2605 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_181set_var_output_target, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2605 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2605 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_293, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2605 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2608
 *     return dsproc_set_var_output_target(var.c_ob, ds_id, var_name)
 * 
 * def unset_var_flags(cds3.core.Var var, int flags):             # <<<<<<<<<<<<<<
 *     dsproc_unset_var_flags(var.c_ob, flags)
 * 
 */

#line 2608 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_183unset_var_flags, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2608 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2608 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__unset_var_flags, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2608 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2626
 * #int dsproc_get_var_dqrs(CDSVar *var, VarDQR ***dqrs)
 * 
 * def dump_dataset(             # <<<<<<<<<<<<<<
 *         cds3.core.Group dataset,
 *         char *outdir,
 */

#line 2626 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_185dump_dataset, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2626 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2626 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__dump_dataset, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2626 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2636
 *             flags)
 * 
 * def dump_output_datasets(char *outdir, char *suffix, int flags):             # <<<<<<<<<<<<<<
 *     return dsproc_dump_output_datasets(outdir, suffix, flags)
 * 
 */

#line 2636 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_187dump_output_datasets, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2636 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2636 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_300, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2636 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2639
 *     return dsproc_dump_output_datasets(outdir, suffix, flags)
 * 
 * def dump_retrieved_datasets(char *outdir, char *suffix, int flags):             # <<<<<<<<<<<<<<
 *     return dsproc_dump_retrieved_datasets(outdir, suffix, flags)
 * 
 */

#line 2639 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_189dump_retrieved_datasets, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2639; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2639 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2639 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_303, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2639; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2639 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2642
 *     return dsproc_dump_retrieved_datasets(outdir, suffix, flags)
 * 
 * def dump_transformed_datasets(char *outdir, char *suffix, int flags):             # <<<<<<<<<<<<<<
 *     return dsproc_dump_transformed_datasets(outdir, suffix, flags)
 * 
 */

#line 2642 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_191dump_transformed_datasets, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2642 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2642 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_306, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2642 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2645
 *     return dsproc_dump_transformed_datasets(outdir, suffix, flags)
 * 
 * def copy_file(char *src_file, char *dest_file):             # <<<<<<<<<<<<<<
 *     return dsproc_copy_file(src_file, dest_file)
 * 
 */

#line 2645 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_193copy_file, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2645 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2645 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__copy_file, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2645 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2648
 *     return dsproc_copy_file(src_file, dest_file)
 * 
 * def move_file(char *src_file, char *dest_file):             # <<<<<<<<<<<<<<
 *     return dsproc_move_file(src_file, dest_file)
 * 
 */

#line 2648 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_195move_file, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2648 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2648 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__move_file, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2648 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2653
 * #FILE   *dsproc_open_file(char *file)
 * #
 * def add_datastream_file_patterns(int ds_id, object patterns, int ignore_case):             # <<<<<<<<<<<<<<
 *     cdef int return_value
 *     cdef char **c_patterns = <char**>malloc(len(patterns) * sizeof(char*))
 */

#line 2653 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_197add_datastream_file_patterns, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2653 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2653 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_313, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2653 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2663
 *     return return_value
 * 
 * def get_datastream_files(int ds_id):             # <<<<<<<<<<<<<<
 *     cdef int count
 *     cdef char **file_list = NULL
 */

#line 2663 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_199get_datastream_files, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2663 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2663 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_316, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2663 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2678
 * #            int    (*qsort_compare)(void *, void *))
 * 
 * def rename(             # <<<<<<<<<<<<<<
 *         int ds_id,
 *         char *file_path,
 */

#line 2678 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_201rename, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2678 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2678 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__rename, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2678 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2693
 * #            timeval_t *end_time)
 * 
 * def rename_bad(int ds_id, char *file_path, char *file_name, time_t file_time):             # <<<<<<<<<<<<<<
 *     return dsproc_rename_bad(ds_id, file_path, file_name, file_time)
 * 
 */

#line 2693 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_203rename_bad, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2693; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2693 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2693 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__rename_bad, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2693; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2693 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2696
 *     return dsproc_rename_bad(ds_id, file_path, file_name, file_time)
 * 
 * def set_rename_preserve_dots(int ds_id, int preserve_dots):             # <<<<<<<<<<<<<<
 *     dsproc_set_rename_preserve_dots(ds_id, preserve_dots)
 * 
 */

#line 2696 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_205set_rename_preserve_dots, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2696 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2696 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_323, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2696 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2703
 * ##############################################################################
 * 
 * def initialize(argv, proc_model, proc_version, proc_names):             # <<<<<<<<<<<<<<
 *     cdef char **c_argv = NULL
 *     cdef char **c_proc_names = NULL
 */

#line 2703 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_207initialize, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2703 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2703 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__initialize, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2703 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2743
 * #int dsproc_store_output_datasets()
 * #
 * def finish():             # <<<<<<<<<<<<<<
 *     return dsproc_finish()
 * #
 */

#line 2743 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_209finish, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2743 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2743 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__finish, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2743; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2743 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2785
 * 
 * 
 * def get_status():             # <<<<<<<<<<<<<<
 *     return dsproc_get_status()
 * 
 */

#line 2785 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_211get_status, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2785 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2785 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__get_status, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2785 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2798
 * #time_t      dsproc_get_processing_interval(time_t *begin, time_t *end)
 * 
 * def set_status(char *status):             # <<<<<<<<<<<<<<
 *     """Set the process status"""
 *     dsproc_set_status(status)
 */

#line 2798 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_213set_status, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2798 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2798 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__set_status, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2798 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

<<<<<<< .mine
  /* "dsproc3/core.pyx":2828
 * #            timeval_t *data_time)
 * #
 * def set_datastream_flags(int ds_id, int flags):             # <<<<<<<<<<<<<<
 *     dsproc_set_datastream_flags(ds_id, flags)
 * 
 */

#line 2828 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_215set_datastream_flags, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2828 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2828 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_332, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2828 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2835
=======
  /* "dsproc3/core.pyx":2833
>>>>>>> .r50302
 * #
 * #void    dsproc_unset_datastream_flags(int ds_id, int flags)
 * def create_output_dataset(int ds_id, time_t data_time, int set_location ):             # <<<<<<<<<<<<<<
 * 
 *     cdef cds3.core.Group group
 */

<<<<<<< .mine
#line 2835 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_217create_output_dataset, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
=======
#line 2833 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_215create_output_dataset, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
>>>>>>> .r50302

#line 2833 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

<<<<<<< .mine
#line 2835 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_335, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
=======
#line 2833 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_332, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
>>>>>>> .r50302

#line 2833 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2865
 * #int     dsproc_set_dataset_location(CDSGroup *cds)
 * #
 * def store_dataset(int ds_id, int newfile):             # <<<<<<<<<<<<<<
 *     """Store the output dataset."""
 *     return dsproc_store_dataset(ds_id, newfile)
 */

<<<<<<< .mine
#line 2867 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_219store_dataset, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
=======
#line 2865 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_217store_dataset, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
>>>>>>> .r50302

#line 2865 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2865 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__store_dataset, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2865; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2865 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2915
 * #            size_t      dim_length)
 * #
 * def set_input_source(char *status):             # <<<<<<<<<<<<<<
 *     """Set the input source string to use when new datasets are created.
 *        This function will set the string to use for the input_source
 */

<<<<<<< .mine
#line 2917 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_221set_input_source, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
=======
#line 2915 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_219set_input_source, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
>>>>>>> .r50302

#line 2915 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2915 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__set_input_source, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2915 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2930
 * #int     dsproc_db_connect()
 * 
 * def db_disconnect():             # <<<<<<<<<<<<<<
 *     dsproc_db_disconnect()
 * 
 */

<<<<<<< .mine
#line 2932 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_223db_disconnect, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2932; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
=======
#line 2930 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_221db_disconnect, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2930; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
>>>>>>> .r50302

#line 2930 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2930 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__db_disconnect, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2930; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2930 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":2989
 * #        char *level)
 * 
 * def _ingest_main_loop():             # <<<<<<<<<<<<<<
 *     cdef int       ndsid
 *     cdef int      *dsids
 */

<<<<<<< .mine
#line 2991 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_225_ingest_main_loop, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
=======
#line 2989 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_223_ingest_main_loop, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
>>>>>>> .r50302

#line 2989 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 2989 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s___ingest_main_loop, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 2989 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":3059
 *     dsproc_free_file_list(files)
 * 
 * def _vap_main_loop(int proc_model):             # <<<<<<<<<<<<<<
 *     cdef time_t    interval_begin
 *     cdef time_t    interval_end
 */

<<<<<<< .mine
#line 3061 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_227_vap_main_loop, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3061; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
=======
#line 3059 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_225_vap_main_loop, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
>>>>>>> .r50302

#line 3059 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 3059 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s___vap_main_loop, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3059 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":3113
 * 
 * 
 * def main(argv, proc_model, proc_version, proc_names=None):             # <<<<<<<<<<<<<<
 *     """Datasystem Process Main Function.
 * 
 */

<<<<<<< .mine
#line 3115 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_229main, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
=======
#line 3113 "dsproc3/core.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7dsproc3_4core_227main, NULL, __pyx_n_s_95); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
>>>>>>> .r50302

#line 3113 "dsproc3/core.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 3113 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__main, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3113 "dsproc3/core.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "dsproc3/core.pyx":1
 * #cython: embedsignature=True             # <<<<<<<<<<<<<<
 * # file dsproc3.pyx
 * 
 */

#line 1 "dsproc3/core.pyx"
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1 "dsproc3/core.pyx"
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));

#line 1 "dsproc3/core.pyx"
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1 "dsproc3/core.pyx"
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "numpy.pxd":975
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

#line 975 "numpy.pxd"
  goto __pyx_L0;

#line 975 "numpy.pxd"
  __pyx_L1_error:;

#line 975 "numpy.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 975 "numpy.pxd"
  if (__pyx_m) {

#line 975 "numpy.pxd"
    __Pyx_AddTraceback("init dsproc3.core", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 975 "numpy.pxd"
    Py_DECREF(__pyx_m); __pyx_m = 0;

#line 975 "numpy.pxd"
  } else if (!PyErr_Occurred()) {

#line 975 "numpy.pxd"
    PyErr_SetString(PyExc_ImportError, "init dsproc3.core");

#line 975 "numpy.pxd"
  }

#line 975 "numpy.pxd"
  __pyx_L0:;

#line 975 "numpy.pxd"
  __Pyx_RefNannyFinishContext();

#line 975 "numpy.pxd"
  #if PY_MAJOR_VERSION < 3

#line 975 "numpy.pxd"
  return;

#line 975 "numpy.pxd"
  #else

#line 975 "numpy.pxd"
  return __pyx_m;

#line 975 "numpy.pxd"
  #endif

#line 975 "numpy.pxd"
}

#line 1 "cython_utility"

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result) {
        if (dict != __pyx_b) {
            PyErr_Clear();
            result = PyObject_GetAttr(__pyx_b, name);
        }
        if (!result) {
            PyErr_SetObject(PyExc_NameError, name);
        }
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%s() takes %s %" CYTHON_FORMAT_SSIZE_T "d positional argument%s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CPYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
        goto bad;
    #endif
    Py_INCREF(local_type);
    Py_INCREF(local_value);
    Py_INCREF(local_tb);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    /* Make sure tstate is in a consistent state when we XDECREF
       these objects (DECREF may run arbitrary code). */
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    #if PY_VERSION_HEX < 0x02050000
    if (PyClass_Check(type)) {
    #else
    if (PyType_Check(type)) {
    #endif
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else /* Python 3+ */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *args;
        if (!value)
            args = PyTuple_New(0);
        else if (PyTuple_Check(value)) {
            Py_INCREF(value);
            args = value;
        }
        else
            args = PyTuple_Pack(1, value);
        if (!args)
            goto bad;
        owned_instance = PyEval_CallObject(type, args);
        Py_DECREF(args);
        if (!owned_instance)
            goto bad;
        value = owned_instance;
        if (!PyExceptionInstance_Check(value)) {
            PyErr_Format(PyExc_TypeError,
                         "calling %R should have returned an instance of "
                         "BaseException, not %R",
                         type, Py_TYPE(value));
            goto bad;
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause && cause != Py_None) {
        PyObject *fixed_cause;
        if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        }
        else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        }
        else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static CYTHON_INLINE int __Pyx_IsLittleEndian(void) {
  unsigned int n = 1;
  return *(unsigned char*)(&n) != 0;
}
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1) /* First char was not a digit */
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count; /* Consume from buffer string */
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break; /* breaks both loops as ctx->enc_count == 0 */
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue; /* empty struct */
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static CYTHON_INLINE PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        if (isspace(*ts))
            continue;
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
                return ts;
      case ' ':
      case 10:
      case 13:
        ++ts;
        break;
      case '<':
        if (!__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T': /* substruct */
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0; /* Erase processed last struct element */
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}': /* end of substruct; either repeat or move on */
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0; /* Erase processed last struct element */
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }        /* fall through */
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 's': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
        } else {
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_count = ctx->new_count;
          ctx->enc_packmode = ctx->new_packmode;
          ctx->enc_type = *ts;
          ctx->is_complex = got_Z;
        }
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}
static CYTHON_INLINE void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static CYTHON_INLINE int __Pyx_GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  if (obj == Py_None || obj == NULL) {
    __Pyx_ZeroBuffer(buf);
    return 0;
  }
  buf->buf = NULL;
  if (__Pyx_GetBuffer(obj, buf, flags) == -1) goto fail;
  if (buf->ndim != nd) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if ((unsigned)buf->itemsize != dtype->size) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_ZeroBuffer(buf);
  return -1;
}
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (info->buf == NULL) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}

static void __Pyx_RaiseBufferFallbackError(void) {
  PyErr_Format(PyExc_ValueError,
     "Buffer acquisition failed on assignment; and then reacquiring the old buffer failed too!");
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    CYTHON_UNUSED PyObject *getbuffer_cobj;
  #if PY_VERSION_HEX >= 0x02060000
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
  #endif
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
  #if PY_VERSION_HEX < 0x02060000
    if (obj->ob_type->tp_dict &&
        (getbuffer_cobj = PyMapping_GetItemString(obj->ob_type->tp_dict,
                                             "__pyx_getbuffer"))) {
        getbufferproc func;
      #if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION == 0)
        func = (getbufferproc) PyCapsule_GetPointer(getbuffer_cobj, "getbuffer(obj, view, flags)");
      #else
        func = (getbufferproc) PyCObject_AsVoidPtr(getbuffer_cobj);
      #endif
        Py_DECREF(getbuffer_cobj);
        if (!func)
            goto fail;
        return func(obj, view, flags);
    } else {
        PyErr_Clear();
    }
  #endif
    PyErr_Format(PyExc_TypeError, "'%100s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
#if PY_VERSION_HEX < 0x02060000
fail:
#endif
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    CYTHON_UNUSED PyObject *releasebuffer_cobj;
    if (!obj) return;
  #if PY_VERSION_HEX >= 0x02060000
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
  #endif
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) { __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view); return; }
  #if PY_VERSION_HEX < 0x02060000
    if (obj->ob_type->tp_dict &&
        (releasebuffer_cobj = PyMapping_GetItemString(obj->ob_type->tp_dict,
                                                      "__pyx_releasebuffer"))) {
        releasebufferproc func;
      #if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION == 0)
        func = (releasebufferproc) PyCapsule_GetPointer(releasebuffer_cobj, "releasebuffer(obj, view)");
      #else
        func = (releasebufferproc) PyCObject_AsVoidPtr(releasebuffer_cobj);
      #endif
        Py_DECREF(releasebuffer_cobj);
        if (!func)
            goto fail;
        func(obj, view);
        return;
    } else {
        PyErr_Clear();
    }
  #endif
    goto nofail;
#if PY_VERSION_HEX < 0x02060000
fail:
#endif
    PyErr_WriteUnraisable(obj);
nofail:
    Py_DECREF(obj);
    view->obj = NULL;
}
#endif /*  PY_MAJOR_VERSION < 3 */


    static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import = 0;
    py_import = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0; /* try absolute import on failure */
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

static CYTHON_INLINE time_t __Pyx_PyInt_from_py_time_t(PyObject* x) {
    const time_t neg_one = (time_t)-1, const_zero = (time_t)0;
    const int is_unsigned = const_zero < neg_one;
    if (sizeof(time_t) == sizeof(char)) {
        if (is_unsigned)
            return (time_t)__Pyx_PyInt_AsUnsignedChar(x);
        else
            return (time_t)__Pyx_PyInt_AsSignedChar(x);
    } else if (sizeof(time_t) == sizeof(short)) {
        if (is_unsigned)
            return (time_t)__Pyx_PyInt_AsUnsignedShort(x);
        else
            return (time_t)__Pyx_PyInt_AsSignedShort(x);
    } else if (sizeof(time_t) == sizeof(int)) {
        if (is_unsigned)
            return (time_t)__Pyx_PyInt_AsUnsignedInt(x);
        else
            return (time_t)__Pyx_PyInt_AsSignedInt(x);
    } else if (sizeof(time_t) == sizeof(long)) {
        if (is_unsigned)
            return (time_t)__Pyx_PyInt_AsUnsignedLong(x);
        else
            return (time_t)__Pyx_PyInt_AsSignedLong(x);
    } else if (sizeof(time_t) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return (time_t)__Pyx_PyInt_AsUnsignedLongLong(x);
        else
            return (time_t)__Pyx_PyInt_AsSignedLongLong(x);
    }  else {
        #if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
        PyErr_SetString(PyExc_RuntimeError,
                        "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
        #else
        time_t val;
        PyObject *v = __Pyx_PyNumber_Int(x);
        #if PY_VERSION_HEX < 0x03000000
        if (likely(v) && !PyLong_Check(v)) {
            PyObject *tmp = v;
            v = PyNumber_Long(tmp);
            Py_DECREF(tmp);
        }
        #endif
        if (likely(v)) {
            int one = 1; int is_little = (int)*(unsigned char *)&one;
            unsigned char *bytes = (unsigned char *)&val;
            int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                          bytes, sizeof(val),
                                          is_little, !is_unsigned);
            Py_DECREF(v);
            if (likely(!ret))
                return val;
        }
        #endif
        return (time_t)-1;
    }
}

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_time_t(time_t val) {
    const time_t neg_one = (time_t)-1, const_zero = (time_t)0;
    const int is_unsigned = const_zero < neg_one;
    if ((sizeof(time_t) == sizeof(char))  ||
        (sizeof(time_t) == sizeof(short))) {
        return PyInt_FromLong((long)val);
    } else if ((sizeof(time_t) == sizeof(int)) ||
               (sizeof(time_t) == sizeof(long))) {
        if (is_unsigned)
            return PyLong_FromUnsignedLong((unsigned long)val);
        else
            return PyInt_FromLong((long)val);
    } else if (sizeof(time_t) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG)val);
        else
            return PyLong_FromLongLong((PY_LONG_LONG)val);
    } else {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        return _PyLong_FromByteArray(bytes, sizeof(time_t),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_suseconds_t(suseconds_t val) {
    const suseconds_t neg_one = (suseconds_t)-1, const_zero = (suseconds_t)0;
    const int is_unsigned = const_zero < neg_one;
    if ((sizeof(suseconds_t) == sizeof(char))  ||
        (sizeof(suseconds_t) == sizeof(short))) {
        return PyInt_FromLong((long)val);
    } else if ((sizeof(suseconds_t) == sizeof(int)) ||
               (sizeof(suseconds_t) == sizeof(long))) {
        if (is_unsigned)
            return PyLong_FromUnsignedLong((unsigned long)val);
        else
            return PyInt_FromLong((long)val);
    } else if (sizeof(suseconds_t) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG)val);
        else
            return PyLong_FromLongLong((PY_LONG_LONG)val);
    } else {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        return _PyLong_FromByteArray(bytes, sizeof(suseconds_t),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE suseconds_t __Pyx_PyInt_from_py_suseconds_t(PyObject* x) {
    const suseconds_t neg_one = (suseconds_t)-1, const_zero = (suseconds_t)0;
    const int is_unsigned = const_zero < neg_one;
    if (sizeof(suseconds_t) == sizeof(char)) {
        if (is_unsigned)
            return (suseconds_t)__Pyx_PyInt_AsUnsignedChar(x);
        else
            return (suseconds_t)__Pyx_PyInt_AsSignedChar(x);
    } else if (sizeof(suseconds_t) == sizeof(short)) {
        if (is_unsigned)
            return (suseconds_t)__Pyx_PyInt_AsUnsignedShort(x);
        else
            return (suseconds_t)__Pyx_PyInt_AsSignedShort(x);
    } else if (sizeof(suseconds_t) == sizeof(int)) {
        if (is_unsigned)
            return (suseconds_t)__Pyx_PyInt_AsUnsignedInt(x);
        else
            return (suseconds_t)__Pyx_PyInt_AsSignedInt(x);
    } else if (sizeof(suseconds_t) == sizeof(long)) {
        if (is_unsigned)
            return (suseconds_t)__Pyx_PyInt_AsUnsignedLong(x);
        else
            return (suseconds_t)__Pyx_PyInt_AsSignedLong(x);
    } else if (sizeof(suseconds_t) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return (suseconds_t)__Pyx_PyInt_AsUnsignedLongLong(x);
        else
            return (suseconds_t)__Pyx_PyInt_AsSignedLongLong(x);
    }  else {
        #if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
        PyErr_SetString(PyExc_RuntimeError,
                        "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
        #else
        suseconds_t val;
        PyObject *v = __Pyx_PyNumber_Int(x);
        #if PY_VERSION_HEX < 0x03000000
        if (likely(v) && !PyLong_Check(v)) {
            PyObject *tmp = v;
            v = PyNumber_Long(tmp);
            Py_DECREF(tmp);
        }
        #endif
        if (likely(v)) {
            int one = 1; int is_little = (int)*(unsigned char *)&one;
            unsigned char *bytes = (unsigned char *)&val;
            int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                          bytes, sizeof(val),
                                          is_little, !is_unsigned);
            Py_DECREF(v);
            if (likely(!ret))
                return val;
        }
        #endif
        return (suseconds_t)-1;
    }
}

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return (unsigned long)PyLong_AsUnsignedLong(x);
        } else {
            return (unsigned long)PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return (unsigned PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (unsigned PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return (long)PyLong_AsUnsignedLong(x);
        } else {
            return (long)PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return (PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return (signed long)PyLong_AsUnsignedLong(x);
        } else {
            return (signed long)PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return (signed PY_LONG_LONG)PyLong_AsUnsignedLongLong(x);
        } else {
            return (signed PY_LONG_LONG)PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItemString(dict, "__pyx_vtable__", ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%s.%s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        if (PyErr_Warn(NULL, warning) < 0) goto bad;
        #else
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
        #endif
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%s.%s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyMapping_GetItemString(dict, (char *)"__pyx_vtable__");
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
