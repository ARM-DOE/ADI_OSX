################################################################################
# RCS INFORMATION: 
#   $Author: younkin $ 
#   $Locker:  $ 
#   $Revision: 1.185 $ 
#   $Date: 2008-06-13 17:19:57 $ 
#   $Name: not supported by cvs2svn $ 
#   $State: Exp $ 
#
#------------------------------------------------------------------------
#
# PURPOSE:
#   To provide standard rules across all components of the system.
#
# DESCRIPTION:
#   <Provide a brief description of the rules in this make include file>
#
#------------------------------------------------------------------------
#
# Interesting info taken from "GNU Make" by Stallman and McGrath.
#
#   These are the Automatic variables used in gnumake (p112):
#
#   $@ - file name of the target of the rule
#   $% - target member name if archive (eg $% = bar.o given foo.a(bar.o))
#   $< - name of the first dependency
#   $^ - names of all dependencies (with spaces)
#   $? - names of all dependencies newer than the target (with spaces)
#   $* - stem of target in implicit rule match (eg $* = x given a.x.b and a.%.b)
#
#   Some useful variables with built-in values (p107-108, unuseful excluded)
#
#   AR = ar           (archive maintaining program -- we will use this)
#   ARFLAGS = rv      (flags for ar -- we will use/suppliment this)
#   CC = cc           (C compiler -- we will use this)
#   FC = f77          (Fortran compiler -- we may use this)
#   CPP = $(CC) -E    (C preprocessor -- we may use this)
#   CXX = g++         (C++ compiler -- we will use this)
#   CO = co           (Extracting files from RCS -- we will use this)
#   RM = rm -f        (Command to remove a file -- we will use this I guess)
#
# LIMITATIONS:
#
################################################################################

################################################################################
# DEFAULT RULE
#
# This is the rule that will be made when no other target is specified
################################################################################

default: $(DEPEND) $(DEFAULT_TARGET) $(CLIENT_ALL) $(COMP_ALL) $(AUX_ALL)
	@echo "Done..."

################################################################################
# Rules to prevent make from stomping our makefiles
################################################################################
# This is needed so that the directory to the Make templates isn't stuck into
# the -o option on the link line.  It makes no sense but it's true.
# You should put a rule here for the makeinclude directory in your component.
#WARN=$(SPACE)
#WARN=Something weird, the makefile:  $@ has become a target!

ifndef GNU_AUTO_TOOLS
  $($(IAM_UC)_MAKEINC_DIR)/Make%:
		@echo $(BIT_BUCKET)
  $(CUST_MF_DIR)/Make%:
		@echo $(BIT_BUCKET)
  $(DEF_MF_DIR)/Make%:
		@echo $(BIT_BUCKET)
  $(GS_MF):
		@echo $(BIT_BUCKET)
  ifeq ($(MAKE_TYPE),test)
    $(OUT_DIR)/$(MF):
			@echo $(BIT_BUCKET)
    $(OUT_DIR)/$(AUX_MF):
			@echo $(BIT_BUCKET)
    $(OUT_DIR)/$(DEPENDENCY_MF):
			@echo $(BIT_BUCKET)
  else
    $(MF):
			@echo $(BIT_BUCKET)
    $(AUX_MF):
			@echo $(BIT_BUCKET)
    $(DEPENDENCY_MF):
			@echo $(BIT_BUCKET)
  endif
endif


################################################################################
# THE main things that get made
################################################################################
default_target: $(THE_TARGET)
	@echo $(BIT_BUCKET)

release:  $(DEPEND) $(RELEASE_TARGET) $(CLIENT_ALL) $(COMP_ALL) $(AUX_ALL)
	@echo $(BIT_BUCKET)

test:
	testpackage -comp $(COMP_NAME) -pkg $(PKG_NAME)

id:
	@echo "$(COMP_NAME)-$(PKG_NAME)"


################################################################################
# If an error occurs, just print them and bail.
################################################################################
$(ERROR):
  ifneq ($(ERR_MESG),)
		@echo ""
		@echo ""
		@echo "$(ERROR):  Make failed because the following errors occurred:"
		@$(ERR_MESG) echo "" ; exit 1
  else
		@echo "No errors...proceeding..."
  endif


################################################################################
# Rules to do checkouts from RCS.  Because gnu make will check out anything
# automatically if it is a target, we need to make targets out of all of our
# source code.  So...we do that here.  No commands are needed because the
# default is to do a checkout.
################################################################################
%.h:
%.H:
%.hpp:
%.c:
%.C:
%.cc:
%.cpp:
%.f90:
%.f:
%.java:
%.perl:
%.pl:
%.pm:
%.sh:
%.ksh:
%.csh:
%.conf:
%.pro:
%.php:
%.inc:
%.html:
%.m:

################################################################################
# Rules to build object files 
################################################################################
# Someday put $(OBJ_DIR) as a dependency in Makefile.deps
$(OBJ_DIR):
	@mkdir -p $(OBJ_DIR) 

$(OBJ_DIR)/%.o: %.c
	@mkdir -p $(OBJ_DIR) 
	$(C_COMPILER) $(C_COMPILE_FLAGS) -c $< -o $@

$(OBJ_DIR)/%.o: %.cpp
	@mkdir -p $(OBJ_DIR) 
	$(CXX_COMPILER) $(CXX_COMPILE_FLAGS) -c $< -o $@

$(OBJ_DIR)/%.o: %.cc
	@mkdir -p $(OBJ_DIR) 
	$(CXX_COMPILER) $(CXX_COMPILE_FLAGS) -c $< -o $@

$(OBJ_DIR)/%.o: %.f90
	@mkdir -p $(OBJ_DIR) 
	$(FOR_COMPILER) $(FOR_COMPILE_FLAGS) -c $< -o $@

$(OBJ_DIR)/%.o: %.f
	@mkdir -p $(OBJ_DIR) 
	$(FOR_COMPILER) $(FOR_COMPILE_FLAGS) -c $< -o $@

$(JAVA_OUT_DIR)/%.class: %.java
	@echo Making $(JAVA_COMPILE_DIR) dir
	@mkdir -p $(JAVA_COMPILE_DIR) 
	$(JAVA_COMPILER) $(JAVA_COMPILE_FLAGS) $(JAVA_SRCS)

$(BYTECODE_DIR)/%.sav: %.pro
	@mkdir -p $(BYTECODE_DIR) 
	@echo $(IDL_MAKE_STR) | $(IDL_ENV) idl $(IDL_FLAGS)
	@if [ -f $@ ] ; then \
		$(BUILT_MESG) ; \
	else \
		$(NOT_BUILT_MESG) ; \
	fi

%.pro:
	@mkdir -p $(dir $@)
	cp $(notdir $@) $@
	chmod $(PERMISSIONS) "$@"
	@$(BUILT_MESG)

################################################################################
# Rules to build libraries and executables
################################################################################
ifneq ($(JAVA_SRCS),)
  compjar:  $(JAVA_COMP_JAR)

  $(JAVA_COMP_JAR): $(JAVA_PKG_JARS)
		cd $(BYTECODE_DIR) ; $(JAVA_ARCHIVER) $(JAVA_PKG_ARFLAGS) $@ $(COMP_NAME)

  $(BYTECODE_DIR)/$(OUT_NAME).jar: $(JAVA_OBJS)
#		@mkdir -p $(JAVA_OUT_DIR)
		$(RMIC_CMD)
		@echo "creating package jar:    $@"
		@cd $(BYTECODE_DIR) ; $(JAVA_ARCHIVER) $(JAVA_PKG_ARFLAGS) $@ $(JAVA_JAR_OBJS) $(STD_OUT)
		@echo "updating component jar:  $(JAVA_COMP_JAR)"
		@touch $(JAVA_COMP_JAR)
		@cd $(BYTECODE_DIR) ; $(JAVA_ARCHIVER) $(JAVA_COMP_ARFLAGS) $(JAVA_COMP_JAR) $(JAVA_JAR_OBJS) $(STD_OUT)
		@$(BUILT_MESG)
endif


ifeq ($(MAKE_TYPE),lib)
  ifneq ($(OBJS),)
    $(OUT_DIR)/%.a: $(OBJS)
			@mkdir -p $(OUT_DIR)
			$(ARCHIVER) $(ARFLAGS) $@ $(OBJS)
			@$(BUILT_MESG)

    $(OUT_DIR)/%.so:  $(OBJS)
			@mkdir -p $(OUT_DIR)
			$($(IAM_UC)_LINK_ENV) $(LINKER) $(LINKER_FLAGS) $(OBJ_FILES) $(LIBS) -o $@
			@$(BUILT_MESG)
  endif
endif

$(PYTHON_INIT): $(PYTHON_SRCS)
	@$(RM) $(PYTHON_INIT)
	@for module in $(PYTHON_MODULES) ; do \
		list="$$list, '$$module'" ; \
	done ; \
	list=`echo $$list | sed -e "s/,//"` ; \
	echo "__all__ = [ $$list ]" > $(PYTHON_INIT)
	@$(BUILT_MESG)

$(PYTHON_OUT_DIR)/%: %.py
	@mkdir -p $(dir $@)
	cp $< $@
	chmod $(PERMISSIONS) $@
	@$(BUILT_MESG)

$(PYTHON_OUT_DIR)/%.py:
	@mkdir -p $(dir $@)
	cp $(notdir $@) $@
	chmod $(PERMISSIONS) $@
	@$(BUILT_MESG)

%.pm:
	$(PERL_COMPILER) $(PERL_COMPILE_FLAGS) $(patsubst %.pm, %.$(PM_SFX), $(notdir $@))
	@mkdir -p $(dir $@)
	cp $(patsubst %.pm, %.$(PM_SFX), $(notdir $@)) $@
	chmod $(PERMISSIONS) "$@"
	@$(BUILT_MESG)

$(PERL_OUT_DIR)/%: %.perl
	@mkdir -p $(dir $@)
	$(PERL_COMPILER) $(PERL_COMPILE_FLAGS) $<
	@echo "#!$(PERL_PATH) `$(ONLY_FIRST) $< | $(AWK_CMD)`" > $@
	@$(ALL_BUT_FIRST) $< >> $@
	chmod $(PERMISSIONS) $@
	@$(BUILT_MESG)

$(PERL_OUT_DIR)/%: %.pl
	@mkdir -p $(dir $@)
	$(PERL_COMPILER) $(PERL_COMPILE_FLAGS) $<
	@echo "#!$(PERL_PATH) `$(ONLY_FIRST) $< | $(AWK_CMD)`" > $@
	@$(ALL_BUT_FIRST) $< >> $@
	chmod $(PERMISSIONS) $@
	@$(BUILT_MESG)

$(SWIG_SO_TGT): $(SWIG_WRAPO)
	mkdir -p $(@D)
	ld -G $(LINKER_FLAGS) $(SWIG_SO_WRAPO) -l$(SWIG_WRAPPED_SO) -o $@


$(SWIG_PM_TGT): $(SWIG_SRCS)
	mkdir -p $(dir $@)
	swig -perl5 -I$(INC_DIR) -o $(SWIG_PM_WRAPC) $(SWIG_I_FILE)

%_wrap.c: $(SWIG_SRCS)
	swig -perl5 -I$(INC_DIR) -o $@ $(patsubst %_wrap.c,%.i,$(@F))

%_wrap.o:  %_wrap.c
	cc -c $< $(SWIG_COMPILER_FLAGS) -I$(INC_DIR) -o $@


%.inc:
	$(PHP_COMPILER) $(PHP_COMPILE_FLAGS) $(patsubst %.inc, %.$(PHP_SFX), $(notdir $@))
	@mkdir -p $(dir $@)
	cp $(patsubst %.inc, %.$(PHP_SFX), $(notdir $@)) $@
	chmod $(PERMISSIONS) $@
	@$(BUILT_MESG)

$(PHP_OUT_DIR)/%: %.php
	@mkdir -p $(dir $@)
	$(PHP_COMPILER) $(PHP_COMPILE_FLAGS) $<
	@echo "#!$(PHP_PATH) `$(ONLY_FIRST) $< | $(AWK_CMD)`" > $@
	@$(ALL_BUT_FIRST) $< >> $@
	chmod $(PERMISSIONS) $@
	@$(BUILT_MESG)

$(CSH_OUT_DIR)/%: %.csh
	@mkdir -p $(CSH_OUT_DIR)
	@echo "#!$(CSH_PATH)" `$(ONLY_FIRST) $< | $(AWK_CMD)` > $@
	@$(ALL_BUT_FIRST) $< >> $@
	chmod $(PERMISSIONS) $@
	@$(BUILT_MESG)

$(SH_OUT_DIR)/%.shrc:
	@mkdir -p $(dir $@)
	cp $(patsubst %rc, %, $(notdir $@)) $@
	chmod $(PERMISSIONS) $@
	@$(BUILT_MESG)

$(SH_OUT_DIR)/%: %.sh
	@mkdir -p $(SH_OUT_DIR)
	@echo "#!$(SH_PATH)" `$(ONLY_FIRST) $< | $(AWK_CMD)` > $@
	@$(ALL_BUT_FIRST) $< >> $@
	chmod $(PERMISSIONS) $@
	@$(BUILT_MESG)

$(BASH_OUT_DIR)/%: %.bash
	@mkdir -p $(BASH_OUT_DIR)
	@echo "#!$(BASH_PATH)" `$(ONLY_FIRST) $< | $(AWK_CMD)` > $@
	@$(ALL_BUT_FIRST) $< >> $@
	chmod $(PERMISSIONS) $@
	@$(BUILT_MESG)

$(KSH_OUT_DIR)/%: %.ksh
	@mkdir -p $(KSH_OUT_DIR)
	@echo "#!$(KSH_PATH)" `$(ONLY_FIRST) $< | $(AWK_CMD)` > $@
	@$(ALL_BUT_FIRST) $< >> $@
	chmod $(PERMISSIONS) $@
	@$(BUILT_MESG)

$(WEB_OUT_DIR)/%: %
	@mkdir -p $(WEB_OUT_DIR)
	@$(RM) $@
	@touch $@
	@searchreplace $(SR_ARGS) -c $(COMP_NAME) -f $< -o $@.tmp
	@cat $@.tmp >> $@
	@$(RM) $@.tmp
	@$(BUILT_MESG)

ifeq ($(MAKE_TYPE),test)
  $(OUT_DIR)/%:  $(OBJ_DIR)/%.o
		$($(IAM_UC)_LINK_ENV) $(LINKER) $(LINKER_FLAGS) $< $(LIBS) -o $@
else
  ifneq ($(OBJ_DEPS),)
     ifneq ($(OUT_NAME),)
        $(OUT_DIR)/%: $(OBJ_DEPS)
				@mkdir -p $(OUT_DIR)
				$($(IAM_UC)_LINK_ENV) $(LINKER) $(LINKER_FLAGS) $(OBJ_FILES) $(LIBS) -o $@
				@$(BUILT_MESG)
     else
        $(OUT_DIR)/%: $(OBJ_DEPS)
				@mkdir -p $(OUT_DIR)
				$($(IAM_UC)_LINK_ENV) $(LINKER) $(LINKER_FLAGS) $< $(LIBS) -o $@
				@$(BUILT_MESG)
     endif
  endif
endif

ifneq ($(MATLAB_TARGET),)
  ifeq ($(DO_MEX),)
    ifneq ($(MEX_SRCS),)
      $(OBJ_DIR)/%.mexsol:  %.$(C_SFX)
				@mkdir -p $(OBJ_DIR) 
				mex $(MEXOPTS) $< -o $@
    endif
  endif

  $(LIB_DIR)/$(OUT_NAME).mexsol: $(MEX_SRCS)
		mex $(MEXOPTS) -output $@ $(IFLAGS) $(LFLAGS) $(MEX_SRCS)

  $(BIN_DIR)/$(OUT_NAME):  $(MEX_OBJS)
		mcc $(MCCOPTS) -mv -d $(MATLAB_OUT_DIR) $(MCC_FLAGS) $(OUT_NAME).$(MATLAB_SFX)
endif


#./%:
#	@if [ "`echo $(SRCS) | fgrep $*.$(FILE_EXT)`" = "" ] ; then \
#		echo "NORMAL: $*" ; \
#	else \
#		echo "GOOFY: $*" ; \
#	fi

################################################################################
# Rules to build the dependency file
# The gendep perl script generates dependencies and puts them in a given
# dependency file (DEPENDENCY_MF).  That file is then included by the
# makefile to do the build.
################################################################################
#depend: $(DEPENDENCY_MF)
#	@echo "Rebuilt $(DEPENDENCY_MF)"

external: $(EXTERNAL_MF)


depend_and_rebuild: depend
	@$(MAKE) $(DEFAULT_TARGET) $(CLIENT_ALL) $(COMP_ALL) $(AUX_ALL)

#$(DEPENDENCY_MF):
depend:
	@echo "Checking $(DEPENDENCY_MF) because $(REASON)"
ifneq ($(SRCS),)
  ifneq ($(shell ls $(IAM_HOME)/bin/gendep $(STD_ERR)),)
    ifneq ($(SRCS),MAKEFILE_ERROR)
      ifneq ($(SRCS),$(OLD_SRCS))
				@echo "Updating $(DEPENDENCY_MF)"
        ifneq ($(OUT_NAME),)
					-@gendep -t $(MAKE_TYPE) $(DEP_OUT) -f $(DEPENDENCY_MF) $(GENDEP_ARGS)
        else
					-@gendep -t $(MAKE_TYPE) -f $(DEPENDENCY_MF) $(GENDEP_ARGS)
        endif
      endif
    else
			@echo "No source files exist to generate dependency file from!"
    endif
  else
		@echo "Missing gendep"
  endif
else
	@echo "No source files exist to generate dependency file from!"
endif

$(EXTERNAL_MF):
	genmake -external $(EXTERNALS)

################################################################################
# Rules used when generating a release
################################################################################
notifdepend:
	@gendep -t $(MAKE_TYPE) $(DEP_OUT) $(GENDEP_ARGS) -n

srclist:
	@gendep $(IFLAGS) $(SRCS) $(MF_LIST) -list

################################################################################
# Rules to do updates from RCS
################################################################################
#update: rm_dep_file
#	@update

#update_deps:
#ifneq ($(SRCS),)
#	-@$(RM) $(DEPENDENCY_MF)
#	-@gendep -t $(MAKE_TYPE) $(DEP_OUT) -f $(DEPENDENCY_MF) $(GENDEP_ARGS)
#else
#	-@echo "Don't need to regenerate dependency file"
#endif

ci:
	binci -u -mCheckin_from_make $(SRCS) $(MF) $(AUX_MF)

co:
	binco $(SRCS) $(MF) $(AUX_MF)

colock:
	binco -l $(SRCS) $(MF) $(AUX_MF)

################################################################################
# Rules to generate files or directory structures
################################################################################
redomake:
	genmake -redo

#	genwebdoc -out $(AUTODOC_DIR) -in $(SRC_DIR)
webdoc2:
	@echo "Not implemented yet"

################################################################################
# Rules to clean up
################################################################################
depclean:
  ifneq ($(SRCS),)
    ifeq ($(ERR_MESG),)
			$(RM) $(DEPENDENCY_MF) $(EXTERNAL_MF) $(MF_OLD)
    endif
  endif

tidy:
  ifneq ($(JAVA_SRCS),)
    ifneq ($(MAKE_TYPE),test)
      ifneq ($(JAVA_OUT_DIR),)
				$(RM_RECURSE) $(JAVA_OUT_DIR)/*
      endif
      ifdef WEB
        ifneq ($(JAVA_WEB_OUT_DIR),)
					$(RM_RECURSE) $(JAVA_WEB_OUT_DIR)/*
        endif
      endif
    endif
  endif
  ifneq ($(PYTHON_EXTRAS),)
		$(RM) $(PYTHON_EXTRAS)
  endif
  ifneq ($(MATLAB_BYPRODUCTS),)
		$(RM_RECURSE) $(MATLAB_BYPRODUCTS)
  endif
  ifneq ($(MEX_OBJS),)
		$(RM) $(MEX_OBJS)
  endif
  ifneq ($(OBJS),)
		$(RM) $(OBJS)
  endif

clean: depclean tidy $(COMP_CLEAN) $(AUX_CLEAN)
  ifneq ($(MAKE_TYPE),misc)
    ifneq ($(strip $(THE_TARGET)),)
			$(RM) $(THE_TARGET)
    endif
  endif
	@echo "Done..."

rpmclean:
	$(RM) $(INSTALL_DIR)/SRPMS/*
	$(RM) $(INSTALL_DIR)/RPMS/sparc64/*

zestfullyclean: instclean rpmclean clean tidy

################################################################################
# Rules to sign files 
################################################################################
signature:
	@echo "Going to do signature";
	signtool -d $(COMP_HOME)/config/certificates -k $(CERT_NAME) -p $(CERT_PSWRD) -Z $(LIB_DIR)/$(LIB) $(JC_OUT_DIR) 
   

################################################################################
# Handy rules
################################################################################

rebuild:
	@build -comp $(COMP_NAME) clean
	@build -comp $(COMP_NAME)

# The empty echo is so that the error status on rcsdiff won't cause failure
rcsdiff:
	@rcsdiff $(SRCS) ; echo ""

rule_list:
	-@sci -l t

lang_list:
	@sci -l l

pkg_list:
  ifneq ($(PKG_NAME),)
		@echo "This makefile belongs to the $(PKG_NAME) package"
  else
		@echo "No package specified for this makefile"
  endif

path_list:
	@echo "PERL_PATH:  $(PERL_PATH)"
	@echo "PHP_PATH:   $(PHP_PATH)"
	@echo "CSH_PATH:   $(CSH_PATH)"
	@echo "SH_PATH:    $(SH_PATH)"
	@echo "BASH_PATH:  $(BASH_PATH)"
	@echo "KSH_PATH:   $(KSH_PATH)"



################################################################################
# DEBUGGING TARGETS
#
# Rules to debug the Makefiles.  Typically a target prints a bunch of variables
# and their associated values.  The targets will list a group of variables that
# are logically related in some way.
################################################################################
deplist:
	@gendep -t $(MAKE_TYPE) $(DEP_OUT) $(GENDEP_ARGS) $(MF_LIST) -term -fancy

deplistsys:
	@gendep -t $(MAKE_TYPE) $(DEP_OUT) $(GENDEP_ARGS) $(MF_LIST) -sys -term

deplistv:
	@gendep -t $(MAKE_TYPE) $(DEP_OUT) $(GENDEP_ARGS) $(MF_LIST) -term -v


autostuff:  builtin autoconf_vars

builtin:  builtin_progs builtin_flags

builtin_progs:
	@echo "Builtin Programs"
	@echo "  AR      :$(AR):"
	@echo "  AS      :$(AS):"
	@echo "  CC      :$(CC):"
	@echo "  CO      :$(CO):"
	@echo "  CPP     :$(CPP):"
	@echo "  CXX     :$(CXX):"
	@echo "  FC      :$(FC):"
	@echo "  GET     :$(GET):"
	@echo "  LEX     :$(LEX):"
	@echo "  MAKEINFO:$(MAKEINFO):"
	@echo "  PC      :$(PC):"
	@echo "  RM      :$(RM):"
	@echo "  TANGLE  :$(TANGLE):"
	@echo "  CTANGLE :$(CTANGLE):"
	@echo "  TEX     :$(TEX):"
	@echo "  TEXI2DVI:$(TEXI2DVI):"
	@echo "  WEAVE   :$(WEAVE):"
	@echo "  CWEAVE  :$(CWEAVE):"
	@echo "  YACC    :$(YACC):"
	@echo "  YACCR   :$(YACCR):"

builtin_flags:
	@echo "Builtin Flags"
	@echo "  ARFLAGS :$(ARFLAGS):"
	@echo "  ASFLAGS :$(ASFLAGS):"
	@echo "  CFLAGS  :$(CFLAGS):"
	@echo "  COFLAGS :$(COFLAGS):"
	@echo "  CPPFLAGS:$(CPPFLAGS):"
	@echo "  CXXFLAGS:$(CXXFLAGS):"
	@echo "  FFLAGS  :$(FFLAGS):"
	@echo "  GFLAGS  :$(GFLAGS):"
	@echo "  LDFLAGS :$(LDFLAGS):"
	@echo "  LFLAGS  :$(LFLAGS):"
	@echo "  PFLAGS  :$(PFLAGS):"
	@echo "  RFLAGS  :$(RFLAGS):"
	@echo "  YFLAGS  :$(YFLAGS):"

autoconf_vars:
	@echo "Autoconf Variables"
	@echo "  CFLAGS:$(CFLAGS):"
	@echo "  CPPFLAGS:$(CPPFLAGS):"
	@echo "  CXXFLAGS:$(CXXFLAGS):"
	@echo "  DEFS:$(DEFS):"
	@echo "  ECHO_C:$(ECHO_C):"
	@echo "  ECHO_N:$(ECHO_N):"
	@echo "  ECHO_T:$(ECHO_T):"
	@echo "  FCFLAGS:$(FCFLAGS):"
	@echo "  FFLAGS:$(FFLAGS):"
	@echo "  LDFLAGS:$(LDFLAGS):"
	@echo "  LIBS:$(LIBS):"

bits64_list:
	@echo "ARCH_NAME:$(ARCH_NAME):"
	@echo "OS_NAME:$(OS_NAME):"
	@echo "BITS64:$(BITS64):"
	@echo "BITS64_DIR:$(BITS64_DIR):"
	@echo "BITS64_FLAGS:$(BITS64_FLAGS):"
	@echo "SO_FLAGS:$(SO_FLAGS):"
	@echo "C_COMPILE_FLAGS:$(C_COMPILE_FLAGS):"
	@echo "CXX_COMPILE_FLAGS:$(CXX_COMPILE_FLAGS):"
	@echo "LINKER_FLAGS:$(LINKER_FLAGS):"
	@echo "LIB_DIR:$(LIB_DIR):"

java_param_list: global_param_list
	@echo "BYTECODE_DIR:$(BYTECODE_DIR):"
	@echo "WEB_BYTECODE_DIR:$(WEB_BYTECODE_DIR):"
	@echo "JAVA_PKG_PREFIX:$(JAVA_PKG_PREFIX):"
	@echo "JAVA_SFX:$(JAVA_SFX):"
	@echo "JAVA_IMPLS:$(JAVA_IMPLS):"
	@echo "JAVA_COMPILER:$(JAVA_COMPILER):"
	@echo "JAVA_ARCHIVER:$(JAVA_ARCHIVER):"
	@echo "JAVA_PKG_ARFLAGS:$(JAVA_PKG_ARFLAGS):"
	@echo "JAVA_COMP_ARFLAGS:$(JAVA_COMP_ARFLAGS):"
	@echo "JAVA_SRCS:$(JAVA_SRCS):"
	@echo "JAVA_OBJS:$(JAVA_OBJS):"
	@echo "JAVA_JAR_OBJS:$(JAVA_JAR_OBJS):"
	@echo "JAVA_OUT_DIR:$(JAVA_OUT_DIR):"
	@echo "JAVA_WEB_OUT_DIR:$(JAVA_WEB_OUT_DIR):"
	@echo "JAVA_OUT:$(JAVA_OUT):"
	@echo "JAVA_PKG_PATH:$(JAVA_PKG_PATH):"
	@echo "JAVA_COMPILE_DIR:$(JAVA_COMPILE_DIR):"
	@echo "JP_NAME:$(JP_NAME):"
	@echo "JAVA_TARGET:$(JAVA_TARGET):"
	@echo "THE_TARGET:$(THE_TARGET):"

reg_param_list: global_param_list
	@echo "REG_SRCS:$(REG_SRCS):"
	@echo "OBJS:$(OBJS):"
	@echo "OBJ_DEPS:$(OBJ_DEPS):"
	@echo "OBJ_FILES:$(OBJ_FILES):"
	@echo "OBJ_DIR:$(OBJ_DIR):"
	@echo "OUT_DIR:$(OUT_DIR):"
	@echo "REG_OUT:$(REG_OUT):"
	@echo "SO_OUT:$(SO_OUT):"
	@echo "IFLAGS:$(IFLAGS):"
	@echo "C_COMPILE_FLAGS:$(C_COMPILE_FLAGS):"
	@echo "REG_TARGET:$(REG_TARGET):"
	@echo "SO_TARGET:$(SO_TARGET):"
	@echo "THE_TARGET:$(THE_TARGET):"

global_param_list:
	@echo "RM_RECURSE:$(RM_RECURSE):"
	@echo "MF:$(MF):"
	@echo "MAKE_ARGS:$(MAKE_ARGS):"
	@echo "MAKE:$(MAKE):"
	@echo "DEFAULT_TARGET:$(DEFAULT_TARGET):"
	@echo "RELEASE_TARGET:$(RELEASE_TARGET):"
	@echo "THE_TARGET:$(THE_TARGET):"
	@echo "COMP_NAME:$(COMP_NAME):"
	@echo "COMP_HOME:$(COMP_HOME):"
	@echo "OUT:$(OUT)"

src_check:
	@echo "OLD_SRCS:$(OLD_SRCS):"
	@echo "SRCS    :$(SRCS):"
	@echo "DEPEND  :$(DEPEND):"
	@echo "REASON  :$(REASON):"
ifeq ($(OLD_SRCS),$(SRCS))
	@echo "EQUAL"
else
	@echo "NOT EQUAL"
endif

inst_param_list:
	@echo "SRCS:$(SRCS)"
	@echo "COMP_HOME:$(COMP_HOME)"
	@echo "INSTALL_PATH:$(INSTALL_PATH)"

fortran_param_list:
	@echo "FC_FORLIB_DIR: $(FC_FORLIB_DIR)"
	@echo "FC_CLIB_DIR: $(FC_CLIB_DIR)"

python_param_list:
	@echo "PYTHON_OUT:     $(PYTHON_OUT)"
	@echo "PYTHON_SFX:     $(PYTHON_SFX)"
	@echo "PYTHON_SRCS:    $(PYTHON_SRCS)"
	@echo "PYTHON_OUT_DIR: $(PYTHON_OUT_DIR)"
	@echo "PYTHON_MODULES: $(PYTHON_MODULES)"
	@echo "PYTHON_PKG_DIR: $(PYTHON_PKG_DIR)"
	@echo "PYTHON_EXTRAS:  $(PYTHON_EXTRAS)"
	@echo "PYTHON_REL_DIR: $(PYTHON_REL_DIR)"
	@echo "PYTHON_TARGET:  $(PYTHON_TARGET)"
	@echo "PWD:            $(PWD)"

perl_param_list:
	@echo "PERL_PATH:$(PERL_PATH)"
	@echo "PERL_OUT:$(PERL_OUT)"
	@echo "PERL_SRCS:$(PERL_SRCS)"
	@echo "PM_SRCS:$(PM_SRCS)"
	@echo "PM_OUT:$(PM_OUT)"
	@echo "PERL_PKGS:$(PERL_PKGS)"

content_param_list:
	@echo "WEB_SFX: $(WEB_SFX)"
	@echo "WEB_SRCS: $(WEB_SRCS)"
	@echo "WEB_OUT:  $(WEB_OUT)"
	@echo "WEB_TARGET:  $(WEB_TARGET)"
	@echo "WC_REL_DIR:  $(WC_REL_DIR)"
	@echo "WEB_OUT_ROOT:  $(WEB_OUT_ROOT)"
	@echo "WEB_OUT_DIR:  $(WEB_OUT_DIR)"
	@echo "SR_SUBS:$(SR_SUBS)"
	@echo "SR_ARGS:$(SR_ARGS)"
	@echo "PWD: $(PWD)"

other_param_list:
	@echo "OTHER_SFX: $(OTHER_SFX)"
	@echo "OTHER_SRCS: $(OTHER_SRCS)"
	@echo "OTHER_OUT:  $(OTHER_OUT)"
	@echo "OTHER_TARGET:  $(OTHER_TARGET)"
	@echo "WC_REL_DIR:  $(WC_REL_DIR)"
	@echo "WEB_OUT_ROOT:  $(WEB_OUT_ROOT)"
	@echo "WEB_OUT_DIR:  $(WEB_OUT_DIR)"
	@echo "PWD: $(PWD)"

out_param_list:
	@echo "PERL_OUT:$(PERL_OUT)"
	@echo "PYTHON_OUT:$(PYTHON_OUT)"
	@echo "JAVA_OUT:$(JAVA_OUT)"
	@echo "IDL_OUT:$(IDL_OUT)"
	@echo "CSH_OUT:$(CSH_OUT)"
	@echo "SH_OUT:$(SH_OUT)"
	@echo "KSH_OUT:$(KSH_OUT)"
	@echo "WEB_OUT:$(WEB_OUT)"
	@echo "OTHER_OUT:$(OTHER_OUT)"

idl_list:
	@echo "IDL6:      $(IDL6)"
	@echo "IDL_OUT:   $(IDL_OUT)"
	@echo "IDL_ENV:   $(IDL_ENV)"
	@echo "IDL_CO:    $(IDL_CO)"
	@echo "IDL_APP:   $(IDL_APP)"
	@echo "IDL_VER:   $(IDL_LIC)"
	@echo "IDL_KEY:   $(IDL_KEY)"
	@echo "IDL_DIR:   $(IDL_DIR)"
	@echo "OUT_NAME:  $(OUT_NAME)"

matlab_list:
	@echo "MATLAB_SFX:     $(MATLAB_SFX)"
	@echo "MATLAB_SRCS:    $(MATLAB_SRCS)"
	@echo "MEX_SRCS:       $(MEX_SRCS)"
	@echo "DO_MEX:         $(DO_MEX)"
	@echo "MEX_OBJS:       $(MEX_OBJS)"
	@echo "OUT_NAME:       $(OUT_NAME)"
	@echo "MATLAB_OUT_DIR: $(MATLAB_OUT_DIR)"
	@echo "OUT_DIR:        $(OUT_DIR)"
	@echo "BIN_DIR:        $(BIN_DIR)"
	@echo "COMP_HOME:      $(COMP_HOME)"
	@echo "MATLAB_TARGET:  $(MATLAB_TARGET)"
	@echo "OBJ_DIR:        $(OBJ_DIR)"
	@echo "ERR_MESG:       $(ERR_MESG)"

swig_list:
	@echo "SWIG_WRAPPED_SO:$(SWIG_WRAPPED_SO)"
	@echo "SWIG_COMPILER_FLAGS:$(SWIG_COMPILER_FLAGS)"
	@echo "SWIG_SO_DIR:$(SWIG_SO_DIR)"
	@echo "SWIG_SFX:$(SWIG_SFX)"
	@echo "SWIG_SRCS:$(SWIG_SRCS)"
	@echo "SWIG_NAMES:$(SWIG_NAMES)"
	@echo "SWIG_MODS:$(SWIG_MODS)"
	@echo "SWIG_PKGS:$(SWIG_PKGS)"
	@echo "SWIG_PM_REL:$(SWIG_PM_REL)"
	@echo "SWIG_SO_REL:$(SWIG_SO_REL)"
	@echo "SWIG_SO_NS:$(SWIG_SO_NS)"
	@echo "SWIG_PM_NS:$(SWIG_PM_NS)"
	@echo "SWIG_PMS:$(SWIG_PMS)"
	@echo "SWIG_SOS:$(SWIG_SOS)"
	@echo "SWIG_WRAPC:$(SWIG_WRAPC)"
	@echo "SWIG_WRAPO:$(SWIG_WRAPO)"
	@echo "SWIG_OUT:$(SWIG_OUT)"
	@echo "SWIG_WRAPS:$(SWIG_WRAPS)"
	@echo "SWIG_PM_TGT:$(SWIG_PM_TGT)"
	@echo "SWIG_SO_TGT:$(SWIG_SO_TGT)"
	@echo "SWIG_I_FILE:$(SWIG_I_FILE)"
	@echo "SWIG_SO_WRAPO:$(SWIG_SO_WRAPO)"
	@echo "SWIG_PM_WRAPC:$(SWIG_SO_WRAPC)"

target_list:
	@echo "REG:    $(REG_TARGET)"
	@echo "SO:     $(SO_TARGET)"
	@echo "PERL:   $(PERL_TARGET)"
	@echo "JAVA:   $(JAVA_TARGET)"
	@echo "IDL:    $(IDL_TARGET)"
	@echo "CSH:    $(CSH_TARGET)"
	@echo "SH:     $(SH_TARGET)"
	@echo "KSH:    $(KSH_TARGET)"
	@echo "WEB:    $(WEB_TARGET)"
	@echo "MATLAB: $(MATLAB_TARGET)"
	@echo "OTHER:  $(OTHER_TARGET)"
	@echo "ERR_MESG:  $(ERR_MESG)"

show_gs:
	@echo "GS_MF                        := $(GS_MF)"
	@echo "GS_IAM                       := $(GS_IAM)"
	@echo "GS_IAM_HOME                  := $(GS_IAM_HOME)"
	@echo "GS_CUSTOM_DIR                := $(GS_CUSTOM_DIR)"
	@echo "GS_DEFAULT_DIR               := $(GS_DEFAULT_DIR)"
	@echo "GS_PERL_PATH                 := $(GS_PERL_PATH)"
	@echo "GS_CLIENT_ABBR               := $(GS_CLIENT_ABBR)"
	@echo "GS_MAKE_CMD                  := $(GS_MAKE_CMD)"
	@echo "GS_CGI_STRATEGY              := $(GS_CGI_STRATEGY)"
	@echo "GS_WEB_CONTENT_EXTENSIONS    := $(GS_WEB_CONTENT_EXTENSIONS)"
	@echo "GS_JAVA_REMOTE_OBJECT_SUFFIX := $(GS_JAVA_REMOTE_OBJECT_SUFFIX)"
	@echo "GS_FC_FORLIB_DIR             := $(GS_FC_FORLIB_DIR)"
	@echo "GS_FC_CLIB_DIR               := $(GS_FC_CLIB_DIR)"
	@echo "CLIENT                       := $(CLIENT)"

paths:
	@echo "LIB_DIR   :$(LIB_DIR):"
	@echo "BIN_DIR   :$(BIN_DIR):"
	@echo "BIN_DIR   :${BIN_DIR}:"

rc_stuff:
	@echo "COMP_NAME :$(COMP_NAME):"
	@echo "PKG_NAME  :$(PKG_NAME):"
	@echo "UC_COMP   :$(UC_COMP):"
	@echo "RC_NAME   :$(RC_NAME):"
	@echo "PDD       :$(PDD):"
	@echo "COMP_HOME :$(COMP_HOME):"

all_srcs:
	@echo "ALL_SRCS:$(ALL_SRCS):"
	@echo "C_SRCS:$(C_SRCS):"
	@echo "CXX_SRCS:$(CXX_SRCS):"
	@echo "FOR_SRCS:$(FOR_SRCS):"
	@echo "PERL_SRCS:$(PERL_SRCS):"
	@echo "PM_SRCS:$(PM_SRCS):"
	@echo "SWIG_SRCS:$(SWIG_SRCS):"
	@echo "PYTHON_SRCS:$(PYTHON_SRCS):"
	@echo "PHP_SRCS:$(PHP_SRCS):"
	@echo "CSH_SRCS:$(CSH_SRCS):"
	@echo "SH_SRCS:$(SH_SRCS):"
	@echo "BASH_SRCS:$(BASH_SRCS):"
	@echo "KSH_SRCS:$(KSH_SRCS):"
	@echo "JAVA_SRCS:$(JAVA_SRCS):"
	@echo "IDL_SRCS:$(IDL_SRCS):"
	@echo "MATLAB_SRCS:$(MATLAB_SRCS):"
	@echo "SFXS:$(SFXS):"
	@echo "WEB_SRCS:$(WEB_SRCS):"

################################################################################
# Rules for fun and games
################################################################################
morale:
	@echo "This may take a while if your morale is pretty low.  Please sit";
	@echo "back, relax, and think of all the good things about your job.";
	@echo "You will hear beeping when your morale has been built.\n";
	@sleep 2
	@echo "";
	@echo "Feel better?  If not please report any problems to someone with";
	@echo "higher morals...ummm...I...mean, morale.  Hey!! maybe if we lower";
	@echo "our morals our morale WILL be higher!!\n";

house:
	@echo "Would love to make a house but more resources are needed."

# This is needed so that if some .a files don't exist in the lib directory, one
# can still build the main program.  The COMP_DEP_LIBS is used to cause the
# main program to be rebuilt if a library changes
#$(COMP_DEP_LIBS):
#	@echo " "
