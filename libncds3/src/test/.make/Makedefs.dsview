################################################################################
# COPYRIGHT (C) 2001 Battelle Memorial Institute. 
#    All Rights Reserved. (Now, with this out of the way...) 
#
# RCS INFORMATION: 
#   $RCSfile: Makedefs.dsview,v $ 
#   $Revision: 1.7 $ 
#   $Author: younkin $ 
#   $Locker:  $ 
#   $Date: 2008/05/22 18:46:06 $ 
#   $State: armcm-swawtdev-2.4-0 $ 
#   $Name: armcm-swawtdev-2#4-0 $ 
#   $Id: Makedefs.dsview,v 1.7 2008/05/22 18:46:06 younkin armcm-swawtdev-2.4-0 $ 
#
# This file was generated by genmake -- for use wth GNU make
#
# PURPOSE:
#   To provide standard make definitions for this component
#
# DESCRIPTION:
#   <Provide a brief description of the contents of this makefile>
#
# GENMAKE COMMAND USED TO GENERATE THIS MAKEFILE:
#   COMMAND:   -comp hands -type def -out ss
#
# LIMITATIONS:
#
#------------------------------------------------------------------------
#
# Interesting info taken from "GNU Make" by Stallman and McGrath.
#
#   These are the Automatic variables used in gnumake (p112):
#
#   $@ - file name of the target of the rule
#   $% - target member name if archive (eg $% = bar.o given foo.a(bar.o))
#   $< - name of the first dependency
#   $^ - names of all dependencies (with spaces)
#   $? - names of all dependencies newer than the target (with spaces)
#   $* - stem of target in implicit rule match (eg $* = x given a.x.b and a.%.b)
#
#   Some useful variables with built-in values (p107-108, unuseful excluded)
#
#   AR = ar           (archive maintaining program -- we will use this)
#   ARFLAGS = rv      (flags for ar -- we will use/suppliment this)
#   CC = cc           (C compiler -- we will use this)
#   FC = f77          (Fortran compiler -- we may use this)
#   CPP = $(CC) -E    (C preprocessor -- we may use this)
#   CXX = g++         (C++ compiler -- we define CC instead)
#   CO = co           (Extracting files from RCS -- we will use this)
#   RM = rm -f        (Command to remove a file -- we will use this I guess)
################################################################################
################################################################################
# VARIABLES SPECIFIC TO WHAT YOU ARE DOING 
#
# Things in the section below are specific to your COMP.  SWAWT will have
# absolutely no idea that these things exist.  It knows about everyting above.
# If you define variables here that you want SWAWT to know about you must embed
# them in one of the above variables.  You may need very specific make
# variables, and you may need specific variables that you need to let SWAWT know
# about.
#
# Example of how to "let SWAWT know" about your variable:
#
# Say you have a #define XYZ in all your c code.  Say you want to have the
# compiler define XYZ.  Well, to do that, you need to say this:
#
#   cc -c ... -DXYZ ...
#
# on the compile command line.  You can do this in this makefile like this:
#
# MY_COMP_DEFS = -DXYZ
#
# Then, in the section above, you would say:
#
# COMP_DFLAGS = $(MY_COMP_DEFS)
#
# And SWAWT would then know to put -DXYZ on every compiler command line in every
# makefile in your component.  Of course, you could just put -DXYZ directly
# into COMP_DFLAGS but that example would be too easy.
#
###########################  SPECIFIC VARIABLES  ###############################
###########################          ||          ###############################
###########################          ||          ###############################
###########################          \/          ###############################



########################             /\             ############################
########################             ||             ############################
########################             ||             ############################
########################  END OF SPECIFIC VARIABLES ############################
################################################################################



################################################################################
################################################################################
################################################################################
# VARIABLES THAT APPEND EXISTING VARIABLES
#
# These variables do not override anything, but the Make templates will use
# them in various ways if you fill them in.
#
# The default make rule is 'all' so if you have some special rules that you
# want to include in the all target, put them here in COMP_ALL
#
# Another common rule is 'clean'  so if you have some special clean rules
# that you want to include in the clean target, put them here in COMP_CLEAN
#
# There are also specific compiler and linker options you may want to append to
# the options already provided by the make commands.  This will only be
# necessary if you # have a special purpose :)
#
# REMEMBER:  filling these in will NOT override template values, they will
# append template values
#
#
###########################  APPENDING VARIABLES   #############################
###########################          ||            #############################
###########################          ||            #############################
###########################          \/            #############################


COMP_LIBS    =
COMP_DFLAGS  =
COMP_CFLAGS  =
COMP_IFLAGS  =
COMP_LFLAGS  =
COMP_LDFLAGS =

########################             /\             ############################
########################             ||             ############################
########################             ||             ############################
######################## END OF APPENDING VARIABLES ############################
################################################################################



################################################################################
################################################################################
################################################################################
# VARIABLES THAT CAN BE OVERRIDDEN
#
# Things that can be overridden without causing harm to the way make works
# They're commented out for two reasons.
#      1.  because you probably won't want to override them 99% of the time
#      2.  they are just examples, there are other things that can be overridden
#      3.  they may become obsolete with new releases of SWAWT.
#
#  Check:  http://playground.arm.gov/ds/seem for current Makefile documentation
#
# REMEMBER:  filling these in will override existing template values.  For
# example, C_COMPILER is set to cc.  You could change that here to gcc if you
# wanted to.
#
# WARNING: the := vs = stuff is important so be careful with those!
#
# Important ones below:
#   DEFAULT_TARGET      -- what will get built if you say make with no arguments
#   RELEASE_TARGET      -- what will get build during 'makerelease'
#   SWAWT_OPTIMIZE_TAG  -- optimize tag on compiler (-g by default)
#   INSTALL_PERMISSIONS -- permissions for 'ascii' files moved to bin and lib
#
#   Both of these default to:  'all' unless you override them here.
#
########################### OVERRIDEABLE VARIABLES #############################
###########################          ||            #############################
###########################          ||            #############################
###########################          \/            #############################



#DEFAULT_TARGET      :=
#RELEASE_TARGET      :=
#C_SRCS              :=
#C_COMPILER          :=
#INSTALL_PERMISSIONS :=
#SWAWT_OPTIMIZE_TAG  :=


#######################              /\               ##########################
#######################              ||               ##########################
#######################              ||               ##########################
####################### END OF OVERRIDEABLE VARIABLES ##########################
################################################################################





################################################################################
################################################################################
################################################################################
# EXTERNAL PACKAGE VARIABLES THAT CAN BE EXTENDED
#
# REMEMBER:  filling these in will append existing external package values.  Do
#  not remove the '+' sign in front of the '=' sign or you will screw things up.
# 
############################# EXTERNAL VARIABLES ###############################
#############################         ||         ###############################
#############################         ||         ###############################
#############################         \/         ###############################


EXTERNAL_ALL     +=
EXTERNAL_CLEAN   +=
EXTERNAL_LIBS    +=
EXTERNAL_DFLAGS  +=
EXTERNAL_CFLAGS  +=
EXTERNAL_IFLAGS  +=
EXTERNAL_LFLAGS  +=
EXTERNAL_LDFLAGS +=

SYS_LIBS         +=

#########################             /\            ############################
#########################             ||            ############################
#########################             ||            ############################
######################### END OF EXTERNAL VARIABLES ############################
################################################################################
